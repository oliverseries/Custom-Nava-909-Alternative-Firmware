
/tmp/arduino-sketch-90F3438439B624E110E0B1A14D8E084F/Nava_v1_028beta.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__ctors_end>
       4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
       8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
       c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      10:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      1c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      24:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_9>
      28:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      2c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__vector_13>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 2b 4b 	jmp	0x9656	; 0x9656 <__vector_18>
      4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      68:	0c 94 87 44 	jmp	0x890e	; 0x890e <__vector_26>
      6c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      70:	0c 94 91 48 	jmp	0x9122	; 0x9122 <__vector_28>
      74:	0c 94 c7 48 	jmp	0x918e	; 0x918e <__vector_29>
      78:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      7c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      80:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__vector_32>
      84:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      88:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	1e 01       	movw	r2, r28
      8e:	1b 01       	movw	r2, r22
      90:	18 01       	movw	r2, r16
      92:	15 01       	movw	r2, r10
      94:	12 01       	movw	r2, r4
      96:	0f 01       	movw	r0, r30
      98:	0c 01       	movw	r0, r24
      9a:	09 01       	movw	r0, r18
      9c:	06 01       	movw	r0, r12
      9e:	03 01       	movw	r0, r6
      a0:	00 01       	movw	r0, r0
      a2:	fd 00       	.word	0x00fd	; ????

000000a4 <nameOct>:
      a4:	36 01 33 01 30 01 2d 01 2a 01 27 01 24 01 21 01     6.3.0.-.*.'.$.!.

000000b4 <selectInstString>:
      b4:	75 01 71 01 6d 01 69 01 65 01 61 01 5d 01 59 01     u.q.m.i.e.a.].Y.
      c4:	55 01 51 01 4d 01 49 01 45 01 41 01 3d 01 39 01     U.Q.M.I.E.A.=.9.

000000d4 <nameMute>:
      d4:	e5 00 e2 00                                         ....

000000d8 <namePtrnChange>:
      d8:	e9 00 ed 00                                         ....

000000dc <nameSync>:
      dc:	f9 00 f5 00 f1 00                                   ......

000000e2 <txt_MUTE1>:
      e2:	48 48 00                                            HH.

000000e5 <txt_MUTE0>:
      e5:	43 2f 4f 00                                         C/O.

000000e9 <txt_PTRNFREECHANGE>:
      e9:	46 52 45 00                                         FRE.

000000ed <txt_PTRNSYNCCHANGE>:
      ed:	53 59 4e 00                                         SYN.

000000f1 <txt_SYNC2>:
      f1:	45 58 50 00                                         EXP.

000000f5 <txt_SYNC1>:
      f5:	53 4c 56 00                                         SLV.

000000f9 <txt_SYNC0>:
      f9:	4d 53 54 00                                         MST.

000000fd <txt_NOTE11>:
      fd:	20 42 00                                             B.

00000100 <txt_NOTE10>:
     100:	41 23 00                                            A#.

00000103 <txt_NOTE9>:
     103:	20 41 00                                             A.

00000106 <txt_NOTE8>:
     106:	47 23 00                                            G#.

00000109 <txt_NOTE7>:
     109:	20 47 00                                             G.

0000010c <txt_NOTE6>:
     10c:	46 23 00                                            F#.

0000010f <txt_NOTE5>:
     10f:	20 46 00                                             F.

00000112 <txt_NOTE4>:
     112:	20 45 00                                             E.

00000115 <txt_NOTE3>:
     115:	44 23 00                                            D#.

00000118 <txt_NOTE2>:
     118:	20 44 00                                             D.

0000011b <txt_NOTE1>:
     11b:	43 23 00                                            C#.

0000011e <txt_NOTE0>:
     11e:	20 43 00                                             C.

00000121 <txt_OCT7>:
     121:	2b 34 00                                            +4.

00000124 <txt_OCT6>:
     124:	2b 33 00                                            +3.

00000127 <txt_OCT5>:
     127:	2b 32 00                                            +2.

0000012a <txt_OCT4>:
     12a:	2b 31 00                                            +1.

0000012d <txt_OCT3>:
     12d:	2b 30 00                                            +0.

00000130 <txt_OCT2>:
     130:	2d 31 00                                            -1.

00000133 <txt_OCT1>:
     133:	2d 32 00                                            -2.

00000136 <txt_OCT0>:
     136:	2d 33 00                                            -3.

00000139 <txt_INST15>:
     139:	20 4f 48 00                                          OH.

0000013d <txt_INST14>:
     13d:	20 43 48 00                                          CH.

00000141 <txt_INST13>:
     141:	45 58 54 00                                         EXT.

00000145 <txt_INST12>:
     145:	41 43 43 00                                         ACC.

00000149 <txt_INST11>:
     149:	20 4d 54 00                                          MT.

0000014d <txt_INST10>:
     14d:	20 4c 54 00                                          LT.

00000151 <txt_INST9>:
     151:	20 53 44 00                                          SD.

00000155 <txt_INST8>:
     155:	20 42 44 00                                          BD.

00000159 <txt_INST7>:
     159:	43 52 48 00                                         CRH.

0000015d <txt_INST6>:
     15d:	52 49 44 00                                         RID.

00000161 <txt_INST5>:
     161:	20 20 20 00                                            .

00000165 <txt_INST4>:
     165:	48 43 4c 00                                         HCL.

00000169 <txt_INST3>:
     169:	52 49 4d 00                                         RIM.

0000016d <txt_INST2>:
     16d:	20 48 54 00                                          HT.

00000171 <txt_INST1>:
     171:	20 20 20 00                                            .

00000175 <txt_INST0>:
     175:	54 52 47 00                                         TRG.

00000179 <digital_pin_to_timer_PGM>:
     179:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

00000199 <digital_pin_to_bit_mask_PGM>:
     199:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     1a9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000001b9 <digital_pin_to_port_PGM>:
     1b9:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     1c9:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000001d9 <port_to_output_PGM>:
     1d9:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000001e3 <port_to_mode_PGM>:
     1e3:	00 00 21 00 24 00 27 00 2a 00 00                    ..!.$.'.*..

000001ee <__ctors_start>:
__ctors_start():
     1ee:	e1 1d       	adc	r30, r1
     1f0:	46 3f       	cpi	r20, 0xF6	; 246
     1f2:	98 43       	sbci	r25, 0x38	; 56
     1f4:	fb 48       	sbci	r31, 0x8B	; 139

000001f6 <__ctors_end>:
__dtors_end():
     1f6:	11 24       	eor	r1, r1
     1f8:	1f be       	out	0x3f, r1	; 63
     1fa:	cf ef       	ldi	r28, 0xFF	; 255
     1fc:	d0 e4       	ldi	r29, 0x40	; 64
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	cd bf       	out	0x3d, r28	; 61

00000202 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     202:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     204:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     206:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     208:	ea ee       	ldi	r30, 0xEA	; 234
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     20a:	f0 ea       	ldi	r31, 0xA0	; 160
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     20c:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     20e:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     212:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     214:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     216:	a4 3f       	cpi	r26, 0xF4	; 244
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     218:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0x10>

0000021c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     21c:	24 e2       	ldi	r18, 0x24	; 36
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     21e:	a4 ef       	ldi	r26, 0xF4	; 244
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     220:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     226:	a4 36       	cpi	r26, 0x64	; 100
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     228:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     22c:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     22e:	cb ef       	ldi	r28, 0xFB	; 251
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     230:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     232:	04 c0       	rjmp	.+8      	; 0x23c <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     234:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     236:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     238:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     23c:	c7 3f       	cpi	r28, 0xF7	; 247
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     23e:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     240:	c9 f7       	brne	.-14     	; 0x234 <__do_global_ctors+0x8>
     242:	0e 94 1c 4b 	call	0x9638	; 0x9638 <main>
     246:	0c 94 73 50 	jmp	0xa0e6	; 0xa0e6 <_exit>

0000024a <__bad_interrupt>:
__vector_22():
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <HandleStart()>:
_Z11HandleStartv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:86 (discriminator 2)
  //cli();
  for ( byte x = 0; x < NBR_MUX; x++)
  {
    delayMicroseconds(30);//Solve HT velocity response issue
    bitWrite(MUX_INH_PORT, MUX_INH1_BIT, x);//x);
    bitWrite(MUX_INH_PORT, MUX_INH2_BIT, !x);  
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <midiStart>
     254:	08 95       	ret

00000256 <HandleStop()>:
_Z10HandleStopv():
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <midiStop>
     25c:	08 95       	ret

0000025e <HandleContinue()>:
_Z14HandleContinuev():
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <midiContinue>
     264:	08 95       	ret

00000266 <Metronome(bool) [clone .part.0]>:
_Z9Metronomeb():
     266:	81 e1       	ldi	r24, 0x11	; 17
     268:	91 e1       	ldi	r25, 0x11	; 17
     26a:	90 93 2c 1e 	sts	0x1E2C, r25	; 0x801e2c <metronome+0x1>
     26e:	80 93 2b 1e 	sts	0x1E2B, r24	; 0x801e2b <metronome>
     272:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
     276:	29 ec       	ldi	r18, 0xC9	; 201
     278:	35 e0       	ldi	r19, 0x05	; 5
     27a:	42 9f       	mul	r20, r18
     27c:	c0 01       	movw	r24, r0
     27e:	43 9f       	mul	r20, r19
     280:	90 0d       	add	r25, r0
     282:	11 24       	eor	r1, r1
     284:	88 56       	subi	r24, 0x68	; 104
     286:	9d 4e       	sbci	r25, 0xED	; 237
     288:	fc 01       	movw	r30, r24
     28a:	eb 58       	subi	r30, 0x8B	; 139
     28c:	fb 4f       	sbci	r31, 0xFB	; 251
     28e:	2f e7       	ldi	r18, 0x7F	; 127
     290:	20 83       	st	Z, r18
     292:	34 96       	adiw	r30, 0x04	; 4
     294:	2e e1       	ldi	r18, 0x1E	; 30
     296:	20 83       	st	Z, r18
     298:	34 96       	adiw	r30, 0x04	; 4
     29a:	20 83       	st	Z, r18
     29c:	8f 57       	subi	r24, 0x7F	; 127
     29e:	9b 4f       	sbci	r25, 0xFB	; 251
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 83       	st	Z, r18
     2a4:	08 95       	ret

000002a6 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
     2a6:	20 91 4f 22 	lds	r18, 0x224F	; 0x80224f <SPIClass::interruptMode>
     2aa:	22 23       	and	r18, r18
     2ac:	59 f0       	breq	.+22     	; 0x2c4 <SPIClass::beginTransaction(SPISettings)+0x1e>
     2ae:	21 30       	cpi	r18, 0x01	; 1
     2b0:	61 f4       	brne	.+24     	; 0x2ca <SPIClass::beginTransaction(SPISettings)+0x24>
     2b2:	2d b3       	in	r18, 0x1d	; 29
     2b4:	20 93 4d 22 	sts	0x224D, r18	; 0x80224d <SPIClass::interruptSave>
     2b8:	3d b3       	in	r19, 0x1d	; 29
     2ba:	20 91 4e 22 	lds	r18, 0x224E	; 0x80224e <SPIClass::interruptMask>
     2be:	20 95       	com	r18
     2c0:	23 23       	and	r18, r19
     2c2:	2d bb       	out	0x1d, r18	; 29
     2c4:	8c bd       	out	0x2c, r24	; 44
     2c6:	9d bd       	out	0x2d, r25	; 45
     2c8:	08 95       	ret
     2ca:	2f b7       	in	r18, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	20 93 4d 22 	sts	0x224D, r18	; 0x80224d <SPIClass::interruptSave>
     2d2:	f8 cf       	rjmp	.-16     	; 0x2c4 <SPIClass::beginTransaction(SPISettings)+0x1e>

000002d4 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
     2d4:	8e bd       	out	0x2e, r24	; 46
     2d6:	00 00       	nop
     2d8:	0d b4       	in	r0, 0x2d	; 45
     2da:	07 fe       	sbrs	r0, 7
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <SPIClass::transfer(unsigned char)+0x4>
     2de:	8e b5       	in	r24, 0x2e	; 46
     2e0:	08 95       	ret

000002e2 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
     2e2:	90 91 4f 22 	lds	r25, 0x224F	; 0x80224f <SPIClass::interruptMode>
     2e6:	99 23       	and	r25, r25
     2e8:	39 f0       	breq	.+14     	; 0x2f8 <SPIClass::endTransaction()+0x16>
     2ea:	80 91 4d 22 	lds	r24, 0x224D	; 0x80224d <SPIClass::interruptSave>
     2ee:	91 30       	cpi	r25, 0x01	; 1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <SPIClass::endTransaction()+0x14>
     2f2:	8d bb       	out	0x1d, r24	; 29
     2f4:	08 95       	ret
     2f6:	8f bf       	out	0x3f, r24	; 63
     2f8:	08 95       	ret

000002fa <ButtonGet(Button*, unsigned int)>:
_Z9ButtonGetP6Buttonj():
     2fa:	fc 01       	movw	r30, r24
     2fc:	14 82       	std	Z+4, r1	; 0x04
     2fe:	13 82       	std	Z+3, r1	; 0x03
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	61 15       	cp	r22, r1
     304:	71 05       	cpc	r23, r1
     306:	09 f4       	brne	.+2      	; 0x30a <ButtonGet(Button*, unsigned int)+0x10>
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 83       	st	Z, r24
     30c:	91 81       	ldd	r25, Z+1	; 0x01
     30e:	89 17       	cp	r24, r25
     310:	41 f0       	breq	.+16     	; 0x322 <ButtonGet(Button*, unsigned int)+0x28>
     312:	92 81       	ldd	r25, Z+2	; 0x02
     314:	91 11       	cpse	r25, r1
     316:	07 c0       	rjmp	.+14     	; 0x326 <ButtonGet(Button*, unsigned int)+0x2c>
     318:	67 2b       	or	r22, r23
     31a:	11 f0       	breq	.+4      	; 0x320 <ButtonGet(Button*, unsigned int)+0x26>
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	93 83       	std	Z+3, r25	; 0x03
     320:	82 83       	std	Z+2, r24	; 0x02
     322:	81 83       	std	Z+1, r24	; 0x01
     324:	08 95       	ret
     326:	67 2b       	or	r22, r23
     328:	d9 f7       	brne	.-10     	; 0x320 <ButtonGet(Button*, unsigned int)+0x26>
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	94 83       	std	Z+4, r25	; 0x04
     32e:	f8 cf       	rjmp	.-16     	; 0x320 <ButtonGet(Button*, unsigned int)+0x26>

00000330 <StepButtonGet(unsigned char)>:
_Z13StepButtonGeth():
     330:	8f 92       	push	r8
     332:	9f 92       	push	r9
     334:	af 92       	push	r10
     336:	bf 92       	push	r11
     338:	cf 92       	push	r12
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <dinSr>
     348:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <dinSr+0x1>
     34c:	88 23       	and	r24, r24
     34e:	61 f0       	breq	.+24     	; 0x368 <StepButtonGet(unsigned char)+0x38>
     350:	cb 01       	movw	r24, r22
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	bf 90       	pop	r11
     360:	af 90       	pop	r10
     362:	9f 90       	pop	r9
     364:	8f 90       	pop	r8
     366:	08 95       	ret
     368:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <StepButtonGet(unsigned char)::value>
     36c:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <StepButtonGet(unsigned char)::value+0x1>
     370:	e8 e5       	ldi	r30, 0x58	; 88
     372:	ff e1       	ldi	r31, 0x1F	; 31
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	81 2c       	mov	r8, r1
     37c:	91 2c       	mov	r9, r1
     37e:	54 01       	movw	r10, r8
     380:	83 94       	inc	r8
     382:	13 82       	std	Z+3, r1	; 0x03
     384:	eb 01       	movw	r28, r22
     386:	04 2e       	mov	r0, r20
     388:	02 c0       	rjmp	.+4      	; 0x38e <StepButtonGet(unsigned char)+0x5e>
     38a:	d6 95       	lsr	r29
     38c:	c7 95       	ror	r28
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <StepButtonGet(unsigned char)+0x5a>
     392:	8c 2f       	mov	r24, r28
     394:	81 70       	andi	r24, 0x01	; 1
     396:	80 83       	st	Z, r24
     398:	91 81       	ldd	r25, Z+1	; 0x01
     39a:	89 17       	cp	r24, r25
     39c:	69 f0       	breq	.+26     	; 0x3b8 <StepButtonGet(unsigned char)+0x88>
     39e:	92 81       	ldd	r25, Z+2	; 0x02
     3a0:	91 11       	cpse	r25, r1
     3a2:	0a c0       	rjmp	.+20     	; 0x3b8 <StepButtonGet(unsigned char)+0x88>
     3a4:	c0 ff       	sbrs	r28, 0
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <StepButtonGet(unsigned char)+0x88>
     3a8:	b3 83       	std	Z+3, r27	; 0x03
     3aa:	96 81       	ldd	r25, Z+6	; 0x06
     3ac:	9f 5f       	subi	r25, 0xFF	; 255
     3ae:	96 83       	std	Z+6, r25	; 0x06
     3b0:	91 30       	cpi	r25, 0x01	; 1
     3b2:	79 f0       	breq	.+30     	; 0x3d2 <StepButtonGet(unsigned char)+0xa2>
     3b4:	92 30       	cpi	r25, 0x02	; 2
     3b6:	d1 f0       	breq	.+52     	; 0x3ec <StepButtonGet(unsigned char)+0xbc>
     3b8:	81 83       	std	Z+1, r24	; 0x01
     3ba:	4f 5f       	subi	r20, 0xFF	; 255
     3bc:	5f 4f       	sbci	r21, 0xFF	; 255
     3be:	3b 96       	adiw	r30, 0x0b	; 11
     3c0:	40 31       	cpi	r20, 0x10	; 16
     3c2:	51 05       	cpc	r21, r1
     3c4:	f1 f6       	brne	.-68     	; 0x382 <StepButtonGet(unsigned char)+0x52>
     3c6:	30 93 2d 04 	sts	0x042D, r19	; 0x80042d <StepButtonGet(unsigned char)::value+0x1>
     3ca:	20 93 2c 04 	sts	0x042C, r18	; 0x80042c <StepButtonGet(unsigned char)::value>
     3ce:	b9 01       	movw	r22, r18
     3d0:	bf cf       	rjmp	.-130    	; 0x350 <StepButtonGet(unsigned char)+0x20>
     3d2:	75 01       	movw	r14, r10
     3d4:	64 01       	movw	r12, r8
     3d6:	04 2e       	mov	r0, r20
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <StepButtonGet(unsigned char)+0xb2>
     3da:	cc 0c       	add	r12, r12
     3dc:	dd 1c       	adc	r13, r13
     3de:	ee 1c       	adc	r14, r14
     3e0:	ff 1c       	adc	r15, r15
     3e2:	0a 94       	dec	r0
     3e4:	d2 f7       	brpl	.-12     	; 0x3da <StepButtonGet(unsigned char)+0xaa>
     3e6:	2c 29       	or	r18, r12
     3e8:	3d 29       	or	r19, r13
     3ea:	e6 cf       	rjmp	.-52     	; 0x3b8 <StepButtonGet(unsigned char)+0x88>
     3ec:	16 82       	std	Z+6, r1	; 0x06
     3ee:	75 01       	movw	r14, r10
     3f0:	64 01       	movw	r12, r8
     3f2:	04 2e       	mov	r0, r20
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <StepButtonGet(unsigned char)+0xce>
     3f6:	cc 0c       	add	r12, r12
     3f8:	dd 1c       	adc	r13, r13
     3fa:	ee 1c       	adc	r14, r14
     3fc:	ff 1c       	adc	r15, r15
     3fe:	0a 94       	dec	r0
     400:	d2 f7       	brpl	.-12     	; 0x3f6 <StepButtonGet(unsigned char)+0xc6>
     402:	c0 94       	com	r12
     404:	d0 94       	com	r13
     406:	2c 21       	and	r18, r12
     408:	3d 21       	and	r19, r13
     40a:	d6 cf       	rjmp	.-84     	; 0x3b8 <StepButtonGet(unsigned char)+0x88>

0000040c <InstValueGet(unsigned int)>:
_Z12InstValueGetj():
     40c:	2f 92       	push	r2
     40e:	3f 92       	push	r3
     410:	4f 92       	push	r4
     412:	5f 92       	push	r5
     414:	6f 92       	push	r6
     416:	7f 92       	push	r7
     418:	8f 92       	push	r8
     41a:	9f 92       	push	r9
     41c:	af 92       	push	r10
     41e:	bf 92       	push	r11
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	00 d0       	rcall	.+0      	; 0x432 <InstValueGet(unsigned int)+0x26>
     432:	00 d0       	rcall	.+0      	; 0x434 <InstValueGet(unsigned int)+0x28>
     434:	1f 92       	push	r1
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	20 90 16 20 	lds	r2, 0x2016	; 0x802016 <dinSr>
     43e:	30 90 17 20 	lds	r3, 0x2017	; 0x802017 <dinSr+0x1>
     442:	70 90 cd 0c 	lds	r7, 0x0CCD	; 0x800ccd <patternWasEdited>
     446:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <curInst>
     44a:	0a ef       	ldi	r16, 0xFA	; 250
     44c:	06 0f       	add	r16, r22
     44e:	0b 83       	std	Y+3, r16	; 0x03
     450:	14 ef       	ldi	r17, 0xF4	; 244
     452:	16 0f       	add	r17, r22
     454:	1c 83       	std	Y+4, r17	; 0x04
     456:	20 91 36 1e 	lds	r18, 0x1E36	; 0x801e36 <curFlam>
     45a:	2a 83       	std	Y+2, r18	; 0x02
     45c:	a6 2f       	mov	r26, r22
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	e8 e5       	ldi	r30, 0x58	; 88
     462:	ff e1       	ldi	r31, 0x1F	; 31
     464:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
     468:	29 ec       	ldi	r18, 0xC9	; 201
     46a:	35 e0       	ldi	r19, 0x05	; 5
     46c:	72 9f       	mul	r23, r18
     46e:	a0 01       	movw	r20, r0
     470:	73 9f       	mul	r23, r19
     472:	50 0d       	add	r21, r0
     474:	11 24       	eor	r1, r1
     476:	9d 01       	movw	r18, r26
     478:	74 e0       	ldi	r23, 0x04	; 4
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	7a 95       	dec	r23
     480:	e1 f7       	brne	.-8      	; 0x47a <InstValueGet(unsigned int)+0x6e>
     482:	42 0f       	add	r20, r18
     484:	53 1f       	adc	r21, r19
     486:	48 56       	subi	r20, 0x68	; 104
     488:	5d 4e       	sbci	r21, 0xED	; 237
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	71 e0       	ldi	r23, 0x01	; 1
     490:	c1 2c       	mov	r12, r1
     492:	d1 2c       	mov	r13, r1
     494:	76 01       	movw	r14, r12
     496:	c3 94       	inc	r12
     498:	8d 01       	movw	r16, r26
     49a:	01 56       	subi	r16, 0x61	; 97
     49c:	1e 4f       	sbci	r17, 0xFE	; 254
     49e:	48 01       	movw	r8, r16
     4a0:	8d 01       	movw	r16, r26
     4a2:	01 57       	subi	r16, 0x71	; 113
     4a4:	1e 4f       	sbci	r17, 0xFE	; 254
     4a6:	58 01       	movw	r10, r16
     4a8:	02 2f       	mov	r16, r18
     4aa:	13 82       	std	Z+3, r1	; 0x03
     4ac:	d1 01       	movw	r26, r2
     4ae:	02 2e       	mov	r0, r18
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <InstValueGet(unsigned int)+0xaa>
     4b2:	b6 95       	lsr	r27
     4b4:	a7 95       	ror	r26
     4b6:	0a 94       	dec	r0
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <InstValueGet(unsigned int)+0xa6>
     4ba:	1a 2f       	mov	r17, r26
     4bc:	11 70       	andi	r17, 0x01	; 1
     4be:	19 83       	std	Y+1, r17	; 0x01
     4c0:	10 83       	st	Z, r17
     4c2:	61 80       	ldd	r6, Z+1	; 0x01
     4c4:	16 15       	cp	r17, r6
     4c6:	39 f1       	breq	.+78     	; 0x516 <InstValueGet(unsigned int)+0x10a>
     4c8:	62 80       	ldd	r6, Z+2	; 0x02
     4ca:	61 10       	cpse	r6, r1
     4cc:	22 c0       	rjmp	.+68     	; 0x512 <InstValueGet(unsigned int)+0x106>
     4ce:	a0 ff       	sbrs	r26, 0
     4d0:	20 c0       	rjmp	.+64     	; 0x512 <InstValueGet(unsigned int)+0x106>
     4d2:	73 83       	std	Z+3, r23	; 0x03
     4d4:	dc 01       	movw	r26, r24
     4d6:	02 2e       	mov	r0, r18
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <InstValueGet(unsigned int)+0xd2>
     4da:	b6 95       	lsr	r27
     4dc:	a7 95       	ror	r26
     4de:	0a 94       	dec	r0
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <InstValueGet(unsigned int)+0xce>
     4e2:	a1 70       	andi	r26, 0x01	; 1
     4e4:	bb 27       	eor	r27, r27
     4e6:	6f 30       	cpi	r22, 0x0F	; 15
     4e8:	41 f0       	breq	.+16     	; 0x4fa <InstValueGet(unsigned int)+0xee>
     4ea:	1b 81       	ldd	r17, Y+3	; 0x03
     4ec:	12 30       	cpi	r17, 0x02	; 2
     4ee:	28 f0       	brcs	.+10     	; 0x4fa <InstValueGet(unsigned int)+0xee>
     4f0:	1c 81       	ldd	r17, Y+4	; 0x04
     4f2:	12 30       	cpi	r17, 0x02	; 2
     4f4:	10 f0       	brcs	.+4      	; 0x4fa <InstValueGet(unsigned int)+0xee>
     4f6:	61 11       	cpse	r22, r1
     4f8:	43 c0       	rjmp	.+134    	; 0x580 <InstValueGet(unsigned int)+0x174>
     4fa:	ab 2b       	or	r26, r27
     4fc:	61 f1       	breq	.+88     	; 0x556 <InstValueGet(unsigned int)+0x14a>
     4fe:	a2 e0       	ldi	r26, 0x02	; 2
     500:	a6 83       	std	Z+6, r26	; 0x06
     502:	a6 81       	ldd	r26, Z+6	; 0x06
     504:	a1 30       	cpi	r26, 0x01	; 1
     506:	49 f1       	breq	.+82     	; 0x55a <InstValueGet(unsigned int)+0x14e>
     508:	a2 30       	cpi	r26, 0x02	; 2
     50a:	09 f4       	brne	.+2      	; 0x50e <InstValueGet(unsigned int)+0x102>
     50c:	b4 c0       	rjmp	.+360    	; 0x676 <InstValueGet(unsigned int)+0x26a>
     50e:	77 24       	eor	r7, r7
     510:	73 94       	inc	r7
     512:	b9 81       	ldd	r27, Y+1	; 0x01
     514:	b1 83       	std	Z+1, r27	; 0x01
     516:	2f 5f       	subi	r18, 0xFF	; 255
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	3b 96       	adiw	r30, 0x0b	; 11
     51c:	20 31       	cpi	r18, 0x10	; 16
     51e:	31 05       	cpc	r19, r1
     520:	19 f6       	brne	.-122    	; 0x4a8 <InstValueGet(unsigned int)+0x9c>
     522:	70 92 cd 0c 	sts	0x0CCD, r7	; 0x800ccd <patternWasEdited>
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	bf 90       	pop	r11
     542:	af 90       	pop	r10
     544:	9f 90       	pop	r9
     546:	8f 90       	pop	r8
     548:	7f 90       	pop	r7
     54a:	6f 90       	pop	r6
     54c:	5f 90       	pop	r5
     54e:	4f 90       	pop	r4
     550:	3f 90       	pop	r3
     552:	2f 90       	pop	r2
     554:	08 95       	ret
     556:	76 83       	std	Z+6, r23	; 0x06
     558:	d4 cf       	rjmp	.-88     	; 0x502 <InstValueGet(unsigned int)+0xf6>
     55a:	26 01       	movw	r4, r12
     55c:	37 01       	movw	r6, r14
     55e:	04 c0       	rjmp	.+8      	; 0x568 <InstValueGet(unsigned int)+0x15c>
     560:	44 0c       	add	r4, r4
     562:	55 1c       	adc	r5, r5
     564:	66 1c       	adc	r6, r6
     566:	77 1c       	adc	r7, r7
     568:	0a 95       	dec	r16
     56a:	d2 f7       	brpl	.-12     	; 0x560 <InstValueGet(unsigned int)+0x154>
     56c:	84 29       	or	r24, r4
     56e:	95 29       	or	r25, r5
     570:	d9 01       	movw	r26, r18
     572:	ab 5b       	subi	r26, 0xBB	; 187
     574:	bb 4f       	sbci	r27, 0xFB	; 251
     576:	3d 01       	movw	r6, r26
     578:	64 0e       	add	r6, r20
     57a:	75 1e       	adc	r7, r21
     57c:	d4 01       	movw	r26, r8
     57e:	71 c0       	rjmp	.+226    	; 0x662 <InstValueGet(unsigned int)+0x256>
     580:	1a 81       	ldd	r17, Y+2	; 0x02
     582:	11 23       	and	r17, r17
     584:	09 f4       	brne	.+2      	; 0x588 <InstValueGet(unsigned int)+0x17c>
     586:	42 c0       	rjmp	.+132    	; 0x60c <InstValueGet(unsigned int)+0x200>
     588:	ab 2b       	or	r26, r27
     58a:	b1 f1       	breq	.+108    	; 0x5f8 <InstValueGet(unsigned int)+0x1ec>
     58c:	d9 01       	movw	r26, r18
     58e:	ab 5b       	subi	r26, 0xBB	; 187
     590:	bb 4f       	sbci	r27, 0xFB	; 251
     592:	a4 0f       	add	r26, r20
     594:	b5 1f       	adc	r27, r21
     596:	ac 91       	ld	r26, X
     598:	a7 ff       	sbrs	r26, 7
     59a:	2b c0       	rjmp	.+86     	; 0x5f2 <InstValueGet(unsigned int)+0x1e6>
     59c:	1a 2f       	mov	r17, r26
     59e:	1f 77       	andi	r17, 0x7F	; 127
     5a0:	d5 01       	movw	r26, r10
     5a2:	7c 90       	ld	r7, X
     5a4:	71 16       	cp	r7, r17
     5a6:	10 f5       	brcc	.+68     	; 0x5ec <InstValueGet(unsigned int)+0x1e0>
     5a8:	b3 e0       	ldi	r27, 0x03	; 3
     5aa:	b6 83       	std	Z+6, r27	; 0x06
     5ac:	a6 81       	ldd	r26, Z+6	; 0x06
     5ae:	a2 30       	cpi	r26, 0x02	; 2
     5b0:	29 f1       	breq	.+74     	; 0x5fc <InstValueGet(unsigned int)+0x1f0>
     5b2:	a3 30       	cpi	r26, 0x03	; 3
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <InstValueGet(unsigned int)+0x1ac>
     5b6:	5f c0       	rjmp	.+190    	; 0x676 <InstValueGet(unsigned int)+0x26a>
     5b8:	a1 30       	cpi	r26, 0x01	; 1
     5ba:	09 f0       	breq	.+2      	; 0x5be <InstValueGet(unsigned int)+0x1b2>
     5bc:	a8 cf       	rjmp	.-176    	; 0x50e <InstValueGet(unsigned int)+0x102>
     5be:	26 01       	movw	r4, r12
     5c0:	37 01       	movw	r6, r14
     5c2:	04 c0       	rjmp	.+8      	; 0x5cc <InstValueGet(unsigned int)+0x1c0>
     5c4:	44 0c       	add	r4, r4
     5c6:	55 1c       	adc	r5, r5
     5c8:	66 1c       	adc	r6, r6
     5ca:	77 1c       	adc	r7, r7
     5cc:	0a 95       	dec	r16
     5ce:	d2 f7       	brpl	.-12     	; 0x5c4 <InstValueGet(unsigned int)+0x1b8>
     5d0:	84 29       	or	r24, r4
     5d2:	95 29       	or	r25, r5
     5d4:	d9 01       	movw	r26, r18
     5d6:	ab 5b       	subi	r26, 0xBB	; 187
     5d8:	bb 4f       	sbci	r27, 0xFB	; 251
     5da:	3d 01       	movw	r6, r26
     5dc:	64 0e       	add	r6, r20
     5de:	75 1e       	adc	r7, r21
     5e0:	d5 01       	movw	r26, r10
     5e2:	0c 91       	ld	r16, X
     5e4:	00 58       	subi	r16, 0x80	; 128
     5e6:	d3 01       	movw	r26, r6
     5e8:	0c 93       	st	X, r16
     5ea:	91 cf       	rjmp	.-222    	; 0x50e <InstValueGet(unsigned int)+0x102>
     5ec:	12 e0       	ldi	r17, 0x02	; 2
     5ee:	16 83       	std	Z+6, r17	; 0x06
     5f0:	dd cf       	rjmp	.-70     	; 0x5ac <InstValueGet(unsigned int)+0x1a0>
     5f2:	a3 e0       	ldi	r26, 0x03	; 3
     5f4:	a6 83       	std	Z+6, r26	; 0x06
     5f6:	da cf       	rjmp	.-76     	; 0x5ac <InstValueGet(unsigned int)+0x1a0>
     5f8:	76 83       	std	Z+6, r23	; 0x06
     5fa:	d8 cf       	rjmp	.-80     	; 0x5ac <InstValueGet(unsigned int)+0x1a0>
     5fc:	d9 01       	movw	r26, r18
     5fe:	ab 5b       	subi	r26, 0xBB	; 187
     600:	bb 4f       	sbci	r27, 0xFB	; 251
     602:	3d 01       	movw	r6, r26
     604:	64 0e       	add	r6, r20
     606:	75 1e       	adc	r7, r21
     608:	d4 01       	movw	r26, r8
     60a:	eb cf       	rjmp	.-42     	; 0x5e2 <InstValueGet(unsigned int)+0x1d6>
     60c:	ab 2b       	or	r26, r27
     60e:	89 f1       	breq	.+98     	; 0x672 <InstValueGet(unsigned int)+0x266>
     610:	d9 01       	movw	r26, r18
     612:	ab 5b       	subi	r26, 0xBB	; 187
     614:	bb 4f       	sbci	r27, 0xFB	; 251
     616:	a4 0f       	add	r26, r20
     618:	b5 1f       	adc	r27, r21
     61a:	1c 91       	ld	r17, X
     61c:	17 fd       	sbrc	r17, 7
     61e:	26 c0       	rjmp	.+76     	; 0x66c <InstValueGet(unsigned int)+0x260>
     620:	d5 01       	movw	r26, r10
     622:	7c 90       	ld	r7, X
     624:	71 16       	cp	r7, r17
     626:	f8 f4       	brcc	.+62     	; 0x666 <InstValueGet(unsigned int)+0x25a>
     628:	b3 e0       	ldi	r27, 0x03	; 3
     62a:	b6 83       	std	Z+6, r27	; 0x06
     62c:	a6 81       	ldd	r26, Z+6	; 0x06
     62e:	a2 30       	cpi	r26, 0x02	; 2
     630:	09 f4       	brne	.+2      	; 0x634 <InstValueGet(unsigned int)+0x228>
     632:	9e cf       	rjmp	.-196    	; 0x570 <InstValueGet(unsigned int)+0x164>
     634:	a3 30       	cpi	r26, 0x03	; 3
     636:	f9 f0       	breq	.+62     	; 0x676 <InstValueGet(unsigned int)+0x26a>
     638:	a1 30       	cpi	r26, 0x01	; 1
     63a:	09 f0       	breq	.+2      	; 0x63e <InstValueGet(unsigned int)+0x232>
     63c:	68 cf       	rjmp	.-304    	; 0x50e <InstValueGet(unsigned int)+0x102>
     63e:	26 01       	movw	r4, r12
     640:	37 01       	movw	r6, r14
     642:	04 c0       	rjmp	.+8      	; 0x64c <InstValueGet(unsigned int)+0x240>
     644:	44 0c       	add	r4, r4
     646:	55 1c       	adc	r5, r5
     648:	66 1c       	adc	r6, r6
     64a:	77 1c       	adc	r7, r7
     64c:	0a 95       	dec	r16
     64e:	d2 f7       	brpl	.-12     	; 0x644 <InstValueGet(unsigned int)+0x238>
     650:	84 29       	or	r24, r4
     652:	95 29       	or	r25, r5
     654:	d9 01       	movw	r26, r18
     656:	ab 5b       	subi	r26, 0xBB	; 187
     658:	bb 4f       	sbci	r27, 0xFB	; 251
     65a:	3d 01       	movw	r6, r26
     65c:	64 0e       	add	r6, r20
     65e:	75 1e       	adc	r7, r21
     660:	d5 01       	movw	r26, r10
     662:	0c 91       	ld	r16, X
     664:	c0 cf       	rjmp	.-128    	; 0x5e6 <InstValueGet(unsigned int)+0x1da>
     666:	12 e0       	ldi	r17, 0x02	; 2
     668:	16 83       	std	Z+6, r17	; 0x06
     66a:	e0 cf       	rjmp	.-64     	; 0x62c <InstValueGet(unsigned int)+0x220>
     66c:	a3 e0       	ldi	r26, 0x03	; 3
     66e:	a6 83       	std	Z+6, r26	; 0x06
     670:	dd cf       	rjmp	.-70     	; 0x62c <InstValueGet(unsigned int)+0x220>
     672:	76 83       	std	Z+6, r23	; 0x06
     674:	db cf       	rjmp	.-74     	; 0x62c <InstValueGet(unsigned int)+0x220>
     676:	16 82       	std	Z+6, r1	; 0x06
     678:	26 01       	movw	r4, r12
     67a:	37 01       	movw	r6, r14
     67c:	04 c0       	rjmp	.+8      	; 0x686 <InstValueGet(unsigned int)+0x27a>
     67e:	44 0c       	add	r4, r4
     680:	55 1c       	adc	r5, r5
     682:	66 1c       	adc	r6, r6
     684:	77 1c       	adc	r7, r7
     686:	0a 95       	dec	r16
     688:	d2 f7       	brpl	.-12     	; 0x67e <InstValueGet(unsigned int)+0x272>
     68a:	40 94       	com	r4
     68c:	50 94       	com	r5
     68e:	84 21       	and	r24, r4
     690:	95 21       	and	r25, r5
     692:	3d cf       	rjmp	.-390    	; 0x50e <InstValueGet(unsigned int)+0x102>

00000694 <MuteButtonGet()>:
_Z13MuteButtonGetv():
     694:	6f 92       	push	r6
     696:	7f 92       	push	r7
     698:	8f 92       	push	r8
     69a:	9f 92       	push	r9
     69c:	af 92       	push	r10
     69e:	bf 92       	push	r11
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	60 91 75 1e 	lds	r22, 0x1E75	; 0x801e75 <muteButtons>
     6b4:	70 91 76 1e 	lds	r23, 0x1E76	; 0x801e76 <muteButtons+0x1>
     6b8:	70 93 74 1e 	sts	0x1E74, r23	; 0x801e74 <lastMuteButtons+0x1>
     6bc:	60 93 73 1e 	sts	0x1E73, r22	; 0x801e73 <lastMuteButtons>
     6c0:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <dinSr>
     6c4:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <dinSr+0x1>
     6c8:	f0 93 76 1e 	sts	0x1E76, r31	; 0x801e76 <muteButtons+0x1>
     6cc:	e0 93 75 1e 	sts	0x1E75, r30	; 0x801e75 <muteButtons>
     6d0:	6e 17       	cp	r22, r30
     6d2:	7f 07       	cpc	r23, r31
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <MuteButtonGet()+0x44>
     6d6:	68 c0       	rjmp	.+208    	; 0x7a8 <MuteButtonGet()+0x114>
     6d8:	40 91 a2 0c 	lds	r20, 0x0CA2	; 0x800ca2 <muteInst>
     6dc:	50 91 a3 0c 	lds	r21, 0x0CA3	; 0x800ca3 <muteInst+0x1>
     6e0:	20 91 4d 1e 	lds	r18, 0x1E4D	; 0x801e4d <muteLeds>
     6e4:	30 91 4e 1e 	lds	r19, 0x1E4E	; 0x801e4e <muteLeds+0x1>
     6e8:	80 90 4c 1e 	lds	r8, 0x1E4C	; 0x801e4c <seq+0xd>
     6ec:	a0 91 bb 01 	lds	r26, 0x01BB	; 0x8001bb <muteOut+0xc>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	8c 01       	movw	r16, r24
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <MuteButtonGet()+0x68>
     6f8:	00 0f       	add	r16, r16
     6fa:	11 1f       	adc	r17, r17
     6fc:	aa 95       	dec	r26
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <MuteButtonGet()+0x64>
     700:	e0 90 09 02 	lds	r14, 0x0209	; 0x800209 <muteLedsOrder+0x18>
     704:	f0 90 0a 02 	lds	r15, 0x020A	; 0x80020a <muteLedsOrder+0x19>
     708:	a0 91 bc 01 	lds	r26, 0x01BC	; 0x8001bc <muteOut+0xd>
     70c:	5c 01       	movw	r10, r24
     70e:	02 c0       	rjmp	.+4      	; 0x714 <MuteButtonGet()+0x80>
     710:	aa 0c       	add	r10, r10
     712:	bb 1c       	adc	r11, r11
     714:	aa 95       	dec	r26
     716:	e2 f7       	brpl	.-8      	; 0x710 <MuteButtonGet()+0x7c>
     718:	c0 91 0b 02 	lds	r28, 0x020B	; 0x80020b <muteLedsOrder+0x1a>
     71c:	d0 91 0c 02 	lds	r29, 0x020C	; 0x80020c <muteLedsOrder+0x1b>
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	cc 24       	eor	r12, r12
     726:	c3 94       	inc	r12
     728:	d1 2c       	mov	r13, r1
     72a:	df 01       	movw	r26, r30
     72c:	08 2e       	mov	r0, r24
     72e:	02 c0       	rjmp	.+4      	; 0x734 <MuteButtonGet()+0xa0>
     730:	b6 95       	lsr	r27
     732:	a7 95       	ror	r26
     734:	0a 94       	dec	r0
     736:	e2 f7       	brpl	.-8      	; 0x730 <MuteButtonGet()+0x9c>
     738:	a0 ff       	sbrs	r26, 0
     73a:	2a c0       	rjmp	.+84     	; 0x790 <MuteButtonGet()+0xfc>
     73c:	db 01       	movw	r26, r22
     73e:	08 2e       	mov	r0, r24
     740:	02 c0       	rjmp	.+4      	; 0x746 <MuteButtonGet()+0xb2>
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	0a 94       	dec	r0
     748:	e2 f7       	brpl	.-8      	; 0x742 <MuteButtonGet()+0xae>
     74a:	a0 fd       	sbrc	r26, 0
     74c:	21 c0       	rjmp	.+66     	; 0x790 <MuteButtonGet()+0xfc>
     74e:	dc 01       	movw	r26, r24
     750:	a1 55       	subi	r26, 0x51	; 81
     752:	be 4f       	sbci	r27, 0xFE	; 254
     754:	ac 91       	ld	r26, X
     756:	36 01       	movw	r6, r12
     758:	02 c0       	rjmp	.+4      	; 0x75e <MuteButtonGet()+0xca>
     75a:	66 0c       	add	r6, r6
     75c:	77 1c       	adc	r7, r7
     75e:	aa 95       	dec	r26
     760:	e2 f7       	brpl	.-8      	; 0x75a <MuteButtonGet()+0xc6>
     762:	d3 01       	movw	r26, r6
     764:	46 25       	eor	r20, r6
     766:	5b 27       	eor	r21, r27
     768:	dc 01       	movw	r26, r24
     76a:	aa 0f       	add	r26, r26
     76c:	bb 1f       	adc	r27, r27
     76e:	af 50       	subi	r26, 0x0F	; 15
     770:	be 4f       	sbci	r27, 0xFE	; 254
     772:	0d 90       	ld	r0, X+
     774:	bc 91       	ld	r27, X
     776:	a0 2d       	mov	r26, r0
     778:	2a 27       	eor	r18, r26
     77a:	3b 27       	eor	r19, r27
     77c:	88 20       	and	r8, r8
     77e:	41 f0       	breq	.+16     	; 0x790 <MuteButtonGet()+0xfc>
     780:	ac e0       	ldi	r26, 0x0C	; 12
     782:	7a 2e       	mov	r7, r26
     784:	87 11       	cpse	r24, r7
     786:	1f c0       	rjmp	.+62     	; 0x7c6 <MuteButtonGet()+0x132>
     788:	4a 25       	eor	r20, r10
     78a:	5b 25       	eor	r21, r11
     78c:	2c 27       	eor	r18, r28
     78e:	3d 27       	eor	r19, r29
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	80 31       	cpi	r24, 0x10	; 16
     794:	91 05       	cpc	r25, r1
     796:	49 f6       	brne	.-110    	; 0x72a <MuteButtonGet()+0x96>
     798:	50 93 a3 0c 	sts	0x0CA3, r21	; 0x800ca3 <muteInst+0x1>
     79c:	40 93 a2 0c 	sts	0x0CA2, r20	; 0x800ca2 <muteInst>
     7a0:	30 93 4e 1e 	sts	0x1E4E, r19	; 0x801e4e <muteLeds+0x1>
     7a4:	20 93 4d 1e 	sts	0x1E4D, r18	; 0x801e4d <muteLeds>
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	9f 90       	pop	r9
     7be:	8f 90       	pop	r8
     7c0:	7f 90       	pop	r7
     7c2:	6f 90       	pop	r6
     7c4:	08 95       	ret
     7c6:	ad e0       	ldi	r26, 0x0D	; 13
     7c8:	8a 13       	cpse	r24, r26
     7ca:	e2 cf       	rjmp	.-60     	; 0x790 <MuteButtonGet()+0xfc>
     7cc:	40 27       	eor	r20, r16
     7ce:	51 27       	eor	r21, r17
     7d0:	2e 25       	eor	r18, r14
     7d2:	3f 25       	eor	r19, r15
     7d4:	dd cf       	rjmp	.-70     	; 0x790 <MuteButtonGet()+0xfc>

000007d6 <GateButtonGet()>:
_Z13GateButtonGetv():
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	60 91 71 1e 	lds	r22, 0x1E71	; 0x801e71 <gateButtons>
     7e2:	70 91 72 1e 	lds	r23, 0x1E72	; 0x801e72 <gateButtons+0x1>
     7e6:	70 93 70 1e 	sts	0x1E70, r23	; 0x801e70 <lastGateButtons+0x1>
     7ea:	60 93 6f 1e 	sts	0x1E6F, r22	; 0x801e6f <lastGateButtons>
     7ee:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <dinSr>
     7f2:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <dinSr+0x1>
     7f6:	f0 93 72 1e 	sts	0x1E72, r31	; 0x801e72 <gateButtons+0x1>
     7fa:	e0 93 71 1e 	sts	0x1E71, r30	; 0x801e71 <gateButtons>
     7fe:	6e 17       	cp	r22, r30
     800:	7f 07       	cpc	r23, r31
     802:	09 f4       	brne	.+2      	; 0x806 <GateButtonGet()+0x30>
     804:	41 c0       	rjmp	.+130    	; 0x888 <GateButtonGet()+0xb2>
     806:	40 91 46 04 	lds	r20, 0x0446	; 0x800446 <gateInst>
     80a:	50 91 47 04 	lds	r21, 0x0447	; 0x800447 <gateInst+0x1>
     80e:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <gateLeds>
     812:	30 91 49 04 	lds	r19, 0x0449	; 0x800449 <gateLeds+0x1>
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	c1 e0       	ldi	r28, 0x01	; 1
     81c:	d0 e0       	ldi	r29, 0x00	; 0
     81e:	df 01       	movw	r26, r30
     820:	08 2e       	mov	r0, r24
     822:	02 c0       	rjmp	.+4      	; 0x828 <GateButtonGet()+0x52>
     824:	b6 95       	lsr	r27
     826:	a7 95       	ror	r26
     828:	0a 94       	dec	r0
     82a:	e2 f7       	brpl	.-8      	; 0x824 <GateButtonGet()+0x4e>
     82c:	a0 ff       	sbrs	r26, 0
     82e:	20 c0       	rjmp	.+64     	; 0x870 <GateButtonGet()+0x9a>
     830:	db 01       	movw	r26, r22
     832:	08 2e       	mov	r0, r24
     834:	02 c0       	rjmp	.+4      	; 0x83a <GateButtonGet()+0x64>
     836:	b6 95       	lsr	r27
     838:	a7 95       	ror	r26
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <GateButtonGet()+0x60>
     83e:	a0 fd       	sbrc	r26, 0
     840:	17 c0       	rjmp	.+46     	; 0x870 <GateButtonGet()+0x9a>
     842:	dc 01       	movw	r26, r24
     844:	a1 55       	subi	r26, 0x51	; 81
     846:	be 4f       	sbci	r27, 0xFE	; 254
     848:	ac 91       	ld	r26, X
     84a:	8e 01       	movw	r16, r28
     84c:	02 c0       	rjmp	.+4      	; 0x852 <GateButtonGet()+0x7c>
     84e:	00 0f       	add	r16, r16
     850:	11 1f       	adc	r17, r17
     852:	aa 95       	dec	r26
     854:	e2 f7       	brpl	.-8      	; 0x84e <GateButtonGet()+0x78>
     856:	d8 01       	movw	r26, r16
     858:	40 27       	eor	r20, r16
     85a:	5b 27       	eor	r21, r27
     85c:	dc 01       	movw	r26, r24
     85e:	aa 0f       	add	r26, r26
     860:	bb 1f       	adc	r27, r27
     862:	af 50       	subi	r26, 0x0F	; 15
     864:	be 4f       	sbci	r27, 0xFE	; 254
     866:	0d 90       	ld	r0, X+
     868:	bc 91       	ld	r27, X
     86a:	a0 2d       	mov	r26, r0
     86c:	2a 27       	eor	r18, r26
     86e:	3b 27       	eor	r19, r27
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	80 31       	cpi	r24, 0x10	; 16
     874:	91 05       	cpc	r25, r1
     876:	99 f6       	brne	.-90     	; 0x81e <GateButtonGet()+0x48>
     878:	50 93 47 04 	sts	0x0447, r21	; 0x800447 <gateInst+0x1>
     87c:	40 93 46 04 	sts	0x0446, r20	; 0x800446 <gateInst>
     880:	30 93 49 04 	sts	0x0449, r19	; 0x800449 <gateLeds+0x1>
     884:	20 93 48 04 	sts	0x0448, r18	; 0x800448 <gateLeds>
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <FirstBitOn()>:
_Z10FirstBitOnv():
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	0e 94 98 01 	call	0x330	; 0x330 <StepButtonGet(unsigned char)>
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	ac 01       	movw	r20, r24
     89e:	02 2e       	mov	r0, r18
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <FirstBitOn()+0x14>
     8a2:	56 95       	lsr	r21
     8a4:	47 95       	ror	r20
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <FirstBitOn()+0x10>
     8aa:	40 ff       	sbrs	r20, 0
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <FirstBitOn()+0x20>
     8ae:	82 2f       	mov	r24, r18
     8b0:	08 95       	ret
     8b2:	2f 5f       	subi	r18, 0xFF	; 255
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
     8b6:	20 31       	cpi	r18, 0x10	; 16
     8b8:	31 05       	cpc	r19, r1
     8ba:	81 f7       	brne	.-32     	; 0x89c <FirstBitOn()+0xa>
     8bc:	08 95       	ret

000008be <SecondBitOn()>:
_Z11SecondBitOnv():
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	0e 94 98 01 	call	0x330	; 0x330 <StepButtonGet(unsigned char)>
     8c4:	ac 01       	movw	r20, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	ba 01       	movw	r22, r20
     8ce:	02 2e       	mov	r0, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <SecondBitOn()+0x18>
     8d2:	76 95       	lsr	r23
     8d4:	67 95       	ror	r22
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <SecondBitOn()+0x14>
     8da:	60 ff       	sbrs	r22, 0
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <SecondBitOn()+0x2a>
     8de:	91 30       	cpi	r25, 0x01	; 1
     8e0:	11 f4       	brne	.+4      	; 0x8e6 <SecondBitOn()+0x28>
     8e2:	82 2f       	mov	r24, r18
     8e4:	08 95       	ret
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	2f 5f       	subi	r18, 0xFF	; 255
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	20 31       	cpi	r18, 0x10	; 16
     8ee:	31 05       	cpc	r19, r1
     8f0:	69 f7       	brne	.-38     	; 0x8cc <SecondBitOn()+0xe>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	08 95       	ret

000008f6 <InitButtonCounter()>:
_Z17InitButtonCounterv():
     8f6:	e8 e5       	ldi	r30, 0x58	; 88
     8f8:	ff e1       	ldi	r31, 0x1F	; 31
     8fa:	16 82       	std	Z+6, r1	; 0x06
     8fc:	3b 96       	adiw	r30, 0x0b	; 11
     8fe:	80 e2       	ldi	r24, 0x20	; 32
     900:	e8 30       	cpi	r30, 0x08	; 8
     902:	f8 07       	cpc	r31, r24
     904:	d1 f7       	brne	.-12     	; 0x8fa <InitButtonCounter()+0x4>
     906:	10 92 48 1f 	sts	0x1F48, r1	; 0x801f48 <stopBtn+0x6>
     90a:	10 92 32 1f 	sts	0x1F32, r1	; 0x801f32 <guideBtn+0x6>
     90e:	10 92 27 1f 	sts	0x1F27, r1	; 0x801f27 <scaleBtn+0x6>
     912:	10 92 3d 1f 	sts	0x1F3D, r1	; 0x801f3d <encBtn+0x6>
     916:	10 92 b9 1e 	sts	0x1EB9, r1	; 0x801eb9 <muteBtn+0x6>
     91a:	08 95       	ret

0000091c <Metronome(bool)>:
_Z9Metronomeb():
     91c:	81 11       	cpse	r24, r1
     91e:	0c 94 33 01 	jmp	0x266	; 0x266 <Metronome(bool) [clone .part.0]>
     922:	10 92 2c 1e 	sts	0x1E2C, r1	; 0x801e2c <metronome+0x1>
     926:	10 92 2b 1e 	sts	0x1E2B, r1	; 0x801e2b <metronome>
     92a:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
     92e:	29 ec       	ldi	r18, 0xC9	; 201
     930:	35 e0       	ldi	r19, 0x05	; 5
     932:	42 9f       	mul	r20, r18
     934:	c0 01       	movw	r24, r0
     936:	43 9f       	mul	r20, r19
     938:	90 0d       	add	r25, r0
     93a:	11 24       	eor	r1, r1
     93c:	88 56       	subi	r24, 0x68	; 104
     93e:	9d 4e       	sbci	r25, 0xED	; 237
     940:	fc 01       	movw	r30, r24
     942:	eb 58       	subi	r30, 0x8B	; 139
     944:	fb 4f       	sbci	r31, 0xFB	; 251
     946:	20 e5       	ldi	r18, 0x50	; 80
     948:	20 83       	st	Z, r18
     94a:	34 96       	adiw	r30, 0x04	; 4
     94c:	20 83       	st	Z, r18
     94e:	34 96       	adiw	r30, 0x04	; 4
     950:	20 83       	st	Z, r18
     952:	8f 57       	subi	r24, 0x7F	; 127
     954:	9b 4f       	sbci	r25, 0xFB	; 251
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
     95a:	08 95       	ret

0000095c <InitIO()>:
_Z6InitIOv():
     95c:	84 b1       	in	r24, 0x04	; 4
     95e:	88 6d       	ori	r24, 0xD8	; 216
     960:	84 b9       	out	0x04, r24	; 4
     962:	8a b1       	in	r24, 0x0a	; 10
     964:	80 6f       	ori	r24, 0xF0	; 240
     966:	8a b9       	out	0x0a, r24	; 10
     968:	81 b1       	in	r24, 0x01	; 1
     96a:	8c 6e       	ori	r24, 0xEC	; 236
     96c:	81 b9       	out	0x01, r24	; 1
     96e:	12 9a       	sbi	0x02, 2	; 2
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	88 e1       	ldi	r24, 0x18	; 24
     974:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	89 e1       	ldi	r24, 0x19	; 25
     97c:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	8a e1       	ldi	r24, 0x1A	; 26
     984:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	8b e1       	ldi	r24, 0x1B	; 27
     98c:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
     9a0:	0e 94 a1 42 	call	0x8542	; 0x8542 <SPIClass::begin()>
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	0e 94 b7 42 	call	0x856e	; 0x856e <SPIClass::usingInterrupt(unsigned char)>
     9aa:	80 e5       	ldi	r24, 0x50	; 80
     9ac:	92 e2       	ldi	r25, 0x22	; 34
     9ae:	0c 94 5e 43 	jmp	0x86bc	; 0x86bc <TwoWire::begin()>

000009b2 <ScanDin()>:
_Z7ScanDinv():
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
     9ba:	00 91 08 20 	lds	r16, 0x2008	; 0x802008 <debounceTimer>
     9be:	10 91 09 20 	lds	r17, 0x2009	; 0x802009 <debounceTimer+0x1>
     9c2:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <debounceTimer+0x2>
     9c6:	30 91 0b 20 	lds	r19, 0x200B	; 0x80200b <debounceTimer+0x3>
     9ca:	60 1b       	sub	r22, r16
     9cc:	71 0b       	sbc	r23, r17
     9ce:	82 0b       	sbc	r24, r18
     9d0:	93 0b       	sbc	r25, r19
     9d2:	66 30       	cpi	r22, 0x06	; 6
     9d4:	71 05       	cpc	r23, r1
     9d6:	81 05       	cpc	r24, r1
     9d8:	91 05       	cpc	r25, r1
     9da:	08 f4       	brcc	.+2      	; 0x9de <ScanDin()+0x2c>
     9dc:	4b c0       	rjmp	.+150    	; 0xa74 <ScanDin()+0xc2>
     9de:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
     9e2:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <debounceTimer>
     9e6:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <debounceTimer+0x1>
     9ea:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <debounceTimer+0x2>
     9ee:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <debounceTimer+0x3>
     9f2:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SPIset_f>
     9f6:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <SPIset_f+0x1>
     9fa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPIClass::beginTransaction(SPISettings)>
     9fe:	5c 9a       	sbi	0x0b, 4	; 11
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     a06:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <tempDin>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     a10:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <tempDin+0x2>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     a1a:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <tempDin+0x4>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     a24:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <tempDin+0x6>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     a2e:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <tempDin+0x8>
     a32:	5c 98       	cbi	0x0b, 4	; 11
     a34:	0e 94 71 01 	call	0x2e2	; 0x2e2 <SPIClass::endTransaction()>
     a38:	83 b1       	in	r24, 0x03	; 3
     a3a:	82 fb       	bst	r24, 2
     a3c:	88 27       	eor	r24, r24
     a3e:	80 f9       	bld	r24, 0
     a40:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <encSwValue>
     a44:	ec e0       	ldi	r30, 0x0C	; 12
     a46:	f0 e2       	ldi	r31, 0x20	; 32
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	90 81       	ld	r25, Z
     a4e:	41 81       	ldd	r20, Z+1	; 0x01
     a50:	94 13       	cpse	r25, r20
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <ScanDin()+0xaa>
     a54:	d9 01       	movw	r26, r18
     a56:	aa 5e       	subi	r26, 0xEA	; 234
     a58:	bf 4d       	sbci	r27, 0xDF	; 223
     a5a:	9c 93       	st	X, r25
     a5c:	2f 5f       	subi	r18, 0xFF	; 255
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	32 96       	adiw	r30, 0x02	; 2
     a62:	25 30       	cpi	r18, 0x05	; 5
     a64:	31 05       	cpc	r19, r1
     a66:	91 f7       	brne	.-28     	; 0xa4c <ScanDin()+0x9a>
     a68:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <encSwValue+0x1>
     a6c:	89 13       	cpse	r24, r25
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <ScanDin()+0xc2>
     a70:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <encSwState>
     a74:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SPIset_f>
     a78:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <SPIset_f+0x1>
     a7c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPIClass::beginTransaction(SPISettings)>
     a80:	5c 9a       	sbi	0x0b, 4	; 11
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     a88:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <tempDin+0x1>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     a92:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <tempDin+0x3>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     a9c:	80 93 11 20 	sts	0x2011, r24	; 0x802011 <tempDin+0x5>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     aa6:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <tempDin+0x7>
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     ab0:	80 93 15 20 	sts	0x2015, r24	; 0x802015 <tempDin+0x9>
     ab4:	5c 98       	cbi	0x0b, 4	; 11
     ab6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <SPIClass::endTransaction()>
     aba:	83 b1       	in	r24, 0x03	; 3
     abc:	82 fb       	bst	r24, 2
     abe:	88 27       	eor	r24, r24
     ac0:	80 f9       	bld	r24, 0
     ac2:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <encSwValue+0x1>
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	08 95       	ret

00000acc <ButtonGet()>:
_Z9ButtonGetv():
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <ScanDin()>
     ad8:	c0 91 18 20 	lds	r28, 0x2018	; 0x802018 <dinSr+0x2>
     adc:	d0 91 19 20 	lds	r29, 0x2019	; 0x802019 <dinSr+0x3>
     ae0:	10 91 1a 20 	lds	r17, 0x201A	; 0x80201a <dinSr+0x4>
     ae4:	c4 fb       	bst	r28, 4
     ae6:	88 27       	eor	r24, r24
     ae8:	80 f9       	bld	r24, 0
     aea:	80 93 7b 1e 	sts	0x1E7B, r24	; 0x801e7b <instBtn>
     aee:	c3 fb       	bst	r28, 3
     af0:	88 27       	eor	r24, r24
     af2:	80 f9       	bld	r24, 0
     af4:	80 93 7a 1e 	sts	0x1E7A, r24	; 0x801e7a <shiftBtn>
     af8:	6c 2f       	mov	r22, r28
     afa:	64 70       	andi	r22, 0x04	; 4
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	8c e7       	ldi	r24, 0x7C	; 124
     b00:	9e e1       	ldi	r25, 0x1E	; 30
     b02:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b06:	6d 2f       	mov	r22, r29
     b08:	68 70       	andi	r22, 0x08	; 8
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	87 e8       	ldi	r24, 0x87	; 135
     b0e:	9e e1       	ldi	r25, 0x1E	; 30
     b10:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b14:	6d 2f       	mov	r22, r29
     b16:	60 78       	andi	r22, 0x80	; 128
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	82 e9       	ldi	r24, 0x92	; 146
     b1c:	9e e1       	ldi	r25, 0x1E	; 30
     b1e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b22:	6d 2f       	mov	r22, r29
     b24:	60 74       	andi	r22, 0x40	; 64
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	86 e1       	ldi	r24, 0x16	; 22
     b2a:	9f e1       	ldi	r25, 0x1F	; 31
     b2c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b30:	6d 2f       	mov	r22, r29
     b32:	60 72       	andi	r22, 0x20	; 32
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	8b e0       	ldi	r24, 0x0B	; 11
     b38:	9f e1       	ldi	r25, 0x1F	; 31
     b3a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b3e:	6c 2f       	mov	r22, r28
     b40:	60 78       	andi	r22, 0x80	; 128
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	8d e4       	ldi	r24, 0x4D	; 77
     b46:	9f e1       	ldi	r25, 0x1F	; 31
     b48:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b4c:	6c 2f       	mov	r22, r28
     b4e:	61 70       	andi	r22, 0x01	; 1
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	82 e4       	ldi	r24, 0x42	; 66
     b54:	9f e1       	ldi	r25, 0x1F	; 31
     b56:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b5a:	6d 2f       	mov	r22, r29
     b5c:	60 71       	andi	r22, 0x10	; 16
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	8c e2       	ldi	r24, 0x2C	; 44
     b62:	9f e1       	ldi	r25, 0x1F	; 31
     b64:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b68:	6c 2f       	mov	r22, r28
     b6a:	62 70       	andi	r22, 0x02	; 2
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	81 e2       	ldi	r24, 0x21	; 33
     b70:	9f e1       	ldi	r25, 0x1F	; 31
     b72:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b76:	6c 2f       	mov	r22, r28
     b78:	60 74       	andi	r22, 0x40	; 64
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	84 ed       	ldi	r24, 0xD4	; 212
     b7e:	9e e1       	ldi	r25, 0x1E	; 30
     b80:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b84:	c0 72       	andi	r28, 0x20	; 32
     b86:	6c 2f       	mov	r22, r28
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	85 ef       	ldi	r24, 0xF5	; 245
     b8c:	9e e1       	ldi	r25, 0x1E	; 30
     b8e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     b92:	6d 2f       	mov	r22, r29
     b94:	64 70       	andi	r22, 0x04	; 4
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	89 ec       	ldi	r24, 0xC9	; 201
     b9a:	9e e1       	ldi	r25, 0x1E	; 30
     b9c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     ba0:	6d 2f       	mov	r22, r29
     ba2:	62 70       	andi	r22, 0x02	; 2
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	8e eb       	ldi	r24, 0xBE	; 190
     ba8:	9e e1       	ldi	r25, 0x1E	; 30
     baa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     bae:	61 2f       	mov	r22, r17
     bb0:	64 70       	andi	r22, 0x04	; 4
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	9f e1       	ldi	r25, 0x1F	; 31
     bb8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     bbc:	6d 2f       	mov	r22, r29
     bbe:	61 70       	andi	r22, 0x01	; 1
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	8f ed       	ldi	r24, 0xDF	; 223
     bc4:	9e e1       	ldi	r25, 0x1E	; 30
     bc6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     bca:	61 2f       	mov	r22, r17
     bcc:	62 70       	andi	r22, 0x02	; 2
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	83 eb       	ldi	r24, 0xB3	; 179
     bd2:	9e e1       	ldi	r25, 0x1E	; 30
     bd4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     bd8:	61 2f       	mov	r22, r17
     bda:	61 70       	andi	r22, 0x01	; 1
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	88 ea       	ldi	r24, 0xA8	; 168
     be0:	9e e1       	ldi	r25, 0x1E	; 30
     be2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     be6:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <encSwState>
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	87 e3       	ldi	r24, 0x37	; 55
     bee:	9f e1       	ldi	r25, 0x1F	; 31
     bf0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     bf4:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <dinSr>
     bf8:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <dinSr+0x1>
     bfc:	8d e9       	ldi	r24, 0x9D	; 157
     bfe:	9e e1       	ldi	r25, 0x1E	; 30
     c00:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     c04:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <enterBtn+0x4>
     c08:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <enterBtn+0x3>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	91 2f       	mov	r25, r17
     c10:	98 70       	andi	r25, 0x08	; 8
     c12:	13 ff       	sbrs	r17, 3
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	80 93 ea 1e 	sts	0x1EEA, r24	; 0x801eea <enterBtn>
     c1a:	20 91 eb 1e 	lds	r18, 0x1EEB	; 0x801eeb <enterBtn+0x1>
     c1e:	82 17       	cp	r24, r18
     c20:	11 f1       	breq	.+68     	; 0xc66 <ButtonGet()+0x19a>
     c22:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <enterBtn+0x2>
     c26:	81 11       	cpse	r24, r1
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <ButtonGet()+0x17c>
     c2a:	99 23       	and	r25, r25
     c2c:	69 f0       	breq	.+26     	; 0xc48 <ButtonGet()+0x17c>
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 ed 1e 	sts	0x1EED, r24	; 0x801eed <enterBtn+0x3>
     c34:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
     c38:	60 93 f1 1e 	sts	0x1EF1, r22	; 0x801ef1 <enterBtn+0x7>
     c3c:	70 93 f2 1e 	sts	0x1EF2, r23	; 0x801ef2 <enterBtn+0x8>
     c40:	80 93 f3 1e 	sts	0x1EF3, r24	; 0x801ef3 <enterBtn+0x9>
     c44:	90 93 f4 1e 	sts	0x1EF4, r25	; 0x801ef4 <enterBtn+0xa>
     c48:	80 91 ea 1e 	lds	r24, 0x1EEA	; 0x801eea <enterBtn>
     c4c:	90 91 ec 1e 	lds	r25, 0x1EEC	; 0x801eec <enterBtn+0x2>
     c50:	99 23       	and	r25, r25
     c52:	39 f0       	breq	.+14     	; 0xc62 <ButtonGet()+0x196>
     c54:	81 11       	cpse	r24, r1
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <ButtonGet()+0x196>
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	90 93 ee 1e 	sts	0x1EEE, r25	; 0x801eee <enterBtn+0x4>
     c5e:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <enterBtn+0x5>
     c62:	80 93 ec 1e 	sts	0x1EEC, r24	; 0x801eec <enterBtn+0x2>
     c66:	80 91 ea 1e 	lds	r24, 0x1EEA	; 0x801eea <enterBtn>
     c6a:	80 93 eb 1e 	sts	0x1EEB, r24	; 0x801eeb <enterBtn+0x1>
     c6e:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <enterBtn+0x2>
     c72:	88 23       	and	r24, r24
     c74:	b1 f0       	breq	.+44     	; 0xca2 <ButtonGet()+0x1d6>
     c76:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
     c7a:	00 91 f1 1e 	lds	r16, 0x1EF1	; 0x801ef1 <enterBtn+0x7>
     c7e:	10 91 f2 1e 	lds	r17, 0x1EF2	; 0x801ef2 <enterBtn+0x8>
     c82:	20 91 f3 1e 	lds	r18, 0x1EF3	; 0x801ef3 <enterBtn+0x9>
     c86:	30 91 f4 1e 	lds	r19, 0x1EF4	; 0x801ef4 <enterBtn+0xa>
     c8a:	60 1b       	sub	r22, r16
     c8c:	71 0b       	sbc	r23, r17
     c8e:	82 0b       	sbc	r24, r18
     c90:	93 0b       	sbc	r25, r19
     c92:	69 3e       	cpi	r22, 0xE9	; 233
     c94:	73 40       	sbci	r23, 0x03	; 3
     c96:	81 05       	cpc	r24, r1
     c98:	91 05       	cpc	r25, r1
     c9a:	18 f0       	brcs	.+6      	; 0xca2 <ButtonGet()+0x1d6>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <enterBtn+0x5>
     ca2:	e8 e5       	ldi	r30, 0x58	; 88
     ca4:	ff e1       	ldi	r31, 0x1F	; 31
     ca6:	13 82       	std	Z+3, r1	; 0x03
     ca8:	14 82       	std	Z+4, r1	; 0x04
     caa:	3b 96       	adiw	r30, 0x0b	; 11
     cac:	80 e2       	ldi	r24, 0x20	; 32
     cae:	e8 30       	cpi	r30, 0x08	; 8
     cb0:	f8 07       	cpc	r31, r24
     cb2:	c9 f7       	brne	.-14     	; 0xca6 <ButtonGet()+0x1da>
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <SetDoutLed(unsigned int, unsigned int, unsigned char)>:
_Z10SetDoutLedjjh():
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	08 2f       	mov	r16, r24
     cca:	f9 2e       	mov	r15, r25
     ccc:	d6 2f       	mov	r29, r22
     cce:	17 2f       	mov	r17, r23
     cd0:	c4 2f       	mov	r28, r20
     cd2:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SPIset_f>
     cd6:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <SPIset_f+0x1>
     cda:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPIClass::beginTransaction(SPISettings)>
     cde:	2c 98       	cbi	0x05, 4	; 5
     ce0:	8f 2d       	mov	r24, r15
     ce2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     ce6:	80 2f       	mov	r24, r16
     ce8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     cec:	81 2f       	mov	r24, r17
     cee:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     cf2:	8d 2f       	mov	r24, r29
     cf4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     cf8:	8c 2f       	mov	r24, r28
     cfa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     cfe:	2c 9a       	sbi	0x05, 4	; 5
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <SPIClass::endTransaction()>

00000d0e <SetDoutTrig(unsigned int)>:
_Z11SetDoutTrigj():
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
     d14:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SPIset_f>
     d18:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <SPIset_f+0x1>
     d1c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPIClass::beginTransaction(SPISettings)>
     d20:	2b 98       	cbi	0x05, 3	; 5
     d22:	8d 2f       	mov	r24, r29
     d24:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     d28:	8c 2f       	mov	r24, r28
     d2a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     d2e:	2b 9a       	sbi	0x05, 3	; 5
     d30:	0e 94 71 01 	call	0x2e2	; 0x2e2 <SPIClass::endTransaction()>
     d34:	d0 93 9d 0c 	sts	0x0C9D, r29	; 0x800c9d <lastDoutTrig+0x1>
     d38:	c0 93 9c 0c 	sts	0x0C9C, r28	; 0x800c9c <lastDoutTrig>
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <__vector_9>:
__vector_9():
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	0b b6       	in	r0, 0x3b	; 59
     d4e:	0f 92       	push	r0
     d50:	2f 93       	push	r18
     d52:	3f 93       	push	r19
     d54:	4f 93       	push	r20
     d56:	5f 93       	push	r21
     d58:	6f 93       	push	r22
     d5a:	7f 93       	push	r23
     d5c:	8f 93       	push	r24
     d5e:	9f 93       	push	r25
     d60:	af 93       	push	r26
     d62:	bf 93       	push	r27
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
     d68:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     d6c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     d70:	80 91 9e 0c 	lds	r24, 0x0C9E	; 0x800c9e <tempDoutTrig>
     d74:	90 91 9f 0c 	lds	r25, 0x0C9F	; 0x800c9f <tempDoutTrig+0x1>
     d78:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	0b be       	out	0x3b, r0	; 59
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <SetDacA(unsigned char)>:
_Z7SetDacAh():
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	80 38       	cpi	r24, 0x80	; 128
     da8:	08 f0       	brcs	.+2      	; 0xdac <SetDacA(unsigned char)+0xa>
     daa:	8f e7       	ldi	r24, 0x7F	; 127
     dac:	90 e2       	ldi	r25, 0x20	; 32
     dae:	89 9f       	mul	r24, r25
     db0:	e0 01       	movw	r28, r0
     db2:	11 24       	eor	r1, r1
     db4:	d0 61       	ori	r29, 0x10	; 16
     db6:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SPIset_f>
     dba:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <SPIset_f+0x1>
     dbe:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPIClass::beginTransaction(SPISettings)>
     dc2:	5d 98       	cbi	0x0b, 5	; 11
     dc4:	8d 2f       	mov	r24, r29
     dc6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     dca:	8c 2f       	mov	r24, r28
     dcc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     dd0:	5d 9a       	sbi	0x0b, 5	; 11
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <SPIClass::endTransaction()>

00000dda <ScanDinBoot()>:
_Z11ScanDinBootv():
     dda:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <SPIset>
     dde:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <SPIset+0x1>
     de2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPIClass::beginTransaction(SPISettings)>
     de6:	5c 9a       	sbi	0x0b, 4	; 11
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     dfa:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <btnPlayStopByte>
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPIClass::transfer(unsigned char)>
     e0a:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <btnEnterByte>
     e0e:	5c 98       	cbi	0x0b, 4	; 11
     e10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <SPIClass::endTransaction()>

00000e14 <SetTrigPeriod(unsigned char)>:
_Z13SetTrigPeriodh():
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	c8 2f       	mov	r28, r24
     e1c:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <trigCounterStart>
     e20:	88 23       	and	r24, r24
     e22:	61 f0       	breq	.+24     	; 0xe3c <SetTrigPeriod(unsigned char)+0x28>
     e24:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
     e28:	60 93 28 04 	sts	0x0428, r22	; 0x800428 <SetTrigPeriod(unsigned char)::trigPeriod>
     e2c:	70 93 29 04 	sts	0x0429, r23	; 0x800429 <SetTrigPeriod(unsigned char)::trigPeriod+0x1>
     e30:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <SetTrigPeriod(unsigned char)::trigPeriod+0x2>
     e34:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <SetTrigPeriod(unsigned char)::trigPeriod+0x3>
     e38:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <trigCounterStart>
     e3c:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
     e40:	00 91 28 04 	lds	r16, 0x0428	; 0x800428 <SetTrigPeriod(unsigned char)::trigPeriod>
     e44:	10 91 29 04 	lds	r17, 0x0429	; 0x800429 <SetTrigPeriod(unsigned char)::trigPeriod+0x1>
     e48:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <SetTrigPeriod(unsigned char)::trigPeriod+0x2>
     e4c:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <SetTrigPeriod(unsigned char)::trigPeriod+0x3>
     e50:	ab 01       	movw	r20, r22
     e52:	bc 01       	movw	r22, r24
     e54:	40 1b       	sub	r20, r16
     e56:	51 0b       	sbc	r21, r17
     e58:	62 0b       	sbc	r22, r18
     e5a:	73 0b       	sbc	r23, r19
     e5c:	8c 2f       	mov	r24, r28
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	a0 e0       	ldi	r26, 0x00	; 0
     e64:	48 17       	cp	r20, r24
     e66:	59 07       	cpc	r21, r25
     e68:	6a 07       	cpc	r22, r26
     e6a:	7b 07       	cpc	r23, r27
     e6c:	38 f0       	brcs	.+14     	; 0xe7c <SetTrigPeriod(unsigned char)+0x68>
     e6e:	12 99       	sbic	0x02, 2	; 2
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <SetTrigPeriod(unsigned char)+0x68>
     e72:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <trigCounterStart>
     e76:	81 11       	cpse	r24, r1
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <SetTrigPeriod(unsigned char)+0x68>
     e7a:	12 9a       	sbi	0x02, 2	; 2
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <EncGet(int, int)>:
_Z6EncGetii():
     e84:	23 b1       	in	r18, 0x03	; 3
     e86:	21 70       	andi	r18, 0x01	; 1
     e88:	20 93 81 04 	sts	0x0481, r18	; 0x800481 <encoder_A>
     e8c:	33 b1       	in	r19, 0x03	; 3
     e8e:	32 70       	andi	r19, 0x02	; 2
     e90:	30 93 80 04 	sts	0x0480, r19	; 0x800480 <encoder_B>
     e94:	21 11       	cpse	r18, r1
     e96:	08 c0       	rjmp	.+16     	; 0xea8 <EncGet(int, int)+0x24>
     e98:	40 91 7f 04 	lds	r20, 0x047F	; 0x80047f <encoder_A_prev>
     e9c:	44 23       	and	r20, r20
     e9e:	21 f0       	breq	.+8      	; 0xea8 <EncGet(int, int)+0x24>
     ea0:	33 23       	and	r19, r19
     ea2:	29 f0       	breq	.+10     	; 0xeae <EncGet(int, int)+0x2a>
     ea4:	86 0f       	add	r24, r22
     ea6:	97 1f       	adc	r25, r23
     ea8:	20 93 7f 04 	sts	0x047F, r18	; 0x80047f <encoder_A_prev>
     eac:	08 95       	ret
     eae:	30 91 7b 1e 	lds	r19, 0x1E7B	; 0x801e7b <instBtn>
     eb2:	33 23       	and	r19, r19
     eb4:	89 f0       	breq	.+34     	; 0xed8 <EncGet(int, int)+0x54>
     eb6:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <curIndex>
     eba:	31 30       	cpi	r19, 0x01	; 1
     ebc:	49 f0       	breq	.+18     	; 0xed0 <EncGet(int, int)+0x4c>
     ebe:	10 f0       	brcs	.+4      	; 0xec4 <EncGet(int, int)+0x40>
     ec0:	32 30       	cpi	r19, 0x02	; 2
     ec2:	91 f7       	brne	.-28     	; 0xea8 <EncGet(int, int)+0x24>
     ec4:	8a 30       	cpi	r24, 0x0A	; 10
     ec6:	91 05       	cpc	r25, r1
     ec8:	7c f3       	brlt	.-34     	; 0xea8 <EncGet(int, int)+0x24>
     eca:	86 1b       	sub	r24, r22
     ecc:	97 0b       	sbc	r25, r23
     ece:	ec cf       	rjmp	.-40     	; 0xea8 <EncGet(int, int)+0x24>
     ed0:	80 31       	cpi	r24, 0x10	; 16
     ed2:	91 05       	cpc	r25, r1
     ed4:	d4 f7       	brge	.-12     	; 0xeca <EncGet(int, int)+0x46>
     ed6:	e8 cf       	rjmp	.-48     	; 0xea8 <EncGet(int, int)+0x24>
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	b9 f7       	brne	.-18     	; 0xeca <EncGet(int, int)+0x46>
     edc:	e5 cf       	rjmp	.-54     	; 0xea8 <EncGet(int, int)+0x24>

00000ede <TriggerOffTimer()>:
_Z15TriggerOffTimerv():
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     eea:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <cur_triggerTime>
     eee:	c2 e0       	ldi	r28, 0x02	; 2
     ef0:	d0 e0       	ldi	r29, 0x00	; 0
     ef2:	01 e0       	ldi	r16, 0x01	; 1
     ef4:	10 e0       	ldi	r17, 0x00	; 0
     ef6:	98 01       	movw	r18, r16
     ef8:	0c 2e       	mov	r0, r28
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <TriggerOffTimer()+0x22>
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <TriggerOffTimer()+0x1e>
     f04:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <lastDoutTrig>
     f08:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <lastDoutTrig+0x1>
     f0c:	82 23       	and	r24, r18
     f0e:	93 23       	and	r25, r19
     f10:	89 2b       	or	r24, r25
     f12:	f1 f0       	breq	.+60     	; 0xf50 <TriggerOffTimer()+0x72>
     f14:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <cur_triggerTime>
     f18:	fe 01       	movw	r30, r28
     f1a:	e2 5b       	subi	r30, 0xB2	; 178
     f1c:	fb 4f       	sbci	r31, 0xFB	; 251
     f1e:	90 81       	ld	r25, Z
     f20:	89 1b       	sub	r24, r25
     f22:	80 32       	cpi	r24, 0x20	; 32
     f24:	a8 f0       	brcs	.+42     	; 0xf50 <TriggerOffTimer()+0x72>
     f26:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <lastDoutTrig>
     f2a:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <lastDoutTrig+0x1>
     f2e:	20 95       	com	r18
     f30:	30 95       	com	r19
     f32:	82 23       	and	r24, r18
     f34:	93 23       	and	r25, r19
     f36:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
     f3a:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <lastDoutTrig>
     f3e:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <lastDoutTrig+0x1>
     f42:	8d 7f       	andi	r24, 0xFD	; 253
     f44:	89 2b       	or	r24, r25
     f46:	21 f4       	brne	.+8      	; 0xf50 <TriggerOffTimer()+0x72>
     f48:	10 92 6e 1e 	sts	0x1E6E, r1	; 0x801e6e <stepLeds+0x1>
     f4c:	10 92 6d 1e 	sts	0x1E6D, r1	; 0x801e6d <stepLeds>
     f50:	21 96       	adiw	r28, 0x01	; 1
     f52:	cc 30       	cpi	r28, 0x0C	; 12
     f54:	d1 05       	cpc	r29, r1
     f56:	79 f6       	brne	.-98     	; 0xef6 <TriggerOffTimer()+0x18>
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <ButtonGetExpander()>:
_Z17ButtonGetExpanderv():
     f62:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
     f66:	81 11       	cpse	r24, r1
     f68:	dd c0       	rjmp	.+442    	; 0x1124 <ButtonGetExpander()+0x1c2>
     f6a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <ScanDin()>
     f6e:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <dinSr+0x2>
     f72:	83 fb       	bst	r24, 3
     f74:	88 27       	eor	r24, r24
     f76:	80 f9       	bld	r24, 0
     f78:	80 93 7a 1e 	sts	0x1E7A, r24	; 0x801e7a <shiftBtn>
     f7c:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <dinSr+0x3>
     f80:	60 71       	andi	r22, 0x10	; 16
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	8c e2       	ldi	r24, 0x2C	; 44
     f86:	9f e1       	ldi	r25, 0x1F	; 31
     f88:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     f8c:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <dinSr+0x4>
     f90:	61 70       	andi	r22, 0x01	; 1
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	88 ea       	ldi	r24, 0xA8	; 168
     f96:	9e e1       	ldi	r25, 0x1E	; 30
     f98:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     f9c:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <dinSr+0x4>
     fa0:	62 70       	andi	r22, 0x02	; 2
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	83 eb       	ldi	r24, 0xB3	; 179
     fa6:	9e e1       	ldi	r25, 0x1E	; 30
     fa8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     fac:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <dinSr+0x4>
     fb0:	64 70       	andi	r22, 0x04	; 4
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	9f e1       	ldi	r25, 0x1F	; 31
     fb8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     fbc:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <dinSr+0x2>
     fc0:	61 70       	andi	r22, 0x01	; 1
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	82 e4       	ldi	r24, 0x42	; 66
     fc6:	9f e1       	ldi	r25, 0x1F	; 31
     fc8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     fcc:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <encSwState>
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	87 e3       	ldi	r24, 0x37	; 55
     fd4:	9f e1       	ldi	r25, 0x1F	; 31
     fd6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ButtonGet(Button*, unsigned int)>
     fda:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <bankBtn+0x3>
     fde:	88 23       	and	r24, r24
     fe0:	d9 f0       	breq	.+54     	; 0x1018 <ButtonGetExpander()+0xb6>
     fe2:	80 91 5b 1e 	lds	r24, 0x1E5B	; 0x801e5b <muteLed>
     fe6:	88 23       	and	r24, r24
     fe8:	09 f4       	brne	.+2      	; 0xfec <ButtonGetExpander()+0x8a>
     fea:	62 c0       	rjmp	.+196    	; 0x10b0 <ButtonGetExpander()+0x14e>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 5c 1e 	sts	0x1E5C, r24	; 0x801e5c <bankLed>
     ff2:	10 92 5b 1e 	sts	0x1E5B, r1	; 0x801e5b <muteLed>
     ff6:	80 91 5c 1e 	lds	r24, 0x1E5C	; 0x801e5c <bankLed>
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	88 23       	and	r24, r24
    1000:	09 f4       	brne	.+2      	; 0x1004 <ButtonGetExpander()+0xa2>
    1002:	5d c0       	rjmp	.+186    	; 0x10be <ButtonGetExpander()+0x15c>
    1004:	8e e2       	ldi	r24, 0x2E	; 46
    1006:	94 e0       	ldi	r25, 0x04	; 4
    1008:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    100c:	65 e2       	ldi	r22, 0x25	; 37
    100e:	72 e0       	ldi	r23, 0x02	; 2
    1010:	8e e2       	ldi	r24, 0x2E	; 46
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    1018:	80 91 b6 1e 	lds	r24, 0x1EB6	; 0x801eb6 <muteBtn+0x3>
    101c:	88 23       	and	r24, r24
    101e:	d9 f0       	breq	.+54     	; 0x1056 <ButtonGetExpander()+0xf4>
    1020:	80 91 5c 1e 	lds	r24, 0x1E5C	; 0x801e5c <bankLed>
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <ButtonGetExpander()+0xc8>
    1028:	51 c0       	rjmp	.+162    	; 0x10cc <ButtonGetExpander()+0x16a>
    102a:	10 92 5c 1e 	sts	0x1E5C, r1	; 0x801e5c <bankLed>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 5b 1e 	sts	0x1E5B, r24	; 0x801e5b <muteLed>
    1034:	80 91 5b 1e 	lds	r24, 0x1E5B	; 0x801e5b <muteLed>
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	88 23       	and	r24, r24
    103e:	09 f4       	brne	.+2      	; 0x1042 <ButtonGetExpander()+0xe0>
    1040:	4a c0       	rjmp	.+148    	; 0x10d6 <ButtonGetExpander()+0x174>
    1042:	8e e2       	ldi	r24, 0x2E	; 46
    1044:	94 e0       	ldi	r25, 0x04	; 4
    1046:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    104a:	67 e4       	ldi	r22, 0x47	; 71
    104c:	72 e0       	ldi	r23, 0x02	; 2
    104e:	8e e2       	ldi	r24, 0x2E	; 46
    1050:	94 e0       	ldi	r25, 0x04	; 4
    1052:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    1056:	80 91 2f 1f 	lds	r24, 0x1F2F	; 0x801f2f <guideBtn+0x3>
    105a:	88 23       	and	r24, r24
    105c:	39 f0       	breq	.+14     	; 0x106c <ButtonGetExpander()+0x10a>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <showTrigLeds>
    1064:	91 11       	cpse	r25, r1
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <showTrigLeds>
    106c:	80 91 5b 1e 	lds	r24, 0x1E5B	; 0x801e5b <muteLed>
    1070:	88 23       	and	r24, r24
    1072:	c1 f1       	breq	.+112    	; 0x10e4 <ButtonGetExpander()+0x182>
    1074:	0e 94 4a 03 	call	0x694	; 0x694 <MuteButtonGet()>
    1078:	80 91 45 1f 	lds	r24, 0x1F45	; 0x801f45 <stopBtn+0x3>
    107c:	88 23       	and	r24, r24
    107e:	51 f0       	breq	.+20     	; 0x1094 <ButtonGetExpander()+0x132>
    1080:	80 91 a2 0c 	lds	r24, 0x0CA2	; 0x800ca2 <muteInst>
    1084:	90 91 a3 0c 	lds	r25, 0x0CA3	; 0x800ca3 <muteInst+0x1>
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	82 27       	eor	r24, r18
    108c:	90 93 a3 0c 	sts	0x0CA3, r25	; 0x800ca3 <muteInst+0x1>
    1090:	80 93 a2 0c 	sts	0x0CA2, r24	; 0x800ca2 <muteInst>
    1094:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <encBtn+0x2>
    1098:	88 23       	and	r24, r24
    109a:	09 f4       	brne	.+2      	; 0x109e <ButtonGetExpander()+0x13c>
    109c:	43 c0       	rjmp	.+134    	; 0x1124 <ButtonGetExpander()+0x1c2>
    109e:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <muteInst+0x1>
    10a2:	10 92 a2 0c 	sts	0x0CA2, r1	; 0x800ca2 <muteInst>
    10a6:	10 92 4e 1e 	sts	0x1E4E, r1	; 0x801e4e <muteLeds+0x1>
    10aa:	10 92 4d 1e 	sts	0x1E4D, r1	; 0x801e4d <muteLeds>
    10ae:	08 95       	ret
    10b0:	80 91 5c 1e 	lds	r24, 0x1E5C	; 0x801e5c <bankLed>
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	89 27       	eor	r24, r25
    10b8:	80 93 5c 1e 	sts	0x1E5C, r24	; 0x801e5c <bankLed>
    10bc:	9c cf       	rjmp	.-200    	; 0xff6 <ButtonGetExpander()+0x94>
    10be:	8e e2       	ldi	r24, 0x2E	; 46
    10c0:	94 e0       	ldi	r25, 0x04	; 4
    10c2:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    10c6:	66 e3       	ldi	r22, 0x36	; 54
    10c8:	72 e0       	ldi	r23, 0x02	; 2
    10ca:	a2 cf       	rjmp	.-188    	; 0x1010 <ButtonGetExpander()+0xae>
    10cc:	80 91 5b 1e 	lds	r24, 0x1E5B	; 0x801e5b <muteLed>
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	89 27       	eor	r24, r25
    10d4:	ad cf       	rjmp	.-166    	; 0x1030 <ButtonGetExpander()+0xce>
    10d6:	8e e2       	ldi	r24, 0x2E	; 46
    10d8:	94 e0       	ldi	r25, 0x04	; 4
    10da:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    10de:	66 e3       	ldi	r22, 0x36	; 54
    10e0:	72 e0       	ldi	r23, 0x02	; 2
    10e2:	b5 cf       	rjmp	.-150    	; 0x104e <ButtonGetExpander()+0xec>
    10e4:	80 91 5c 1e 	lds	r24, 0x1E5C	; 0x801e5c <bankLed>
    10e8:	88 23       	and	r24, r24
    10ea:	e1 f0       	breq	.+56     	; 0x1124 <ButtonGetExpander()+0x1c2>
    10ec:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <GateButtonGet()>
    10f0:	80 91 45 1f 	lds	r24, 0x1F45	; 0x801f45 <stopBtn+0x3>
    10f4:	88 23       	and	r24, r24
    10f6:	51 f0       	breq	.+20     	; 0x110c <ButtonGetExpander()+0x1aa>
    10f8:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <gateInst>
    10fc:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <gateInst+0x1>
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	82 27       	eor	r24, r18
    1104:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <gateInst+0x1>
    1108:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <gateInst>
    110c:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <encBtn+0x2>
    1110:	88 23       	and	r24, r24
    1112:	41 f0       	breq	.+16     	; 0x1124 <ButtonGetExpander()+0x1c2>
    1114:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <gateInst+0x1>
    1118:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <gateInst>
    111c:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <gateLeds+0x1>
    1120:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <gateLeds>
    1124:	08 95       	ret

00001126 <SetLedsExpander()>:
_Z15SetLedsExpanderv():
    1126:	50 91 5c 1e 	lds	r21, 0x1E5C	; 0x801e5c <bankLed>
    112a:	e0 91 5b 1e 	lds	r30, 0x1E5B	; 0x801e5b <muteLed>
    112e:	80 91 4b 1e 	lds	r24, 0x1E4B	; 0x801e4b <seq+0xc>
    1132:	60 91 4a 04 	lds	r22, 0x044A	; 0x80044a <showTrigLeds>
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	76 2f       	mov	r23, r22
    113a:	66 27       	eor	r22, r22
    113c:	72 95       	swap	r23
    113e:	70 7f       	andi	r23, 0xF0	; 240
    1140:	78 2b       	or	r23, r24
    1142:	85 2f       	mov	r24, r21
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	98 2f       	mov	r25, r24
    1148:	88 27       	eor	r24, r24
    114a:	92 95       	swap	r25
    114c:	99 0f       	add	r25, r25
    114e:	90 7e       	andi	r25, 0xE0	; 224
    1150:	68 2b       	or	r22, r24
    1152:	79 2b       	or	r23, r25
    1154:	8e 2f       	mov	r24, r30
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	90 e4       	ldi	r25, 0x40	; 64
    115a:	89 9f       	mul	r24, r25
    115c:	90 2d       	mov	r25, r0
    115e:	88 27       	eor	r24, r24
    1160:	11 24       	eor	r1, r1
    1162:	68 2b       	or	r22, r24
    1164:	79 2b       	or	r23, r25
    1166:	80 91 02 1f 	lds	r24, 0x1F02	; 0x801f02 <tempoBtn+0x2>
    116a:	90 91 4a 1e 	lds	r25, 0x1E4A	; 0x801e4a <seq+0xb>
    116e:	89 2b       	or	r24, r25
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	99 27       	eor	r25, r25
    1174:	86 95       	lsr	r24
    1176:	97 95       	ror	r25
    1178:	88 27       	eor	r24, r24
    117a:	68 2b       	or	r22, r24
    117c:	79 2b       	or	r23, r25
    117e:	70 93 67 1e 	sts	0x1E67, r23	; 0x801e67 <configLed+0x1>
    1182:	60 93 66 1e 	sts	0x1E66, r22	; 0x801e66 <configLed>
    1186:	40 91 68 1e 	lds	r20, 0x1E68	; 0x801e68 <menuLed>
    118a:	20 91 6d 1e 	lds	r18, 0x1E6D	; 0x801e6d <stepLeds>
    118e:	30 91 6e 1e 	lds	r19, 0x1E6E	; 0x801e6e <stepLeds+0x1>
    1192:	ee 23       	and	r30, r30
    1194:	21 f1       	breq	.+72     	; 0x11de <SetLedsExpander()+0xb8>
    1196:	90 91 a2 0c 	lds	r25, 0x0CA2	; 0x800ca2 <muteInst>
    119a:	91 70       	andi	r25, 0x01	; 1
    119c:	49 2b       	or	r20, r25
    119e:	80 91 4d 1e 	lds	r24, 0x1E4D	; 0x801e4d <muteLeds>
    11a2:	90 91 4e 1e 	lds	r25, 0x1E4E	; 0x801e4e <muteLeds+0x1>
    11a6:	82 2b       	or	r24, r18
    11a8:	93 2b       	or	r25, r19
    11aa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SetDoutLed(unsigned int, unsigned int, unsigned char)>
    11ae:	82 b1       	in	r24, 0x02	; 2
    11b0:	82 fb       	bst	r24, 2
    11b2:	88 27       	eor	r24, r24
    11b4:	80 f9       	bld	r24, 0
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	89 27       	eor	r24, r25
    11ba:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <showTrigLeds>
    11be:	89 23       	and	r24, r25
    11c0:	90 91 7a 1e 	lds	r25, 0x1E7A	; 0x801e7a <shiftBtn>
    11c4:	99 0f       	add	r25, r25
    11c6:	89 2b       	or	r24, r25
    11c8:	80 93 68 1e 	sts	0x1E68, r24	; 0x801e68 <menuLed>
    11cc:	80 91 6d 1e 	lds	r24, 0x1E6D	; 0x801e6d <stepLeds>
    11d0:	90 91 6e 1e 	lds	r25, 0x1E6E	; 0x801e6e <stepLeds+0x1>
    11d4:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <lastStepLeds+0x1>
    11d8:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <lastStepLeds>
    11dc:	08 95       	ret
    11de:	c9 01       	movw	r24, r18
    11e0:	55 23       	and	r21, r21
    11e2:	19 f3       	breq	.-58     	; 0x11aa <SetLedsExpander()+0x84>
    11e4:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <gateInst>
    11e8:	91 70       	andi	r25, 0x01	; 1
    11ea:	49 2b       	or	r20, r25
    11ec:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <gateLeds>
    11f0:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <gateLeds+0x1>
    11f4:	d8 cf       	rjmp	.-80     	; 0x11a6 <SetLedsExpander()+0x80>

000011f6 <LcdClearLine()>:
_Z12LcdClearLinev():
    11f6:	66 e3       	ldi	r22, 0x36	; 54
    11f8:	72 e0       	ldi	r23, 0x02	; 2
    11fa:	8e e2       	ldi	r24, 0x2E	; 46
    11fc:	94 e0       	ldi	r25, 0x04	; 4
    11fe:	0c 94 72 49 	jmp	0x92e4	; 0x92e4 <Print::print(char const*)>

00001202 <LcdPrintLine(unsigned char)>:
_Z12LcdPrintLineh():
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	d0 e0       	ldi	r29, 0x00	; 0
    120c:	c0 e0       	ldi	r28, 0x00	; 0
    120e:	08 2f       	mov	r16, r24
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	c0 17       	cp	r28, r16
    1214:	d1 07       	cpc	r29, r17
    1216:	3c f4       	brge	.+14     	; 0x1226 <LcdPrintLine(unsigned char)+0x24>
    1218:	61 ea       	ldi	r22, 0xA1	; 161
    121a:	8e e2       	ldi	r24, 0x2E	; 46
    121c:	94 e0       	ldi	r25, 0x04	; 4
    121e:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
    1222:	21 96       	adiw	r28, 0x01	; 1
    1224:	f6 cf       	rjmp	.-20     	; 0x1212 <LcdPrintLine(unsigned char)+0x10>
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <LcdPrintSaved()>:
_Z13LcdPrintSavedv():
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	64 e0       	ldi	r22, 0x04	; 4
    1234:	8e e2       	ldi	r24, 0x2E	; 46
    1236:	94 e0       	ldi	r25, 0x04	; 4
    1238:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    123c:	68 e5       	ldi	r22, 0x58	; 88
    123e:	72 e0       	ldi	r23, 0x02	; 2
    1240:	8e e2       	ldi	r24, 0x2E	; 46
    1242:	94 e0       	ldi	r25, 0x04	; 4
    1244:	0c 94 72 49 	jmp	0x92e4	; 0x92e4 <Print::print(char const*)>

00001248 <LcdPrintTotalAcc()>:
_Z16LcdPrintTotalAccv():
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	8e e2       	ldi	r24, 0x2E	; 46
    124e:	94 e0       	ldi	r25, 0x04	; 4
    1250:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1254:	61 e6       	ldi	r22, 0x61	; 97
    1256:	72 e0       	ldi	r23, 0x02	; 2
    1258:	8e e2       	ldi	r24, 0x2E	; 46
    125a:	94 e0       	ldi	r25, 0x04	; 4
    125c:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    1260:	41 e0       	ldi	r20, 0x01	; 1
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	8e e2       	ldi	r24, 0x2E	; 46
    1266:	94 e0       	ldi	r25, 0x04	; 4
    1268:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    126c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	8e e2       	ldi	r24, 0x2E	; 46
    1276:	94 e0       	ldi	r25, 0x04	; 4
    1278:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    127c:	62 e7       	ldi	r22, 0x72	; 114
    127e:	72 e0       	ldi	r23, 0x02	; 2
    1280:	8e e2       	ldi	r24, 0x2E	; 46
    1282:	94 e0       	ldi	r25, 0x04	; 4
    1284:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	8e e2       	ldi	r24, 0x2E	; 46
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1294:	8e e0       	ldi	r24, 0x0E	; 14
    1296:	0e 94 01 09 	call	0x1202	; 0x1202 <LcdPrintLine(unsigned char)>
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	6f e0       	ldi	r22, 0x0F	; 15
    129e:	8e e2       	ldi	r24, 0x2E	; 46
    12a0:	94 e0       	ldi	r25, 0x04	; 4
    12a2:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    12a6:	64 e7       	ldi	r22, 0x74	; 116
    12a8:	72 e0       	ldi	r23, 0x02	; 2
    12aa:	8e e2       	ldi	r24, 0x2E	; 46
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    12b2:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    12b6:	89 ec       	ldi	r24, 0xC9	; 201
    12b8:	95 e0       	ldi	r25, 0x05	; 5
    12ba:	28 9f       	mul	r18, r24
    12bc:	f0 01       	movw	r30, r0
    12be:	29 9f       	mul	r18, r25
    12c0:	f0 0d       	add	r31, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	e0 5a       	subi	r30, 0xA0	; 160
    12c6:	f7 4e       	sbci	r31, 0xE7	; 231
    12c8:	60 81       	ld	r22, Z
    12ca:	6f 5f       	subi	r22, 0xFF	; 255
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	8e e2       	ldi	r24, 0x2E	; 46
    12d0:	94 e0       	ldi	r25, 0x04	; 4
    12d2:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    12d6:	6b ed       	ldi	r22, 0xDB	; 219
    12d8:	8e e2       	ldi	r24, 0x2E	; 46
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	0c 94 7a 49 	jmp	0x92f4	; 0x92f4 <Print::print(char)>

000012e0 <LcdPrintEEpromInit()>:
_Z18LcdPrintEEpromInitv():
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	8e e2       	ldi	r24, 0x2E	; 46
    12e6:	94 e0       	ldi	r25, 0x04	; 4
    12e8:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    12ec:	66 e7       	ldi	r22, 0x76	; 118
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	8e e2       	ldi	r24, 0x2E	; 46
    12f2:	94 e0       	ldi	r25, 0x04	; 4
    12f4:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	8e e2       	ldi	r24, 0x2E	; 46
    12fe:	94 e0       	ldi	r25, 0x04	; 4
    1300:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1304:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	8e e2       	ldi	r24, 0x2E	; 46
    130e:	94 e0       	ldi	r25, 0x04	; 4
    1310:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1314:	67 e8       	ldi	r22, 0x87	; 135
    1316:	72 e0       	ldi	r23, 0x02	; 2
    1318:	8e e2       	ldi	r24, 0x2E	; 46
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	0c 94 72 49 	jmp	0x92e4	; 0x92e4 <Print::print(char const*)>

00001320 <LcdPrintTM2Adjust()>:
_Z17LcdPrintTM2Adjustv():
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	8e e2       	ldi	r24, 0x2E	; 46
    1326:	94 e0       	ldi	r25, 0x04	; 4
    1328:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    132c:	68 e9       	ldi	r22, 0x98	; 152
    132e:	72 e0       	ldi	r23, 0x02	; 2
    1330:	8e e2       	ldi	r24, 0x2E	; 46
    1332:	94 e0       	ldi	r25, 0x04	; 4
    1334:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	8e e2       	ldi	r24, 0x2E	; 46
    133e:	94 e0       	ldi	r25, 0x04	; 4
    1340:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1344:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	8e e2       	ldi	r24, 0x2E	; 46
    134e:	94 e0       	ldi	r25, 0x04	; 4
    1350:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1354:	69 ea       	ldi	r22, 0xA9	; 169
    1356:	72 e0       	ldi	r23, 0x02	; 2
    1358:	8e e2       	ldi	r24, 0x2E	; 46
    135a:	94 e0       	ldi	r25, 0x04	; 4
    135c:	0c 94 72 49 	jmp	0x92e4	; 0x92e4 <Print::print(char const*)>

00001360 <SetLeds()>:
_Z7SetLedsv():
    1360:	2f 92       	push	r2
    1362:	3f 92       	push	r3
    1364:	4f 92       	push	r4
    1366:	5f 92       	push	r5
    1368:	6f 92       	push	r6
    136a:	7f 92       	push	r7
    136c:	8f 92       	push	r8
    136e:	9f 92       	push	r9
    1370:	af 92       	push	r10
    1372:	bf 92       	push	r11
    1374:	cf 92       	push	r12
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	80 91 7a 1e 	lds	r24, 0x1E7A	; 0x801e7a <shiftBtn>
    1388:	80 93 58 1e 	sts	0x1E58, r24	; 0x801e58 <shiftLed>
    138c:	40 91 7b 1e 	lds	r20, 0x1E7B	; 0x801e7b <instBtn>
    1390:	40 93 59 1e 	sts	0x1E59, r20	; 0x801e59 <instLed>
    1394:	60 91 7e 1e 	lds	r22, 0x1E7E	; 0x801e7e <clearBtn+0x2>
    1398:	60 93 57 1e 	sts	0x1E57, r22	; 0x801e57 <clearLed>
    139c:	50 91 f7 1e 	lds	r21, 0x1EF7	; 0x801ef7 <shufBtn+0x2>
    13a0:	50 93 56 1e 	sts	0x1E56, r21	; 0x801e56 <shufLed>
    13a4:	20 91 23 1f 	lds	r18, 0x1F23	; 0x801f23 <scaleBtn+0x2>
    13a8:	20 93 55 1e 	sts	0x1E55, r18	; 0x801e55 <scaleLed>
    13ac:	e0 91 d6 1e 	lds	r30, 0x1ED6	; 0x801ed6 <lastStepBtn+0x2>
    13b0:	e0 93 54 1e 	sts	0x1E54, r30	; 0x801e54 <lastStepLed>
    13b4:	98 2f       	mov	r25, r24
    13b6:	99 0f       	add	r25, r25
    13b8:	84 e0       	ldi	r24, 0x04	; 4
    13ba:	48 9f       	mul	r20, r24
    13bc:	80 01       	movw	r16, r0
    13be:	11 24       	eor	r1, r1
    13c0:	a8 e0       	ldi	r26, 0x08	; 8
    13c2:	6a 9f       	mul	r22, r26
    13c4:	b0 01       	movw	r22, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	b0 e1       	ldi	r27, 0x10	; 16
    13ca:	5b 9f       	mul	r21, r27
    13cc:	e0 01       	movw	r28, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	e8 9f       	mul	r30, r24
    13d4:	f0 01       	movw	r30, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	a0 e4       	ldi	r26, 0x40	; 64
    13da:	2a 9f       	mul	r18, r26
    13dc:	90 01       	movw	r18, r0
    13de:	11 24       	eor	r1, r1
    13e0:	a0 91 39 1e 	lds	r26, 0x1E39	; 0x801e39 <isRunning>
    13e4:	89 2f       	mov	r24, r25
    13e6:	80 2b       	or	r24, r16
    13e8:	aa 23       	and	r26, r26
    13ea:	09 f4       	brne	.+2      	; 0x13ee <SetLeds()+0x8e>
    13ec:	f9 c0       	rjmp	.+498    	; 0x15e0 <SetLeds()+0x280>
    13ee:	80 68       	ori	r24, 0x80	; 128
    13f0:	86 2b       	or	r24, r22
    13f2:	8c 2b       	or	r24, r28
    13f4:	8e 2b       	or	r24, r30
    13f6:	82 2b       	or	r24, r18
    13f8:	80 93 68 1e 	sts	0x1E68, r24	; 0x801e68 <menuLed>
    13fc:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    1400:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <SetLeds()+0xac>
    140a:	f6 c0       	rjmp	.+492    	; 0x15f8 <SetLeds()+0x298>
    140c:	d1 e0       	ldi	r29, 0x01	; 1
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	09 f0       	breq	.+2      	; 0x1414 <SetLeds()+0xb4>
    1412:	d0 e0       	ldi	r29, 0x00	; 0
    1414:	d0 93 64 1e 	sts	0x1E64, r29	; 0x801e64 <trackLed>
    1418:	83 30       	cpi	r24, 0x03	; 3
    141a:	91 05       	cpc	r25, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <SetLeds()+0xc0>
    141e:	ef c0       	rjmp	.+478    	; 0x15fe <SetLeds()+0x29e>
    1420:	e1 e0       	ldi	r30, 0x01	; 1
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	91 05       	cpc	r25, r1
    1426:	09 f0       	breq	.+2      	; 0x142a <SetLeds()+0xca>
    1428:	e0 e0       	ldi	r30, 0x00	; 0
    142a:	e0 93 60 1e 	sts	0x1E60, r30	; 0x801e60 <ptrnLed>
    142e:	f0 91 18 1f 	lds	r31, 0x1F18	; 0x801f18 <tapBtn+0x2>
    1432:	84 30       	cpi	r24, 0x04	; 4
    1434:	91 05       	cpc	r25, r1
    1436:	11 f4       	brne	.+4      	; 0x143c <SetLeds()+0xdc>
    1438:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <blinkTempo>
    143c:	f0 93 5f 1e 	sts	0x1E5F, r31	; 0x801e5f <tapLed>
    1440:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <keyboardMode>
    1444:	22 23       	and	r18, r18
    1446:	09 f4       	brne	.+2      	; 0x144a <SetLeds()+0xea>
    1448:	dd c0       	rjmp	.+442    	; 0x1604 <SetLeds()+0x2a4>
    144a:	21 e0       	ldi	r18, 0x01	; 1
    144c:	20 93 63 1e 	sts	0x1E63, r18	; 0x801e63 <backLed>
    1450:	20 93 62 1e 	sts	0x1E62, r18	; 0x801e62 <fwdLed>
    1454:	30 91 0d 1f 	lds	r19, 0x1F0D	; 0x801f0d <dirBtn+0x2>
    1458:	30 93 5e 1e 	sts	0x1E5E, r19	; 0x801e5e <dirLed>
    145c:	70 91 27 1f 	lds	r23, 0x1F27	; 0x801f27 <scaleBtn+0x6>
    1460:	01 e0       	ldi	r16, 0x01	; 1
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <SetLeds()+0x10a>
    1466:	00 0f       	add	r16, r16
    1468:	11 1f       	adc	r17, r17
    146a:	7a 95       	dec	r23
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <SetLeds()+0x106>
    146e:	00 93 53 1e 	sts	0x1E53, r16	; 0x801e53 <scaleLeds>
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	60 91 32 1f 	lds	r22, 0x1F32	; 0x801f32 <guideBtn+0x6>
    1478:	61 11       	cpse	r22, r1
    147a:	01 c0       	rjmp	.+2      	; 0x147e <SetLeds()+0x11e>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	20 93 5d 1e 	sts	0x1E5D, r18	; 0x801e5d <guideLed>
    1482:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <curInst>
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	31 f4       	brne	.+12     	; 0x1498 <SetLeds()+0x138>
    148c:	bd 30       	cpi	r27, 0x0D	; 13
    148e:	21 f4       	brne	.+8      	; 0x1498 <SetLeds()+0x138>
    1490:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <blinkTempo>
    1494:	20 93 5d 1e 	sts	0x1E5D, r18	; 0x801e5d <guideLed>
    1498:	c0 91 aa 1e 	lds	r28, 0x1EAA	; 0x801eaa <bankBtn+0x2>
    149c:	c0 93 5c 1e 	sts	0x1E5C, r28	; 0x801e5c <bankLed>
    14a0:	44 23       	and	r20, r20
    14a2:	19 f0       	breq	.+6      	; 0x14aa <SetLeds()+0x14a>
    14a4:	21 e0       	ldi	r18, 0x01	; 1
    14a6:	bc 30       	cpi	r27, 0x0C	; 12
    14a8:	79 f0       	breq	.+30     	; 0x14c8 <SetLeds()+0x168>
    14aa:	20 91 ca 0c 	lds	r18, 0x0CCA	; 0x800cca <patternNeedSaved>
    14ae:	21 11       	cpse	r18, r1
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <SetLeds()+0x164>
    14b2:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <trackNeedSaved>
    14b6:	21 11       	cpse	r18, r1
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <SetLeds()+0x164>
    14ba:	20 91 4b 1e 	lds	r18, 0x1E4B	; 0x801e4b <seq+0xc>
    14be:	22 23       	and	r18, r18
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <SetLeds()+0x164>
    14c2:	a7 c0       	rjmp	.+334    	; 0x1612 <SetLeds()+0x2b2>
    14c4:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <blinkTempo>
    14c8:	20 93 52 1e 	sts	0x1E52, r18	; 0x801e52 <enterLed>
    14cc:	85 30       	cpi	r24, 0x05	; 5
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <SetLeds()+0x174>
    14d2:	a2 c0       	rjmp	.+324    	; 0x1618 <SetLeds()+0x2b8>
    14d4:	21 e0       	ldi	r18, 0x01	; 1
    14d6:	20 93 5b 1e 	sts	0x1E5B, r18	; 0x801e5b <muteLed>
    14da:	20 91 4a 1e 	lds	r18, 0x1E4A	; 0x801e4a <seq+0xb>
    14de:	22 23       	and	r18, r18
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <SetLeds()+0x184>
    14e2:	9d c0       	rjmp	.+314    	; 0x161e <SetLeds()+0x2be>
    14e4:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <blinkTempo>
    14e8:	20 93 5a 1e 	sts	0x1E5A, r18	; 0x801e5a <tempoLed>
    14ec:	60 91 63 1e 	lds	r22, 0x1E63	; 0x801e63 <backLed>
    14f0:	20 e4       	ldi	r18, 0x40	; 64
    14f2:	62 9f       	mul	r22, r18
    14f4:	b0 01       	movw	r22, r0
    14f6:	11 24       	eor	r1, r1
    14f8:	e0 90 62 1e 	lds	r14, 0x1E62	; 0x801e62 <fwdLed>
    14fc:	20 e8       	ldi	r18, 0x80	; 128
    14fe:	e2 9e       	mul	r14, r18
    1500:	70 01       	movw	r14, r0
    1502:	11 24       	eor	r1, r1
    1504:	6e 29       	or	r22, r14
    1506:	7f 29       	or	r23, r15
    1508:	20 91 61 1e 	lds	r18, 0x1E61	; 0x801e61 <numLed>
    150c:	62 2b       	or	r22, r18
    150e:	20 91 52 1e 	lds	r18, 0x1E52	; 0x801e52 <enterLed>
    1512:	72 2b       	or	r23, r18
    1514:	23 2f       	mov	r18, r19
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	32 2f       	mov	r19, r18
    151a:	22 27       	eor	r18, r18
    151c:	33 0f       	add	r19, r19
    151e:	33 0f       	add	r19, r19
    1520:	33 0f       	add	r19, r19
    1522:	26 2b       	or	r18, r22
    1524:	37 2b       	or	r19, r23
    1526:	60 91 5d 1e 	lds	r22, 0x1E5D	; 0x801e5d <guideLed>
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	76 2f       	mov	r23, r22
    152e:	66 27       	eor	r22, r22
    1530:	72 95       	swap	r23
    1532:	70 7f       	andi	r23, 0xF0	; 240
    1534:	26 2b       	or	r18, r22
    1536:	37 2b       	or	r19, r23
    1538:	ec 2e       	mov	r14, r28
    153a:	f1 2c       	mov	r15, r1
    153c:	60 e2       	ldi	r22, 0x20	; 32
    153e:	e6 9e       	mul	r14, r22
    1540:	f0 2c       	mov	r15, r0
    1542:	ee 24       	eor	r14, r14
    1544:	11 24       	eor	r1, r1
    1546:	2e 29       	or	r18, r14
    1548:	3f 29       	or	r19, r15
    154a:	60 91 5b 1e 	lds	r22, 0x1E5B	; 0x801e5b <muteLed>
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	70 e4       	ldi	r23, 0x40	; 64
    1552:	67 9f       	mul	r22, r23
    1554:	70 2d       	mov	r23, r0
    1556:	66 27       	eor	r22, r22
    1558:	11 24       	eor	r1, r1
    155a:	26 2b       	or	r18, r22
    155c:	37 2b       	or	r19, r23
    155e:	60 91 5a 1e 	lds	r22, 0x1E5A	; 0x801e5a <tempoLed>
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	77 27       	eor	r23, r23
    1566:	66 95       	lsr	r22
    1568:	77 95       	ror	r23
    156a:	66 27       	eor	r22, r22
    156c:	62 2b       	or	r22, r18
    156e:	73 2b       	or	r23, r19
    1570:	00 0f       	add	r16, r16
    1572:	11 1f       	adc	r17, r17
    1574:	0e 7f       	andi	r16, 0xFE	; 254
    1576:	11 70       	andi	r17, 0x01	; 1
    1578:	60 2b       	or	r22, r16
    157a:	71 2b       	or	r23, r17
    157c:	10 e2       	ldi	r17, 0x20	; 32
    157e:	d1 9f       	mul	r29, r17
    1580:	90 01       	movw	r18, r0
    1582:	11 24       	eor	r1, r1
    1584:	62 2b       	or	r22, r18
    1586:	73 2b       	or	r23, r19
    1588:	2e 2f       	mov	r18, r30
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	32 2f       	mov	r19, r18
    158e:	22 27       	eor	r18, r18
    1590:	33 0f       	add	r19, r19
    1592:	62 2b       	or	r22, r18
    1594:	73 2b       	or	r23, r19
    1596:	2f 2f       	mov	r18, r31
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	32 2f       	mov	r19, r18
    159c:	22 27       	eor	r18, r18
    159e:	33 0f       	add	r19, r19
    15a0:	33 0f       	add	r19, r19
    15a2:	62 2b       	or	r22, r18
    15a4:	73 2b       	or	r23, r19
    15a6:	70 93 67 1e 	sts	0x1E67, r23	; 0x801e67 <configLed+0x1>
    15aa:	60 93 66 1e 	sts	0x1E66, r22	; 0x801e66 <configLed>
    15ae:	b0 31       	cpi	r27, 0x10	; 16
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <SetLeds()+0x254>
    15b2:	3e c0       	rjmp	.+124    	; 0x1630 <SetLeds()+0x2d0>
    15b4:	eb 2f       	mov	r30, r27
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	e0 52       	subi	r30, 0x20	; 32
    15ba:	f5 4f       	sbci	r31, 0xF5	; 245
    15bc:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    15c0:	5a 0b       	sbc	r21, r26
    15c2:	18 0b       	sbc	r17, r24
    15c4:	48 0b       	sbc	r20, r24
    15c6:	4b 0b       	sbc	r20, r27
    15c8:	4e 0b       	sbc	r20, r30
    15ca:	18 0b       	sbc	r17, r24
    15cc:	54 0b       	sbc	r21, r20
    15ce:	57 0b       	sbc	r21, r23
    15d0:	12 0b       	sbc	r17, r18
    15d2:	3f 0b       	sbc	r19, r31
    15d4:	42 0b       	sbc	r20, r18
    15d6:	45 0b       	sbc	r20, r21
    15d8:	5a 0b       	sbc	r21, r26
    15da:	5a 0b       	sbc	r21, r26
    15dc:	51 0b       	sbc	r21, r17
    15de:	51 0b       	sbc	r21, r17
    15e0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <blinkTempo>
    15e4:	81 60       	ori	r24, 0x01	; 1
    15e6:	86 2b       	or	r24, r22
    15e8:	8c 2b       	or	r24, r28
    15ea:	8e 2b       	or	r24, r30
    15ec:	82 2b       	or	r24, r18
    15ee:	97 95       	ror	r25
    15f0:	99 27       	eor	r25, r25
    15f2:	97 95       	ror	r25
    15f4:	89 2b       	or	r24, r25
    15f6:	00 cf       	rjmp	.-512    	; 0x13f8 <SetLeds()+0x98>
    15f8:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <blinkTempo>
    15fc:	0b cf       	rjmp	.-490    	; 0x1414 <SetLeds()+0xb4>
    15fe:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <blinkTempo>
    1602:	13 cf       	rjmp	.-474    	; 0x142a <SetLeds()+0xca>
    1604:	20 91 cb 1e 	lds	r18, 0x1ECB	; 0x801ecb <backBtn+0x2>
    1608:	20 93 63 1e 	sts	0x1E63, r18	; 0x801e63 <backLed>
    160c:	20 91 c0 1e 	lds	r18, 0x1EC0	; 0x801ec0 <fwdBtn+0x2>
    1610:	1f cf       	rjmp	.-450    	; 0x1450 <SetLeds()+0xf0>
    1612:	10 92 52 1e 	sts	0x1E52, r1	; 0x801e52 <enterLed>
    1616:	5a cf       	rjmp	.-332    	; 0x14cc <SetLeds()+0x16c>
    1618:	10 92 5b 1e 	sts	0x1E5B, r1	; 0x801e5b <muteLed>
    161c:	5e cf       	rjmp	.-324    	; 0x14da <SetLeds()+0x17a>
    161e:	20 91 02 1f 	lds	r18, 0x1F02	; 0x801f02 <tempoBtn+0x2>
    1622:	62 cf       	rjmp	.-316    	; 0x14e8 <SetLeds()+0x188>
    1624:	23 e0       	ldi	r18, 0x03	; 3
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	30 93 51 1e 	sts	0x1E51, r19	; 0x801e51 <instSlctLed+0x1>
    162c:	20 93 50 1e 	sts	0x1E50, r18	; 0x801e50 <instSlctLed>
    1630:	82 30       	cpi	r24, 0x02	; 2
    1632:	91 05       	cpc	r25, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <SetLeds()+0x2d8>
    1636:	9e c0       	rjmp	.+316    	; 0x1774 <SetLeds()+0x414>
    1638:	08 f0       	brcs	.+2      	; 0x163c <SetLeds()+0x2dc>
    163a:	41 c0       	rjmp	.+130    	; 0x16be <SetLeds()+0x35e>
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	09 f4       	brne	.+2      	; 0x1642 <SetLeds()+0x2e2>
    1640:	57 c0       	rjmp	.+174    	; 0x16f0 <SetLeds()+0x390>
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <SetLeds()+0x2ea>
    1648:	6b c0       	rjmp	.+214    	; 0x1720 <SetLeds()+0x3c0>
    164a:	40 91 68 1e 	lds	r20, 0x1E68	; 0x801e68 <menuLed>
    164e:	80 91 6d 1e 	lds	r24, 0x1E6D	; 0x801e6d <stepLeds>
    1652:	90 91 6e 1e 	lds	r25, 0x1E6E	; 0x801e6e <stepLeds+0x1>
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	bf 90       	pop	r11
    1668:	af 90       	pop	r10
    166a:	9f 90       	pop	r9
    166c:	8f 90       	pop	r8
    166e:	7f 90       	pop	r7
    1670:	6f 90       	pop	r6
    1672:	5f 90       	pop	r5
    1674:	4f 90       	pop	r4
    1676:	3f 90       	pop	r3
    1678:	2f 90       	pop	r2
    167a:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <SetDoutLed(unsigned int, unsigned int, unsigned char)>
    167e:	2c e0       	ldi	r18, 0x0C	; 12
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	d2 cf       	rjmp	.-92     	; 0x1628 <SetLeds()+0x2c8>
    1684:	20 e3       	ldi	r18, 0x30	; 48
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	cf cf       	rjmp	.-98     	; 0x1628 <SetLeds()+0x2c8>
    168a:	20 ec       	ldi	r18, 0xC0	; 192
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	cc cf       	rjmp	.-104    	; 0x1628 <SetLeds()+0x2c8>
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	33 e0       	ldi	r19, 0x03	; 3
    1694:	c9 cf       	rjmp	.-110    	; 0x1628 <SetLeds()+0x2c8>
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	34 e0       	ldi	r19, 0x04	; 4
    169a:	c6 cf       	rjmp	.-116    	; 0x1628 <SetLeds()+0x2c8>
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	38 e0       	ldi	r19, 0x08	; 8
    16a0:	c3 cf       	rjmp	.-122    	; 0x1628 <SetLeds()+0x2c8>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e3       	ldi	r19, 0x30	; 48
    16a6:	c0 cf       	rjmp	.-128    	; 0x1628 <SetLeds()+0x2c8>
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e8       	ldi	r19, 0x80	; 128
    16ac:	bd cf       	rjmp	.-134    	; 0x1628 <SetLeds()+0x2c8>
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e4       	ldi	r19, 0x40	; 64
    16b2:	ba cf       	rjmp	.-140    	; 0x1628 <SetLeds()+0x2c8>
    16b4:	10 92 51 1e 	sts	0x1E51, r1	; 0x801e51 <instSlctLed+0x1>
    16b8:	10 92 50 1e 	sts	0x1E50, r1	; 0x801e50 <instSlctLed>
    16bc:	b9 cf       	rjmp	.-142    	; 0x1630 <SetLeds()+0x2d0>
    16be:	85 30       	cpi	r24, 0x05	; 5
    16c0:	91 05       	cpc	r25, r1
    16c2:	08 f4       	brcc	.+2      	; 0x16c6 <SetLeds()+0x366>
    16c4:	d1 c0       	rjmp	.+418    	; 0x1868 <SetLeds()+0x508>
    16c6:	05 97       	sbiw	r24, 0x05	; 5
    16c8:	09 f0       	breq	.+2      	; 0x16cc <SetLeds()+0x36c>
    16ca:	bf cf       	rjmp	.-130    	; 0x164a <SetLeds()+0x2ea>
    16cc:	80 91 4d 1e 	lds	r24, 0x1E4D	; 0x801e4d <muteLeds>
    16d0:	90 91 4e 1e 	lds	r25, 0x1E4E	; 0x801e4e <muteLeds+0x1>
    16d4:	90 93 6e 1e 	sts	0x1E6E, r25	; 0x801e6e <stepLeds+0x1>
    16d8:	80 93 6d 1e 	sts	0x1E6D, r24	; 0x801e6d <stepLeds>
    16dc:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <encBtn+0x2>
    16e0:	88 23       	and	r24, r24
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <SetLeds()+0x386>
    16e4:	b2 cf       	rjmp	.-156    	; 0x164a <SetLeds()+0x2ea>
    16e6:	10 92 4e 1e 	sts	0x1E4E, r1	; 0x801e4e <muteLeds+0x1>
    16ea:	10 92 4d 1e 	sts	0x1E4D, r1	; 0x801e4d <muteLeds>
    16ee:	ad cf       	rjmp	.-166    	; 0x164a <SetLeds()+0x2ea>
    16f0:	30 91 92 04 	lds	r19, 0x0492	; 0x800492 <trk+0x1>
    16f4:	aa 23       	and	r26, r26
    16f6:	a9 f1       	breq	.+106    	; 0x1762 <SetLeds()+0x402>
    16f8:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <blinkFast>
    16fc:	40 91 3d 1e 	lds	r20, 0x1E3D	; 0x801e3d <curStep>
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 c0       	rjmp	.+4      	; 0x170a <SetLeds()+0x3aa>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	3a 95       	dec	r19
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <SetLeds()+0x3a6>
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <SetLeds()+0x3b6>
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	4a 95       	dec	r20
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <SetLeds()+0x3b2>
    171a:	82 27       	eor	r24, r18
    171c:	93 27       	eor	r25, r19
    171e:	0b c0       	rjmp	.+22     	; 0x1736 <SetLeds()+0x3d6>
    1720:	cc 23       	and	r28, r28
    1722:	71 f0       	breq	.+28     	; 0x1740 <SetLeds()+0x3e0>
    1724:	20 91 35 1e 	lds	r18, 0x1E35	; 0x801e35 <curBank>
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <SetLeds()+0x3d2>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	2a 95       	dec	r18
    1734:	e2 f7       	brpl	.-8      	; 0x172e <SetLeds()+0x3ce>
    1736:	90 93 6e 1e 	sts	0x1E6E, r25	; 0x801e6e <stepLeds+0x1>
    173a:	80 93 6d 1e 	sts	0x1E6D, r24	; 0x801e6d <stepLeds>
    173e:	85 cf       	rjmp	.-246    	; 0x164a <SetLeds()+0x2ea>
    1740:	20 91 e1 1e 	lds	r18, 0x1EE1	; 0x801ee1 <numBtn+0x2>
    1744:	22 23       	and	r18, r18
    1746:	19 f0       	breq	.+6      	; 0x174e <SetLeds()+0x3ee>
    1748:	20 91 92 04 	lds	r18, 0x0492	; 0x800492 <trk+0x1>
    174c:	ef cf       	rjmp	.-34     	; 0x172c <SetLeds()+0x3cc>
    174e:	30 91 34 1e 	lds	r19, 0x1E34	; 0x801e34 <curPattern>
    1752:	3f 70       	andi	r19, 0x0F	; 15
    1754:	aa 23       	and	r26, r26
    1756:	29 f0       	breq	.+10     	; 0x1762 <SetLeds()+0x402>
    1758:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <blinkFast>
    175c:	40 91 3d 1e 	lds	r20, 0x1E3D	; 0x801e3d <curStep>
    1760:	d1 cf       	rjmp	.-94     	; 0x1704 <SetLeds()+0x3a4>
    1762:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <blinkTempo>
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 c0       	rjmp	.+4      	; 0x176e <SetLeds()+0x40e>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	3a 95       	dec	r19
    1770:	e2 f7       	brpl	.-8      	; 0x176a <SetLeds()+0x40a>
    1772:	e1 cf       	rjmp	.-62     	; 0x1736 <SetLeds()+0x3d6>
    1774:	c1 11       	cpse	r28, r1
    1776:	d6 cf       	rjmp	.-84     	; 0x1724 <SetLeds()+0x3c4>
    1778:	20 91 c4 0c 	lds	r18, 0x0CC4	; 0x800cc4 <group>
    177c:	b0 91 33 1e 	lds	r27, 0x1E33	; 0x801e33 <nextPattern>
    1780:	bf 70       	andi	r27, 0x0F	; 15
    1782:	a1 11       	cpse	r26, r1
    1784:	2e c0       	rjmp	.+92     	; 0x17e2 <SetLeds()+0x482>
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 91 c5 0c 	lds	r20, 0x0CC5	; 0x800cc5 <group+0x1>
    178c:	4f 70       	andi	r20, 0x0F	; 15
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	e0 e0       	ldi	r30, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	81 2c       	mov	r8, r1
    179a:	91 2c       	mov	r9, r1
    179c:	54 01       	movw	r10, r8
    179e:	83 94       	inc	r8
    17a0:	ec 01       	movw	r28, r24
    17a2:	c4 0f       	add	r28, r20
    17a4:	d5 1f       	adc	r29, r21
    17a6:	75 01       	movw	r14, r10
    17a8:	64 01       	movw	r12, r8
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <SetLeds()+0x454>
    17ac:	cc 0c       	add	r12, r12
    17ae:	dd 1c       	adc	r13, r13
    17b0:	ee 1c       	adc	r14, r14
    17b2:	ff 1c       	adc	r15, r15
    17b4:	ca 95       	dec	r28
    17b6:	d2 f7       	brpl	.-12     	; 0x17ac <SetLeds()+0x44c>
    17b8:	ec 29       	or	r30, r12
    17ba:	fd 29       	or	r31, r13
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	28 17       	cp	r18, r24
    17c0:	39 07       	cpc	r19, r25
    17c2:	74 f7       	brge	.-36     	; 0x17a0 <SetLeds()+0x440>
    17c4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <blinkTempo>
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	89 27       	eor	r24, r25
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <SetLeds()+0x474>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	ba 95       	dec	r27
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <SetLeds()+0x470>
    17d8:	80 95       	com	r24
    17da:	90 95       	com	r25
    17dc:	8e 23       	and	r24, r30
    17de:	9f 23       	and	r25, r31
    17e0:	aa cf       	rjmp	.-172    	; 0x1736 <SetLeds()+0x3d6>
    17e2:	22 23       	and	r18, r18
    17e4:	a1 f1       	breq	.+104    	; 0x184e <SetLeds()+0x4ee>
    17e6:	40 91 c5 0c 	lds	r20, 0x0CC5	; 0x800cc5 <group+0x1>
    17ea:	4f 70       	andi	r20, 0x0F	; 15
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	e0 e0       	ldi	r30, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	81 2c       	mov	r8, r1
    17fa:	91 2c       	mov	r9, r1
    17fc:	54 01       	movw	r10, r8
    17fe:	83 94       	inc	r8
    1800:	28 17       	cp	r18, r24
    1802:	39 07       	cpc	r19, r25
    1804:	84 f0       	brlt	.+32     	; 0x1826 <SetLeds()+0x4c6>
    1806:	ec 01       	movw	r28, r24
    1808:	c4 0f       	add	r28, r20
    180a:	d5 1f       	adc	r29, r21
    180c:	75 01       	movw	r14, r10
    180e:	64 01       	movw	r12, r8
    1810:	04 c0       	rjmp	.+8      	; 0x181a <SetLeds()+0x4ba>
    1812:	cc 0c       	add	r12, r12
    1814:	dd 1c       	adc	r13, r13
    1816:	ee 1c       	adc	r14, r14
    1818:	ff 1c       	adc	r15, r15
    181a:	ca 95       	dec	r28
    181c:	d2 f7       	brpl	.-12     	; 0x1812 <SetLeds()+0x4b2>
    181e:	ec 29       	or	r30, r12
    1820:	fd 29       	or	r31, r13
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	ed cf       	rjmp	.-38     	; 0x1800 <SetLeds()+0x4a0>
    1826:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <blinkTempo>
    182a:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <blinkFast>
    182e:	40 91 3d 1e 	lds	r20, 0x1E3D	; 0x801e3d <curStep>
    1832:	91 e0       	ldi	r25, 0x01	; 1
    1834:	98 27       	eor	r25, r24
    1836:	89 2f       	mov	r24, r25
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <SetLeds()+0x4e0>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	ba 95       	dec	r27
    1842:	e2 f7       	brpl	.-8      	; 0x183c <SetLeds()+0x4dc>
    1844:	80 95       	com	r24
    1846:	90 95       	com	r25
    1848:	8e 23       	and	r24, r30
    184a:	9f 23       	and	r25, r31
    184c:	60 cf       	rjmp	.-320    	; 0x170e <SetLeds()+0x3ae>
    184e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <blinkTempo>
    1852:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <blinkFast>
    1856:	40 91 3d 1e 	lds	r20, 0x1E3D	; 0x801e3d <curStep>
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <SetLeds()+0x502>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	ba 95       	dec	r27
    1864:	e2 f7       	brpl	.-8      	; 0x185e <SetLeds()+0x4fe>
    1866:	53 cf       	rjmp	.-346    	; 0x170e <SetLeds()+0x3ae>
    1868:	44 23       	and	r20, r20
    186a:	11 f1       	breq	.+68     	; 0x18b0 <SetLeds()+0x550>
    186c:	80 91 4f 1e 	lds	r24, 0x1E4F	; 0x801e4f <flagLedIntensity>
    1870:	20 91 50 1e 	lds	r18, 0x1E50	; 0x801e50 <instSlctLed>
    1874:	30 91 51 1e 	lds	r19, 0x1E51	; 0x801e51 <instSlctLed+0x1>
    1878:	88 30       	cpi	r24, 0x08	; 8
    187a:	38 f0       	brcs	.+14     	; 0x188a <SetLeds()+0x52a>
    187c:	30 93 6e 1e 	sts	0x1E6E, r19	; 0x801e6e <stepLeds+0x1>
    1880:	20 93 6d 1e 	sts	0x1E6D, r18	; 0x801e6d <stepLeds>
    1884:	10 92 4f 1e 	sts	0x1E4F, r1	; 0x801e4f <flagLedIntensity>
    1888:	e0 ce       	rjmp	.-576    	; 0x164a <SetLeds()+0x2ea>
    188a:	bf 30       	cpi	r27, 0x0F	; 15
    188c:	51 f4       	brne	.+20     	; 0x18a2 <SetLeds()+0x542>
    188e:	25 75       	andi	r18, 0x55	; 85
    1890:	3d 7f       	andi	r19, 0xFD	; 253
    1892:	30 93 6e 1e 	sts	0x1E6E, r19	; 0x801e6e <stepLeds+0x1>
    1896:	20 93 6d 1e 	sts	0x1E6D, r18	; 0x801e6d <stepLeds>
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	80 93 4f 1e 	sts	0x1E4F, r24	; 0x801e4f <flagLedIntensity>
    18a0:	d4 ce       	rjmp	.-600    	; 0x164a <SetLeds()+0x2ea>
    18a2:	90 91 36 1e 	lds	r25, 0x1E36	; 0x801e36 <curFlam>
    18a6:	91 11       	cpse	r25, r1
    18a8:	f4 cf       	rjmp	.-24     	; 0x1892 <SetLeds()+0x532>
    18aa:	25 75       	andi	r18, 0x55	; 85
    18ac:	3d 7d       	andi	r19, 0xDD	; 221
    18ae:	f1 cf       	rjmp	.-30     	; 0x1892 <SetLeds()+0x532>
    18b0:	55 23       	and	r21, r21
    18b2:	c9 f1       	breq	.+114    	; 0x1926 <SetLeds()+0x5c6>
    18b4:	20 91 4f 1e 	lds	r18, 0x1E4F	; 0x801e4f <flagLedIntensity>
    18b8:	28 30       	cpi	r18, 0x08	; 8
    18ba:	38 f0       	brcs	.+14     	; 0x18ca <SetLeds()+0x56a>
    18bc:	8f e7       	ldi	r24, 0x7F	; 127
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	90 93 6e 1e 	sts	0x1E6E, r25	; 0x801e6e <stepLeds+0x1>
    18c4:	80 93 6d 1e 	sts	0x1E6D, r24	; 0x801e6d <stepLeds>
    18c8:	dd cf       	rjmp	.-70     	; 0x1884 <SetLeds()+0x524>
    18ca:	30 91 ce 0c 	lds	r19, 0x0CCE	; 0x800cce <ptrnBuffer>
    18ce:	49 ec       	ldi	r20, 0xC9	; 201
    18d0:	55 e0       	ldi	r21, 0x05	; 5
    18d2:	34 9f       	mul	r19, r20
    18d4:	c0 01       	movw	r24, r0
    18d6:	35 9f       	mul	r19, r21
    18d8:	90 0d       	add	r25, r0
    18da:	11 24       	eor	r1, r1
    18dc:	88 56       	subi	r24, 0x68	; 104
    18de:	9d 4e       	sbci	r25, 0xED	; 237
    18e0:	fc 01       	movw	r30, r24
    18e2:	ed 5f       	subi	r30, 0xFD	; 253
    18e4:	fb 4f       	sbci	r31, 0xFB	; 251
    18e6:	e0 81       	ld	r30, Z
    18e8:	e1 50       	subi	r30, 0x01	; 1
    18ea:	ff 0b       	sbc	r31, r31
    18ec:	41 e0       	ldi	r20, 0x01	; 1
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	da 01       	movw	r26, r20
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <SetLeds()+0x598>
    18f4:	aa 0f       	add	r26, r26
    18f6:	bb 1f       	adc	r27, r27
    18f8:	ea 95       	dec	r30
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <SetLeds()+0x594>
    18fc:	fd 01       	movw	r30, r26
    18fe:	8c 5f       	subi	r24, 0xFC	; 252
    1900:	9b 4f       	sbci	r25, 0xFB	; 251
    1902:	dc 01       	movw	r26, r24
    1904:	8c 91       	ld	r24, X
    1906:	88 5f       	subi	r24, 0xF8	; 248
    1908:	02 c0       	rjmp	.+4      	; 0x190e <SetLeds()+0x5ae>
    190a:	44 0f       	add	r20, r20
    190c:	55 1f       	adc	r21, r21
    190e:	8a 95       	dec	r24
    1910:	e2 f7       	brpl	.-8      	; 0x190a <SetLeds()+0x5aa>
    1912:	4e 2b       	or	r20, r30
    1914:	5f 2b       	or	r21, r31
    1916:	50 93 6e 1e 	sts	0x1E6E, r21	; 0x801e6e <stepLeds+0x1>
    191a:	40 93 6d 1e 	sts	0x1E6D, r20	; 0x801e6d <stepLeds>
    191e:	2f 5f       	subi	r18, 0xFF	; 255
    1920:	20 93 4f 1e 	sts	0x1E4F, r18	; 0x801e4f <flagLedIntensity>
    1924:	92 ce       	rjmp	.-732    	; 0x164a <SetLeds()+0x2ea>
    1926:	aa 23       	and	r26, r26
    1928:	09 f4       	brne	.+2      	; 0x192c <SetLeds()+0x5cc>
    192a:	b0 c0       	rjmp	.+352    	; 0x1a8c <SetLeds()+0x72c>
    192c:	8b 2f       	mov	r24, r27
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	00 91 36 1e 	lds	r16, 0x1E36	; 0x801e36 <curFlam>
    1934:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    1938:	5c 01       	movw	r10, r24
    193a:	24 e0       	ldi	r18, 0x04	; 4
    193c:	aa 0c       	add	r10, r10
    193e:	bb 1c       	adc	r11, r11
    1940:	2a 95       	dec	r18
    1942:	e1 f7       	brne	.-8      	; 0x193c <SetLeds()+0x5dc>
    1944:	29 ec       	ldi	r18, 0xC9	; 201
    1946:	35 e0       	ldi	r19, 0x05	; 5
    1948:	42 9f       	mul	r20, r18
    194a:	f0 01       	movw	r30, r0
    194c:	43 9f       	mul	r20, r19
    194e:	f0 0d       	add	r31, r0
    1950:	11 24       	eor	r1, r1
    1952:	ae 0e       	add	r10, r30
    1954:	bf 1e       	adc	r11, r31
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	c1 2c       	mov	r12, r1
    1964:	d1 2c       	mov	r13, r1
    1966:	76 01       	movw	r14, r12
    1968:	c3 94       	inc	r12
    196a:	ec 01       	movw	r28, r24
    196c:	cc 0f       	add	r28, r28
    196e:	dd 1f       	adc	r29, r29
    1970:	ce 0f       	add	r28, r30
    1972:	df 1f       	adc	r29, r31
    1974:	c3 56       	subi	r28, 0x63	; 99
    1976:	d9 4e       	sbci	r29, 0xE9	; 233
    1978:	fc 01       	movw	r30, r24
    197a:	e1 57       	subi	r30, 0x71	; 113
    197c:	fe 4f       	sbci	r31, 0xFE	; 254
    197e:	1f 01       	movw	r2, r30
    1980:	c9 01       	movw	r24, r18
    1982:	8a 0d       	add	r24, r10
    1984:	9b 1d       	adc	r25, r11
    1986:	83 52       	subi	r24, 0x23	; 35
    1988:	99 4e       	sbci	r25, 0xE9	; 233
    198a:	fc 01       	movw	r30, r24
    198c:	10 81       	ld	r17, Z
    198e:	00 23       	and	r16, r16
    1990:	09 f4       	brne	.+2      	; 0x1994 <SetLeds()+0x634>
    1992:	44 c0       	rjmp	.+136    	; 0x1a1c <SetLeds()+0x6bc>
    1994:	17 ff       	sbrs	r17, 7
    1996:	5e c0       	rjmp	.+188    	; 0x1a54 <SetLeds()+0x6f4>
    1998:	88 81       	ld	r24, Y
    199a:	99 81       	ldd	r25, Y+1	; 0x01
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <SetLeds()+0x644>
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <SetLeds()+0x640>
    19a8:	81 70       	andi	r24, 0x01	; 1
    19aa:	99 27       	eor	r25, r25
    19ac:	1f 77       	andi	r17, 0x7F	; 127
    19ae:	f1 01       	movw	r30, r2
    19b0:	90 80       	ld	r9, Z
    19b2:	91 16       	cp	r9, r17
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <SetLeds()+0x658>
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <SetLeds()+0x6d6>
    19b8:	89 2b       	or	r24, r25
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <SetLeds()+0x674>
    19bc:	26 01       	movw	r4, r12
    19be:	37 01       	movw	r6, r14
    19c0:	02 2e       	mov	r0, r18
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <SetLeds()+0x66c>
    19c4:	44 0c       	add	r4, r4
    19c6:	55 1c       	adc	r5, r5
    19c8:	66 1c       	adc	r6, r6
    19ca:	77 1c       	adc	r7, r7
    19cc:	0a 94       	dec	r0
    19ce:	d2 f7       	brpl	.-12     	; 0x19c4 <SetLeds()+0x664>
    19d0:	44 29       	or	r20, r4
    19d2:	55 29       	or	r21, r5
    19d4:	2f 5f       	subi	r18, 0xFF	; 255
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	20 31       	cpi	r18, 0x10	; 16
    19da:	31 05       	cpc	r19, r1
    19dc:	89 f6       	brne	.-94     	; 0x1980 <SetLeds()+0x620>
    19de:	50 93 6c 1e 	sts	0x1E6C, r21	; 0x801e6c <stepLedsHigh+0x1>
    19e2:	40 93 6b 1e 	sts	0x1E6B, r20	; 0x801e6b <stepLedsHigh>
    19e6:	b0 93 6a 1e 	sts	0x1E6A, r27	; 0x801e6a <stepLedsLow+0x1>
    19ea:	a0 93 69 1e 	sts	0x1E69, r26	; 0x801e69 <stepLedsLow>
    19ee:	20 91 4f 1e 	lds	r18, 0x1E4F	; 0x801e4f <flagLedIntensity>
    19f2:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <blinkFast>
    19f6:	28 30       	cpi	r18, 0x08	; 8
    19f8:	f0 f1       	brcs	.+124    	; 0x1a76 <SetLeds()+0x716>
    19fa:	20 91 3d 1e 	lds	r18, 0x1E3D	; 0x801e3d <curStep>
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <SetLeds()+0x6a6>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	2a 95       	dec	r18
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <SetLeds()+0x6a2>
    1a0a:	a8 27       	eor	r26, r24
    1a0c:	b9 27       	eor	r27, r25
    1a0e:	4a 2b       	or	r20, r26
    1a10:	5b 2b       	or	r21, r27
    1a12:	50 93 6e 1e 	sts	0x1E6E, r21	; 0x801e6e <stepLeds+0x1>
    1a16:	40 93 6d 1e 	sts	0x1E6D, r20	; 0x801e6d <stepLeds>
    1a1a:	34 cf       	rjmp	.-408    	; 0x1884 <SetLeds()+0x524>
    1a1c:	17 fd       	sbrc	r17, 7
    1a1e:	1a c0       	rjmp	.+52     	; 0x1a54 <SetLeds()+0x6f4>
    1a20:	88 81       	ld	r24, Y
    1a22:	99 81       	ldd	r25, Y+1	; 0x01
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <SetLeds()+0x6cc>
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <SetLeds()+0x6c8>
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	99 27       	eor	r25, r25
    1a34:	bc cf       	rjmp	.-136    	; 0x19ae <SetLeds()+0x64e>
    1a36:	89 2b       	or	r24, r25
    1a38:	69 f2       	breq	.-102    	; 0x19d4 <SetLeds()+0x674>
    1a3a:	26 01       	movw	r4, r12
    1a3c:	37 01       	movw	r6, r14
    1a3e:	02 2e       	mov	r0, r18
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <SetLeds()+0x6ea>
    1a42:	44 0c       	add	r4, r4
    1a44:	55 1c       	adc	r5, r5
    1a46:	66 1c       	adc	r6, r6
    1a48:	77 1c       	adc	r7, r7
    1a4a:	0a 94       	dec	r0
    1a4c:	d2 f7       	brpl	.-12     	; 0x1a42 <SetLeds()+0x6e2>
    1a4e:	a4 29       	or	r26, r4
    1a50:	b5 29       	or	r27, r5
    1a52:	c0 cf       	rjmp	.-128    	; 0x19d4 <SetLeds()+0x674>
    1a54:	26 01       	movw	r4, r12
    1a56:	37 01       	movw	r6, r14
    1a58:	02 2e       	mov	r0, r18
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <SetLeds()+0x704>
    1a5c:	44 0c       	add	r4, r4
    1a5e:	55 1c       	adc	r5, r5
    1a60:	66 1c       	adc	r6, r6
    1a62:	77 1c       	adc	r7, r7
    1a64:	0a 94       	dec	r0
    1a66:	d2 f7       	brpl	.-12     	; 0x1a5c <SetLeds()+0x6fc>
    1a68:	40 94       	com	r4
    1a6a:	50 94       	com	r5
    1a6c:	44 21       	and	r20, r4
    1a6e:	55 21       	and	r21, r5
    1a70:	a4 21       	and	r26, r4
    1a72:	b5 21       	and	r27, r5
    1a74:	af cf       	rjmp	.-162    	; 0x19d4 <SetLeds()+0x674>
    1a76:	30 91 3d 1e 	lds	r19, 0x1E3D	; 0x801e3d <curStep>
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <SetLeds()+0x722>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	3a 95       	dec	r19
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <SetLeds()+0x71e>
    1a86:	48 27       	eor	r20, r24
    1a88:	59 27       	eor	r21, r25
    1a8a:	45 cf       	rjmp	.-374    	; 0x1916 <SetLeds()+0x5b6>
    1a8c:	c1 11       	cpse	r28, r1
    1a8e:	4a ce       	rjmp	.-876    	; 0x1724 <SetLeds()+0x3c4>
    1a90:	a0 91 c4 0c 	lds	r26, 0x0CC4	; 0x800cc4 <group>
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	90 91 c5 0c 	lds	r25, 0x0CC5	; 0x800cc5 <group+0x1>
    1a9a:	9f 70       	andi	r25, 0x0F	; 15
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	e0 e0       	ldi	r30, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	29 2f       	mov	r18, r25
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 2c       	mov	r8, r1
    1aaa:	91 2c       	mov	r9, r1
    1aac:	54 01       	movw	r10, r8
    1aae:	83 94       	inc	r8
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	82 0f       	add	r24, r18
    1ab4:	93 1f       	adc	r25, r19
    1ab6:	75 01       	movw	r14, r10
    1ab8:	64 01       	movw	r12, r8
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <SetLeds()+0x764>
    1abc:	cc 0c       	add	r12, r12
    1abe:	dd 1c       	adc	r13, r13
    1ac0:	ee 1c       	adc	r14, r14
    1ac2:	ff 1c       	adc	r15, r15
    1ac4:	8a 95       	dec	r24
    1ac6:	d2 f7       	brpl	.-12     	; 0x1abc <SetLeds()+0x75c>
    1ac8:	ec 29       	or	r30, r12
    1aca:	fd 29       	or	r31, r13
    1acc:	4f 5f       	subi	r20, 0xFF	; 255
    1ace:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad0:	a4 17       	cp	r26, r20
    1ad2:	b5 07       	cpc	r27, r21
    1ad4:	6c f7       	brge	.-38     	; 0x1ab0 <SetLeds()+0x750>
    1ad6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <blinkTempo>
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	89 27       	eor	r24, r25
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	20 91 34 1e 	lds	r18, 0x1E34	; 0x801e34 <curPattern>
    1ae4:	2f 70       	andi	r18, 0x0F	; 15
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <SetLeds()+0x78c>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	2a 95       	dec	r18
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <SetLeds()+0x788>
    1af0:	73 ce       	rjmp	.-794    	; 0x17d8 <SetLeds()+0x478>

00001af2 <InitMidiRealTime()>:
_Z16InitMidiRealTimev():
    1af2:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <midiStart>
    1af6:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <midiStop>
    1afa:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <midiContinue>
    1afe:	08 95       	ret

00001b00 <MidiSendNoteOff(unsigned char, unsigned char)>:
_Z15MidiSendNoteOffhh():
    1b00:	64 5f       	subi	r22, 0xF4	; 244
    1b02:	28 2f       	mov	r18, r24
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	8b e1       	ldi	r24, 0x1B	; 27
    1b08:	90 e2       	ldi	r25, 0x20	; 32
    1b0a:	0c 94 de 3f 	jmp	0x7fbc	; 0x7fbc <MIDI_Class::sendNoteOff(unsigned char, unsigned char, unsigned char)>

00001b0e <InitMidiNoteOff()>:
_Z15InitMidiNoteOffv():
    1b0e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <midiNoteOnActive>
    1b12:	88 23       	and	r24, r24
    1b14:	b1 f1       	breq	.+108    	; 0x1b82 <InitMidiNoteOff()+0x74>
    1b16:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <midiNoteOnActive>
    1b1a:	90 91 3a 1e 	lds	r25, 0x1E3A	; 0x801e3a <noteIndexCpt>
    1b1e:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    1b28:	99 23       	and	r25, r25
    1b2a:	a9 f0       	breq	.+42     	; 0x1b56 <InitMidiNoteOff()+0x48>
    1b2c:	e0 91 3a 1e 	lds	r30, 0x1E3A	; 0x801e3a <noteIndexCpt>
    1b30:	69 ec       	ldi	r22, 0xC9	; 201
    1b32:	75 e0       	ldi	r23, 0x05	; 5
    1b34:	26 9f       	mul	r18, r22
    1b36:	a0 01       	movw	r20, r0
    1b38:	27 9f       	mul	r18, r23
    1b3a:	50 0d       	add	r21, r0
    1b3c:	36 9f       	mul	r19, r22
    1b3e:	50 0d       	add	r21, r0
    1b40:	11 24       	eor	r1, r1
    1b42:	48 56       	subi	r20, 0x68	; 104
    1b44:	5d 4e       	sbci	r21, 0xED	; 237
    1b46:	e4 0f       	add	r30, r20
    1b48:	f5 2f       	mov	r31, r21
    1b4a:	f1 1d       	adc	r31, r1
    1b4c:	ec 5b       	subi	r30, 0xBC	; 188
    1b4e:	fa 4f       	sbci	r31, 0xFA	; 250
    1b50:	60 81       	ld	r22, Z
    1b52:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <MidiSendNoteOff(unsigned char, unsigned char)>
    1b56:	49 ec       	ldi	r20, 0xC9	; 201
    1b58:	55 e0       	ldi	r21, 0x05	; 5
    1b5a:	24 9f       	mul	r18, r20
    1b5c:	f0 01       	movw	r30, r0
    1b5e:	25 9f       	mul	r18, r21
    1b60:	f0 0d       	add	r31, r0
    1b62:	34 9f       	mul	r19, r20
    1b64:	f0 0d       	add	r31, r0
    1b66:	11 24       	eor	r1, r1
    1b68:	9f 01       	movw	r18, r30
    1b6a:	28 56       	subi	r18, 0x68	; 104
    1b6c:	3d 4e       	sbci	r19, 0xED	; 237
    1b6e:	f9 01       	movw	r30, r18
    1b70:	eb 53       	subi	r30, 0x3B	; 59
    1b72:	fa 4f       	sbci	r31, 0xFA	; 250
    1b74:	e0 81       	ld	r30, Z
    1b76:	e2 0f       	add	r30, r18
    1b78:	f3 2f       	mov	r31, r19
    1b7a:	f1 1d       	adc	r31, r1
    1b7c:	eb 5b       	subi	r30, 0xBB	; 187
    1b7e:	fa 4f       	sbci	r31, 0xFA	; 250
    1b80:	e7 cf       	rjmp	.-50     	; 0x1b50 <InitMidiNoteOff()+0x42>
    1b82:	08 95       	ret

00001b84 <MidiSendNoteOn(unsigned char, unsigned char, unsigned char)>:
_Z14MidiSendNoteOnhhh():
    1b84:	64 5f       	subi	r22, 0xF4	; 244
    1b86:	28 2f       	mov	r18, r24
    1b88:	8b e1       	ldi	r24, 0x1B	; 27
    1b8a:	90 e2       	ldi	r25, 0x20	; 32
    1b8c:	0c 94 d4 3f 	jmp	0x7fa8	; 0x7fa8 <MIDI_Class::sendNoteOn(unsigned char, unsigned char, unsigned char)>

00001b90 <ConnectMidiHandleRealTime()>:
_Z25ConnectMidiHandleRealTimev():
    1b90:	66 ed       	ldi	r22, 0xD6	; 214
    1b92:	7d e1       	ldi	r23, 0x1D	; 29
    1b94:	8b e1       	ldi	r24, 0x1B	; 27
    1b96:	90 e2       	ldi	r25, 0x20	; 32
    1b98:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <MIDI_Class::setHandleClock(void (*)())>
    1b9c:	67 e2       	ldi	r22, 0x27	; 39
    1b9e:	71 e0       	ldi	r23, 0x01	; 1
    1ba0:	8b e1       	ldi	r24, 0x1B	; 27
    1ba2:	90 e2       	ldi	r25, 0x20	; 32
    1ba4:	0e 94 b4 3d 	call	0x7b68	; 0x7b68 <MIDI_Class::setHandleStart(void (*)())>
    1ba8:	6b e2       	ldi	r22, 0x2B	; 43
    1baa:	71 e0       	ldi	r23, 0x01	; 1
    1bac:	8b e1       	ldi	r24, 0x1B	; 27
    1bae:	90 e2       	ldi	r25, 0x20	; 32
    1bb0:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <MIDI_Class::setHandleStop(void (*)())>
    1bb4:	6f e2       	ldi	r22, 0x2F	; 47
    1bb6:	71 e0       	ldi	r23, 0x01	; 1
    1bb8:	8b e1       	ldi	r24, 0x1B	; 27
    1bba:	90 e2       	ldi	r25, 0x20	; 32
    1bbc:	0c 94 ba 3d 	jmp	0x7b74	; 0x7b74 <MIDI_Class::setHandleContinue(void (*)())>

00001bc0 <DisconnectMidiHandleRealTime()>:
_Z28DisconnectMidiHandleRealTimev():
    1bc0:	68 ef       	ldi	r22, 0xF8	; 248
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	8b e1       	ldi	r24, 0x1B	; 27
    1bc6:	90 e2       	ldi	r25, 0x20	; 32
    1bc8:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <MIDI_Class::disconnectCallbackFromType(kMIDIType)>
    1bcc:	6a ef       	ldi	r22, 0xFA	; 250
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	8b e1       	ldi	r24, 0x1B	; 27
    1bd2:	90 e2       	ldi	r25, 0x20	; 32
    1bd4:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <MIDI_Class::disconnectCallbackFromType(kMIDIType)>
    1bd8:	6c ef       	ldi	r22, 0xFC	; 252
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	8b e1       	ldi	r24, 0x1B	; 27
    1bde:	90 e2       	ldi	r25, 0x20	; 32
    1be0:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <MIDI_Class::disconnectCallbackFromType(kMIDIType)>
    1be4:	6b ef       	ldi	r22, 0xFB	; 251
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	8b e1       	ldi	r24, 0x1B	; 27
    1bea:	90 e2       	ldi	r25, 0x20	; 32
    1bec:	0c 94 c6 3d 	jmp	0x7b8c	; 0x7b8c <MIDI_Class::disconnectCallbackFromType(kMIDIType)>

00001bf0 <ConnectMidiHandleNote()>:
_Z21ConnectMidiHandleNotev():
    1bf0:	65 e0       	ldi	r22, 0x05	; 5
    1bf2:	71 e1       	ldi	r23, 0x11	; 17
    1bf4:	8b e1       	ldi	r24, 0x1B	; 27
    1bf6:	90 e2       	ldi	r25, 0x20	; 32
    1bf8:	0e 94 a8 3d 	call	0x7b50	; 0x7b50 <MIDI_Class::setHandleNoteOn(void (*)(unsigned char, unsigned char, unsigned char))>
    1bfc:	60 e9       	ldi	r22, 0x90	; 144
    1bfe:	71 e1       	ldi	r23, 0x11	; 17
    1c00:	8b e1       	ldi	r24, 0x1B	; 27
    1c02:	90 e2       	ldi	r25, 0x20	; 32
    1c04:	0c 94 a2 3d 	jmp	0x7b44	; 0x7b44 <MIDI_Class::setHandleNoteOff(void (*)(unsigned char, unsigned char, unsigned char))>

00001c08 <DisconnectMidiHandleNote()>:
_Z24DisconnectMidiHandleNotev():
    1c08:	60 e9       	ldi	r22, 0x90	; 144
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	8b e1       	ldi	r24, 0x1B	; 27
    1c0e:	90 e2       	ldi	r25, 0x20	; 32
    1c10:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <MIDI_Class::disconnectCallbackFromType(kMIDIType)>
    1c14:	60 e8       	ldi	r22, 0x80	; 128
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	8b e1       	ldi	r24, 0x1B	; 27
    1c1a:	90 e2       	ldi	r25, 0x20	; 32
    1c1c:	0c 94 c6 3d 	jmp	0x7b8c	; 0x7b8c <MIDI_Class::disconnectCallbackFromType(kMIDIType)>

00001c20 <SendAllNoteOff()>:
_Z14SendAllNoteOffv():
    1c20:	20 91 42 1e 	lds	r18, 0x1E42	; 0x801e42 <seq+0x3>
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	6b e7       	ldi	r22, 0x7B	; 123
    1c28:	8b e1       	ldi	r24, 0x1B	; 27
    1c2a:	90 e2       	ldi	r25, 0x20	; 32
    1c2c:	0c 94 e8 3f 	jmp	0x7fd0	; 0x7fd0 <MIDI_Class::sendControlChange(unsigned char, unsigned char, unsigned char)>

00001c30 <SelectFirstMux()>:
_Z14SelectFirstMuxv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:177
  }
}

//Select IC114
void SelectFirstMux(){
  delayMicroseconds(15);                                          //Wait stabilisation  [zabox] moved for better visibility, 15us are enough (4,1v/(0.55v/us) slew rate + 4us settling time = max 12us, verified with scope)
    1c30:	8f e0       	ldi	r24, 0x0F	; 15
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:178
  MUX_INH1_LOW;
    1c38:	5e 98       	cbi	0x0b, 6	; 11
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:179
  delayMicroseconds(5);                                           // [zabox] charge s/h caps
    1c3a:	85 e0       	ldi	r24, 0x05	; 5
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:180
  MUX_INH1_HIGH;                                                  // [1.028] moved from deselect function
    1c42:	5e 9a       	sbi	0x0b, 6	; 11
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:181
}
    1c44:	08 95       	ret

00001c46 <SetMuxFlam()>:
_Z10SetMuxFlamv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:59
  
}



void SetMuxFlam() {
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cf e7       	ldi	r28, 0x7F	; 127
    1c54:	d1 e0       	ldi	r29, 0x01	; 1
    1c56:	09 e8       	ldi	r16, 0x89	; 137
    1c58:	11 e0       	ldi	r17, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:64
 
 for (byte a = 0; a < 5; a++){
    if(bitRead (stepValueFlam, muxInst[a])){  
      //DeselectFirstMux();//Unselect Multiplexer
      byte vel = pattern[ptrnBuffer].velocity[muxInst[a]][curStep];                   // [zabox] [1.028] flam
    1c5a:	39 ec       	ldi	r19, 0xC9	; 201
    1c5c:	e3 2e       	mov	r14, r19
    1c5e:	35 e0       	ldi	r19, 0x05	; 5
    1c60:	f3 2e       	mov	r15, r19
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:62


void SetMuxFlam() {
 
 for (byte a = 0; a < 5; a++){
    if(bitRead (stepValueFlam, muxInst[a])){  
    1c62:	20 91 2f 1e 	lds	r18, 0x1E2F	; 0x801e2f <stepValueFlam>
    1c66:	30 91 30 1e 	lds	r19, 0x1E30	; 0x801e30 <stepValueFlam+0x1>
    1c6a:	49 91       	ld	r20, Y+
    1c6c:	84 2f       	mov	r24, r20
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <SetMuxFlam()+0x30>
    1c72:	36 95       	lsr	r19
    1c74:	27 95       	ror	r18
    1c76:	4a 95       	dec	r20
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <SetMuxFlam()+0x2c>
    1c7a:	20 ff       	sbrs	r18, 0
    1c7c:	46 c0       	rjmp	.+140    	; 0x1d0a <SetMuxFlam()+0xc4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:64
      //DeselectFirstMux();//Unselect Multiplexer
      byte vel = pattern[ptrnBuffer].velocity[muxInst[a]][curStep];                   // [zabox] [1.028] flam
    1c7e:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	e0 91 3d 1e 	lds	r30, 0x1E3D	; 0x801e3d <curStep>
    1c88:	24 e0       	ldi	r18, 0x04	; 4
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	2a 95       	dec	r18
    1c90:	e1 f7       	brne	.-8      	; 0x1c8a <SetMuxFlam()+0x44>
    1c92:	4e 9d       	mul	r20, r14
    1c94:	90 01       	movw	r18, r0
    1c96:	4f 9d       	mul	r20, r15
    1c98:	30 0d       	add	r19, r0
    1c9a:	5e 9d       	mul	r21, r14
    1c9c:	30 0d       	add	r19, r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	82 0f       	add	r24, r18
    1ca2:	93 1f       	adc	r25, r19
    1ca4:	88 56       	subi	r24, 0x68	; 104
    1ca6:	9d 4e       	sbci	r25, 0xED	; 237
    1ca8:	e8 0f       	add	r30, r24
    1caa:	f9 2f       	mov	r31, r25
    1cac:	f1 1d       	adc	r31, r1
    1cae:	eb 5b       	subi	r30, 0xBB	; 187
    1cb0:	fb 4f       	sbci	r31, 0xFB	; 251
    1cb2:	90 81       	ld	r25, Z
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:65
      if (bitRead(vel, 7)) {
    1cb4:	97 fd       	sbrc	r25, 7
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:66
        vel &= 127;
    1cb6:	9f 77       	andi	r25, 0x7F	; 127
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:68
      }
      SetDacA(vel + ((bitRead(pattern[ptrnBuffer].inst[TOTAL_ACC], curStep)) ? (pattern[ptrnBuffer].totalAcc * 4) : 0));//Set DAC Value 
    1cb8:	80 91 3d 1e 	lds	r24, 0x1E3D	; 0x801e3d <curStep>
    1cbc:	4e 9d       	mul	r20, r14
    1cbe:	90 01       	movw	r18, r0
    1cc0:	4f 9d       	mul	r20, r15
    1cc2:	30 0d       	add	r19, r0
    1cc4:	5e 9d       	mul	r21, r14
    1cc6:	30 0d       	add	r19, r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	28 56       	subi	r18, 0x68	; 104
    1ccc:	3d 4e       	sbci	r19, 0xED	; 237
    1cce:	f9 01       	movw	r30, r18
    1cd0:	e3 5e       	subi	r30, 0xE3	; 227
    1cd2:	fb 4f       	sbci	r31, 0xFB	; 251
    1cd4:	40 81       	ld	r20, Z
    1cd6:	51 81       	ldd	r21, Z+1	; 0x01
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <SetMuxFlam()+0x98>
    1cda:	56 95       	lsr	r21
    1cdc:	47 95       	ror	r20
    1cde:	8a 95       	dec	r24
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <SetMuxFlam()+0x94>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	40 ff       	sbrs	r20, 0
    1ce6:	06 c0       	rjmp	.+12     	; 0x1cf4 <SetMuxFlam()+0xae>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:68 (discriminator 1)
    1ce8:	28 53       	subi	r18, 0x38	; 56
    1cea:	3a 4f       	sbci	r19, 0xFA	; 250
    1cec:	f9 01       	movw	r30, r18
    1cee:	80 81       	ld	r24, Z
    1cf0:	88 0f       	add	r24, r24
    1cf2:	88 0f       	add	r24, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:68 (discriminator 4)
    1cf4:	89 0f       	add	r24, r25
    1cf6:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:70 (discriminator 4)
      //Set Multiplexer address
      PORTA = (PORTA & 0b00011111) | muxAddr[a];//Mask to clear last 3 bits of the PORTA
    1cfa:	82 b1       	in	r24, 0x02	; 2
    1cfc:	8f 71       	andi	r24, 0x1F	; 31
    1cfe:	f8 01       	movw	r30, r16
    1d00:	90 81       	ld	r25, Z
    1d02:	89 2b       	or	r24, r25
    1d04:	82 b9       	out	0x02, r24	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:71 (discriminator 4)
      SelectFirstMux();//Set the value to the multiplexer out
    1d06:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <SelectFirstMux()>
    1d0a:	0f 5f       	subi	r16, 0xFF	; 255
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:61 (discriminator 2)



void SetMuxFlam() {
 
 for (byte a = 0; a < 5; a++){
    1d0e:	f1 e0       	ldi	r31, 0x01	; 1
    1d10:	c4 38       	cpi	r28, 0x84	; 132
    1d12:	df 07       	cpc	r29, r31
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <SetMuxFlam()+0xd2>
    1d16:	a5 cf       	rjmp	.-182    	; 0x1c62 <SetMuxFlam()+0x1c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:75
      PORTA = (PORTA & 0b00011111) | muxAddr[a];//Mask to clear last 3 bits of the PORTA
      SelectFirstMux();//Set the value to the multiplexer out
    }
  }
  //DeselectFirstMux();//Unselect Multiplexer
}
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	08 95       	ret

00001d26 <__vector_32>:
__vector_32():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:22
  SetDoutTrig(tempDoutTrig);
}  
  


ISR(TIMER3_COMPA_vect) {       // [zabox] flam
    1d26:	1f 92       	push	r1
    1d28:	0f 92       	push	r0
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	0f 92       	push	r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	0b b6       	in	r0, 0x3b	; 59
    1d32:	0f 92       	push	r0
    1d34:	2f 93       	push	r18
    1d36:	3f 93       	push	r19
    1d38:	4f 93       	push	r20
    1d3a:	5f 93       	push	r21
    1d3c:	6f 93       	push	r22
    1d3e:	7f 93       	push	r23
    1d40:	8f 93       	push	r24
    1d42:	9f 93       	push	r25
    1d44:	af 93       	push	r26
    1d46:	bf 93       	push	r27
    1d48:	ef 93       	push	r30
    1d4a:	ff 93       	push	r31
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:24

  FLAM_TIMER_STOP;
    1d4c:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:25
  FLAM_TIMER_ZERO;
    1d50:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1d54:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:27

  SetMuxFlam();
    1d58:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <SetMuxFlam()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:29
 
  SetDoutTrig(stepValueFlam & (~muteInst) | tempDoutTrig);//Send TempDoutTrig too to prevet tick noise on HH circuit
    1d5c:	80 91 2f 1e 	lds	r24, 0x1E2F	; 0x801e2f <stepValueFlam>
    1d60:	90 91 30 1e 	lds	r25, 0x1E30	; 0x801e30 <stepValueFlam+0x1>
    1d64:	40 91 9e 0c 	lds	r20, 0x0C9E	; 0x800c9e <tempDoutTrig>
    1d68:	50 91 9f 0c 	lds	r21, 0x0C9F	; 0x800c9f <tempDoutTrig+0x1>
    1d6c:	20 91 a2 0c 	lds	r18, 0x0CA2	; 0x800ca2 <muteInst>
    1d70:	30 91 a3 0c 	lds	r19, 0x0CA3	; 0x800ca3 <muteInst+0x1>
    1d74:	20 95       	com	r18
    1d76:	30 95       	com	r19
    1d78:	82 23       	and	r24, r18
    1d7a:	93 23       	and	r25, r19
    1d7c:	84 2b       	or	r24, r20
    1d7e:	95 2b       	or	r25, r21
    1d80:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:31
  
  TRIG_TIMER_START;
    1d84:	85 e0       	ldi	r24, 0x05	; 5
    1d86:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:32
  stepValueFlam = 0;
    1d8a:	10 92 30 1e 	sts	0x1E30, r1	; 0x801e30 <stepValueFlam+0x1>
    1d8e:	10 92 2f 1e 	sts	0x1E2F, r1	; 0x801e2f <stepValueFlam>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:34
  
} 
    1d92:	ff 91       	pop	r31
    1d94:	ef 91       	pop	r30
    1d96:	bf 91       	pop	r27
    1d98:	af 91       	pop	r26
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	7f 91       	pop	r23
    1da0:	6f 91       	pop	r22
    1da2:	5f 91       	pop	r21
    1da4:	4f 91       	pop	r20
    1da6:	3f 91       	pop	r19
    1da8:	2f 91       	pop	r18
    1daa:	0f 90       	pop	r0
    1dac:	0b be       	out	0x3b, r0	; 59
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	0f 90       	pop	r0
    1db4:	1f 90       	pop	r1
    1db6:	18 95       	reti

00001db8 <SelectSecondMux()>:
_Z15SelectSecondMuxv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:186
}


//Select IC111
void SelectSecondMux(){
  delayMicroseconds(15);                                          //Wait stabilisation  [zabox] moved for better visibility, 15us are enough
    1db8:	8f e0       	ldi	r24, 0x0F	; 15
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:187
  MUX_INH2_LOW;
    1dc0:	5f 98       	cbi	0x0b, 7	; 11
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:188
  delayMicroseconds(5);                                           // [zabox] charge s/h caps
    1dc2:	85 e0       	ldi	r24, 0x05	; 5
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:189
  MUX_INH2_HIGH;                                                  // [1.028] moved from deselect function
    1dca:	5f 9a       	sbi	0x0b, 7	; 11
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:190
}
    1dcc:	08 95       	ret

00001dce <SetMux()>:
_Z6SetMuxv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:9
//-------------------------------------------------

/////////////////////Function//////////////////////
//Update Velocity of each instruments---------------------------------------
void SetMux()
{      
    1dce:	8f 92       	push	r8
    1dd0:	9f 92       	push	r9
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:11

  unsigned int temp_stepValue = stepValue & (~muteInst);                                                                      // [zabox] [1.028] solves velocity change in fading instuments (when muted) in combination with total accent
    1de6:	80 91 31 1e 	lds	r24, 0x1E31	; 0x801e31 <stepValue>
    1dea:	90 91 32 1e 	lds	r25, 0x1E32	; 0x801e32 <stepValue+0x1>
    1dee:	c0 91 a2 0c 	lds	r28, 0x0CA2	; 0x800ca2 <muteInst>
    1df2:	d0 91 a3 0c 	lds	r29, 0x0CA3	; 0x800ca3 <muteInst+0x1>
    1df6:	c0 95       	com	r28
    1df8:	d0 95       	com	r29
    1dfa:	c8 23       	and	r28, r24
    1dfc:	d9 23       	and	r29, r25
    1dfe:	a4 e8       	ldi	r26, 0x84	; 132
    1e00:	ca 2e       	mov	r12, r26
    1e02:	a1 e0       	ldi	r26, 0x01	; 1
    1e04:	da 2e       	mov	r13, r26
    1e06:	b9 e8       	ldi	r27, 0x89	; 137
    1e08:	eb 2e       	mov	r14, r27
    1e0a:	b1 e0       	ldi	r27, 0x01	; 1
    1e0c:	fb 2e       	mov	r15, r27
    1e0e:	1e e8       	ldi	r17, 0x8E	; 142
    1e10:	81 2e       	mov	r8, r17
    1e12:	11 e0       	ldi	r17, 0x01	; 1
    1e14:	91 2e       	mov	r9, r17
    1e16:	87 01       	movw	r16, r14
    1e18:	89 ec       	ldi	r24, 0xC9	; 201
    1e1a:	a8 2e       	mov	r10, r24
    1e1c:	85 e0       	ldi	r24, 0x05	; 5
    1e1e:	b8 2e       	mov	r11, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:18
 //Select second Multiplexer 
  for (byte a = 0; a < 5; a++){
    
    
  //if(bitRead (stepValue, muxInst[a + 5]) || bitRead(stepValue, OH)){
    if(bitRead(temp_stepValue, muxInst[a + 5]) || (bitRead(temp_stepValue, OH) && (muxInst[a + 5] == CH ))){                 // [zabox] prevents mux from updating all velocities at a oh step
    1e20:	d6 01       	movw	r26, r12
    1e22:	ed 91       	ld	r30, X+
    1e24:	6d 01       	movw	r12, r26
    1e26:	8e 2f       	mov	r24, r30
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9e 01       	movw	r18, r28
    1e2c:	0e 2e       	mov	r0, r30
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <SetMux()+0x66>
    1e30:	36 95       	lsr	r19
    1e32:	27 95       	ror	r18
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <SetMux()+0x62>
    1e38:	20 fd       	sbrc	r18, 0
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <SetMux()+0x76>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:18 (discriminator 1)
    1e3c:	d7 ff       	sbrs	r29, 7
    1e3e:	3b c0       	rjmp	.+118    	; 0x1eb6 <SetMux()+0xe8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:18 (discriminator 2)
    1e40:	ee 30       	cpi	r30, 0x0E	; 14
    1e42:	c9 f5       	brne	.+114    	; 0x1eb6 <SetMux()+0xe8>
    1e44:	60 91 ce 0c 	lds	r22, 0x0CCE	; 0x800cce <ptrnBuffer>
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	6a 9d       	mul	r22, r10
    1e4c:	a0 01       	movw	r20, r0
    1e4e:	6b 9d       	mul	r22, r11
    1e50:	50 0d       	add	r21, r0
    1e52:	7a 9d       	mul	r23, r10
    1e54:	50 0d       	add	r21, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	48 56       	subi	r20, 0x68	; 104
    1e5a:	5d 4e       	sbci	r21, 0xED	; 237
    1e5c:	da 01       	movw	r26, r20
    1e5e:	a3 5e       	subi	r26, 0xE3	; 227
    1e60:	bb 4f       	sbci	r27, 0xFB	; 251
    1e62:	2d 91       	ld	r18, X+
    1e64:	3c 91       	ld	r19, X
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:22
      //DeselectSecondMux();//Unselect Multiplexer
      //As CH and OH share same Mux out this code is needed
     // if (bitRead(stepValue, OH && muxInst[a + 5] == CH )){                                                                 // [zabox] bracket error, caused the ext_trig bug. took me hours to spot :/
      if (bitRead(temp_stepValue, OH) && (muxInst[a + 5] == CH )){                                                            // [zabox] correct bracketing
    1e66:	d7 ff       	sbrs	r29, 7
    1e68:	b4 c0       	rjmp	.+360    	; 0x1fd2 <SetMux()+0x204>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:22 (discriminator 1)
    1e6a:	ee 30       	cpi	r30, 0x0E	; 14
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <SetMux()+0xa2>
    1e6e:	b1 c0       	rjmp	.+354    	; 0x1fd2 <SetMux()+0x204>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:23
        SetDacA(pattern[ptrnBuffer].velocity[OH][curStep] + ((bitRead(pattern[ptrnBuffer].inst[TOTAL_ACC], curStep)) ? (pattern[ptrnBuffer].totalAcc * 4) : 0));
    1e70:	e0 91 3d 1e 	lds	r30, 0x1E3D	; 0x801e3d <curStep>
    1e74:	e4 0f       	add	r30, r20
    1e76:	f5 2f       	mov	r31, r21
    1e78:	f1 1d       	adc	r31, r1
    1e7a:	eb 5c       	subi	r30, 0xCB	; 203
    1e7c:	fa 4f       	sbci	r31, 0xFA	; 250
    1e7e:	90 81       	ld	r25, Z
    1e80:	80 91 3d 1e 	lds	r24, 0x1E3D	; 0x801e3d <curStep>
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <SetMux()+0xbc>
    1e86:	36 95       	lsr	r19
    1e88:	27 95       	ror	r18
    1e8a:	8a 95       	dec	r24
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <SetMux()+0xb8>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	20 ff       	sbrs	r18, 0
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <SetMux()+0xd2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:23 (discriminator 1)
    1e94:	48 53       	subi	r20, 0x38	; 56
    1e96:	5a 4f       	sbci	r21, 0xFA	; 250
    1e98:	fa 01       	movw	r30, r20
    1e9a:	80 81       	ld	r24, Z
    1e9c:	88 0f       	add	r24, r24
    1e9e:	88 0f       	add	r24, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:23 (discriminator 4)
    1ea0:	89 0f       	add	r24, r25
    1ea2:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:24 (discriminator 4)
        PORTA = (PORTA & 0b00011111) | muxAddr[2];//Mask to clear last 3 bits of the PORTA
    1ea6:	82 b1       	in	r24, 0x02	; 2
    1ea8:	8f 71       	andi	r24, 0x1F	; 31
    1eaa:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <muxAddr+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:30 (discriminator 4)
        SelectSecondMux();//Set the value to the multiplexer out
      }
      else  {
        SetDacA(pattern[ptrnBuffer].velocity[muxInst[a + 5]][curStep] + ((bitRead(pattern[ptrnBuffer].inst[TOTAL_ACC], curStep)) ? (pattern[ptrnBuffer].totalAcc * 4) : 0));//Set DAC Value
        //Set Multiplexer address
        PORTA = (PORTA & 0b00011111) | muxAddr[a];//Mask to clear last 3 bits of the PORTA
    1eae:	89 2b       	or	r24, r25
    1eb0:	82 b9       	out	0x02, r24	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:31 (discriminator 4)
        SelectSecondMux();//Set the value to the multiplexer out
    1eb2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SelectSecondMux()>
    1eb6:	0f 5f       	subi	r16, 0xFF	; 255
    1eb8:	1f 4f       	sbci	r17, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:14 (discriminator 2)
{      

  unsigned int temp_stepValue = stepValue & (~muteInst);                                                                      // [zabox] [1.028] solves velocity change in fading instuments (when muted) in combination with total accent
  
 //Select second Multiplexer 
  for (byte a = 0; a < 5; a++){
    1eba:	80 16       	cp	r8, r16
    1ebc:	91 06       	cpc	r9, r17
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <SetMux()+0xf4>
    1ec0:	af cf       	rjmp	.-162    	; 0x1e20 <SetMux()+0x52>
    1ec2:	0f e7       	ldi	r16, 0x7F	; 127
    1ec4:	11 e0       	ldi	r17, 0x01	; 1
    1ec6:	54 e8       	ldi	r21, 0x84	; 132
    1ec8:	c5 2e       	mov	r12, r21
    1eca:	51 e0       	ldi	r21, 0x01	; 1
    1ecc:	d5 2e       	mov	r13, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:42

  //Select First Multiplexer 
  for (byte a = 0; a < 5; a++){
    if(bitRead (temp_stepValue, muxInst[a])){  
      //DeselectFirstMux();//Unselect Multiplexer
      byte vel = pattern[ptrnBuffer].velocity[muxInst[a]][curStep];                   // [zabox] [1.028] flam
    1ece:	69 ec       	ldi	r22, 0xC9	; 201
    1ed0:	86 2e       	mov	r8, r22
    1ed2:	65 e0       	ldi	r22, 0x05	; 5
    1ed4:	96 2e       	mov	r9, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:44
      if (bitRead(vel, 7)) {
        stepValueFlam |= (1 << muxInst[a]);
    1ed6:	aa 24       	eor	r10, r10
    1ed8:	a3 94       	inc	r10
    1eda:	b1 2c       	mov	r11, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:40
  //DeselectSecondMux();//Unselect Multiplexer
  

  //Select First Multiplexer 
  for (byte a = 0; a < 5; a++){
    if(bitRead (temp_stepValue, muxInst[a])){  
    1edc:	d8 01       	movw	r26, r16
    1ede:	5d 91       	ld	r21, X+
    1ee0:	8d 01       	movw	r16, r26
    1ee2:	85 2f       	mov	r24, r21
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9e 01       	movw	r18, r28
    1ee8:	05 2e       	mov	r0, r21
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <SetMux()+0x122>
    1eec:	36 95       	lsr	r19
    1eee:	27 95       	ror	r18
    1ef0:	0a 94       	dec	r0
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <SetMux()+0x11e>
    1ef4:	20 ff       	sbrs	r18, 0
    1ef6:	59 c0       	rjmp	.+178    	; 0x1faa <SetMux()+0x1dc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:42
      //DeselectFirstMux();//Unselect Multiplexer
      byte vel = pattern[ptrnBuffer].velocity[muxInst[a]][curStep];                   // [zabox] [1.028] flam
    1ef8:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	e0 91 3d 1e 	lds	r30, 0x1E3D	; 0x801e3d <curStep>
    1f02:	44 e0       	ldi	r20, 0x04	; 4
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	4a 95       	dec	r20
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <SetMux()+0x136>
    1f0c:	28 9d       	mul	r18, r8
    1f0e:	b0 01       	movw	r22, r0
    1f10:	29 9d       	mul	r18, r9
    1f12:	70 0d       	add	r23, r0
    1f14:	38 9d       	mul	r19, r8
    1f16:	70 0d       	add	r23, r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	86 0f       	add	r24, r22
    1f1c:	97 1f       	adc	r25, r23
    1f1e:	88 56       	subi	r24, 0x68	; 104
    1f20:	9d 4e       	sbci	r25, 0xED	; 237
    1f22:	e8 0f       	add	r30, r24
    1f24:	f9 2f       	mov	r31, r25
    1f26:	f1 1d       	adc	r31, r1
    1f28:	eb 5b       	subi	r30, 0xBB	; 187
    1f2a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f2c:	90 81       	ld	r25, Z
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:43
      if (bitRead(vel, 7)) {
    1f2e:	97 ff       	sbrs	r25, 7
    1f30:	12 c0       	rjmp	.+36     	; 0x1f56 <SetMux()+0x188>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:44
        stepValueFlam |= (1 << muxInst[a]);
    1f32:	60 91 2f 1e 	lds	r22, 0x1E2F	; 0x801e2f <stepValueFlam>
    1f36:	70 91 30 1e 	lds	r23, 0x1E30	; 0x801e30 <stepValueFlam+0x1>
    1f3a:	f5 01       	movw	r30, r10
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <SetMux()+0x174>
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	5a 95       	dec	r21
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <SetMux()+0x170>
    1f46:	af 01       	movw	r20, r30
    1f48:	46 2b       	or	r20, r22
    1f4a:	57 2b       	or	r21, r23
    1f4c:	50 93 30 1e 	sts	0x1E30, r21	; 0x801e30 <stepValueFlam+0x1>
    1f50:	40 93 2f 1e 	sts	0x1E2F, r20	; 0x801e2f <stepValueFlam>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:45
        vel &= 127;
    1f54:	9f 77       	andi	r25, 0x7F	; 127
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:47
      }
      SetDacA(vel + ((bitRead(pattern[ptrnBuffer].inst[TOTAL_ACC], curStep)) ? (pattern[ptrnBuffer].totalAcc * 4) : 0));//Set DAC Value 
    1f56:	80 91 3d 1e 	lds	r24, 0x1E3D	; 0x801e3d <curStep>
    1f5a:	28 9d       	mul	r18, r8
    1f5c:	a0 01       	movw	r20, r0
    1f5e:	29 9d       	mul	r18, r9
    1f60:	50 0d       	add	r21, r0
    1f62:	38 9d       	mul	r19, r8
    1f64:	50 0d       	add	r21, r0
    1f66:	11 24       	eor	r1, r1
    1f68:	9a 01       	movw	r18, r20
    1f6a:	28 56       	subi	r18, 0x68	; 104
    1f6c:	3d 4e       	sbci	r19, 0xED	; 237
    1f6e:	f9 01       	movw	r30, r18
    1f70:	e3 5e       	subi	r30, 0xE3	; 227
    1f72:	fb 4f       	sbci	r31, 0xFB	; 251
    1f74:	40 81       	ld	r20, Z
    1f76:	51 81       	ldd	r21, Z+1	; 0x01
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <SetMux()+0x1b0>
    1f7a:	56 95       	lsr	r21
    1f7c:	47 95       	ror	r20
    1f7e:	8a 95       	dec	r24
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <SetMux()+0x1ac>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	40 ff       	sbrs	r20, 0
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <SetMux()+0x1c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:47 (discriminator 1)
    1f88:	28 53       	subi	r18, 0x38	; 56
    1f8a:	3a 4f       	sbci	r19, 0xFA	; 250
    1f8c:	d9 01       	movw	r26, r18
    1f8e:	8c 91       	ld	r24, X
    1f90:	88 0f       	add	r24, r24
    1f92:	88 0f       	add	r24, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:47 (discriminator 4)
    1f94:	89 0f       	add	r24, r25
    1f96:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:49 (discriminator 4)
      //Set Multiplexer address
      PORTA = (PORTA & 0b00011111) | muxAddr[a];//Mask to clear last 3 bits of the PORTA
    1f9a:	82 b1       	in	r24, 0x02	; 2
    1f9c:	8f 71       	andi	r24, 0x1F	; 31
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	90 81       	ld	r25, Z
    1fa2:	89 2b       	or	r24, r25
    1fa4:	82 b9       	out	0x02, r24	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:50 (discriminator 4)
      SelectFirstMux();//Set the value to the multiplexer out
    1fa6:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <SelectFirstMux()>
    1faa:	ff ef       	ldi	r31, 0xFF	; 255
    1fac:	ef 1a       	sub	r14, r31
    1fae:	ff 0a       	sbc	r15, r31
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:39 (discriminator 2)
  }
  //DeselectSecondMux();//Unselect Multiplexer
  

  //Select First Multiplexer 
  for (byte a = 0; a < 5; a++){
    1fb0:	c0 16       	cp	r12, r16
    1fb2:	d1 06       	cpc	r13, r17
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <SetMux()+0x1ea>
    1fb6:	92 cf       	rjmp	.-220    	; 0x1edc <SetMux()+0x10e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:55
      SelectFirstMux();//Set the value to the multiplexer out
    }
  }
  //DeselectFirstMux();//Unselect Multiplexer
  
}
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	1f 91       	pop	r17
    1fbe:	0f 91       	pop	r16
    1fc0:	ff 90       	pop	r15
    1fc2:	ef 90       	pop	r14
    1fc4:	df 90       	pop	r13
    1fc6:	cf 90       	pop	r12
    1fc8:	bf 90       	pop	r11
    1fca:	af 90       	pop	r10
    1fcc:	9f 90       	pop	r9
    1fce:	8f 90       	pop	r8
    1fd0:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:28
        SetDacA(pattern[ptrnBuffer].velocity[OH][curStep] + ((bitRead(pattern[ptrnBuffer].inst[TOTAL_ACC], curStep)) ? (pattern[ptrnBuffer].totalAcc * 4) : 0));
        PORTA = (PORTA & 0b00011111) | muxAddr[2];//Mask to clear last 3 bits of the PORTA
        SelectSecondMux();//Set the value to the multiplexer out
      }
      else  {
        SetDacA(pattern[ptrnBuffer].velocity[muxInst[a + 5]][curStep] + ((bitRead(pattern[ptrnBuffer].inst[TOTAL_ACC], curStep)) ? (pattern[ptrnBuffer].totalAcc * 4) : 0));//Set DAC Value
    1fd2:	e0 91 3d 1e 	lds	r30, 0x1E3D	; 0x801e3d <curStep>
    1fd6:	f4 e0       	ldi	r31, 0x04	; 4
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	fa 95       	dec	r31
    1fde:	e1 f7       	brne	.-8      	; 0x1fd8 <SetMux()+0x20a>
    1fe0:	6a 9d       	mul	r22, r10
    1fe2:	a0 01       	movw	r20, r0
    1fe4:	6b 9d       	mul	r22, r11
    1fe6:	50 0d       	add	r21, r0
    1fe8:	7a 9d       	mul	r23, r10
    1fea:	50 0d       	add	r21, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	84 0f       	add	r24, r20
    1ff0:	95 1f       	adc	r25, r21
    1ff2:	88 56       	subi	r24, 0x68	; 104
    1ff4:	9d 4e       	sbci	r25, 0xED	; 237
    1ff6:	e8 0f       	add	r30, r24
    1ff8:	f9 2f       	mov	r31, r25
    1ffa:	f1 1d       	adc	r31, r1
    1ffc:	eb 5b       	subi	r30, 0xBB	; 187
    1ffe:	fb 4f       	sbci	r31, 0xFB	; 251
    2000:	90 81       	ld	r25, Z
    2002:	80 91 3d 1e 	lds	r24, 0x1E3D	; 0x801e3d <curStep>
    2006:	02 c0       	rjmp	.+4      	; 0x200c <SetMux()+0x23e>
    2008:	36 95       	lsr	r19
    200a:	27 95       	ror	r18
    200c:	8a 95       	dec	r24
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <SetMux()+0x23a>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	20 ff       	sbrs	r18, 0
    2014:	06 c0       	rjmp	.+12     	; 0x2022 <SetMux()+0x254>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:28 (discriminator 1)
    2016:	40 5a       	subi	r20, 0xA0	; 160
    2018:	57 4e       	sbci	r21, 0xE7	; 231
    201a:	da 01       	movw	r26, r20
    201c:	8c 91       	ld	r24, X
    201e:	88 0f       	add	r24, r24
    2020:	88 0f       	add	r24, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:28 (discriminator 4)
    2022:	89 0f       	add	r24, r25
    2024:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:30 (discriminator 4)
        //Set Multiplexer address
        PORTA = (PORTA & 0b00011111) | muxAddr[a];//Mask to clear last 3 bits of the PORTA
    2028:	82 b1       	in	r24, 0x02	; 2
    202a:	8f 71       	andi	r24, 0x1F	; 31
    202c:	f8 01       	movw	r30, r16
    202e:	90 81       	ld	r25, Z
    2030:	3e cf       	rjmp	.-388    	; 0x1eae <SetMux()+0xe0>

00002032 <SetMuxTrigMidi(unsigned char, unsigned char)>:
_Z14SetMuxTrigMidihh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:98
}

void SetMuxTrigMidi(byte inst, byte velocity)
{
  //Remember velocity of each MIDI trigged instrument
  midiVelocity[inst] = velocity;
    2032:	e8 2f       	mov	r30, r24
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	e6 5b       	subi	r30, 0xB6	; 182
    2038:	fe 4f       	sbci	r31, 0xFE	; 254
    203a:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:100

  switch (inst){
    203c:	ee ef       	ldi	r30, 0xFE	; 254
    203e:	e8 0f       	add	r30, r24
    2040:	ee 30       	cpi	r30, 0x0E	; 14
    2042:	08 f0       	brcs	.+2      	; 0x2046 <SetMuxTrigMidi(unsigned char, unsigned char)+0x14>
    2044:	60 c0       	rjmp	.+192    	; 0x2106 <SetMuxTrigMidi(unsigned char, unsigned char)+0xd4>
    2046:	86 2f       	mov	r24, r22
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	e7 5d       	subi	r30, 0xD7	; 215
    204c:	ff 4e       	sbci	r31, 0xEF	; 239
    204e:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    2052:	56 10       	cpse	r5, r6
    2054:	5d 10       	cpse	r5, r13
    2056:	67 10       	cpse	r6, r7
    2058:	83 10       	cpse	r8, r3
    205a:	75 10       	cpse	r7, r5
    205c:	7c 10       	cpse	r7, r12
    205e:	37 10       	cpse	r3, r7
    2060:	41 10       	cpse	r4, r1
    2062:	48 10       	cpse	r4, r8
    2064:	4f 10       	cpse	r4, r15
    2066:	83 10       	cpse	r8, r3
    2068:	83 10       	cpse	r8, r3
    206a:	6e 10       	cpse	r6, r14
    206c:	6e 10       	cpse	r6, r14
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:103
  case BD:
    //DeselectFirstMux();//Unselect Multiplexer                                                     // [1.028] this caused cuts in the digital section when a first mux instrument was played shortly after. (the other mux stays selected!) 
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    206e:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:105
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[2];//Mask to clear last 3 bits of the PORTA
    2072:	82 b1       	in	r24, 0x02	; 2
    2074:	8f 71       	andi	r24, 0x1F	; 31
    2076:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <muxAddr+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:112
    break;
  case SD:
    //DeselectFirstMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[1];//Mask to clear last 3 bits of the PORTA
    207a:	89 2b       	or	r24, r25
    207c:	82 b9       	out	0x02, r24	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:113
    SelectFirstMux();//Set the value to the multiplexer out
    207e:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <SelectFirstMux()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:110
    PORTA = (PORTA & 0b00011111) | muxAddr[2];//Mask to clear last 3 bits of the PORTA
    SelectFirstMux();//Set the value to the multiplexer out
    break;
  case SD:
    //DeselectFirstMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    2082:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:112
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[1];//Mask to clear last 3 bits of the PORTA
    2086:	82 b1       	in	r24, 0x02	; 2
    2088:	8f 71       	andi	r24, 0x1F	; 31
    208a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <muxAddr+0x1>
    208e:	f5 cf       	rjmp	.-22     	; 0x207a <SetMuxTrigMidi(unsigned char, unsigned char)+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:117
    SelectFirstMux();//Set the value to the multiplexer out
    break;
  case LT:
    //DeselectFirstMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    2090:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:119
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[0];//Mask to clear last 3 bits of the PORTA
    2094:	82 b1       	in	r24, 0x02	; 2
    2096:	8f 71       	andi	r24, 0x1F	; 31
    2098:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <muxAddr>
    209c:	ee cf       	rjmp	.-36     	; 0x207a <SetMuxTrigMidi(unsigned char, unsigned char)+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:124
    SelectFirstMux();//Set the value to the multiplexer out
    break;
  case MT:
    //DeselectFirstMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    209e:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:126
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[3];//Mask to clear last 3 bits of the PORTA
    20a2:	82 b1       	in	r24, 0x02	; 2
    20a4:	8f 71       	andi	r24, 0x1F	; 31
    20a6:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <muxAddr+0x3>
    20aa:	e7 cf       	rjmp	.-50     	; 0x207a <SetMuxTrigMidi(unsigned char, unsigned char)+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:131
    SelectFirstMux();//Set the value to the multiplexer out
    break;
  case HT:
    //DeselectFirstMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    20ac:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:133
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[4];//Mask to clear last 3 bits of the PORTA
    20b0:	82 b1       	in	r24, 0x02	; 2
    20b2:	8f 71       	andi	r24, 0x1F	; 31
    20b4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <muxAddr+0x4>
    20b8:	e0 cf       	rjmp	.-64     	; 0x207a <SetMuxTrigMidi(unsigned char, unsigned char)+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:138
    SelectFirstMux();//Set the value to the multiplexer out
    break;
  case RM:
    //DeselectSecondMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    20ba:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:140
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[1];//Mask to clear last 3 bits of the PORTA
    20be:	82 b1       	in	r24, 0x02	; 2
    20c0:	8f 71       	andi	r24, 0x1F	; 31
    20c2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <muxAddr+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:169
    break;
  case CRASH:
    //DeselectSecondMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[3];//Mask to clear last 3 bits of the PORTA
    20c6:	89 2b       	or	r24, r25
    20c8:	82 b9       	out	0x02, r24	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:170
    SelectSecondMux();//Set the value to the multiplexer out
    20ca:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <SelectSecondMux()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:145
    PORTA = (PORTA & 0b00011111) | muxAddr[1];//Mask to clear last 3 bits of the PORTA
    SelectSecondMux();//Set the value to the multiplexer out
    break;
  case HC:
    //DeselectSecondMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    20ce:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:147
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[0];//Mask to clear last 3 bits of the PORTA
    20d2:	82 b1       	in	r24, 0x02	; 2
    20d4:	8f 71       	andi	r24, 0x1F	; 31
    20d6:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <muxAddr>
    20da:	f5 cf       	rjmp	.-22     	; 0x20c6 <SetMuxTrigMidi(unsigned char, unsigned char)+0x94>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:153
    SelectSecondMux();//Set the value to the multiplexer out
    break;
  case OH:
  case CH:
    //DeselectSecondMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    20dc:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:155
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[2];//Mask to clear last 3 bits of the PORTA
    20e0:	82 b1       	in	r24, 0x02	; 2
    20e2:	8f 71       	andi	r24, 0x1F	; 31
    20e4:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <muxAddr+0x2>
    20e8:	ee cf       	rjmp	.-36     	; 0x20c6 <SetMuxTrigMidi(unsigned char, unsigned char)+0x94>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:160
    SelectSecondMux();//Set the value to the multiplexer out
    break;
  case RIDE:
    //DeselectSecondMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    20ea:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:162
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[4];//Mask to clear last 3 bits of the PORTA
    20ee:	82 b1       	in	r24, 0x02	; 2
    20f0:	8f 71       	andi	r24, 0x1F	; 31
    20f2:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <muxAddr+0x4>
    20f6:	e7 cf       	rjmp	.-50     	; 0x20c6 <SetMuxTrigMidi(unsigned char, unsigned char)+0x94>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:167
    SelectSecondMux();//Set the value to the multiplexer out
    break;
  case CRASH:
    //DeselectSecondMux();//Unselect Multiplexer
    SetDacA(midiVelocity[inst]);//Set DAC Value 
    20f8:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:169
    //Set Multiplexer address
    PORTA = (PORTA & 0b00011111) | muxAddr[3];//Mask to clear last 3 bits of the PORTA
    20fc:	82 b1       	in	r24, 0x02	; 2
    20fe:	8f 71       	andi	r24, 0x1F	; 31
    2100:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <muxAddr+0x3>
    2104:	e0 cf       	rjmp	.-64     	; 0x20c6 <SetMuxTrigMidi(unsigned char, unsigned char)+0x94>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Mux.ino:173
    SelectSecondMux();//Set the value to the multiplexer out
    break;
  }
}
    2106:	08 95       	ret

00002108 <MidiTrigOn(unsigned char, unsigned char)>:
_Z10MidiTrigOnhh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:269
}


//MidiTrigOn insturment
void MidiTrigOn(byte inst, byte velocity)
{
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:271
  
  if (instWasMidiTrigged[inst] == FALSE && (~(muteInst >> inst) & 1)) {                                                             // [zabox] [1.028] expander
    2112:	e8 2e       	mov	r14, r24
    2114:	f1 2c       	mov	r15, r1
    2116:	87 01       	movw	r16, r14
    2118:	09 59       	subi	r16, 0x99	; 153
    211a:	1b 4f       	sbci	r17, 0xFB	; 251
    211c:	f8 01       	movw	r30, r16
    211e:	90 81       	ld	r25, Z
    2120:	91 11       	cpse	r25, r1
    2122:	39 c0       	rjmp	.+114    	; 0x2196 <MidiTrigOn(unsigned char, unsigned char)+0x8e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:271 (discriminator 1)
    2124:	20 91 a2 0c 	lds	r18, 0x0CA2	; 0x800ca2 <muteInst>
    2128:	30 91 a3 0c 	lds	r19, 0x0CA3	; 0x800ca3 <muteInst+0x1>
    212c:	08 2e       	mov	r0, r24
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <MidiTrigOn(unsigned char, unsigned char)+0x2c>
    2130:	36 95       	lsr	r19
    2132:	27 95       	ror	r18
    2134:	0a 94       	dec	r0
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <MidiTrigOn(unsigned char, unsigned char)+0x28>
    2138:	20 fd       	sbrc	r18, 0
    213a:	2d c0       	rjmp	.+90     	; 0x2196 <MidiTrigOn(unsigned char, unsigned char)+0x8e>
    213c:	c8 2f       	mov	r28, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:273
 
    SetMuxTrigMidi(inst, velocity);                                                            
    213e:	0e 94 19 10 	call	0x2032	; 0x2032 <SetMuxTrigMidi(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:275
    
    if (inst == OH) {
    2142:	cf 30       	cpi	r28, 0x0F	; 15
    2144:	71 f5       	brne	.+92     	; 0x21a2 <MidiTrigOn(unsigned char, unsigned char)+0x9a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:276
      SetDoutTrig((1 << HH) | (lastDoutTrig & (~(1 << HH_SLCT))));
    2146:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <lastDoutTrig>
    214a:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <lastDoutTrig+0x1>
    214e:	8d 7d       	andi	r24, 0xDD	; 221
    2150:	80 62       	ori	r24, 0x20	; 32
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:280
      triggerTime[HH] = TCNT2;      
    } 
    else if (inst == CH) {
      SetDoutTrig((1 << HH) | (lastDoutTrig | (1 << HH_SLCT)));
    2152:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:281
      triggerTime[HH] = TCNT2;                                                
    2156:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    215a:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <triggerTime+0x5>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:288
    else {
      SetDoutTrig((1 << inst) | (lastDoutTrig));                         
      triggerTime[inst] = TCNT2;                                                    
    }
    
    if (showTrigLeds) {
    215e:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <showTrigLeds>
    2162:	88 23       	and	r24, r24
    2164:	a9 f0       	breq	.+42     	; 0x2190 <MidiTrigOn(unsigned char, unsigned char)+0x88>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:289
      stepLeds = ((1 << ledMap[inst]) | lastStepLeds);
    2166:	f7 01       	movw	r30, r14
    2168:	e6 5c       	subi	r30, 0xC6	; 198
    216a:	fe 4f       	sbci	r31, 0xFE	; 254
    216c:	20 81       	ld	r18, Z
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <MidiTrigOn(unsigned char, unsigned char)+0x70>
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	2a 95       	dec	r18
    217a:	e2 f7       	brpl	.-8      	; 0x2174 <MidiTrigOn(unsigned char, unsigned char)+0x6c>
    217c:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <lastStepLeds>
    2180:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <lastStepLeds+0x1>
    2184:	82 2b       	or	r24, r18
    2186:	93 2b       	or	r25, r19
    2188:	90 93 6e 1e 	sts	0x1E6E, r25	; 0x801e6e <stepLeds+0x1>
    218c:	80 93 6d 1e 	sts	0x1E6D, r24	; 0x801e6d <stepLeds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:291
    }
    instWasMidiTrigged[inst] = TRUE;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	f8 01       	movw	r30, r16
    2194:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:293
  }
}
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:279
    
    if (inst == OH) {
      SetDoutTrig((1 << HH) | (lastDoutTrig & (~(1 << HH_SLCT))));
      triggerTime[HH] = TCNT2;      
    } 
    else if (inst == CH) {
    21a2:	ce 30       	cpi	r28, 0x0E	; 14
    21a4:	31 f4       	brne	.+12     	; 0x21b2 <MidiTrigOn(unsigned char, unsigned char)+0xaa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:280
      SetDoutTrig((1 << HH) | (lastDoutTrig | (1 << HH_SLCT)));
    21a6:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <lastDoutTrig>
    21aa:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <lastDoutTrig+0x1>
    21ae:	82 62       	ori	r24, 0x22	; 34
    21b0:	d0 cf       	rjmp	.-96     	; 0x2152 <MidiTrigOn(unsigned char, unsigned char)+0x4a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:284
      triggerTime[HH] = TCNT2;                                                
    }
    else {
      SetDoutTrig((1 << inst) | (lastDoutTrig));                         
    21b2:	20 91 9c 0c 	lds	r18, 0x0C9C	; 0x800c9c <lastDoutTrig>
    21b6:	30 91 9d 0c 	lds	r19, 0x0C9D	; 0x800c9d <lastDoutTrig+0x1>
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 2c       	mov	r0, r14
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <MidiTrigOn(unsigned char, unsigned char)+0xbe>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <MidiTrigOn(unsigned char, unsigned char)+0xba>
    21ca:	82 2b       	or	r24, r18
    21cc:	93 2b       	or	r25, r19
    21ce:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:285
      triggerTime[inst] = TCNT2;                                                    
    21d2:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    21d6:	f7 01       	movw	r30, r14
    21d8:	e2 5b       	subi	r30, 0xB2	; 178
    21da:	fb 4f       	sbci	r31, 0xFB	; 251
    21dc:	80 83       	st	Z, r24
    21de:	bf cf       	rjmp	.-130    	; 0x215e <MidiTrigOn(unsigned char, unsigned char)+0x56>

000021e0 <MidiTrigOff(unsigned char)>:
_Z11MidiTrigOffh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:298
}

//MidiTrigOff insturment
void MidiTrigOff(byte inst)
{
  instWasMidiTrigged[inst] = FALSE;
    21e0:	e8 2f       	mov	r30, r24
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	e9 59       	subi	r30, 0x99	; 153
    21e6:	fb 4f       	sbci	r31, 0xFB	; 251
    21e8:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:301
  
  
  if ((gateInst >> inst) & 1U) SetMuxTrigMidi(inst, 0);                                               // [1.028]
    21ea:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <gateInst>
    21ee:	30 91 47 04 	lds	r19, 0x0447	; 0x800447 <gateInst+0x1>
    21f2:	08 2e       	mov	r0, r24
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <MidiTrigOff(unsigned char)+0x1a>
    21f6:	36 95       	lsr	r19
    21f8:	27 95       	ror	r18
    21fa:	0a 94       	dec	r0
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <MidiTrigOff(unsigned char)+0x16>
    21fe:	20 ff       	sbrs	r18, 0
    2200:	03 c0       	rjmp	.+6      	; 0x2208 <MidiTrigOff(unsigned char)+0x28>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:301 (discriminator 1)
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	0c 94 19 10 	jmp	0x2032	; 0x2032 <SetMuxTrigMidi(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:303
  
}
    2208:	08 95       	ret

0000220a <HandleNoteOn(unsigned char, unsigned char, unsigned char)>:
_Z12HandleNoteOnhhh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:118



//Handle noteON
void HandleNoteOn(byte channel, byte pitch, byte velocity)
{
    220a:	e6 2f       	mov	r30, r22
    220c:	64 2f       	mov	r22, r20
    220e:	90 91 43 1e 	lds	r25, 0x1E43	; 0x801e43 <seq+0x4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:120
  //Midi note On with 0 velocity as Midi note Off
  if (velocity == 0){
    2212:	41 11       	cpse	r20, r1
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x8a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:121
    if (channel == seq.RXchannel){
    2216:	89 13       	cpse	r24, r25
    2218:	82 c0       	rjmp	.+260    	; 0x231e <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x114>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:122
      switch (pitch){
    221a:	e2 52       	subi	r30, 0x22	; 34
    221c:	eb 31       	cpi	r30, 0x1B	; 27
    221e:	08 f0       	brcs	.+2      	; 0x2222 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x18>
    2220:	7e c0       	rjmp	.+252    	; 0x231e <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x114>
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	ea 5e       	subi	r30, 0xEA	; 234
    2226:	fe 4e       	sbci	r31, 0xEE	; 238
    2228:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    222c:	3c 11       	cpse	r19, r12
    222e:	31 11       	cpse	r19, r1
    2230:	31 11       	cpse	r19, r1
    2232:	8f 11       	cpse	r24, r15
    2234:	34 11       	cpse	r19, r4
    2236:	3e 11       	cpse	r19, r14
    2238:	34 11       	cpse	r19, r4
    223a:	36 11       	cpse	r19, r6
    223c:	40 11       	cpse	r20, r0
    223e:	8f 11       	cpse	r24, r15
    2240:	8f 11       	cpse	r24, r15
    2242:	38 11       	cpse	r19, r8
    2244:	42 11       	cpse	r20, r2
    2246:	38 11       	cpse	r19, r8
    2248:	38 11       	cpse	r19, r8
    224a:	44 11       	cpse	r20, r4
    224c:	3a 11       	cpse	r19, r10
    224e:	46 11       	cpse	r20, r6
    2250:	8f 11       	cpse	r24, r15
    2252:	8f 11       	cpse	r24, r15
    2254:	8f 11       	cpse	r24, r15
    2256:	8f 11       	cpse	r24, r15
    2258:	8f 11       	cpse	r24, r15
    225a:	8f 11       	cpse	r24, r15
    225c:	8f 11       	cpse	r24, r15
    225e:	8f 11       	cpse	r24, r15
    2260:	48 11       	cpse	r20, r8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:125
      case 35:
      case 36:
        MidiTrigOff(BD);
    2262:	88 e0       	ldi	r24, 0x08	; 8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:129
        break;
      case 38:
      case 40:
        MidiTrigOff(SD);
    2264:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <MidiTrigOff(unsigned char)>
    2268:	89 e0       	ldi	r24, 0x09	; 9
    226a:	fc cf       	rjmp	.-8      	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:132
        break;
      case 41:
        MidiTrigOff(LT);
    226c:	8a e0       	ldi	r24, 0x0A	; 10
    226e:	fa cf       	rjmp	.-12     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:137
        break;
      case 45:
      case 47:
      case 48:
        MidiTrigOff(MT);
    2270:	8b e0       	ldi	r24, 0x0B	; 11
    2272:	f8 cf       	rjmp	.-16     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:140
        break;
      case 50:
        MidiTrigOff(HT);
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	f6 cf       	rjmp	.-20     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:143
        break;
      case 34:
        MidiTrigOff(RM);
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	f4 cf       	rjmp	.-24     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:146
        break;
      case 39:
        MidiTrigOff(HC);
    227c:	84 e0       	ldi	r24, 0x04	; 4
    227e:	f2 cf       	rjmp	.-28     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:149
        break;
      case 42:
        MidiTrigOff(CH);
    2280:	8e e0       	ldi	r24, 0x0E	; 14
    2282:	f0 cf       	rjmp	.-32     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:152
        break;
      case 46:
        MidiTrigOff(OH);
    2284:	8f e0       	ldi	r24, 0x0F	; 15
    2286:	ee cf       	rjmp	.-36     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:155
        break;
      case 49:
        MidiTrigOff(CRASH);
    2288:	87 e0       	ldi	r24, 0x07	; 7
    228a:	ec cf       	rjmp	.-40     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:158
        break;
      case 51:
        MidiTrigOff(RIDE);
    228c:	86 e0       	ldi	r24, 0x06	; 6
    228e:	ea cf       	rjmp	.-44     	; 0x2264 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x5a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:161
        break;
      case 60:
        TRIG_HIGH;
    2290:	12 9a       	sbi	0x02, 2	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:162
        break;
    2292:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:167
      }
    }
  }
  else{
    if (channel == seq.RXchannel){
    2294:	89 13       	cpse	r24, r25
    2296:	43 c0       	rjmp	.+134    	; 0x231e <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x114>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:168
      switch (pitch){
    2298:	e2 52       	subi	r30, 0x22	; 34
    229a:	eb 31       	cpi	r30, 0x1B	; 27
    229c:	08 f0       	brcs	.+2      	; 0x22a0 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x96>
    229e:	3f c0       	rjmp	.+126    	; 0x231e <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x114>
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	eb 5a       	subi	r30, 0xAB	; 171
    22a4:	fe 4e       	sbci	r31, 0xEE	; 238
    22a6:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    22aa:	7b 11       	cpse	r23, r11
    22ac:	70 11       	cpse	r23, r0
    22ae:	70 11       	cpse	r23, r0
    22b0:	8f 11       	cpse	r24, r15
    22b2:	73 11       	cpse	r23, r3
    22b4:	7d 11       	cpse	r23, r13
    22b6:	73 11       	cpse	r23, r3
    22b8:	75 11       	cpse	r23, r5
    22ba:	7f 11       	cpse	r23, r15
    22bc:	8f 11       	cpse	r24, r15
    22be:	8f 11       	cpse	r24, r15
    22c0:	77 11       	cpse	r23, r7
    22c2:	81 11       	cpse	r24, r1
    22c4:	77 11       	cpse	r23, r7
    22c6:	77 11       	cpse	r23, r7
    22c8:	85 11       	cpse	r24, r5
    22ca:	79 11       	cpse	r23, r9
    22cc:	83 11       	cpse	r24, r3
    22ce:	8f 11       	cpse	r24, r15
    22d0:	8f 11       	cpse	r24, r15
    22d2:	8f 11       	cpse	r24, r15
    22d4:	8f 11       	cpse	r24, r15
    22d6:	8f 11       	cpse	r24, r15
    22d8:	8f 11       	cpse	r24, r15
    22da:	8f 11       	cpse	r24, r15
    22dc:	8f 11       	cpse	r24, r15
    22de:	87 11       	cpse	r24, r7
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:171
      case 35:
      case 36:
        MidiTrigOn(BD, velocity);
    22e0:	88 e0       	ldi	r24, 0x08	; 8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:204
        break;
      case 51:
        MidiTrigOn(RIDE, velocity);
        break;
      case 49:
        MidiTrigOn(CRASH, velocity);
    22e2:	0c 94 84 10 	jmp	0x2108	; 0x2108 <MidiTrigOn(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:175
      case 36:
        MidiTrigOn(BD, velocity);
        break;
      case 38:
      case 40:
        MidiTrigOn(SD, velocity);
    22e6:	89 e0       	ldi	r24, 0x09	; 9
    22e8:	fc cf       	rjmp	.-8      	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:178
        break;
      case 41:
        MidiTrigOn(LT, velocity);
    22ea:	8a e0       	ldi	r24, 0x0A	; 10
    22ec:	fa cf       	rjmp	.-12     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:183
        break;
      case 45:
      case 47:
      case 48:
        MidiTrigOn(MT, velocity);
    22ee:	8b e0       	ldi	r24, 0x0B	; 11
    22f0:	f8 cf       	rjmp	.-16     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:186
        break;
      case 50:
        MidiTrigOn(HT, velocity);
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	f6 cf       	rjmp	.-20     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:189
        break;
      case 34:
        MidiTrigOn(RM, velocity);
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	f4 cf       	rjmp	.-24     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:192
        break;
      case 39:
        MidiTrigOn(HC, velocity);
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	f2 cf       	rjmp	.-28     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:195
        break;
      case 42:
        MidiTrigOn(CH, velocity);
    22fe:	8e e0       	ldi	r24, 0x0E	; 14
    2300:	f0 cf       	rjmp	.-32     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:198
        break;
      case 46:
        MidiTrigOn(OH, velocity);
    2302:	8f e0       	ldi	r24, 0x0F	; 15
    2304:	ee cf       	rjmp	.-36     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:201
        break;
      case 51:
        MidiTrigOn(RIDE, velocity);
    2306:	86 e0       	ldi	r24, 0x06	; 6
    2308:	ec cf       	rjmp	.-40     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:204
        break;
      case 49:
        MidiTrigOn(CRASH, velocity);
    230a:	87 e0       	ldi	r24, 0x07	; 7
    230c:	ea cf       	rjmp	.-44     	; 0x22e2 <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:207
        break;
      case 60:
        if ((~muteInst) & 1) {                                       // [1.028] mute
    230e:	80 91 a2 0c 	lds	r24, 0x0CA2	; 0x800ca2 <muteInst>
    2312:	80 fd       	sbrc	r24, 0
    2314:	04 c0       	rjmp	.+8      	; 0x231e <HandleNoteOn(unsigned char, unsigned char, unsigned char)+0x114>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:208
          TRIG_LOW;
    2316:	12 98       	cbi	0x02, 2	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:209
          trigCounterStart = TRUE;                                   // [zabox] [1.027] solves short trig 1 pulse
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <trigCounterStart>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:215
        }
        break;
      }
    }
  }
}
    231e:	08 95       	ret

00002320 <HandleNoteOff(unsigned char, unsigned char, unsigned char)>:
_Z13HandleNoteOffhhh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:220

//Handle noteOFF
void HandleNoteOff(byte channel, byte pitch, byte velocity)
{
  if (channel == seq.RXchannel){
    2320:	90 91 43 1e 	lds	r25, 0x1E43	; 0x801e43 <seq+0x4>
    2324:	98 13       	cpse	r25, r24
    2326:	40 c0       	rjmp	.+128    	; 0x23a8 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x88>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:221
    switch (pitch){
    2328:	62 52       	subi	r22, 0x22	; 34
    232a:	6b 31       	cpi	r22, 0x1B	; 27
    232c:	08 f0       	brcs	.+2      	; 0x2330 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x10>
    232e:	3c c0       	rjmp	.+120    	; 0x23a8 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x88>
    2330:	e6 2f       	mov	r30, r22
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	e2 56       	subi	r30, 0x62	; 98
    2336:	fe 4e       	sbci	r31, 0xEE	; 238
    2338:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    233c:	c4 11       	cpse	r28, r4
    233e:	b9 11       	cpse	r27, r9
    2340:	b9 11       	cpse	r27, r9
    2342:	d4 11       	cpse	r29, r4
    2344:	bc 11       	cpse	r27, r12
    2346:	c6 11       	cpse	r28, r6
    2348:	bc 11       	cpse	r27, r12
    234a:	be 11       	cpse	r27, r14
    234c:	c8 11       	cpse	r28, r8
    234e:	d4 11       	cpse	r29, r4
    2350:	d4 11       	cpse	r29, r4
    2352:	c0 11       	cpse	r28, r0
    2354:	ca 11       	cpse	r28, r10
    2356:	c0 11       	cpse	r28, r0
    2358:	c0 11       	cpse	r28, r0
    235a:	ce 11       	cpse	r28, r14
    235c:	c2 11       	cpse	r28, r2
    235e:	cc 11       	cpse	r28, r12
    2360:	d4 11       	cpse	r29, r4
    2362:	d4 11       	cpse	r29, r4
    2364:	d4 11       	cpse	r29, r4
    2366:	d4 11       	cpse	r29, r4
    2368:	d4 11       	cpse	r29, r4
    236a:	d4 11       	cpse	r29, r4
    236c:	d4 11       	cpse	r29, r4
    236e:	d4 11       	cpse	r29, r4
    2370:	d0 11       	cpse	r29, r0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:224
    case 35:
    case 36:
      MidiTrigOff(BD);
    2372:	88 e0       	ldi	r24, 0x08	; 8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:257
      break;
    case 51:
      MidiTrigOff(RIDE);
      break;
    case 49:
      MidiTrigOff(CRASH);
    2374:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <MidiTrigOff(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:228
    case 36:
      MidiTrigOff(BD);
      break;
    case 38:
    case 40:
      MidiTrigOff(SD);
    2378:	89 e0       	ldi	r24, 0x09	; 9
    237a:	fc cf       	rjmp	.-8      	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:231
      break;
    case 41:
      MidiTrigOff(LT);
    237c:	8a e0       	ldi	r24, 0x0A	; 10
    237e:	fa cf       	rjmp	.-12     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:236
      break;
    case 45:
    case 47:
    case 48:
      MidiTrigOff(MT);
    2380:	8b e0       	ldi	r24, 0x0B	; 11
    2382:	f8 cf       	rjmp	.-16     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:239
      break;
    case 50:
      MidiTrigOff(HT);
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	f6 cf       	rjmp	.-20     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:242
      break;
    case 34:
      MidiTrigOff(RM);
    2388:	83 e0       	ldi	r24, 0x03	; 3
    238a:	f4 cf       	rjmp	.-24     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:245
      break;
    case 39:
      MidiTrigOff(HC);
    238c:	84 e0       	ldi	r24, 0x04	; 4
    238e:	f2 cf       	rjmp	.-28     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:248
      break;
    case 42:
      MidiTrigOff(CH);
    2390:	8e e0       	ldi	r24, 0x0E	; 14
    2392:	f0 cf       	rjmp	.-32     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:251
      break;
    case 46:
      MidiTrigOff(OH);
    2394:	8f e0       	ldi	r24, 0x0F	; 15
    2396:	ee cf       	rjmp	.-36     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:254
      break;
    case 51:
      MidiTrigOff(RIDE);
    2398:	86 e0       	ldi	r24, 0x06	; 6
    239a:	ec cf       	rjmp	.-40     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:257
      break;
    case 49:
      MidiTrigOff(CRASH);
    239c:	87 e0       	ldi	r24, 0x07	; 7
    239e:	ea cf       	rjmp	.-44     	; 0x2374 <HandleNoteOff(unsigned char, unsigned char, unsigned char)+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:260
      break;
    case 60:
      if (gateInst & 1) TRIG_HIGH;                             // [zabox] [1.028] gate
    23a0:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <gateInst>
    23a4:	80 fd       	sbrc	r24, 0
    23a6:	12 9a       	sbi	0x02, 2	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:264
      break;
    }
  }   
}
    23a8:	08 95       	ret

000023aa <SetHHPattern()>:
_Z12SetHHPatternv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:24
  seq.syncChanged = FALSE;
}

//Combine OH and CH pattern to trig HH and set total accent for ride and crash
void SetHHPattern()
{
    23aa:	cf 92       	push	r12
    23ac:	df 92       	push	r13
    23ae:	ef 92       	push	r14
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:29
  //static boolean rideTotalAcc;          [zabox] [1.028] unused
  //static boolean crashTotalAcc;
  //static boolean ohTotalAcc;

  pattern[ptrnBuffer].inst[HH] = pattern[ptrnBuffer].inst[CH] | pattern[ptrnBuffer].inst[OH];
    23ba:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    23be:	89 ec       	ldi	r24, 0xC9	; 201
    23c0:	95 e0       	ldi	r25, 0x05	; 5
    23c2:	48 9f       	mul	r20, r24
    23c4:	90 01       	movw	r18, r0
    23c6:	49 9f       	mul	r20, r25
    23c8:	30 0d       	add	r19, r0
    23ca:	11 24       	eor	r1, r1
    23cc:	f9 01       	movw	r30, r18
    23ce:	e8 56       	subi	r30, 0x68	; 104
    23d0:	fd 4e       	sbci	r31, 0xED	; 237
    23d2:	ef 01       	movw	r28, r30
    23d4:	c1 5f       	subi	r28, 0xF1	; 241
    23d6:	db 4f       	sbci	r29, 0xFB	; 251
    23d8:	df 01       	movw	r26, r30
    23da:	af 5d       	subi	r26, 0xDF	; 223
    23dc:	bb 4f       	sbci	r27, 0xFB	; 251
    23de:	ed 5d       	subi	r30, 0xDD	; 221
    23e0:	fb 4f       	sbci	r31, 0xFB	; 251
    23e2:	8d 91       	ld	r24, X+
    23e4:	9c 91       	ld	r25, X
    23e6:	11 97       	sbiw	r26, 0x01	; 1
    23e8:	40 81       	ld	r20, Z
    23ea:	51 81       	ldd	r21, Z+1	; 0x01
    23ec:	84 2b       	or	r24, r20
    23ee:	95 2b       	or	r25, r21
    23f0:	99 83       	std	Y+1, r25	; 0x01
    23f2:	88 83       	st	Y, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:30
  if (curSeqMode != PTRN_TAP){
    23f4:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    23f8:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    23fc:	04 97       	sbiw	r24, 0x04	; 4
    23fe:	09 f4       	brne	.+2      	; 0x2402 <SetHHPattern()+0x58>
    2400:	55 c0       	rjmp	.+170    	; 0x24ac <SetHHPattern()+0x102>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:32
    for (int a = 0; a < NBR_STEP; a++){
      if (bitRead(pattern[ptrnBuffer].inst[CH],a) && curInst == CH) bitClear(pattern[ptrnBuffer].inst[OH],a);
    2402:	10 91 eb 01 	lds	r17, 0x01EB	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:35
      if (bitRead(pattern[ptrnBuffer].inst[OH],a) && curInst == OH){
        bitClear(pattern[ptrnBuffer].inst[CH],a);
        pattern[ptrnBuffer].velocity[CH][a] = instVelHigh[HH];
    2406:	00 91 a4 01 	lds	r16, 0x01A4	; 0x8001a4 <instVelHigh+0x5>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:31
  //static boolean crashTotalAcc;
  //static boolean ohTotalAcc;

  pattern[ptrnBuffer].inst[HH] = pattern[ptrnBuffer].inst[CH] | pattern[ptrnBuffer].inst[OH];
  if (curSeqMode != PTRN_TAP){
    for (int a = 0; a < NBR_STEP; a++){
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:32
      if (bitRead(pattern[ptrnBuffer].inst[CH],a) && curInst == CH) bitClear(pattern[ptrnBuffer].inst[OH],a);
    240e:	c1 2c       	mov	r12, r1
    2410:	d1 2c       	mov	r13, r1
    2412:	76 01       	movw	r14, r12
    2414:	c3 94       	inc	r12
    2416:	4d 91       	ld	r20, X+
    2418:	5c 91       	ld	r21, X
    241a:	11 97       	sbiw	r26, 0x01	; 1
    241c:	08 2e       	mov	r0, r24
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <SetHHPattern()+0x7a>
    2420:	56 95       	lsr	r21
    2422:	47 95       	ror	r20
    2424:	0a 94       	dec	r0
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <SetHHPattern()+0x76>
    2428:	40 ff       	sbrs	r20, 0
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <SetHHPattern()+0xaa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:32 (discriminator 1)
    242c:	1e 30       	cpi	r17, 0x0E	; 14
    242e:	91 f4       	brne	.+36     	; 0x2454 <SetHHPattern()+0xaa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:32 (discriminator 2)
    2430:	b7 01       	movw	r22, r14
    2432:	a6 01       	movw	r20, r12
    2434:	08 2e       	mov	r0, r24
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <SetHHPattern()+0x96>
    2438:	44 0f       	add	r20, r20
    243a:	55 1f       	adc	r21, r21
    243c:	66 1f       	adc	r22, r22
    243e:	77 1f       	adc	r23, r23
    2440:	0a 94       	dec	r0
    2442:	d2 f7       	brpl	.-12     	; 0x2438 <SetHHPattern()+0x8e>
    2444:	40 95       	com	r20
    2446:	50 95       	com	r21
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	46 23       	and	r20, r22
    244e:	57 23       	and	r21, r23
    2450:	51 83       	std	Z+1, r21	; 0x01
    2452:	40 83       	st	Z, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:33
      if (bitRead(pattern[ptrnBuffer].inst[OH],a) && curInst == OH){
    2454:	40 81       	ld	r20, Z
    2456:	51 81       	ldd	r21, Z+1	; 0x01
    2458:	08 2e       	mov	r0, r24
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <SetHHPattern()+0xb6>
    245c:	56 95       	lsr	r21
    245e:	47 95       	ror	r20
    2460:	0a 94       	dec	r0
    2462:	e2 f7       	brpl	.-8      	; 0x245c <SetHHPattern()+0xb2>
    2464:	40 ff       	sbrs	r20, 0
    2466:	1d c0       	rjmp	.+58     	; 0x24a2 <SetHHPattern()+0xf8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:33 (discriminator 1)
    2468:	1f 30       	cpi	r17, 0x0F	; 15
    246a:	d9 f4       	brne	.+54     	; 0x24a2 <SetHHPattern()+0xf8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:34
        bitClear(pattern[ptrnBuffer].inst[CH],a);
    246c:	b7 01       	movw	r22, r14
    246e:	a6 01       	movw	r20, r12
    2470:	08 2e       	mov	r0, r24
    2472:	04 c0       	rjmp	.+8      	; 0x247c <SetHHPattern()+0xd2>
    2474:	44 0f       	add	r20, r20
    2476:	55 1f       	adc	r21, r21
    2478:	66 1f       	adc	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	0a 94       	dec	r0
    247e:	d2 f7       	brpl	.-12     	; 0x2474 <SetHHPattern()+0xca>
    2480:	40 95       	com	r20
    2482:	50 95       	com	r21
    2484:	6d 91       	ld	r22, X+
    2486:	7c 91       	ld	r23, X
    2488:	11 97       	sbiw	r26, 0x01	; 1
    248a:	46 23       	and	r20, r22
    248c:	57 23       	and	r21, r23
    248e:	11 96       	adiw	r26, 0x01	; 1
    2490:	5c 93       	st	X, r21
    2492:	4e 93       	st	-X, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:35
        pattern[ptrnBuffer].velocity[CH][a] = instVelHigh[HH];
    2494:	ac 01       	movw	r20, r24
    2496:	42 0f       	add	r20, r18
    2498:	53 1f       	adc	r21, r19
    249a:	43 54       	subi	r20, 0x43	; 67
    249c:	58 4e       	sbci	r21, 0xE8	; 232
    249e:	ea 01       	movw	r28, r20
    24a0:	08 83       	st	Y, r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:31 (discriminator 2)
  //static boolean crashTotalAcc;
  //static boolean ohTotalAcc;

  pattern[ptrnBuffer].inst[HH] = pattern[ptrnBuffer].inst[CH] | pattern[ptrnBuffer].inst[OH];
  if (curSeqMode != PTRN_TAP){
    for (int a = 0; a < NBR_STEP; a++){
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	80 31       	cpi	r24, 0x10	; 16
    24a6:	91 05       	cpc	r25, r1
    24a8:	09 f0       	breq	.+2      	; 0x24ac <SetHHPattern()+0x102>
    24aa:	b5 cf       	rjmp	.-150    	; 0x2416 <SetHHPattern()+0x6c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:70
       else pattern[ptrnBuffer].velocity[CH][a] = instVelHigh[HH];*/
       
       
    }
  }
}
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	df 90       	pop	r13
    24ba:	cf 90       	pop	r12
    24bc:	08 95       	ret

000024be <CopyPatternToBuffer(unsigned char)>:
_Z19CopyPatternToBufferh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:76

//copy pattern to buffer
void CopyPatternToBuffer(byte patternNum)
{
  for (byte i = 0; i < NBR_INST; i++){ 
    bufferedPattern.inst[i] =  pattern[ptrnBuffer].inst[i] ;
    24be:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	a4 ed       	ldi	r26, 0xD4	; 212
    24c6:	b0 e1       	ldi	r27, 0x10	; 16
    24c8:	89 ec       	ldi	r24, 0xC9	; 201
    24ca:	95 e0       	ldi	r25, 0x05	; 5
    24cc:	28 9f       	mul	r18, r24
    24ce:	a0 01       	movw	r20, r0
    24d0:	29 9f       	mul	r18, r25
    24d2:	50 0d       	add	r21, r0
    24d4:	38 9f       	mul	r19, r24
    24d6:	50 0d       	add	r21, r0
    24d8:	11 24       	eor	r1, r1
    24da:	48 56       	subi	r20, 0x68	; 104
    24dc:	5d 4e       	sbci	r21, 0xED	; 237
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:76 (discriminator 2)
    24e2:	fc 01       	movw	r30, r24
    24e4:	eb 5f       	subi	r30, 0xFB	; 251
    24e6:	fb 4f       	sbci	r31, 0xFB	; 251
    24e8:	e4 0f       	add	r30, r20
    24ea:	f5 1f       	adc	r31, r21
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	6d 93       	st	X+, r22
    24f2:	7d 93       	st	X+, r23
    24f4:	02 96       	adiw	r24, 0x02	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:75 (discriminator 2)
}

//copy pattern to buffer
void CopyPatternToBuffer(byte patternNum)
{
  for (byte i = 0; i < NBR_INST; i++){ 
    24f6:	80 32       	cpi	r24, 0x20	; 32
    24f8:	91 05       	cpc	r25, r1
    24fa:	99 f7       	brne	.-26     	; 0x24e2 <CopyPatternToBuffer(unsigned char)+0x24>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:78
    bufferedPattern.inst[i] =  pattern[ptrnBuffer].inst[i] ;
  }
  bufferedPattern.length = pattern[ptrnBuffer].length;
    24fc:	69 ec       	ldi	r22, 0xC9	; 201
    24fe:	75 e0       	ldi	r23, 0x05	; 5
    2500:	26 9f       	mul	r18, r22
    2502:	c0 01       	movw	r24, r0
    2504:	27 9f       	mul	r18, r23
    2506:	90 0d       	add	r25, r0
    2508:	36 9f       	mul	r19, r22
    250a:	90 0d       	add	r25, r0
    250c:	11 24       	eor	r1, r1
    250e:	88 56       	subi	r24, 0x68	; 104
    2510:	9d 4e       	sbci	r25, 0xED	; 237
    2512:	fc 01       	movw	r30, r24
    2514:	fc 5f       	subi	r31, 0xFC	; 252
    2516:	60 81       	ld	r22, Z
    2518:	60 93 cf 10 	sts	0x10CF, r22	; 0x8010cf <bufferedPattern+0x400>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:79
  bufferedPattern.scale = pattern[ptrnBuffer].scale;
    251c:	31 96       	adiw	r30, 0x01	; 1
    251e:	60 81       	ld	r22, Z
    2520:	60 93 d0 10 	sts	0x10D0, r22	; 0x8010d0 <bufferedPattern+0x401>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:80
  bufferedPattern.shuffle = pattern[ptrnBuffer].shuffle;
    2524:	32 96       	adiw	r30, 0x02	; 2
    2526:	60 81       	ld	r22, Z
    2528:	60 93 d2 10 	sts	0x10D2, r22	; 0x8010d2 <bufferedPattern+0x403>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:81
  bufferedPattern.flam = pattern[ptrnBuffer].flam;
    252c:	31 96       	adiw	r30, 0x01	; 1
    252e:	60 81       	ld	r22, Z
    2530:	60 93 d3 10 	sts	0x10D3, r22	; 0x8010d3 <bufferedPattern+0x404>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:82
  bufferedPattern.extLength = pattern[ptrnBuffer].extLength;
    2534:	ef 53       	subi	r30, 0x3F	; 63
    2536:	fe 4f       	sbci	r31, 0xFE	; 254
    2538:	60 81       	ld	r22, Z
    253a:	60 93 94 12 	sts	0x1294, r22	; 0x801294 <bufferedPattern+0x5c5>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:83
  bufferedPattern.totalAcc = pattern[ptrnBuffer].totalAcc;
    253e:	88 53       	subi	r24, 0x38	; 56
    2540:	9a 4f       	sbci	r25, 0xFA	; 250
    2542:	dc 01       	movw	r26, r24
    2544:	8c 91       	ld	r24, X
    2546:	80 93 97 12 	sts	0x1297, r24	; 0x801297 <bufferedPattern+0x5c8>
    254a:	a4 e1       	ldi	r26, 0x14	; 20
    254c:	b2 e1       	ldi	r27, 0x12	; 18
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:85 (discriminator 3)

  for ( byte j = 0; j < pattern[ptrnBuffer].extLength; j++){
    2552:	86 17       	cp	r24, r22
    2554:	48 f4       	brcc	.+18     	; 0x2568 <CopyPatternToBuffer(unsigned char)+0xaa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:86 (discriminator 2)
    bufferedPattern.extNote[j] = pattern[ptrnBuffer].extNote[j];
    2556:	fc 01       	movw	r30, r24
    2558:	eb 5b       	subi	r30, 0xBB	; 187
    255a:	fa 4f       	sbci	r31, 0xFA	; 250
    255c:	e4 0f       	add	r30, r20
    255e:	f5 1f       	adc	r31, r21
    2560:	70 81       	ld	r23, Z
    2562:	7d 93       	st	X+, r23
    2564:	01 96       	adiw	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:85 (discriminator 2)
  bufferedPattern.shuffle = pattern[ptrnBuffer].shuffle;
  bufferedPattern.flam = pattern[ptrnBuffer].flam;
  bufferedPattern.extLength = pattern[ptrnBuffer].extLength;
  bufferedPattern.totalAcc = pattern[ptrnBuffer].totalAcc;

  for ( byte j = 0; j < pattern[ptrnBuffer].extLength; j++){
    2566:	f5 cf       	rjmp	.-22     	; 0x2552 <CopyPatternToBuffer(unsigned char)+0x94>
    2568:	49 ec       	ldi	r20, 0xC9	; 201
    256a:	55 e0       	ldi	r21, 0x05	; 5
    256c:	24 9f       	mul	r18, r20
    256e:	c0 01       	movw	r24, r0
    2570:	25 9f       	mul	r18, r21
    2572:	90 0d       	add	r25, r0
    2574:	34 9f       	mul	r19, r20
    2576:	90 0d       	add	r25, r0
    2578:	11 24       	eor	r1, r1
    257a:	88 56       	subi	r24, 0x68	; 104
    257c:	9d 4e       	sbci	r25, 0xED	; 237
    257e:	2f ec       	ldi	r18, 0xCF	; 207
    2580:	3c e0       	ldi	r19, 0x0C	; 12
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:83
  bufferedPattern.length = pattern[ptrnBuffer].length;
  bufferedPattern.scale = pattern[ptrnBuffer].scale;
  bufferedPattern.shuffle = pattern[ptrnBuffer].shuffle;
  bufferedPattern.flam = pattern[ptrnBuffer].flam;
  bufferedPattern.extLength = pattern[ptrnBuffer].extLength;
  bufferedPattern.totalAcc = pattern[ptrnBuffer].totalAcc;
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	40 e0       	ldi	r20, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:90 (discriminator 2)
  for ( byte j = 0; j < pattern[ptrnBuffer].extLength; j++){
    bufferedPattern.extNote[j] = pattern[ptrnBuffer].extNote[j];
  }
  for (byte i = 0; i < NBR_INST; i++){//loop as many instrument for a page
    for (byte j = 0; j < NBR_STEP; j++){
      bufferedPattern.velocity[i][j] = pattern[ptrnBuffer].velocity[i][j]; 
    2586:	ba 01       	movw	r22, r20
    2588:	6b 5b       	subi	r22, 0xBB	; 187
    258a:	7b 4f       	sbci	r23, 0xFB	; 251
    258c:	f9 01       	movw	r30, r18
    258e:	e6 0f       	add	r30, r22
    2590:	f7 1f       	adc	r31, r23
    2592:	68 0f       	add	r22, r24
    2594:	79 1f       	adc	r23, r25
    2596:	db 01       	movw	r26, r22
    2598:	6c 91       	ld	r22, X
    259a:	60 83       	st	Z, r22
    259c:	4f 5f       	subi	r20, 0xFF	; 255
    259e:	5f 4f       	sbci	r21, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:89 (discriminator 2)

  for ( byte j = 0; j < pattern[ptrnBuffer].extLength; j++){
    bufferedPattern.extNote[j] = pattern[ptrnBuffer].extNote[j];
  }
  for (byte i = 0; i < NBR_INST; i++){//loop as many instrument for a page
    for (byte j = 0; j < NBR_STEP; j++){
    25a0:	40 31       	cpi	r20, 0x10	; 16
    25a2:	51 05       	cpc	r21, r1
    25a4:	81 f7       	brne	.-32     	; 0x2586 <CopyPatternToBuffer(unsigned char)+0xc8>
    25a6:	40 96       	adiw	r24, 0x10	; 16
    25a8:	20 5f       	subi	r18, 0xF0	; 240
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:88 (discriminator 2)
  bufferedPattern.totalAcc = pattern[ptrnBuffer].totalAcc;

  for ( byte j = 0; j < pattern[ptrnBuffer].extLength; j++){
    bufferedPattern.extNote[j] = pattern[ptrnBuffer].extNote[j];
  }
  for (byte i = 0; i < NBR_INST; i++){//loop as many instrument for a page
    25ac:	bd e0       	ldi	r27, 0x0D	; 13
    25ae:	2f 3c       	cpi	r18, 0xCF	; 207
    25b0:	3b 07       	cpc	r19, r27
    25b2:	39 f7       	brne	.-50     	; 0x2582 <CopyPatternToBuffer(unsigned char)+0xc4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:93
    for (byte j = 0; j < NBR_STEP; j++){
      bufferedPattern.velocity[i][j] = pattern[ptrnBuffer].velocity[i][j]; 
    }
  }
}
    25b4:	08 95       	ret

000025b6 <PasteBufferToPattern(unsigned char)>:
_Z20PasteBufferToPatternh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:99

//paste buffer to current pattern
void PasteBufferToPattern(byte patternNum)
{
  for (byte i = 0; i < NBR_INST; i++){ 
    pattern[ptrnBuffer].inst[i] =  bufferedPattern.inst[i];
    25b6:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	a4 ed       	ldi	r26, 0xD4	; 212
    25be:	b0 e1       	ldi	r27, 0x10	; 16
    25c0:	89 ec       	ldi	r24, 0xC9	; 201
    25c2:	95 e0       	ldi	r25, 0x05	; 5
    25c4:	28 9f       	mul	r18, r24
    25c6:	a0 01       	movw	r20, r0
    25c8:	29 9f       	mul	r18, r25
    25ca:	50 0d       	add	r21, r0
    25cc:	38 9f       	mul	r19, r24
    25ce:	50 0d       	add	r21, r0
    25d0:	11 24       	eor	r1, r1
    25d2:	48 56       	subi	r20, 0x68	; 104
    25d4:	5d 4e       	sbci	r21, 0xED	; 237
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:99 (discriminator 2)
    25da:	6d 91       	ld	r22, X+
    25dc:	7d 91       	ld	r23, X+
    25de:	fc 01       	movw	r30, r24
    25e0:	eb 5f       	subi	r30, 0xFB	; 251
    25e2:	fb 4f       	sbci	r31, 0xFB	; 251
    25e4:	e4 0f       	add	r30, r20
    25e6:	f5 1f       	adc	r31, r21
    25e8:	71 83       	std	Z+1, r23	; 0x01
    25ea:	60 83       	st	Z, r22
    25ec:	02 96       	adiw	r24, 0x02	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:98 (discriminator 2)
}

//paste buffer to current pattern
void PasteBufferToPattern(byte patternNum)
{
  for (byte i = 0; i < NBR_INST; i++){ 
    25ee:	80 32       	cpi	r24, 0x20	; 32
    25f0:	91 05       	cpc	r25, r1
    25f2:	99 f7       	brne	.-26     	; 0x25da <PasteBufferToPattern(unsigned char)+0x24>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:101
    pattern[ptrnBuffer].inst[i] =  bufferedPattern.inst[i];
  }
  pattern[ptrnBuffer].length = bufferedPattern.length;
    25f4:	69 ec       	ldi	r22, 0xC9	; 201
    25f6:	75 e0       	ldi	r23, 0x05	; 5
    25f8:	26 9f       	mul	r18, r22
    25fa:	c0 01       	movw	r24, r0
    25fc:	27 9f       	mul	r18, r23
    25fe:	90 0d       	add	r25, r0
    2600:	36 9f       	mul	r19, r22
    2602:	90 0d       	add	r25, r0
    2604:	11 24       	eor	r1, r1
    2606:	88 56       	subi	r24, 0x68	; 104
    2608:	9d 4e       	sbci	r25, 0xED	; 237
    260a:	fc 01       	movw	r30, r24
    260c:	fc 5f       	subi	r31, 0xFC	; 252
    260e:	60 91 cf 10 	lds	r22, 0x10CF	; 0x8010cf <bufferedPattern+0x400>
    2612:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:102
  pattern[ptrnBuffer].scale = bufferedPattern.scale;
    2614:	31 96       	adiw	r30, 0x01	; 1
    2616:	60 91 d0 10 	lds	r22, 0x10D0	; 0x8010d0 <bufferedPattern+0x401>
    261a:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:103
  pattern[ptrnBuffer].shuffle = bufferedPattern.shuffle;
    261c:	32 96       	adiw	r30, 0x02	; 2
    261e:	60 91 d2 10 	lds	r22, 0x10D2	; 0x8010d2 <bufferedPattern+0x403>
    2622:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:104
  pattern[ptrnBuffer].flam = bufferedPattern.flam;
    2624:	31 96       	adiw	r30, 0x01	; 1
    2626:	60 91 d3 10 	lds	r22, 0x10D3	; 0x8010d3 <bufferedPattern+0x404>
    262a:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:105
  pattern[ptrnBuffer].extLength = bufferedPattern.extLength;
    262c:	60 91 94 12 	lds	r22, 0x1294	; 0x801294 <bufferedPattern+0x5c5>
    2630:	ef 53       	subi	r30, 0x3F	; 63
    2632:	fe 4f       	sbci	r31, 0xFE	; 254
    2634:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:106
  pattern[ptrnBuffer].totalAcc = bufferedPattern.totalAcc;
    2636:	88 53       	subi	r24, 0x38	; 56
    2638:	9a 4f       	sbci	r25, 0xFA	; 250
    263a:	70 91 97 12 	lds	r23, 0x1297	; 0x801297 <bufferedPattern+0x5c8>
    263e:	dc 01       	movw	r26, r24
    2640:	7c 93       	st	X, r23
    2642:	a4 e1       	ldi	r26, 0x14	; 20
    2644:	b2 e1       	ldi	r27, 0x12	; 18
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:108 (discriminator 3)

  for ( byte j = 0; j < bufferedPattern.extLength; j++){
    264a:	86 17       	cp	r24, r22
    264c:	48 f4       	brcc	.+18     	; 0x2660 <PasteBufferToPattern(unsigned char)+0xaa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:109 (discriminator 2)
    pattern[ptrnBuffer].extNote[j] = bufferedPattern.extNote[j];
    264e:	7d 91       	ld	r23, X+
    2650:	fc 01       	movw	r30, r24
    2652:	eb 5b       	subi	r30, 0xBB	; 187
    2654:	fa 4f       	sbci	r31, 0xFA	; 250
    2656:	e4 0f       	add	r30, r20
    2658:	f5 1f       	adc	r31, r21
    265a:	70 83       	st	Z, r23
    265c:	01 96       	adiw	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:108 (discriminator 2)
  pattern[ptrnBuffer].shuffle = bufferedPattern.shuffle;
  pattern[ptrnBuffer].flam = bufferedPattern.flam;
  pattern[ptrnBuffer].extLength = bufferedPattern.extLength;
  pattern[ptrnBuffer].totalAcc = bufferedPattern.totalAcc;

  for ( byte j = 0; j < bufferedPattern.extLength; j++){
    265e:	f5 cf       	rjmp	.-22     	; 0x264a <PasteBufferToPattern(unsigned char)+0x94>
    2660:	4f ec       	ldi	r20, 0xCF	; 207
    2662:	5c e0       	ldi	r21, 0x0C	; 12
    2664:	69 ec       	ldi	r22, 0xC9	; 201
    2666:	75 e0       	ldi	r23, 0x05	; 5
    2668:	26 9f       	mul	r18, r22
    266a:	c0 01       	movw	r24, r0
    266c:	27 9f       	mul	r18, r23
    266e:	90 0d       	add	r25, r0
    2670:	36 9f       	mul	r19, r22
    2672:	90 0d       	add	r25, r0
    2674:	11 24       	eor	r1, r1
    2676:	88 56       	subi	r24, 0x68	; 104
    2678:	9d 4e       	sbci	r25, 0xED	; 237
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:106
  pattern[ptrnBuffer].length = bufferedPattern.length;
  pattern[ptrnBuffer].scale = bufferedPattern.scale;
  pattern[ptrnBuffer].shuffle = bufferedPattern.shuffle;
  pattern[ptrnBuffer].flam = bufferedPattern.flam;
  pattern[ptrnBuffer].extLength = bufferedPattern.extLength;
  pattern[ptrnBuffer].totalAcc = bufferedPattern.totalAcc;
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	20 e0       	ldi	r18, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:113 (discriminator 2)
  for ( byte j = 0; j < bufferedPattern.extLength; j++){
    pattern[ptrnBuffer].extNote[j] = bufferedPattern.extNote[j];
  }
  for (byte i = 0; i < NBR_INST; i++){//loop as many instrument for a page
    for (byte j = 0; j < NBR_STEP; j++){
      pattern[ptrnBuffer].velocity[i][j] = bufferedPattern.velocity[i][j]; 
    267e:	b9 01       	movw	r22, r18
    2680:	6b 5b       	subi	r22, 0xBB	; 187
    2682:	7b 4f       	sbci	r23, 0xFB	; 251
    2684:	fc 01       	movw	r30, r24
    2686:	e6 0f       	add	r30, r22
    2688:	f7 1f       	adc	r31, r23
    268a:	64 0f       	add	r22, r20
    268c:	75 1f       	adc	r23, r21
    268e:	db 01       	movw	r26, r22
    2690:	6c 91       	ld	r22, X
    2692:	60 83       	st	Z, r22
    2694:	2f 5f       	subi	r18, 0xFF	; 255
    2696:	3f 4f       	sbci	r19, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:112 (discriminator 2)

  for ( byte j = 0; j < bufferedPattern.extLength; j++){
    pattern[ptrnBuffer].extNote[j] = bufferedPattern.extNote[j];
  }
  for (byte i = 0; i < NBR_INST; i++){//loop as many instrument for a page
    for (byte j = 0; j < NBR_STEP; j++){
    2698:	20 31       	cpi	r18, 0x10	; 16
    269a:	31 05       	cpc	r19, r1
    269c:	81 f7       	brne	.-32     	; 0x267e <PasteBufferToPattern(unsigned char)+0xc8>
    269e:	40 5f       	subi	r20, 0xF0	; 240
    26a0:	5f 4f       	sbci	r21, 0xFF	; 255
    26a2:	40 96       	adiw	r24, 0x10	; 16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:111 (discriminator 2)
  pattern[ptrnBuffer].totalAcc = bufferedPattern.totalAcc;

  for ( byte j = 0; j < bufferedPattern.extLength; j++){
    pattern[ptrnBuffer].extNote[j] = bufferedPattern.extNote[j];
  }
  for (byte i = 0; i < NBR_INST; i++){//loop as many instrument for a page
    26a4:	bd e0       	ldi	r27, 0x0D	; 13
    26a6:	4f 3c       	cpi	r20, 0xCF	; 207
    26a8:	5b 07       	cpc	r21, r27
    26aa:	39 f7       	brne	.-50     	; 0x267a <PasteBufferToPattern(unsigned char)+0xc4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:117
    for (byte j = 0; j < NBR_STEP; j++){
      pattern[ptrnBuffer].velocity[i][j] = bufferedPattern.velocity[i][j]; 
    }
  }

}
    26ac:	08 95       	ret

000026ae <InitPattern()>:
_Z11InitPatternv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:121

//init pattern
void InitPattern()
{
    26ae:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    26b2:	30 e0       	ldi	r19, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:122
  if (!group.priority){
    26b4:	80 91 c7 0c 	lds	r24, 0x0CC7	; 0x800cc7 <group+0x3>
    26b8:	81 11       	cpse	r24, r1
    26ba:	1a c0       	rjmp	.+52     	; 0x26f0 <InitPattern()+0x42>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:123
    group.length = pattern[ptrnBuffer].groupLength;
    26bc:	49 ec       	ldi	r20, 0xC9	; 201
    26be:	55 e0       	ldi	r21, 0x05	; 5
    26c0:	24 9f       	mul	r18, r20
    26c2:	c0 01       	movw	r24, r0
    26c4:	25 9f       	mul	r18, r21
    26c6:	90 0d       	add	r25, r0
    26c8:	34 9f       	mul	r19, r20
    26ca:	90 0d       	add	r25, r0
    26cc:	11 24       	eor	r1, r1
    26ce:	88 56       	subi	r24, 0x68	; 104
    26d0:	9d 4e       	sbci	r25, 0xED	; 237
    26d2:	fc 01       	movw	r30, r24
    26d4:	e9 53       	subi	r30, 0x39	; 57
    26d6:	fa 4f       	sbci	r31, 0xFA	; 250
    26d8:	40 81       	ld	r20, Z
    26da:	40 93 c4 0c 	sts	0x0CC4, r20	; 0x800cc4 <group>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:124
    group.firstPattern = curPattern - pattern[ptrnBuffer].groupPos;
    26de:	8a 53       	subi	r24, 0x3A	; 58
    26e0:	9a 4f       	sbci	r25, 0xFA	; 250
    26e2:	40 91 34 1e 	lds	r20, 0x1E34	; 0x801e34 <curPattern>
    26e6:	fc 01       	movw	r30, r24
    26e8:	80 81       	ld	r24, Z
    26ea:	48 1b       	sub	r20, r24
    26ec:	40 93 c5 0c 	sts	0x0CC5, r20	; 0x800cc5 <group+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:128
  }
  //Init Ride, Crash velocity to HIGH_VEL
  for (int stp = 0; stp < NBR_STEP; stp++){
    if (pattern[ptrnBuffer].velocity[CH][stp] == 0)  pattern[ptrnBuffer].velocity[CH][stp] = instVelHigh[HH];//HH
    26f0:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <instVelHigh+0x5>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:129
    pattern[ptrnBuffer].velocity[CRASH][stp] = instVelHigh[CRASH];//CRASH
    26f4:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <instVelHigh+0x7>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:130
    pattern[ptrnBuffer].velocity[RIDE][stp] = instVelHigh[RIDE];//RIDE
    26f8:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <instVelHigh+0x6>
    26fc:	89 ec       	ldi	r24, 0xC9	; 201
    26fe:	95 e0       	ldi	r25, 0x05	; 5
    2700:	28 9f       	mul	r18, r24
    2702:	f0 01       	movw	r30, r0
    2704:	29 9f       	mul	r18, r25
    2706:	f0 0d       	add	r31, r0
    2708:	38 9f       	mul	r19, r24
    270a:	f0 0d       	add	r31, r0
    270c:	11 24       	eor	r1, r1
    270e:	e3 56       	subi	r30, 0x63	; 99
    2710:	f8 4e       	sbci	r31, 0xE8	; 232
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:131
    pattern[ptrnBuffer].velocity[TOTAL_ACC][stp] = HIGH_VEL;//TOTAL_ACC
    2716:	40 e5       	ldi	r20, 0x50	; 80
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:128
    group.length = pattern[ptrnBuffer].groupLength;
    group.firstPattern = curPattern - pattern[ptrnBuffer].groupPos;
  }
  //Init Ride, Crash velocity to HIGH_VEL
  for (int stp = 0; stp < NBR_STEP; stp++){
    if (pattern[ptrnBuffer].velocity[CH][stp] == 0)  pattern[ptrnBuffer].velocity[CH][stp] = instVelHigh[HH];//HH
    2718:	a0 a1       	ldd	r26, Z+32	; 0x20
    271a:	a1 11       	cpse	r26, r1
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <InitPattern()+0x72>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:128 (discriminator 1)
    271e:	70 a3       	std	Z+32, r23	; 0x20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:129 (discriminator 2)
    pattern[ptrnBuffer].velocity[CRASH][stp] = instVelHigh[CRASH];//CRASH
    2720:	df 01       	movw	r26, r30
    2722:	a0 55       	subi	r26, 0x50	; 80
    2724:	b1 09       	sbc	r27, r1
    2726:	6c 93       	st	X, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:130 (discriminator 2)
    pattern[ptrnBuffer].velocity[RIDE][stp] = instVelHigh[RIDE];//RIDE
    2728:	50 97       	sbiw	r26, 0x10	; 16
    272a:	5c 93       	st	X, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:131 (discriminator 2)
    pattern[ptrnBuffer].velocity[TOTAL_ACC][stp] = HIGH_VEL;//TOTAL_ACC
    272c:	41 93       	st	Z+, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:132 (discriminator 2)
    pattern[ptrnBuffer].velocity[TRIG_OUT][stp] = HIGH_VEL;//TRIG_OUT
    272e:	df 01       	movw	r26, r30
    2730:	a1 5c       	subi	r26, 0xC1	; 193
    2732:	b1 09       	sbc	r27, r1
    2734:	4c 93       	st	X, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:133 (discriminator 2)
    pattern[ptrnBuffer].velocity[EXT_INST][stp] = HIGH_VEL;//EXT_INST
    2736:	47 87       	std	Z+15, r20	; 0x0f
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:127 (discriminator 2)
  if (!group.priority){
    group.length = pattern[ptrnBuffer].groupLength;
    group.firstPattern = curPattern - pattern[ptrnBuffer].groupPos;
  }
  //Init Ride, Crash velocity to HIGH_VEL
  for (int stp = 0; stp < NBR_STEP; stp++){
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	80 31       	cpi	r24, 0x10	; 16
    273c:	91 05       	cpc	r25, r1
    273e:	61 f7       	brne	.-40     	; 0x2718 <InitPattern()+0x6a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:135
    pattern[ptrnBuffer].velocity[RIDE][stp] = instVelHigh[RIDE];//RIDE
    pattern[ptrnBuffer].velocity[TOTAL_ACC][stp] = HIGH_VEL;//TOTAL_ACC
    pattern[ptrnBuffer].velocity[TRIG_OUT][stp] = HIGH_VEL;//TRIG_OUT
    pattern[ptrnBuffer].velocity[EXT_INST][stp] = HIGH_VEL;//EXT_INST
  }
  switch (pattern[ptrnBuffer].scale){
    2740:	89 ec       	ldi	r24, 0xC9	; 201
    2742:	95 e0       	ldi	r25, 0x05	; 5
    2744:	28 9f       	mul	r18, r24
    2746:	f0 01       	movw	r30, r0
    2748:	29 9f       	mul	r18, r25
    274a:	f0 0d       	add	r31, r0
    274c:	38 9f       	mul	r19, r24
    274e:	f0 0d       	add	r31, r0
    2750:	11 24       	eor	r1, r1
    2752:	e7 56       	subi	r30, 0x67	; 103
    2754:	f9 4e       	sbci	r31, 0xE9	; 233
    2756:	80 81       	ld	r24, Z
    2758:	80 31       	cpi	r24, 0x10	; 16
    275a:	91 f0       	breq	.+36     	; 0x2780 <InitPattern()+0xd2>
    275c:	18 f4       	brcc	.+6      	; 0x2764 <InitPattern()+0xb6>
    275e:	8c 30       	cpi	r24, 0x0C	; 12
    2760:	49 f0       	breq	.+18     	; 0x2774 <InitPattern()+0xc6>
    2762:	08 95       	ret
    2764:	88 31       	cpi	r24, 0x18	; 24
    2766:	19 f0       	breq	.+6      	; 0x276e <InitPattern()+0xc0>
    2768:	80 32       	cpi	r24, 0x20	; 32
    276a:	41 f0       	breq	.+16     	; 0x277c <InitPattern()+0xce>
    276c:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:137
  case  SCALE_16:
    scaleBtn.counter = 0;
    276e:	10 92 27 1f 	sts	0x1F27, r1	; 0x801f27 <scaleBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:138
    break;
    2772:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:140
  case  SCALE_32:
    scaleBtn.counter = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:146
    break;
  case  SCALE_8t:
    scaleBtn.counter = 2;
    break;
  case  SCALE_16t:
    scaleBtn.counter = 3;
    2776:	80 93 27 1f 	sts	0x1F27, r24	; 0x801f27 <scaleBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:149
    break;
  }
}
    277a:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:143
    break;
  case  SCALE_32:
    scaleBtn.counter = 1;
    break;
  case  SCALE_8t:
    scaleBtn.counter = 2;
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	fb cf       	rjmp	.-10     	; 0x2776 <InitPattern()+0xc8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:146
    break;
  case  SCALE_16t:
    scaleBtn.counter = 3;
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	f9 cf       	rjmp	.-14     	; 0x2776 <InitPattern()+0xc8>

00002784 <InstToStepWord()>:
_Z14InstToStepWordv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:153
  }
}

//Convert Instrument Word to Step Word
void InstToStepWord()
{
    2784:	8f 92       	push	r8
    2786:	9f 92       	push	r9
    2788:	af 92       	push	r10
    278a:	bf 92       	push	r11
    278c:	cf 92       	push	r12
    278e:	df 92       	push	r13
    2790:	ef 92       	push	r14
    2792:	ff 92       	push	r15
    2794:	0f 93       	push	r16
    2796:	1f 93       	push	r17
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    27a0:	89 ec       	ldi	r24, 0xC9	; 201
    27a2:	95 e0       	ldi	r25, 0x05	; 5
    27a4:	28 9f       	mul	r18, r24
    27a6:	b0 01       	movw	r22, r0
    27a8:	29 9f       	mul	r18, r25
    27aa:	70 0d       	add	r23, r0
    27ac:	11 24       	eor	r1, r1
    27ae:	fb 01       	movw	r30, r22
    27b0:	e3 54       	subi	r30, 0x43	; 67
    27b2:	f9 4e       	sbci	r31, 0xE9	; 233
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:154
  for (int a = 0; a < NBR_STEP; a++){
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	c1 e0       	ldi	r28, 0x01	; 1
    27ba:	d0 e0       	ldi	r29, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:157
    pattern[ptrnBuffer].step[a] = 0;
    for (int b = 0; b < NBR_INST; b++){
      if (bitRead(pattern[ptrnBuffer].inst[b],a)) bitSet(pattern[ptrnBuffer].step[a],b);
    27bc:	c1 2c       	mov	r12, r1
    27be:	d1 2c       	mov	r13, r1
    27c0:	76 01       	movw	r14, r12
    27c2:	c3 94       	inc	r12
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:155

//Convert Instrument Word to Step Word
void InstToStepWord()
{
  for (int a = 0; a < NBR_STEP; a++){
    pattern[ptrnBuffer].step[a] = 0;
    27c4:	11 82       	std	Z+1, r1	; 0x01
    27c6:	10 82       	st	Z, r1
    27c8:	8e 01       	movw	r16, r28
    27ca:	02 2e       	mov	r0, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <InstToStepWord()+0x4e>
    27ce:	00 0f       	add	r16, r16
    27d0:	11 1f       	adc	r17, r17
    27d2:	0a 94       	dec	r0
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <InstToStepWord()+0x4a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:156
    for (int b = 0; b < NBR_INST; b++){
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:157
      if (bitRead(pattern[ptrnBuffer].inst[b],a)) bitSet(pattern[ptrnBuffer].step[a],b);
    27da:	dc 01       	movw	r26, r24
    27dc:	aa 0f       	add	r26, r26
    27de:	bb 1f       	adc	r27, r27
    27e0:	a6 0f       	add	r26, r22
    27e2:	b7 1f       	adc	r27, r23
    27e4:	a3 56       	subi	r26, 0x63	; 99
    27e6:	b9 4e       	sbci	r27, 0xE9	; 233
    27e8:	4d 91       	ld	r20, X+
    27ea:	5c 91       	ld	r21, X
    27ec:	40 23       	and	r20, r16
    27ee:	51 23       	and	r21, r17
    27f0:	45 2b       	or	r20, r21
    27f2:	81 f0       	breq	.+32     	; 0x2814 <InstToStepWord()+0x90>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:157 (discriminator 1)
    27f4:	40 81       	ld	r20, Z
    27f6:	51 81       	ldd	r21, Z+1	; 0x01
    27f8:	46 01       	movw	r8, r12
    27fa:	57 01       	movw	r10, r14
    27fc:	08 2e       	mov	r0, r24
    27fe:	04 c0       	rjmp	.+8      	; 0x2808 <InstToStepWord()+0x84>
    2800:	88 0c       	add	r8, r8
    2802:	99 1c       	adc	r9, r9
    2804:	aa 1c       	adc	r10, r10
    2806:	bb 1c       	adc	r11, r11
    2808:	0a 94       	dec	r0
    280a:	d2 f7       	brpl	.-12     	; 0x2800 <InstToStepWord()+0x7c>
    280c:	48 29       	or	r20, r8
    280e:	59 29       	or	r21, r9
    2810:	51 83       	std	Z+1, r21	; 0x01
    2812:	40 83       	st	Z, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:156 (discriminator 2)
//Convert Instrument Word to Step Word
void InstToStepWord()
{
  for (int a = 0; a < NBR_STEP; a++){
    pattern[ptrnBuffer].step[a] = 0;
    for (int b = 0; b < NBR_INST; b++){
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	80 31       	cpi	r24, 0x10	; 16
    2818:	91 05       	cpc	r25, r1
    281a:	f9 f6       	brne	.-66     	; 0x27da <InstToStepWord()+0x56>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:154 (discriminator 2)
}

//Convert Instrument Word to Step Word
void InstToStepWord()
{
  for (int a = 0; a < NBR_STEP; a++){
    281c:	2f 5f       	subi	r18, 0xFF	; 255
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	32 96       	adiw	r30, 0x02	; 2
    2822:	20 31       	cpi	r18, 0x10	; 16
    2824:	31 05       	cpc	r19, r1
    2826:	71 f6       	brne	.-100    	; 0x27c4 <InstToStepWord()+0x40>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:160
    pattern[ptrnBuffer].step[a] = 0;
    for (int b = 0; b < NBR_INST; b++){
      if (bitRead(pattern[ptrnBuffer].inst[b],a)) bitSet(pattern[ptrnBuffer].step[a],b);
    }
  }
}
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	df 90       	pop	r13
    2836:	cf 90       	pop	r12
    2838:	bf 90       	pop	r11
    283a:	af 90       	pop	r10
    283c:	9f 90       	pop	r9
    283e:	8f 90       	pop	r8
    2840:	08 95       	ret

00002842 <ShiftLeftPattern()>:
_Z16ShiftLeftPatternv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:164

//shift left pattern
void ShiftLeftPattern()
{
    2842:	ef 92       	push	r14
    2844:	ff 92       	push	r15
    2846:	0f 93       	push	r16
    2848:	1f 93       	push	r17
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:165
  patternWasEdited = TRUE;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
    2854:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    2858:	30 e0       	ldi	r19, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:166
  if (instBtn){//only shift selected instruments
    285a:	80 91 7b 1e 	lds	r24, 0x1E7B	; 0x801e7b <instBtn>
    285e:	81 11       	cpse	r24, r1
    2860:	63 c0       	rjmp	.+198    	; 0x2928 <ShiftLeftPattern()+0xe6>
    2862:	89 ec       	ldi	r24, 0xC9	; 201
    2864:	95 e0       	ldi	r25, 0x05	; 5
    2866:	28 9f       	mul	r18, r24
    2868:	b0 01       	movw	r22, r0
    286a:	29 9f       	mul	r18, r25
    286c:	70 0d       	add	r23, r0
    286e:	38 9f       	mul	r19, r24
    2870:	70 0d       	add	r23, r0
    2872:	11 24       	eor	r1, r1
    2874:	db 01       	movw	r26, r22
    2876:	a3 56       	subi	r26, 0x63	; 99
    2878:	b9 4e       	sbci	r27, 0xE9	; 233
    287a:	ab 01       	movw	r20, r22
    287c:	48 56       	subi	r20, 0x68	; 104
    287e:	5d 4e       	sbci	r21, 0xED	; 237
    2880:	87 e3       	ldi	r24, 0x37	; 55
    2882:	9a ef       	ldi	r25, 0xFA	; 250
    2884:	28 9f       	mul	r18, r24
    2886:	70 01       	movw	r14, r0
    2888:	29 9f       	mul	r18, r25
    288a:	f0 0c       	add	r15, r0
    288c:	38 9f       	mul	r19, r24
    288e:	f0 0c       	add	r15, r0
    2890:	11 24       	eor	r1, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:179
    for (int stp = 0; stp < NBR_STEP - 1; stp++){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp+1];
    }
  }
  else{// shift entire pattern
    for (int nbrInst = 0; nbrInst < NBR_INST; nbrInst++){
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:180
      if (bitRead(pattern[ptrnBuffer].inst[nbrInst],0)){
    2896:	ed 91       	ld	r30, X+
    2898:	fc 91       	ld	r31, X
    289a:	11 97       	sbiw	r26, 0x01	; 1
    289c:	9f 01       	movw	r18, r30
    289e:	36 95       	lsr	r19
    28a0:	27 95       	ror	r18
    28a2:	e0 ff       	sbrs	r30, 0
    28a4:	3d c0       	rjmp	.+122    	; 0x2920 <ShiftLeftPattern()+0xde>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:181
        pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]>>1 | (1<<15);
    28a6:	30 68       	ori	r19, 0x80	; 128
    28a8:	11 96       	adiw	r26, 0x01	; 1
    28aa:	3c 93       	st	X, r19
    28ac:	2e 93       	st	-X, r18
    28ae:	fa 01       	movw	r30, r20
    28b0:	ee 0d       	add	r30, r14
    28b2:	ff 1d       	adc	r31, r15
    28b4:	e6 0f       	add	r30, r22
    28b6:	f7 1f       	adc	r31, r23
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:182
        if (pattern[ptrnBuffer].velocity[nbrInst][0] > instVelLow[nbrInst]) pattern[ptrnBuffer].velocity[nbrInst][15] = instVelHigh[nbrInst];
    28b8:	9c 01       	movw	r18, r24
    28ba:	21 57       	subi	r18, 0x71	; 113
    28bc:	3e 4f       	sbci	r19, 0xFE	; 254
    28be:	e9 01       	movw	r28, r18
    28c0:	28 81       	ld	r18, Y
    28c2:	8f 01       	movw	r16, r30
    28c4:	0b 5b       	subi	r16, 0xBB	; 187
    28c6:	1b 4f       	sbci	r17, 0xFB	; 251
    28c8:	e8 01       	movw	r28, r16
    28ca:	38 81       	ld	r19, Y
    28cc:	ec 5a       	subi	r30, 0xAC	; 172
    28ce:	fb 4f       	sbci	r31, 0xFB	; 251
    28d0:	23 17       	cp	r18, r19
    28d2:	28 f4       	brcc	.+10     	; 0x28de <ShiftLeftPattern()+0x9c>
    28d4:	9c 01       	movw	r18, r24
    28d6:	21 56       	subi	r18, 0x61	; 97
    28d8:	3e 4f       	sbci	r19, 0xFE	; 254
    28da:	e9 01       	movw	r28, r18
    28dc:	28 81       	ld	r18, Y
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:183
        else pattern[ptrnBuffer].velocity[nbrInst][15] = instVelLow[nbrInst];
    28de:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:179
    for (int stp = 0; stp < NBR_STEP - 1; stp++){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp+1];
    }
  }
  else{// shift entire pattern
    for (int nbrInst = 0; nbrInst < NBR_INST; nbrInst++){
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	20 e0       	ldi	r18, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:188
        else pattern[ptrnBuffer].velocity[nbrInst][15] = instVelLow[nbrInst];
      }
      else pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]>>1;
      //update instrument velocity
      for (int stp = 0; stp < NBR_STEP - 1; stp++){
        pattern[ptrnBuffer].velocity[nbrInst][stp] = pattern[ptrnBuffer].velocity[nbrInst][stp+1];
    28e4:	2f 5f       	subi	r18, 0xFF	; 255
    28e6:	3f 4f       	sbci	r19, 0xFF	; 255
    28e8:	fa 01       	movw	r30, r20
    28ea:	e2 0f       	add	r30, r18
    28ec:	f3 1f       	adc	r31, r19
    28ee:	8f 01       	movw	r16, r30
    28f0:	0b 5b       	subi	r16, 0xBB	; 187
    28f2:	1b 4f       	sbci	r17, 0xFB	; 251
    28f4:	e8 01       	movw	r28, r16
    28f6:	18 81       	ld	r17, Y
    28f8:	ec 5b       	subi	r30, 0xBC	; 188
    28fa:	fb 4f       	sbci	r31, 0xFB	; 251
    28fc:	10 83       	st	Z, r17
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:187
        if (pattern[ptrnBuffer].velocity[nbrInst][0] > instVelLow[nbrInst]) pattern[ptrnBuffer].velocity[nbrInst][15] = instVelHigh[nbrInst];
        else pattern[ptrnBuffer].velocity[nbrInst][15] = instVelLow[nbrInst];
      }
      else pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]>>1;
      //update instrument velocity
      for (int stp = 0; stp < NBR_STEP - 1; stp++){
    28fe:	2f 30       	cpi	r18, 0x0F	; 15
    2900:	31 05       	cpc	r19, r1
    2902:	81 f7       	brne	.-32     	; 0x28e4 <ShiftLeftPattern()+0xa2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:179
    for (int stp = 0; stp < NBR_STEP - 1; stp++){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp+1];
    }
  }
  else{// shift entire pattern
    for (int nbrInst = 0; nbrInst < NBR_INST; nbrInst++){
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	12 96       	adiw	r26, 0x02	; 2
    2908:	40 5f       	subi	r20, 0xF0	; 240
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	80 31       	cpi	r24, 0x10	; 16
    290e:	91 05       	cpc	r25, r1
    2910:	11 f6       	brne	.-124    	; 0x2896 <ShiftLeftPattern()+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:192
      for (int stp = 0; stp < NBR_STEP - 1; stp++){
        pattern[ptrnBuffer].velocity[nbrInst][stp] = pattern[ptrnBuffer].velocity[nbrInst][stp+1];
      }
    }
  }
}
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	ff 90       	pop	r15
    291c:	ef 90       	pop	r14
    291e:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:185
      if (bitRead(pattern[ptrnBuffer].inst[nbrInst],0)){
        pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]>>1 | (1<<15);
        if (pattern[ptrnBuffer].velocity[nbrInst][0] > instVelLow[nbrInst]) pattern[ptrnBuffer].velocity[nbrInst][15] = instVelHigh[nbrInst];
        else pattern[ptrnBuffer].velocity[nbrInst][15] = instVelLow[nbrInst];
      }
      else pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]>>1;
    2920:	11 96       	adiw	r26, 0x01	; 1
    2922:	3c 93       	st	X, r19
    2924:	2e 93       	st	-X, r18
    2926:	dc cf       	rjmp	.-72     	; 0x28e0 <ShiftLeftPattern()+0x9e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:167
//shift left pattern
void ShiftLeftPattern()
{
  patternWasEdited = TRUE;
  if (instBtn){//only shift selected instruments
    if (bitRead(pattern[ptrnBuffer].inst[curInst],0)){
    2928:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <curInst>
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	dc 01       	movw	r26, r24
    2930:	aa 0f       	add	r26, r26
    2932:	bb 1f       	adc	r27, r27
    2934:	49 ec       	ldi	r20, 0xC9	; 201
    2936:	55 e0       	ldi	r21, 0x05	; 5
    2938:	24 9f       	mul	r18, r20
    293a:	b0 01       	movw	r22, r0
    293c:	25 9f       	mul	r18, r21
    293e:	70 0d       	add	r23, r0
    2940:	34 9f       	mul	r19, r20
    2942:	70 0d       	add	r23, r0
    2944:	11 24       	eor	r1, r1
    2946:	a6 0f       	add	r26, r22
    2948:	b7 1f       	adc	r27, r23
    294a:	a3 56       	subi	r26, 0x63	; 99
    294c:	b9 4e       	sbci	r27, 0xE9	; 233
    294e:	ed 91       	ld	r30, X+
    2950:	fc 91       	ld	r31, X
    2952:	11 97       	sbiw	r26, 0x01	; 1
    2954:	af 01       	movw	r20, r30
    2956:	56 95       	lsr	r21
    2958:	47 95       	ror	r20
    295a:	e0 ff       	sbrs	r30, 0
    295c:	43 c0       	rjmp	.+134    	; 0x29e4 <ShiftLeftPattern()+0x1a2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:168
      pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]>>1 | (1<<15);
    295e:	50 68       	ori	r21, 0x80	; 128
    2960:	4d 93       	st	X+, r20
    2962:	5c 93       	st	X, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:169
      if (pattern[ptrnBuffer].velocity[curInst][0] > instVelLow[curInst]) pattern[ptrnBuffer].velocity[curInst][15] = instVelHigh[curInst];
    2964:	fc 01       	movw	r30, r24
    2966:	e1 57       	subi	r30, 0x71	; 113
    2968:	fe 4f       	sbci	r31, 0xFE	; 254
    296a:	40 81       	ld	r20, Z
    296c:	fc 01       	movw	r30, r24
    296e:	54 e0       	ldi	r21, 0x04	; 4
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	5a 95       	dec	r21
    2976:	e1 f7       	brne	.-8      	; 0x2970 <ShiftLeftPattern()+0x12e>
    2978:	e6 0f       	add	r30, r22
    297a:	f7 1f       	adc	r31, r23
    297c:	e8 56       	subi	r30, 0x68	; 104
    297e:	fd 4e       	sbci	r31, 0xED	; 237
    2980:	df 01       	movw	r26, r30
    2982:	ab 5b       	subi	r26, 0xBB	; 187
    2984:	bb 4f       	sbci	r27, 0xFB	; 251
    2986:	5c 91       	ld	r21, X
    2988:	ec 5a       	subi	r30, 0xAC	; 172
    298a:	fb 4f       	sbci	r31, 0xFB	; 251
    298c:	45 17       	cp	r20, r21
    298e:	20 f4       	brcc	.+8      	; 0x2998 <ShiftLeftPattern()+0x156>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:169 (discriminator 1)
    2990:	dc 01       	movw	r26, r24
    2992:	a1 56       	subi	r26, 0x61	; 97
    2994:	be 4f       	sbci	r27, 0xFE	; 254
    2996:	4c 91       	ld	r20, X
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:170
      else pattern[ptrnBuffer].velocity[curInst][15] = instVelLow[curInst];
    2998:	40 83       	st	Z, r20
    299a:	69 ec       	ldi	r22, 0xC9	; 201
    299c:	75 e0       	ldi	r23, 0x05	; 5
    299e:	26 9f       	mul	r18, r22
    29a0:	a0 01       	movw	r20, r0
    29a2:	27 9f       	mul	r18, r23
    29a4:	50 0d       	add	r21, r0
    29a6:	36 9f       	mul	r19, r22
    29a8:	50 0d       	add	r21, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	24 e0       	ldi	r18, 0x04	; 4
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	2a 95       	dec	r18
    29b4:	e1 f7       	brne	.-8      	; 0x29ae <ShiftLeftPattern()+0x16c>
    29b6:	84 0f       	add	r24, r20
    29b8:	95 1f       	adc	r25, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:179 (discriminator 2)
    for (int stp = 0; stp < NBR_STEP - 1; stp++){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp+1];
    }
  }
  else{// shift entire pattern
    for (int nbrInst = 0; nbrInst < NBR_INST; nbrInst++){
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	40 e0       	ldi	r20, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:175 (discriminator 2)
      else pattern[ptrnBuffer].velocity[curInst][15] = instVelLow[curInst];
    }
    else pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]>>1;
    //update instrument velocity
    for (int stp = 0; stp < NBR_STEP - 1; stp++){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp+1];
    29be:	4f 5f       	subi	r20, 0xFF	; 255
    29c0:	5f 4f       	sbci	r21, 0xFF	; 255
    29c2:	9a 01       	movw	r18, r20
    29c4:	28 0f       	add	r18, r24
    29c6:	39 1f       	adc	r19, r25
    29c8:	28 56       	subi	r18, 0x68	; 104
    29ca:	3d 4e       	sbci	r19, 0xED	; 237
    29cc:	f9 01       	movw	r30, r18
    29ce:	eb 5b       	subi	r30, 0xBB	; 187
    29d0:	fb 4f       	sbci	r31, 0xFB	; 251
    29d2:	60 81       	ld	r22, Z
    29d4:	2c 5b       	subi	r18, 0xBC	; 188
    29d6:	3b 4f       	sbci	r19, 0xFB	; 251
    29d8:	f9 01       	movw	r30, r18
    29da:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:174 (discriminator 2)
      if (pattern[ptrnBuffer].velocity[curInst][0] > instVelLow[curInst]) pattern[ptrnBuffer].velocity[curInst][15] = instVelHigh[curInst];
      else pattern[ptrnBuffer].velocity[curInst][15] = instVelLow[curInst];
    }
    else pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]>>1;
    //update instrument velocity
    for (int stp = 0; stp < NBR_STEP - 1; stp++){
    29dc:	4f 30       	cpi	r20, 0x0F	; 15
    29de:	51 05       	cpc	r21, r1
    29e0:	71 f7       	brne	.-36     	; 0x29be <ShiftLeftPattern()+0x17c>
    29e2:	97 cf       	rjmp	.-210    	; 0x2912 <ShiftLeftPattern()+0xd0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:172
    if (bitRead(pattern[ptrnBuffer].inst[curInst],0)){
      pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]>>1 | (1<<15);
      if (pattern[ptrnBuffer].velocity[curInst][0] > instVelLow[curInst]) pattern[ptrnBuffer].velocity[curInst][15] = instVelHigh[curInst];
      else pattern[ptrnBuffer].velocity[curInst][15] = instVelLow[curInst];
    }
    else pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]>>1;
    29e4:	4d 93       	st	X+, r20
    29e6:	5c 93       	st	X, r21
    29e8:	d8 cf       	rjmp	.-80     	; 0x299a <ShiftLeftPattern()+0x158>

000029ea <ShiftRightPattern()>:
_Z17ShiftRightPatternv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:196
  }
}

//Shift Right pattern
void ShiftRightPattern()
{
    29ea:	ef 92       	push	r14
    29ec:	ff 92       	push	r15
    29ee:	0f 93       	push	r16
    29f0:	1f 93       	push	r17
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:197
  patternWasEdited = TRUE; 
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
    29fc:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    2a00:	30 e0       	ldi	r19, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:198
  if (instBtn){//shift only selected instrument
    2a02:	80 91 7b 1e 	lds	r24, 0x1E7B	; 0x801e7b <instBtn>
    2a06:	81 11       	cpse	r24, r1
    2a08:	63 c0       	rjmp	.+198    	; 0x2ad0 <ShiftRightPattern()+0xe6>
    2a0a:	89 ec       	ldi	r24, 0xC9	; 201
    2a0c:	95 e0       	ldi	r25, 0x05	; 5
    2a0e:	28 9f       	mul	r18, r24
    2a10:	b0 01       	movw	r22, r0
    2a12:	29 9f       	mul	r18, r25
    2a14:	70 0d       	add	r23, r0
    2a16:	38 9f       	mul	r19, r24
    2a18:	70 0d       	add	r23, r0
    2a1a:	11 24       	eor	r1, r1
    2a1c:	db 01       	movw	r26, r22
    2a1e:	a3 56       	subi	r26, 0x63	; 99
    2a20:	b9 4e       	sbci	r27, 0xE9	; 233
    2a22:	ab 01       	movw	r20, r22
    2a24:	48 56       	subi	r20, 0x68	; 104
    2a26:	5d 4e       	sbci	r21, 0xED	; 237
    2a28:	87 e3       	ldi	r24, 0x37	; 55
    2a2a:	9a ef       	ldi	r25, 0xFA	; 250
    2a2c:	28 9f       	mul	r18, r24
    2a2e:	70 01       	movw	r14, r0
    2a30:	29 9f       	mul	r18, r25
    2a32:	f0 0c       	add	r15, r0
    2a34:	38 9f       	mul	r19, r24
    2a36:	f0 0c       	add	r15, r0
    2a38:	11 24       	eor	r1, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:211
    for (int stp = NBR_STEP - 1; stp > 0; stp--){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp-1];
    }
  }
  else{//shift entire pattern
    for (int nbrInst = 0; nbrInst < NBR_INST; nbrInst++){
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:212
      if (bitRead(pattern[ptrnBuffer].inst[nbrInst],15)){
    2a3e:	ed 91       	ld	r30, X+
    2a40:	fc 91       	ld	r31, X
    2a42:	11 97       	sbiw	r26, 0x01	; 1
    2a44:	9f 01       	movw	r18, r30
    2a46:	22 0f       	add	r18, r18
    2a48:	33 1f       	adc	r19, r19
    2a4a:	f7 ff       	sbrs	r31, 7
    2a4c:	3d c0       	rjmp	.+122    	; 0x2ac8 <ShiftRightPattern()+0xde>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:213
        pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]<<1 | 1;
    2a4e:	21 60       	ori	r18, 0x01	; 1
    2a50:	11 96       	adiw	r26, 0x01	; 1
    2a52:	3c 93       	st	X, r19
    2a54:	2e 93       	st	-X, r18
    2a56:	fa 01       	movw	r30, r20
    2a58:	ee 0d       	add	r30, r14
    2a5a:	ff 1d       	adc	r31, r15
    2a5c:	e6 0f       	add	r30, r22
    2a5e:	f7 1f       	adc	r31, r23
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:214
        if (pattern[ptrnBuffer].velocity[nbrInst][15] > instVelLow[nbrInst]) pattern[ptrnBuffer].velocity[nbrInst][0] = instVelHigh[nbrInst];
    2a60:	9c 01       	movw	r18, r24
    2a62:	21 57       	subi	r18, 0x71	; 113
    2a64:	3e 4f       	sbci	r19, 0xFE	; 254
    2a66:	e9 01       	movw	r28, r18
    2a68:	28 81       	ld	r18, Y
    2a6a:	8f 01       	movw	r16, r30
    2a6c:	0c 5a       	subi	r16, 0xAC	; 172
    2a6e:	1b 4f       	sbci	r17, 0xFB	; 251
    2a70:	e8 01       	movw	r28, r16
    2a72:	38 81       	ld	r19, Y
    2a74:	eb 5b       	subi	r30, 0xBB	; 187
    2a76:	fb 4f       	sbci	r31, 0xFB	; 251
    2a78:	23 17       	cp	r18, r19
    2a7a:	28 f4       	brcc	.+10     	; 0x2a86 <ShiftRightPattern()+0x9c>
    2a7c:	9c 01       	movw	r18, r24
    2a7e:	21 56       	subi	r18, 0x61	; 97
    2a80:	3e 4f       	sbci	r19, 0xFE	; 254
    2a82:	e9 01       	movw	r28, r18
    2a84:	28 81       	ld	r18, Y
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:215
        else pattern[ptrnBuffer].velocity[nbrInst][0] = instVelLow[nbrInst];
    2a86:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:211
    for (int stp = NBR_STEP - 1; stp > 0; stp--){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp-1];
    }
  }
  else{//shift entire pattern
    for (int nbrInst = 0; nbrInst < NBR_INST; nbrInst++){
    2a88:	2f e0       	ldi	r18, 0x0F	; 15
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:220
        else pattern[ptrnBuffer].velocity[nbrInst][0] = instVelLow[nbrInst];
      }
      else pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]<<1;
      //update instrument velocity
      for (int stp = NBR_STEP - 1; stp > 0; stp--){
        pattern[ptrnBuffer].velocity[nbrInst][stp] = pattern[ptrnBuffer].velocity[nbrInst][stp-1];
    2a8c:	21 50       	subi	r18, 0x01	; 1
    2a8e:	31 09       	sbc	r19, r1
    2a90:	fa 01       	movw	r30, r20
    2a92:	e2 0f       	add	r30, r18
    2a94:	f3 1f       	adc	r31, r19
    2a96:	8f 01       	movw	r16, r30
    2a98:	0b 5b       	subi	r16, 0xBB	; 187
    2a9a:	1b 4f       	sbci	r17, 0xFB	; 251
    2a9c:	e8 01       	movw	r28, r16
    2a9e:	18 81       	ld	r17, Y
    2aa0:	ea 5b       	subi	r30, 0xBA	; 186
    2aa2:	fb 4f       	sbci	r31, 0xFB	; 251
    2aa4:	10 83       	st	Z, r17
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:219
        if (pattern[ptrnBuffer].velocity[nbrInst][15] > instVelLow[nbrInst]) pattern[ptrnBuffer].velocity[nbrInst][0] = instVelHigh[nbrInst];
        else pattern[ptrnBuffer].velocity[nbrInst][0] = instVelLow[nbrInst];
      }
      else pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]<<1;
      //update instrument velocity
      for (int stp = NBR_STEP - 1; stp > 0; stp--){
    2aa6:	21 15       	cp	r18, r1
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	81 f7       	brne	.-32     	; 0x2a8c <ShiftRightPattern()+0xa2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:211
    for (int stp = NBR_STEP - 1; stp > 0; stp--){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp-1];
    }
  }
  else{//shift entire pattern
    for (int nbrInst = 0; nbrInst < NBR_INST; nbrInst++){
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	12 96       	adiw	r26, 0x02	; 2
    2ab0:	40 5f       	subi	r20, 0xF0	; 240
    2ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab4:	80 31       	cpi	r24, 0x10	; 16
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	11 f6       	brne	.-124    	; 0x2a3e <ShiftRightPattern()+0x54>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:225
        pattern[ptrnBuffer].velocity[nbrInst][stp] = pattern[ptrnBuffer].velocity[nbrInst][stp-1];
      }
    }
  }

}
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	1f 91       	pop	r17
    2ac0:	0f 91       	pop	r16
    2ac2:	ff 90       	pop	r15
    2ac4:	ef 90       	pop	r14
    2ac6:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:217
      if (bitRead(pattern[ptrnBuffer].inst[nbrInst],15)){
        pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]<<1 | 1;
        if (pattern[ptrnBuffer].velocity[nbrInst][15] > instVelLow[nbrInst]) pattern[ptrnBuffer].velocity[nbrInst][0] = instVelHigh[nbrInst];
        else pattern[ptrnBuffer].velocity[nbrInst][0] = instVelLow[nbrInst];
      }
      else pattern[ptrnBuffer].inst[nbrInst] = pattern[ptrnBuffer].inst[nbrInst]<<1;
    2ac8:	11 96       	adiw	r26, 0x01	; 1
    2aca:	3c 93       	st	X, r19
    2acc:	2e 93       	st	-X, r18
    2ace:	dc cf       	rjmp	.-72     	; 0x2a88 <ShiftRightPattern()+0x9e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:199
//Shift Right pattern
void ShiftRightPattern()
{
  patternWasEdited = TRUE; 
  if (instBtn){//shift only selected instrument
    if (bitRead(pattern[ptrnBuffer].inst[curInst],15)){
    2ad0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <curInst>
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	aa 0f       	add	r26, r26
    2ada:	bb 1f       	adc	r27, r27
    2adc:	49 ec       	ldi	r20, 0xC9	; 201
    2ade:	55 e0       	ldi	r21, 0x05	; 5
    2ae0:	24 9f       	mul	r18, r20
    2ae2:	b0 01       	movw	r22, r0
    2ae4:	25 9f       	mul	r18, r21
    2ae6:	70 0d       	add	r23, r0
    2ae8:	34 9f       	mul	r19, r20
    2aea:	70 0d       	add	r23, r0
    2aec:	11 24       	eor	r1, r1
    2aee:	a6 0f       	add	r26, r22
    2af0:	b7 1f       	adc	r27, r23
    2af2:	a3 56       	subi	r26, 0x63	; 99
    2af4:	b9 4e       	sbci	r27, 0xE9	; 233
    2af6:	ed 91       	ld	r30, X+
    2af8:	fc 91       	ld	r31, X
    2afa:	11 97       	sbiw	r26, 0x01	; 1
    2afc:	af 01       	movw	r20, r30
    2afe:	44 0f       	add	r20, r20
    2b00:	55 1f       	adc	r21, r21
    2b02:	f7 ff       	sbrs	r31, 7
    2b04:	43 c0       	rjmp	.+134    	; 0x2b8c <ShiftRightPattern()+0x1a2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:200
      pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]<<1 | 1;
    2b06:	41 60       	ori	r20, 0x01	; 1
    2b08:	4d 93       	st	X+, r20
    2b0a:	5c 93       	st	X, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:201
      if (pattern[ptrnBuffer].velocity[curInst][15] > instVelLow[curInst]) pattern[ptrnBuffer].velocity[curInst][0] = instVelHigh[curInst];
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	e1 57       	subi	r30, 0x71	; 113
    2b10:	fe 4f       	sbci	r31, 0xFE	; 254
    2b12:	40 81       	ld	r20, Z
    2b14:	fc 01       	movw	r30, r24
    2b16:	54 e0       	ldi	r21, 0x04	; 4
    2b18:	ee 0f       	add	r30, r30
    2b1a:	ff 1f       	adc	r31, r31
    2b1c:	5a 95       	dec	r21
    2b1e:	e1 f7       	brne	.-8      	; 0x2b18 <ShiftRightPattern()+0x12e>
    2b20:	e6 0f       	add	r30, r22
    2b22:	f7 1f       	adc	r31, r23
    2b24:	e8 56       	subi	r30, 0x68	; 104
    2b26:	fd 4e       	sbci	r31, 0xED	; 237
    2b28:	df 01       	movw	r26, r30
    2b2a:	ac 5a       	subi	r26, 0xAC	; 172
    2b2c:	bb 4f       	sbci	r27, 0xFB	; 251
    2b2e:	5c 91       	ld	r21, X
    2b30:	eb 5b       	subi	r30, 0xBB	; 187
    2b32:	fb 4f       	sbci	r31, 0xFB	; 251
    2b34:	45 17       	cp	r20, r21
    2b36:	20 f4       	brcc	.+8      	; 0x2b40 <ShiftRightPattern()+0x156>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:201 (discriminator 1)
    2b38:	dc 01       	movw	r26, r24
    2b3a:	a1 56       	subi	r26, 0x61	; 97
    2b3c:	be 4f       	sbci	r27, 0xFE	; 254
    2b3e:	4c 91       	ld	r20, X
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:202
      else pattern[ptrnBuffer].velocity[curInst][0] = instVelLow[curInst];
    2b40:	40 83       	st	Z, r20
    2b42:	44 e0       	ldi	r20, 0x04	; 4
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	4a 95       	dec	r20
    2b4a:	e1 f7       	brne	.-8      	; 0x2b44 <ShiftRightPattern()+0x15a>
    2b4c:	69 ec       	ldi	r22, 0xC9	; 201
    2b4e:	75 e0       	ldi	r23, 0x05	; 5
    2b50:	26 9f       	mul	r18, r22
    2b52:	a0 01       	movw	r20, r0
    2b54:	27 9f       	mul	r18, r23
    2b56:	50 0d       	add	r21, r0
    2b58:	36 9f       	mul	r19, r22
    2b5a:	50 0d       	add	r21, r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	84 0f       	add	r24, r20
    2b60:	95 1f       	adc	r25, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:211 (discriminator 2)
    for (int stp = NBR_STEP - 1; stp > 0; stp--){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp-1];
    }
  }
  else{//shift entire pattern
    for (int nbrInst = 0; nbrInst < NBR_INST; nbrInst++){
    2b62:	4f e0       	ldi	r20, 0x0F	; 15
    2b64:	50 e0       	ldi	r21, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:207 (discriminator 2)
      else pattern[ptrnBuffer].velocity[curInst][0] = instVelLow[curInst];
    }
    else pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]<<1;
    //update instrument velocity
    for (int stp = NBR_STEP - 1; stp > 0; stp--){
      pattern[ptrnBuffer].velocity[curInst][stp] = pattern[ptrnBuffer].velocity[curInst][stp-1];
    2b66:	41 50       	subi	r20, 0x01	; 1
    2b68:	51 09       	sbc	r21, r1
    2b6a:	9a 01       	movw	r18, r20
    2b6c:	28 0f       	add	r18, r24
    2b6e:	39 1f       	adc	r19, r25
    2b70:	28 56       	subi	r18, 0x68	; 104
    2b72:	3d 4e       	sbci	r19, 0xED	; 237
    2b74:	f9 01       	movw	r30, r18
    2b76:	eb 5b       	subi	r30, 0xBB	; 187
    2b78:	fb 4f       	sbci	r31, 0xFB	; 251
    2b7a:	60 81       	ld	r22, Z
    2b7c:	2a 5b       	subi	r18, 0xBA	; 186
    2b7e:	3b 4f       	sbci	r19, 0xFB	; 251
    2b80:	f9 01       	movw	r30, r18
    2b82:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:206 (discriminator 2)
      if (pattern[ptrnBuffer].velocity[curInst][15] > instVelLow[curInst]) pattern[ptrnBuffer].velocity[curInst][0] = instVelHigh[curInst];
      else pattern[ptrnBuffer].velocity[curInst][0] = instVelLow[curInst];
    }
    else pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]<<1;
    //update instrument velocity
    for (int stp = NBR_STEP - 1; stp > 0; stp--){
    2b84:	41 15       	cp	r20, r1
    2b86:	51 05       	cpc	r21, r1
    2b88:	71 f7       	brne	.-36     	; 0x2b66 <ShiftRightPattern()+0x17c>
    2b8a:	97 cf       	rjmp	.-210    	; 0x2aba <ShiftRightPattern()+0xd0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:204
    if (bitRead(pattern[ptrnBuffer].inst[curInst],15)){
      pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]<<1 | 1;
      if (pattern[ptrnBuffer].velocity[curInst][15] > instVelLow[curInst]) pattern[ptrnBuffer].velocity[curInst][0] = instVelHigh[curInst];
      else pattern[ptrnBuffer].velocity[curInst][0] = instVelLow[curInst];
    }
    else pattern[ptrnBuffer].inst[curInst] = pattern[ptrnBuffer].inst[curInst]<<1;
    2b8c:	4d 93       	st	X+, r20
    2b8e:	5c 93       	st	X, r21
    2b90:	d8 cf       	rjmp	.-80     	; 0x2b42 <ShiftRightPattern()+0x158>

00002b92 <KeyboardUpdate()>:
_Z14KeyboardUpdatev():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:8
//                 keyboard mode
//-------------------------------------------------

/////////////////////Function//////////////////////
void KeyboardUpdate()
{
    2b92:	af 92       	push	r10
    2b94:	bf 92       	push	r11
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:9
  if (isRunning && keyboardMode){
    2ba6:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    2baa:	88 23       	and	r24, r24
    2bac:	49 f0       	breq	.+18     	; 0x2bc0 <KeyboardUpdate()+0x2e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:9 (discriminator 1)
    2bae:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
    2bb2:	88 23       	and	r24, r24
    2bb4:	29 f0       	breq	.+10     	; 0x2bc0 <KeyboardUpdate()+0x2e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:10
    keyboardMode = 0;
    2bb6:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <keyboardMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:11
    needLcdUpdate = TRUE;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:14
  }
  
  if (numBtn.justPressed && curInst == EXT_INST && curSeqMode == PTRN_STEP){
    2bc0:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <numBtn+0x3>
    2bc4:	88 23       	and	r24, r24
    2bc6:	e9 f0       	breq	.+58     	; 0x2c02 <KeyboardUpdate()+0x70>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:14 (discriminator 1)
    2bc8:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <curInst>
    2bcc:	8d 30       	cpi	r24, 0x0D	; 13
    2bce:	c9 f4       	brne	.+50     	; 0x2c02 <KeyboardUpdate()+0x70>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:14 (discriminator 2)
    2bd0:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    2bd4:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    2bd8:	03 97       	sbiw	r24, 0x03	; 3
    2bda:	99 f4       	brne	.+38     	; 0x2c02 <KeyboardUpdate()+0x70>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:15
    keyboardMode = !keyboardMode;
    2bdc:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
    2be0:	c1 e0       	ldi	r28, 0x01	; 1
    2be2:	8c 27       	eor	r24, r28
    2be4:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <keyboardMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:17
    //stop sequencer when keyboard mode ON
    if (keyboardMode){
    2be8:	88 23       	and	r24, r24
    2bea:	41 f0       	breq	.+16     	; 0x2bfc <KeyboardUpdate()+0x6a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:18
      InitMidiNoteOff();
    2bec:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <InitMidiNoteOff()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:19
      isStop = TRUE;
    2bf0:	c0 93 ee 01 	sts	0x01EE, r28	; 0x8001ee <isStop>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:20
      isRunning = FALSE;
    2bf4:	10 92 39 1e 	sts	0x1E39, r1	; 0x801e39 <isRunning>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:22
   //   MIDI.sendRealTime(Stop);//;MidiSend(STOP_CMD);
      stopBtn.counter = 1;//like a push on stop button
    2bf8:	c0 93 48 1f 	sts	0x1F48, r28	; 0x801f48 <stopBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:24
    }
    needLcdUpdate = TRUE;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:28
  }

  /////////////////////////////KeyboardMode//////////////////////////////
  if(keyboardMode)
    2c02:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
    2c06:	88 23       	and	r24, r24
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <KeyboardUpdate()+0x7a>
    2c0a:	2b c1       	rjmp	.+598    	; 0x2e62 <KeyboardUpdate()+0x2d0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:30
  {
    if (scaleBtn.justPressed){
    2c0c:	80 91 24 1f 	lds	r24, 0x1F24	; 0x801f24 <scaleBtn+0x3>
    2c10:	88 23       	and	r24, r24
    2c12:	59 f0       	breq	.+22     	; 0x2c2a <KeyboardUpdate()+0x98>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:31
      keybOct++;
    2c14:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <keybOct>
    2c18:	8f 5f       	subi	r24, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:32
      if (keybOct >= MAX_OCT) keybOct = MAX_OCT - 1;
    2c1a:	88 30       	cpi	r24, 0x08	; 8
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <KeyboardUpdate()+0x8e>
    2c1e:	2c c1       	rjmp	.+600    	; 0x2e78 <KeyboardUpdate()+0x2e6>
    2c20:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <keybOct>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:33
      needLcdUpdate = TRUE;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:35
    }
    if (lastStepBtn.justPressed){
    2c2a:	80 91 d7 1e 	lds	r24, 0x1ED7	; 0x801ed7 <lastStepBtn+0x3>
    2c2e:	88 23       	and	r24, r24
    2c30:	59 f0       	breq	.+22     	; 0x2c48 <KeyboardUpdate()+0xb6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:36
      keybOct--;
    2c32:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <keybOct>
    2c36:	81 50       	subi	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:37
      if (keybOct < 0 || keybOct > MAX_OCT - 1) keybOct = 0;
    2c38:	88 30       	cpi	r24, 0x08	; 8
    2c3a:	08 f0       	brcs	.+2      	; 0x2c3e <KeyboardUpdate()+0xac>
    2c3c:	1f c1       	rjmp	.+574    	; 0x2e7c <KeyboardUpdate()+0x2ea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:36
      keybOct++;
      if (keybOct >= MAX_OCT) keybOct = MAX_OCT - 1;
      needLcdUpdate = TRUE;
    }
    if (lastStepBtn.justPressed){
      keybOct--;
    2c3e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <keybOct>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:38
      if (keybOct < 0 || keybOct > MAX_OCT - 1) keybOct = 0;
      needLcdUpdate = TRUE;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:40
    }
    if (backBtn.justPressed){
    2c48:	80 91 cc 1e 	lds	r24, 0x1ECC	; 0x801ecc <backBtn+0x3>
    2c4c:	88 23       	and	r24, r24
    2c4e:	19 f1       	breq	.+70     	; 0x2c96 <KeyboardUpdate()+0x104>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:41
      noteIndex--;
    2c50:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <noteIndex>
    2c54:	81 50       	subi	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:42
      if( noteIndex < 0 || noteIndex > MAX_EXT_INST_NOTE - 1) noteIndex = 0;
    2c56:	83 36       	cpi	r24, 0x63	; 99
    2c58:	08 f0       	brcs	.+2      	; 0x2c5c <KeyboardUpdate()+0xca>
    2c5a:	13 c1       	rjmp	.+550    	; 0x2e82 <KeyboardUpdate()+0x2f0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:41
      keybOct--;
      if (keybOct < 0 || keybOct > MAX_OCT - 1) keybOct = 0;
      needLcdUpdate = TRUE;
    }
    if (backBtn.justPressed){
      noteIndex--;
    2c5c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:43
      if( noteIndex < 0 || noteIndex > MAX_EXT_INST_NOTE - 1) noteIndex = 0;
      MidiSendNoteOn(seq.TXchannel, pattern[ptrnBuffer].extNote[noteIndex], HIGH_VEL);
    2c60:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    2c64:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    2c68:	29 ec       	ldi	r18, 0xC9	; 201
    2c6a:	35 e0       	ldi	r19, 0x05	; 5
    2c6c:	42 9f       	mul	r20, r18
    2c6e:	c0 01       	movw	r24, r0
    2c70:	43 9f       	mul	r20, r19
    2c72:	90 0d       	add	r25, r0
    2c74:	11 24       	eor	r1, r1
    2c76:	88 56       	subi	r24, 0x68	; 104
    2c78:	9d 4e       	sbci	r25, 0xED	; 237
    2c7a:	e8 0f       	add	r30, r24
    2c7c:	f9 2f       	mov	r31, r25
    2c7e:	f1 1d       	adc	r31, r1
    2c80:	eb 5b       	subi	r30, 0xBB	; 187
    2c82:	fa 4f       	sbci	r31, 0xFA	; 250
    2c84:	40 e5       	ldi	r20, 0x50	; 80
    2c86:	60 81       	ld	r22, Z
    2c88:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    2c8c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <MidiSendNoteOn(unsigned char, unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:44
      needLcdUpdate = TRUE;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:46
    }
    if (backBtn.justRelease)MidiSendNoteOff(seq.TXchannel, pattern[ptrnBuffer].extNote[noteIndex]);
    2c96:	80 91 cd 1e 	lds	r24, 0x1ECD	; 0x801ecd <backBtn+0x4>
    2c9a:	88 23       	and	r24, r24
    2c9c:	b9 f0       	breq	.+46     	; 0x2ccc <KeyboardUpdate()+0x13a>
    2c9e:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    2ca2:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    2ca6:	29 ec       	ldi	r18, 0xC9	; 201
    2ca8:	35 e0       	ldi	r19, 0x05	; 5
    2caa:	42 9f       	mul	r20, r18
    2cac:	c0 01       	movw	r24, r0
    2cae:	43 9f       	mul	r20, r19
    2cb0:	90 0d       	add	r25, r0
    2cb2:	11 24       	eor	r1, r1
    2cb4:	88 56       	subi	r24, 0x68	; 104
    2cb6:	9d 4e       	sbci	r25, 0xED	; 237
    2cb8:	e8 0f       	add	r30, r24
    2cba:	f9 2f       	mov	r31, r25
    2cbc:	f1 1d       	adc	r31, r1
    2cbe:	eb 5b       	subi	r30, 0xBB	; 187
    2cc0:	fa 4f       	sbci	r31, 0xFA	; 250
    2cc2:	60 81       	ld	r22, Z
    2cc4:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    2cc8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MidiSendNoteOff(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:48

    if (fwdBtn.justPressed){
    2ccc:	80 91 c1 1e 	lds	r24, 0x1EC1	; 0x801ec1 <fwdBtn+0x3>
    2cd0:	88 23       	and	r24, r24
    2cd2:	19 f1       	breq	.+70     	; 0x2d1a <KeyboardUpdate()+0x188>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:49
      noteIndex++;
    2cd4:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <noteIndex>
    2cd8:	8f 5f       	subi	r24, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:50
      if( noteIndex >= MAX_EXT_INST_NOTE ) noteIndex = MAX_EXT_INST_NOTE;
    2cda:	83 36       	cpi	r24, 0x63	; 99
    2cdc:	08 f0       	brcs	.+2      	; 0x2ce0 <KeyboardUpdate()+0x14e>
    2cde:	d4 c0       	rjmp	.+424    	; 0x2e88 <KeyboardUpdate()+0x2f6>
    2ce0:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:51
      MidiSendNoteOn(seq.TXchannel, pattern[ptrnBuffer].extNote[noteIndex], HIGH_VEL);
    2ce4:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    2ce8:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    2cec:	29 ec       	ldi	r18, 0xC9	; 201
    2cee:	35 e0       	ldi	r19, 0x05	; 5
    2cf0:	42 9f       	mul	r20, r18
    2cf2:	c0 01       	movw	r24, r0
    2cf4:	43 9f       	mul	r20, r19
    2cf6:	90 0d       	add	r25, r0
    2cf8:	11 24       	eor	r1, r1
    2cfa:	88 56       	subi	r24, 0x68	; 104
    2cfc:	9d 4e       	sbci	r25, 0xED	; 237
    2cfe:	e8 0f       	add	r30, r24
    2d00:	f9 2f       	mov	r31, r25
    2d02:	f1 1d       	adc	r31, r1
    2d04:	eb 5b       	subi	r30, 0xBB	; 187
    2d06:	fa 4f       	sbci	r31, 0xFA	; 250
    2d08:	40 e5       	ldi	r20, 0x50	; 80
    2d0a:	60 81       	ld	r22, Z
    2d0c:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    2d10:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <MidiSendNoteOn(unsigned char, unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:52
      needLcdUpdate = TRUE;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:54
    }
    if (fwdBtn.justRelease)MidiSendNoteOff(seq.TXchannel, pattern[ptrnBuffer].extNote[noteIndex]);
    2d1a:	80 91 c2 1e 	lds	r24, 0x1EC2	; 0x801ec2 <fwdBtn+0x4>
    2d1e:	88 23       	and	r24, r24
    2d20:	b9 f0       	breq	.+46     	; 0x2d50 <KeyboardUpdate()+0x1be>
    2d22:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    2d26:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    2d2a:	29 ec       	ldi	r18, 0xC9	; 201
    2d2c:	35 e0       	ldi	r19, 0x05	; 5
    2d2e:	42 9f       	mul	r20, r18
    2d30:	c0 01       	movw	r24, r0
    2d32:	43 9f       	mul	r20, r19
    2d34:	90 0d       	add	r25, r0
    2d36:	11 24       	eor	r1, r1
    2d38:	88 56       	subi	r24, 0x68	; 104
    2d3a:	9d 4e       	sbci	r25, 0xED	; 237
    2d3c:	e8 0f       	add	r30, r24
    2d3e:	f9 2f       	mov	r31, r25
    2d40:	f1 1d       	adc	r31, r1
    2d42:	eb 5b       	subi	r30, 0xBB	; 187
    2d44:	fa 4f       	sbci	r31, 0xFA	; 250
    2d46:	60 81       	ld	r22, Z
    2d48:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    2d4c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MidiSendNoteOff(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:56

    if(clearBtn.justPressed){
    2d50:	80 91 7f 1e 	lds	r24, 0x1E7F	; 0x801e7f <clearBtn+0x3>
    2d54:	88 23       	and	r24, r24
    2d56:	29 f0       	breq	.+10     	; 0x2d62 <KeyboardUpdate()+0x1d0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:57
      noteIndex = 0;
    2d58:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:58
      needLcdUpdate = TRUE;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:61
    }

    if (isStop){
    2d62:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <isStop>
    2d66:	88 23       	and	r24, r24
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <KeyboardUpdate()+0x1da>
    2d6a:	7b c0       	rjmp	.+246    	; 0x2e62 <KeyboardUpdate()+0x2d0>
    2d6c:	c8 e5       	ldi	r28, 0x58	; 88
    2d6e:	df e1       	ldi	r29, 0x1F	; 31
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	00 e0       	ldi	r16, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:76
            pattern[ptrnBuffer].extLength = noteIndex - 1;
            if(pattern[ptrnBuffer].extLength > MAX_EXT_INST_NOTE)pattern[ptrnBuffer].extLength = 0;
            needLcdUpdate = TRUE;
          }  
          if ((stepBtn[a].pressed == HIGH) && (stepBtn[a].curState == LOW)){
            MidiSendNoteOff(seq.TXchannel, a + 12*keybOct);    
    2d74:	8c e0       	ldi	r24, 0x0C	; 12
    2d76:	c8 2e       	mov	r12, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:66
    if (isStop){
      for (byte a = 0; a < NBR_STEP_BTN; a++){
        stepBtn[a].curState = bitRead(readButtonState,a);
        if (stepBtn[a].curState != stepBtn[a].prevState){
          if ((stepBtn[a].pressed == LOW) && (stepBtn[a].curState == HIGH)){
            pattern[ptrnBuffer].extNote[noteIndex] = a + (12* keybOct);
    2d78:	99 ec       	ldi	r25, 0xC9	; 201
    2d7a:	e9 2e       	mov	r14, r25
    2d7c:	95 e0       	ldi	r25, 0x05	; 5
    2d7e:	f9 2e       	mov	r15, r25
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:69
            MidiSendNoteOn(seq.TXchannel, a + 12*keybOct, HIGH_VEL);
            noteIndex++;
            patternWasEdited = TRUE;
    2d80:	bb 24       	eor	r11, r11
    2d82:	b3 94       	inc	r11
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:70
            if(noteIndex > MAX_EXT_INST_NOTE) noteIndex = MAX_EXT_INST_NOTE;
    2d84:	23 e6       	ldi	r18, 0x63	; 99
    2d86:	a2 2e       	mov	r10, r18
    2d88:	d0 2e       	mov	r13, r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:63
      needLcdUpdate = TRUE;
    }

    if (isStop){
      for (byte a = 0; a < NBR_STEP_BTN; a++){
        stepBtn[a].curState = bitRead(readButtonState,a);
    2d8a:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    2d8e:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    2d92:	00 2e       	mov	r0, r16
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <KeyboardUpdate()+0x208>
    2d96:	96 95       	lsr	r25
    2d98:	87 95       	ror	r24
    2d9a:	0a 94       	dec	r0
    2d9c:	e2 f7       	brpl	.-8      	; 0x2d96 <KeyboardUpdate()+0x204>
    2d9e:	28 2f       	mov	r18, r24
    2da0:	21 70       	andi	r18, 0x01	; 1
    2da2:	28 83       	st	Y, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:64
        if (stepBtn[a].curState != stepBtn[a].prevState){
    2da4:	39 81       	ldd	r19, Y+1	; 0x01
    2da6:	23 17       	cp	r18, r19
    2da8:	09 f4       	brne	.+2      	; 0x2dac <KeyboardUpdate()+0x21a>
    2daa:	52 c0       	rjmp	.+164    	; 0x2e50 <KeyboardUpdate()+0x2be>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:65
          if ((stepBtn[a].pressed == LOW) && (stepBtn[a].curState == HIGH)){
    2dac:	2a 81       	ldd	r18, Y+2	; 0x02
    2dae:	21 11       	cpse	r18, r1
    2db0:	3d c0       	rjmp	.+122    	; 0x2e2c <KeyboardUpdate()+0x29a>
    2db2:	80 ff       	sbrs	r24, 0
    2db4:	3b c0       	rjmp	.+118    	; 0x2e2c <KeyboardUpdate()+0x29a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:66
            pattern[ptrnBuffer].extNote[noteIndex] = a + (12* keybOct);
    2db6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <keybOct>
    2dba:	60 2f       	mov	r22, r16
    2dbc:	8c 9d       	mul	r24, r12
    2dbe:	60 0d       	add	r22, r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    2dc6:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    2dca:	2e 9d       	mul	r18, r14
    2dcc:	c0 01       	movw	r24, r0
    2dce:	2f 9d       	mul	r18, r15
    2dd0:	90 0d       	add	r25, r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	88 56       	subi	r24, 0x68	; 104
    2dd6:	9d 4e       	sbci	r25, 0xED	; 237
    2dd8:	e8 0f       	add	r30, r24
    2dda:	f9 2f       	mov	r31, r25
    2ddc:	f1 1d       	adc	r31, r1
    2dde:	eb 5b       	subi	r30, 0xBB	; 187
    2de0:	fa 4f       	sbci	r31, 0xFA	; 250
    2de2:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:67
            MidiSendNoteOn(seq.TXchannel, a + 12*keybOct, HIGH_VEL);
    2de4:	40 e5       	ldi	r20, 0x50	; 80
    2de6:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    2dea:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <MidiSendNoteOn(unsigned char, unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:68
            noteIndex++;
    2dee:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <noteIndex>
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:69
            patternWasEdited = TRUE;
    2df8:	b0 92 cd 0c 	sts	0x0CCD, r11	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:70
            if(noteIndex > MAX_EXT_INST_NOTE) noteIndex = MAX_EXT_INST_NOTE;
    2dfc:	84 36       	cpi	r24, 0x64	; 100
    2dfe:	10 f0       	brcs	.+4      	; 0x2e04 <KeyboardUpdate()+0x272>
    2e00:	a0 92 86 04 	sts	0x0486, r10	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:71
            pattern[ptrnBuffer].extLength = noteIndex - 1;
    2e04:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <noteIndex>
    2e0e:	21 50       	subi	r18, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:72
            if(pattern[ptrnBuffer].extLength > MAX_EXT_INST_NOTE)pattern[ptrnBuffer].extLength = 0;
    2e10:	8e 9d       	mul	r24, r14
    2e12:	f0 01       	movw	r30, r0
    2e14:	8f 9d       	mul	r24, r15
    2e16:	f0 0d       	add	r31, r0
    2e18:	9e 9d       	mul	r25, r14
    2e1a:	f0 0d       	add	r31, r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	e3 5a       	subi	r30, 0xA3	; 163
    2e20:	f7 4e       	sbci	r31, 0xE7	; 231
    2e22:	24 36       	cpi	r18, 0x64	; 100
    2e24:	98 f5       	brcc	.+102    	; 0x2e8c <KeyboardUpdate()+0x2fa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:71
            pattern[ptrnBuffer].extNote[noteIndex] = a + (12* keybOct);
            MidiSendNoteOn(seq.TXchannel, a + 12*keybOct, HIGH_VEL);
            noteIndex++;
            patternWasEdited = TRUE;
            if(noteIndex > MAX_EXT_INST_NOTE) noteIndex = MAX_EXT_INST_NOTE;
            pattern[ptrnBuffer].extLength = noteIndex - 1;
    2e26:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:73
            if(pattern[ptrnBuffer].extLength > MAX_EXT_INST_NOTE)pattern[ptrnBuffer].extLength = 0;
            needLcdUpdate = TRUE;
    2e28:	b0 92 7e 01 	sts	0x017E, r11	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:75
          }  
          if ((stepBtn[a].pressed == HIGH) && (stepBtn[a].curState == LOW)){
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	88 23       	and	r24, r24
    2e30:	69 f0       	breq	.+26     	; 0x2e4c <KeyboardUpdate()+0x2ba>
    2e32:	88 81       	ld	r24, Y
    2e34:	81 11       	cpse	r24, r1
    2e36:	0a c0       	rjmp	.+20     	; 0x2e4c <KeyboardUpdate()+0x2ba>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:76
            MidiSendNoteOff(seq.TXchannel, a + 12*keybOct);    
    2e38:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <keybOct>
    2e3c:	6d 2d       	mov	r22, r13
    2e3e:	8c 9d       	mul	r24, r12
    2e40:	60 0d       	add	r22, r0
    2e42:	11 24       	eor	r1, r1
    2e44:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    2e48:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MidiSendNoteOff(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:78
          }
          stepBtn[a].pressed = stepBtn[a].curState;
    2e4c:	88 81       	ld	r24, Y
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:80
        }
        stepBtn[a].prevState = stepBtn[a].curState;
    2e50:	88 81       	ld	r24, Y
    2e52:	89 83       	std	Y+1, r24	; 0x01
    2e54:	0f 5f       	subi	r16, 0xFF	; 255
    2e56:	1f 4f       	sbci	r17, 0xFF	; 255
    2e58:	2b 96       	adiw	r28, 0x0b	; 11
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:62
      noteIndex = 0;
      needLcdUpdate = TRUE;
    }

    if (isStop){
      for (byte a = 0; a < NBR_STEP_BTN; a++){
    2e5a:	00 31       	cpi	r16, 0x10	; 16
    2e5c:	11 05       	cpc	r17, r1
    2e5e:	09 f0       	breq	.+2      	; 0x2e62 <KeyboardUpdate()+0x2d0>
    2e60:	93 cf       	rjmp	.-218    	; 0x2d88 <KeyboardUpdate()+0x1f6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:84
        }
        stepBtn[a].prevState = stepBtn[a].curState;
      }  
    }
  }
}
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	1f 91       	pop	r17
    2e68:	0f 91       	pop	r16
    2e6a:	ff 90       	pop	r15
    2e6c:	ef 90       	pop	r14
    2e6e:	df 90       	pop	r13
    2e70:	cf 90       	pop	r12
    2e72:	bf 90       	pop	r11
    2e74:	af 90       	pop	r10
    2e76:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:32
  /////////////////////////////KeyboardMode//////////////////////////////
  if(keyboardMode)
  {
    if (scaleBtn.justPressed){
      keybOct++;
      if (keybOct >= MAX_OCT) keybOct = MAX_OCT - 1;
    2e78:	87 e0       	ldi	r24, 0x07	; 7
    2e7a:	d2 ce       	rjmp	.-604    	; 0x2c20 <KeyboardUpdate()+0x8e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:37
      needLcdUpdate = TRUE;
    }
    if (lastStepBtn.justPressed){
      keybOct--;
      if (keybOct < 0 || keybOct > MAX_OCT - 1) keybOct = 0;
    2e7c:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <keybOct>
    2e80:	e0 ce       	rjmp	.-576    	; 0x2c42 <KeyboardUpdate()+0xb0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:42
      needLcdUpdate = TRUE;
    }
    if (backBtn.justPressed){
      noteIndex--;
      if( noteIndex < 0 || noteIndex > MAX_EXT_INST_NOTE - 1) noteIndex = 0;
    2e82:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <noteIndex>
    2e86:	ec ce       	rjmp	.-552    	; 0x2c60 <KeyboardUpdate()+0xce>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:50
    }
    if (backBtn.justRelease)MidiSendNoteOff(seq.TXchannel, pattern[ptrnBuffer].extNote[noteIndex]);

    if (fwdBtn.justPressed){
      noteIndex++;
      if( noteIndex >= MAX_EXT_INST_NOTE ) noteIndex = MAX_EXT_INST_NOTE;
    2e88:	83 e6       	ldi	r24, 0x63	; 99
    2e8a:	2a cf       	rjmp	.-428    	; 0x2ce0 <KeyboardUpdate()+0x14e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/key.ino:72
            MidiSendNoteOn(seq.TXchannel, a + 12*keybOct, HIGH_VEL);
            noteIndex++;
            patternWasEdited = TRUE;
            if(noteIndex > MAX_EXT_INST_NOTE) noteIndex = MAX_EXT_INST_NOTE;
            pattern[ptrnBuffer].extLength = noteIndex - 1;
            if(pattern[ptrnBuffer].extLength > MAX_EXT_INST_NOTE)pattern[ptrnBuffer].extLength = 0;
    2e8c:	10 82       	st	Z, r1
    2e8e:	cc cf       	rjmp	.-104    	; 0x2e28 <KeyboardUpdate()+0x296>

00002e90 <TimerStop()>:
_Z9TimerStopv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:18

}

void TimerStop(void)
{
  bitWrite(TIMSK1, OCIE1A, 0);
    2e90:	ef e6       	ldi	r30, 0x6F	; 111
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	8d 7f       	andi	r24, 0xFD	; 253
    2e98:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:19
  TCCR1A = TCCR1B = OCR1A = 0;
    2e9a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2e9e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2ea2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2ea6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:20
}
    2eaa:	08 95       	ret

00002eac <TimerSetFrequency()>:
_Z17TimerSetFrequencyv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:26

void TimerSetFrequency()
{
  // Calculates frequency for Timer1 = (BPM*ppqn)/60s
#define FREQUENCY (((seq.bpm)*(PPQN))/60)
  OCR1A =(F_CPU/ 8) / FREQUENCY;
    2eac:	20 91 44 1e 	lds	r18, 0x1E44	; 0x801e44 <seq+0x5>
    2eb0:	30 91 45 1e 	lds	r19, 0x1E45	; 0x801e45 <seq+0x6>
    2eb4:	40 e6       	ldi	r20, 0x60	; 96
    2eb6:	42 9f       	mul	r20, r18
    2eb8:	c0 01       	movw	r24, r0
    2eba:	43 9f       	mul	r20, r19
    2ebc:	90 0d       	add	r25, r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	6c e3       	ldi	r22, 0x3C	; 60
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <__udivmodhi4>
    2ec8:	9b 01       	movw	r18, r22
    2eca:	50 e0       	ldi	r21, 0x00	; 0
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	60 e8       	ldi	r22, 0x80	; 128
    2ed0:	74 e8       	ldi	r23, 0x84	; 132
    2ed2:	8e e1       	ldi	r24, 0x1E	; 30
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <__divmodsi4>
    2eda:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2ede:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:27
}
    2ee2:	08 95       	ret

00002ee4 <EncGet()>:
_Z6EncGetv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:9
//-------------------------------------------------

////////////////////////Function//////////////////////

void EncGet()
{
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    2eec:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:13

  
  //////////////////////////////////TOTAL ACCENT////////////////////////////////////
  if (curInst == TOTAL_ACC && curSeqMode == PTRN_STEP){
    2ef0:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <curInst>
    2ef4:	2c 30       	cpi	r18, 0x0C	; 12
    2ef6:	91 f5       	brne	.+100    	; 0x2f5c <EncGet()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:13 (discriminator 1)
    2ef8:	83 30       	cpi	r24, 0x03	; 3
    2efa:	91 05       	cpc	r25, r1
    2efc:	79 f5       	brne	.+94     	; 0x2f5c <EncGet()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:14
    pattern[ptrnBuffer].totalAcc = EncGet(pattern[ptrnBuffer].totalAcc, 1);
    2efe:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    2f02:	89 ec       	ldi	r24, 0xC9	; 201
    2f04:	95 e0       	ldi	r25, 0x05	; 5
    2f06:	28 9f       	mul	r18, r24
    2f08:	f0 01       	movw	r30, r0
    2f0a:	29 9f       	mul	r18, r25
    2f0c:	f0 0d       	add	r31, r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	e0 5a       	subi	r30, 0xA0	; 160
    2f12:	f7 4e       	sbci	r31, 0xE7	; 231
    2f14:	80 81       	ld	r24, Z
    2f16:	61 e0       	ldi	r22, 0x01	; 1
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:15
    pattern[ptrnBuffer].totalAcc = constrain(pattern[ptrnBuffer].totalAcc, 0, 13);
    2f20:	99 27       	eor	r25, r25
    2f22:	8e 30       	cpi	r24, 0x0E	; 14
    2f24:	91 05       	cpc	r25, r1
    2f26:	14 f0       	brlt	.+4      	; 0x2f2c <EncGet()+0x48>
    2f28:	8d e0       	ldi	r24, 0x0D	; 13
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:14
{

  
  //////////////////////////////////TOTAL ACCENT////////////////////////////////////
  if (curInst == TOTAL_ACC && curSeqMode == PTRN_STEP){
    pattern[ptrnBuffer].totalAcc = EncGet(pattern[ptrnBuffer].totalAcc, 1);
    2f2c:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:15
    pattern[ptrnBuffer].totalAcc = constrain(pattern[ptrnBuffer].totalAcc, 0, 13);
    2f30:	29 ec       	ldi	r18, 0xC9	; 201
    2f32:	35 e0       	ldi	r19, 0x05	; 5
    2f34:	42 9f       	mul	r20, r18
    2f36:	f0 01       	movw	r30, r0
    2f38:	43 9f       	mul	r20, r19
    2f3a:	f0 0d       	add	r31, r0
    2f3c:	11 24       	eor	r1, r1
    2f3e:	e0 5a       	subi	r30, 0xA0	; 160
    2f40:	f7 4e       	sbci	r31, 0xE7	; 231
    2f42:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:17
    static byte prevTotalAcc;
    if (pattern[ptrnBuffer].totalAcc != prevTotalAcc){
    2f44:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <EncGet()::prevTotalAcc>
    2f48:	28 17       	cp	r18, r24
    2f4a:	e1 f0       	breq	.+56     	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:18
      prevTotalAcc = pattern[ptrnBuffer].totalAcc;
    2f4c:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <EncGet()::prevTotalAcc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:19
      patternWasEdited = TRUE;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:36
      static unsigned int prevTrkPos;
      if (trk.pos != prevTrkPos){
        prevTrkPos = trk.pos;
        nextPattern = track[trkBuffer].patternNbr[trk.pos];
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
        needLcdUpdate = TRUE;
    2f56:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:37
        break;
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:24
      patternWasEdited = TRUE;
      needLcdUpdate = TRUE;
    }
  }
  ///////////////////////////////////TRACK WRITE////////////////////////////////////
  else if (curSeqMode == TRACK_WRITE && !tempoBtn.pressed && !seq.configMode){
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <EncGet()+0x7e>
    2f60:	d9 c0       	rjmp	.+434    	; 0x3114 <EncGet()+0x230>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:24 (discriminator 1)
    2f62:	80 91 02 1f 	lds	r24, 0x1F02	; 0x801f02 <tempoBtn+0x2>
    2f66:	81 11       	cpse	r24, r1
    2f68:	d5 c0       	rjmp	.+426    	; 0x3114 <EncGet()+0x230>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:24 (discriminator 2)
    2f6a:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    2f6e:	81 11       	cpse	r24, r1
    2f70:	d1 c0       	rjmp	.+418    	; 0x3114 <EncGet()+0x230>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:25
    switch (curIndex){
    2f72:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <curIndex>
    2f76:	81 30       	cpi	r24, 0x01	; 1
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <EncGet()+0x98>
    2f7a:	4c c0       	rjmp	.+152    	; 0x3014 <EncGet()+0x130>
    2f7c:	30 f0       	brcs	.+12     	; 0x2f8a <EncGet()+0xa6>
    2f7e:	82 30       	cpi	r24, 0x02	; 2
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <EncGet()+0xa0>
    2f82:	73 c0       	rjmp	.+230    	; 0x306a <EncGet()+0x186>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:219
      curBpm = seq.bpm;
      TimerSetFrequency();
      if (curSeqMode != PTRN_STEP || tempoBtn.pressed) needLcdUpdate = TRUE;
    }
  }
}
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	08 95       	ret
    2f8a:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    2f8e:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:28
  ///////////////////////////////////TRACK WRITE////////////////////////////////////
  else if (curSeqMode == TRACK_WRITE && !tempoBtn.pressed && !seq.configMode){
    switch (curIndex){
      //track position
    case 0://track position
      if(instBtn) trk.pos = EncGet(trk.pos, 10);
    2f92:	20 91 7b 1e 	lds	r18, 0x1E7B	; 0x801e7b <instBtn>
    2f96:	6a e0       	ldi	r22, 0x0A	; 10
    2f98:	70 e0       	ldi	r23, 0x00	; 0
    2f9a:	21 11       	cpse	r18, r1
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <EncGet()+0xbe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:29
      else trk.pos = EncGet(trk.pos, 1);
    2f9e:	61 e0       	ldi	r22, 0x01	; 1
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    2fa6:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <trk+0x3>
    2faa:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <trk+0x2>
    2fae:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    2fb2:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    2fb6:	88 3e       	cpi	r24, 0xE8	; 232
    2fb8:	23 e0       	ldi	r18, 0x03	; 3
    2fba:	92 07       	cpc	r25, r18
    2fbc:	10 f0       	brcs	.+4      	; 0x2fc2 <EncGet()+0xde>
    2fbe:	87 ee       	ldi	r24, 0xE7	; 231
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:30
      trk.pos = constrain(trk.pos, 0, 999);
    2fc2:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <trk+0x3>
    2fc6:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:32
      static unsigned int prevTrkPos;
      if (trk.pos != prevTrkPos){
    2fca:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <EncGet()::prevTrkPos>
    2fce:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <EncGet()::prevTrkPos+0x1>
    2fd2:	28 17       	cp	r18, r24
    2fd4:	39 07       	cpc	r19, r25
    2fd6:	b1 f2       	breq	.-84     	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:33
        prevTrkPos = trk.pos;
    2fd8:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <EncGet()::prevTrkPos+0x1>
    2fdc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <EncGet()::prevTrkPos>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:34
        nextPattern = track[trkBuffer].patternNbr[trk.pos];
    2fe0:	60 91 8f 04 	lds	r22, 0x048F	; 0x80048f <trkBuffer>
    2fe4:	42 e0       	ldi	r20, 0x02	; 2
    2fe6:	54 e0       	ldi	r21, 0x04	; 4
    2fe8:	64 9f       	mul	r22, r20
    2fea:	90 01       	movw	r18, r0
    2fec:	65 9f       	mul	r22, r21
    2fee:	30 0d       	add	r19, r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	29 56       	subi	r18, 0x69	; 105
    2ff4:	3b 4f       	sbci	r19, 0xFB	; 251
    2ff6:	82 0f       	add	r24, r18
    2ff8:	93 1f       	adc	r25, r19
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	82 81       	ldd	r24, Z+2	; 0x02
    2ffe:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:35
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    3002:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    3006:	89 17       	cp	r24, r25
    3008:	19 f0       	breq	.+6      	; 0x3010 <EncGet()+0x12c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:35 (discriminator 1)
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:36
        needLcdUpdate = TRUE;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	a1 cf       	rjmp	.-190    	; 0x2f56 <EncGet()+0x72>
    3014:	80 91 33 1e 	lds	r24, 0x1E33	; 0x801e33 <nextPattern>
    3018:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:39
        break;
      case 1:// track pattern
        if(instBtn) nextPattern = EncGet(nextPattern, 16);
    301a:	20 91 7b 1e 	lds	r18, 0x1E7B	; 0x801e7b <instBtn>
    301e:	60 e1       	ldi	r22, 0x10	; 16
    3020:	70 e0       	ldi	r23, 0x00	; 0
    3022:	21 11       	cpse	r18, r1
    3024:	02 c0       	rjmp	.+4      	; 0x302a <EncGet()+0x146>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:40
        else nextPattern = EncGet(nextPattern, 1);
    3026:	61 e0       	ldi	r22, 0x01	; 1
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    302e:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:41
        nextPattern = constrain(nextPattern, 0, MAX_PTRN - 1);
    3032:	80 91 33 1e 	lds	r24, 0x1E33	; 0x801e33 <nextPattern>
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	80 38       	cpi	r24, 0x80	; 128
    303a:	91 05       	cpc	r25, r1
    303c:	14 f0       	brlt	.+4      	; 0x3042 <EncGet()+0x15e>
    303e:	8f e7       	ldi	r24, 0x7F	; 127
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	28 2f       	mov	r18, r24
    3044:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:43
        static unsigned int prevNextPattern;
        if (nextPattern != prevNextPattern){
    3048:	40 91 1f 04 	lds	r20, 0x041F	; 0x80041f <EncGet()::prevNextPattern>
    304c:	50 91 20 04 	lds	r21, 0x0420	; 0x800420 <EncGet()::prevNextPattern+0x1>
    3050:	84 17       	cp	r24, r20
    3052:	95 07       	cpc	r25, r21
    3054:	09 f4       	brne	.+2      	; 0x3058 <EncGet()+0x174>
    3056:	96 cf       	rjmp	.-212    	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:44
          prevNextPattern = nextPattern;
    3058:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <EncGet()::prevNextPattern+0x1>
    305c:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <EncGet()::prevNextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:45
          if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    3060:	80 91 34 1e 	lds	r24, 0x1E34	; 0x801e34 <curPattern>
    3064:	28 13       	cpse	r18, r24
    3066:	d1 cf       	rjmp	.-94     	; 0x300a <EncGet()+0x126>
    3068:	d3 cf       	rjmp	.-90     	; 0x3010 <EncGet()+0x12c>
    306a:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <trkBuffer>
    306e:	c2 e0       	ldi	r28, 0x02	; 2
    3070:	d4 e0       	ldi	r29, 0x04	; 4
    3072:	8c 9f       	mul	r24, r28
    3074:	f0 01       	movw	r30, r0
    3076:	8d 9f       	mul	r24, r29
    3078:	f0 0d       	add	r31, r0
    307a:	11 24       	eor	r1, r1
    307c:	e9 56       	subi	r30, 0x69	; 105
    307e:	fb 4f       	sbci	r31, 0xFB	; 251
    3080:	80 81       	ld	r24, Z
    3082:	91 81       	ldd	r25, Z+1	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:50
          needLcdUpdate = TRUE;
        }
        break;
      case 2://track length
        if(instBtn) track[trkBuffer].length = EncGet(track[trkBuffer].length, 10);
    3084:	20 91 7b 1e 	lds	r18, 0x1E7B	; 0x801e7b <instBtn>
    3088:	6a e0       	ldi	r22, 0x0A	; 10
    308a:	70 e0       	ldi	r23, 0x00	; 0
    308c:	21 11       	cpse	r18, r1
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <EncGet()+0x1b0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:51
        else track[trkBuffer].length = EncGet(track[trkBuffer].length, 1);
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    3098:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <trkBuffer>
    309c:	2c 9f       	mul	r18, r28
    309e:	f0 01       	movw	r30, r0
    30a0:	2d 9f       	mul	r18, r29
    30a2:	f0 0d       	add	r31, r0
    30a4:	11 24       	eor	r1, r1
    30a6:	e9 56       	subi	r30, 0x69	; 105
    30a8:	fb 4f       	sbci	r31, 0xFB	; 251
    30aa:	91 83       	std	Z+1, r25	; 0x01
    30ac:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:52
        track[trkBuffer].length = constrain(track[trkBuffer].length, 0, 999);
    30ae:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <trkBuffer>
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	82 e0       	ldi	r24, 0x02	; 2
    30b6:	94 e0       	ldi	r25, 0x04	; 4
    30b8:	28 9f       	mul	r18, r24
    30ba:	f0 01       	movw	r30, r0
    30bc:	29 9f       	mul	r18, r25
    30be:	f0 0d       	add	r31, r0
    30c0:	38 9f       	mul	r19, r24
    30c2:	f0 0d       	add	r31, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	e9 56       	subi	r30, 0x69	; 105
    30c8:	fb 4f       	sbci	r31, 0xFB	; 251
    30ca:	80 81       	ld	r24, Z
    30cc:	91 81       	ldd	r25, Z+1	; 0x01
    30ce:	88 3e       	cpi	r24, 0xE8	; 232
    30d0:	f3 e0       	ldi	r31, 0x03	; 3
    30d2:	9f 07       	cpc	r25, r31
    30d4:	10 f0       	brcs	.+4      	; 0x30da <EncGet()+0x1f6>
    30d6:	87 ee       	ldi	r24, 0xE7	; 231
    30d8:	93 e0       	ldi	r25, 0x03	; 3
    30da:	42 e0       	ldi	r20, 0x02	; 2
    30dc:	54 e0       	ldi	r21, 0x04	; 4
    30de:	24 9f       	mul	r18, r20
    30e0:	f0 01       	movw	r30, r0
    30e2:	25 9f       	mul	r18, r21
    30e4:	f0 0d       	add	r31, r0
    30e6:	34 9f       	mul	r19, r20
    30e8:	f0 0d       	add	r31, r0
    30ea:	11 24       	eor	r1, r1
    30ec:	e9 56       	subi	r30, 0x69	; 105
    30ee:	fb 4f       	sbci	r31, 0xFB	; 251
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:54
        static unsigned int prevTrkLength;
        if (track[trkBuffer].length != prevTrkLength){
    30f4:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <EncGet()::prevTrkLength>
    30f8:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <EncGet()::prevTrkLength+0x1>
    30fc:	28 17       	cp	r18, r24
    30fe:	39 07       	cpc	r19, r25
    3100:	09 f4       	brne	.+2      	; 0x3104 <EncGet()+0x220>
    3102:	40 cf       	rjmp	.-384    	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:55
          prevTrkLength = track[trkBuffer].length;
    3104:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <EncGet()::prevTrkLength+0x1>
    3108:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <EncGet()::prevTrkLength>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:56
          trackNeedSaved = TRUE;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <trackNeedSaved>
    3112:	21 cf       	rjmp	.-446    	; 0x2f56 <EncGet()+0x72>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:68
      }
    }
  }

  ///////////////////////////////////KEYBOARD MODE////////////////////////////////////
  else if (keyboardMode){
    3114:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
    3118:	88 23       	and	r24, r24
    311a:	09 f4       	brne	.+2      	; 0x311e <EncGet()+0x23a>
    311c:	04 c1       	rjmp	.+520    	; 0x3326 <EncGet()+0x442>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:69
    switch (curIndex){
    311e:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <curIndex>
    3122:	81 30       	cpi	r24, 0x01	; 1
    3124:	09 f4       	brne	.+2      	; 0x3128 <EncGet()+0x244>
    3126:	49 c0       	rjmp	.+146    	; 0x31ba <EncGet()+0x2d6>
    3128:	10 f1       	brcs	.+68     	; 0x316e <EncGet()+0x28a>
    312a:	82 30       	cpi	r24, 0x02	; 2
    312c:	09 f4       	brne	.+2      	; 0x3130 <EncGet()+0x24c>
    312e:	a9 c0       	rjmp	.+338    	; 0x3282 <EncGet()+0x39e>
    3130:	83 30       	cpi	r24, 0x03	; 3
    3132:	09 f0       	breq	.+2      	; 0x3136 <EncGet()+0x252>
    3134:	27 cf       	rjmp	.-434    	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:102
          patternNeedSaved = TRUE;
          needLcdUpdate = TRUE;
        }
        break;
      case 3://octave
        keybOct = EncGet(keybOct, 1);
    3136:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <keybOct>
    313a:	61 e0       	ldi	r22, 0x01	; 1
    313c:	70 e0       	ldi	r23, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:103
        keybOct = constrain(keybOct, 0, 7);
    3144:	99 27       	eor	r25, r25
    3146:	88 30       	cpi	r24, 0x08	; 8
    3148:	91 05       	cpc	r25, r1
    314a:	14 f0       	brlt	.+4      	; 0x3150 <EncGet()+0x26c>
    314c:	87 e0       	ldi	r24, 0x07	; 7
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <keybOct>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:105
        static unsigned int prevKeybOct;
        if (keybOct != prevKeybOct){
    3154:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <EncGet()::prevKeybOct>
    3158:	30 91 16 04 	lds	r19, 0x0416	; 0x800416 <EncGet()::prevKeybOct+0x1>
    315c:	82 17       	cp	r24, r18
    315e:	93 07       	cpc	r25, r19
    3160:	09 f4       	brne	.+2      	; 0x3164 <EncGet()+0x280>
    3162:	10 cf       	rjmp	.-480    	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:106
          prevKeybOct = keybOct;
    3164:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <EncGet()::prevKeybOct+0x1>
    3168:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <EncGet()::prevKeybOct>
    316c:	51 cf       	rjmp	.-350    	; 0x3010 <EncGet()+0x12c>
    316e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <noteIndex>
    3172:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:72
  ///////////////////////////////////KEYBOARD MODE////////////////////////////////////
  else if (keyboardMode){
    switch (curIndex){
      //track position
    case 0://external instrument note index
      if(instBtn) noteIndex = EncGet(noteIndex, 10);
    3174:	20 91 7b 1e 	lds	r18, 0x1E7B	; 0x801e7b <instBtn>
    3178:	6a e0       	ldi	r22, 0x0A	; 10
    317a:	70 e0       	ldi	r23, 0x00	; 0
    317c:	21 11       	cpse	r18, r1
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <EncGet()+0x2a0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:73
      else noteIndex = EncGet(noteIndex, 1);
    3180:	61 e0       	ldi	r22, 0x01	; 1
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    3188:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:74
      noteIndex = constrain(noteIndex, 0, 99);
    318c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <noteIndex>
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	84 36       	cpi	r24, 0x64	; 100
    3194:	91 05       	cpc	r25, r1
    3196:	14 f0       	brlt	.+4      	; 0x319c <EncGet()+0x2b8>
    3198:	83 e6       	ldi	r24, 0x63	; 99
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:76
      static unsigned int prevNoteIndex;
      if (noteIndex != prevNoteIndex){
    31a0:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <EncGet()::prevNoteIndex>
    31a4:	30 91 1c 04 	lds	r19, 0x041C	; 0x80041c <EncGet()::prevNoteIndex+0x1>
    31a8:	82 17       	cp	r24, r18
    31aa:	93 07       	cpc	r25, r19
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <EncGet()+0x2cc>
    31ae:	ea ce       	rjmp	.-556    	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:77
        prevNoteIndex = noteIndex;
    31b0:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <EncGet()::prevNoteIndex+0x1>
    31b4:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <EncGet()::prevNoteIndex>
    31b8:	2b cf       	rjmp	.-426    	; 0x3010 <EncGet()+0x12c>
    31ba:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    31be:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    31c2:	c9 ec       	ldi	r28, 0xC9	; 201
    31c4:	d5 e0       	ldi	r29, 0x05	; 5
    31c6:	2c 9f       	mul	r18, r28
    31c8:	c0 01       	movw	r24, r0
    31ca:	2d 9f       	mul	r18, r29
    31cc:	90 0d       	add	r25, r0
    31ce:	11 24       	eor	r1, r1
    31d0:	88 56       	subi	r24, 0x68	; 104
    31d2:	9d 4e       	sbci	r25, 0xED	; 237
    31d4:	e8 0f       	add	r30, r24
    31d6:	f9 2f       	mov	r31, r25
    31d8:	f1 1d       	adc	r31, r1
    31da:	eb 5b       	subi	r30, 0xBB	; 187
    31dc:	fa 4f       	sbci	r31, 0xFA	; 250
    31de:	80 81       	ld	r24, Z
    31e0:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:81
        needLcdUpdate = TRUE;
        break;
      case 1://external instrument note
        if(instBtn) pattern[ptrnBuffer].extNote[noteIndex] = EncGet(pattern[ptrnBuffer].extNote[noteIndex], 12);
    31e2:	20 91 7b 1e 	lds	r18, 0x1E7B	; 0x801e7b <instBtn>
    31e6:	6c e0       	ldi	r22, 0x0C	; 12
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	21 11       	cpse	r18, r1
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <EncGet()+0x30e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:82
        else pattern[ptrnBuffer].extNote[noteIndex] = EncGet(pattern[ptrnBuffer].extNote[noteIndex], 1);
    31ee:	61 e0       	ldi	r22, 0x01	; 1
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    31f6:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    31fa:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    31fe:	9c 9f       	mul	r25, r28
    3200:	90 01       	movw	r18, r0
    3202:	9d 9f       	mul	r25, r29
    3204:	30 0d       	add	r19, r0
    3206:	11 24       	eor	r1, r1
    3208:	28 56       	subi	r18, 0x68	; 104
    320a:	3d 4e       	sbci	r19, 0xED	; 237
    320c:	e2 0f       	add	r30, r18
    320e:	f3 2f       	mov	r31, r19
    3210:	f1 1d       	adc	r31, r1
    3212:	eb 5b       	subi	r30, 0xBB	; 187
    3214:	fa 4f       	sbci	r31, 0xFA	; 250
    3216:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:83
        pattern[ptrnBuffer].extNote[noteIndex] = constrain(pattern[ptrnBuffer].extNote[noteIndex], 0, 127);
    3218:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    321c:	50 e0       	ldi	r21, 0x00	; 0
    321e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <noteIndex>
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	29 ec       	ldi	r18, 0xC9	; 201
    3226:	35 e0       	ldi	r19, 0x05	; 5
    3228:	42 9f       	mul	r20, r18
    322a:	f0 01       	movw	r30, r0
    322c:	43 9f       	mul	r20, r19
    322e:	f0 0d       	add	r31, r0
    3230:	52 9f       	mul	r21, r18
    3232:	f0 0d       	add	r31, r0
    3234:	11 24       	eor	r1, r1
    3236:	e8 0f       	add	r30, r24
    3238:	f9 1f       	adc	r31, r25
    323a:	e3 52       	subi	r30, 0x23	; 35
    323c:	f8 4e       	sbci	r31, 0xE8	; 232
    323e:	20 81       	ld	r18, Z
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	20 38       	cpi	r18, 0x80	; 128
    3244:	31 05       	cpc	r19, r1
    3246:	14 f0       	brlt	.+4      	; 0x324c <EncGet()+0x368>
    3248:	2f e7       	ldi	r18, 0x7F	; 127
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	69 ec       	ldi	r22, 0xC9	; 201
    324e:	75 e0       	ldi	r23, 0x05	; 5
    3250:	46 9f       	mul	r20, r22
    3252:	f0 01       	movw	r30, r0
    3254:	47 9f       	mul	r20, r23
    3256:	f0 0d       	add	r31, r0
    3258:	56 9f       	mul	r21, r22
    325a:	f0 0d       	add	r31, r0
    325c:	11 24       	eor	r1, r1
    325e:	e8 0f       	add	r30, r24
    3260:	f9 1f       	adc	r31, r25
    3262:	e3 52       	subi	r30, 0x23	; 35
    3264:	f8 4e       	sbci	r31, 0xE8	; 232
    3266:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:85
        static unsigned int prevExtNote;
        if (pattern[ptrnBuffer].extNote[noteIndex] != prevExtNote){
    3268:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <EncGet()::prevExtNote>
    326c:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <EncGet()::prevExtNote+0x1>
    3270:	28 17       	cp	r18, r24
    3272:	39 07       	cpc	r19, r25
    3274:	09 f4       	brne	.+2      	; 0x3278 <EncGet()+0x394>
    3276:	86 ce       	rjmp	.-756    	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:86
          prevExtNote = pattern[ptrnBuffer].extNote[noteIndex];
    3278:	30 93 1a 04 	sts	0x041A, r19	; 0x80041a <EncGet()::prevExtNote+0x1>
    327c:	20 93 19 04 	sts	0x0419, r18	; 0x800419 <EncGet()::prevExtNote>
    3280:	c7 ce       	rjmp	.-626    	; 0x3010 <EncGet()+0x12c>
    3282:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3286:	c9 ec       	ldi	r28, 0xC9	; 201
    3288:	d5 e0       	ldi	r29, 0x05	; 5
    328a:	8c 9f       	mul	r24, r28
    328c:	f0 01       	movw	r30, r0
    328e:	8d 9f       	mul	r24, r29
    3290:	f0 0d       	add	r31, r0
    3292:	11 24       	eor	r1, r1
    3294:	e3 5a       	subi	r30, 0xA3	; 163
    3296:	f7 4e       	sbci	r31, 0xE7	; 231
    3298:	80 81       	ld	r24, Z
    329a:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:91
          needLcdUpdate = TRUE;
        }
        break;
      case 2://external instrument notes stack length
        if(instBtn) pattern[ptrnBuffer].extLength = EncGet(pattern[ptrnBuffer].extLength, 10);
    329c:	20 91 7b 1e 	lds	r18, 0x1E7B	; 0x801e7b <instBtn>
    32a0:	6a e0       	ldi	r22, 0x0A	; 10
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	21 11       	cpse	r18, r1
    32a6:	02 c0       	rjmp	.+4      	; 0x32ac <EncGet()+0x3c8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:92
        else pattern[ptrnBuffer].extLength = EncGet(pattern[ptrnBuffer].extLength, 1);
    32a8:	61 e0       	ldi	r22, 0x01	; 1
    32aa:	70 e0       	ldi	r23, 0x00	; 0
    32ac:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    32b0:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    32b4:	9c 9f       	mul	r25, r28
    32b6:	f0 01       	movw	r30, r0
    32b8:	9d 9f       	mul	r25, r29
    32ba:	f0 0d       	add	r31, r0
    32bc:	11 24       	eor	r1, r1
    32be:	e3 5a       	subi	r30, 0xA3	; 163
    32c0:	f7 4e       	sbci	r31, 0xE7	; 231
    32c2:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:93
        pattern[ptrnBuffer].extLength = constrain(pattern[ptrnBuffer].extLength, 0, 99);
    32c4:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	89 ec       	ldi	r24, 0xC9	; 201
    32cc:	95 e0       	ldi	r25, 0x05	; 5
    32ce:	28 9f       	mul	r18, r24
    32d0:	f0 01       	movw	r30, r0
    32d2:	29 9f       	mul	r18, r25
    32d4:	f0 0d       	add	r31, r0
    32d6:	38 9f       	mul	r19, r24
    32d8:	f0 0d       	add	r31, r0
    32da:	11 24       	eor	r1, r1
    32dc:	e3 5a       	subi	r30, 0xA3	; 163
    32de:	f7 4e       	sbci	r31, 0xE7	; 231
    32e0:	80 81       	ld	r24, Z
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	84 36       	cpi	r24, 0x64	; 100
    32e6:	91 05       	cpc	r25, r1
    32e8:	14 f0       	brlt	.+4      	; 0x32ee <EncGet()+0x40a>
    32ea:	83 e6       	ldi	r24, 0x63	; 99
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	49 ec       	ldi	r20, 0xC9	; 201
    32f0:	55 e0       	ldi	r21, 0x05	; 5
    32f2:	24 9f       	mul	r18, r20
    32f4:	f0 01       	movw	r30, r0
    32f6:	25 9f       	mul	r18, r21
    32f8:	f0 0d       	add	r31, r0
    32fa:	34 9f       	mul	r19, r20
    32fc:	f0 0d       	add	r31, r0
    32fe:	11 24       	eor	r1, r1
    3300:	e3 5a       	subi	r30, 0xA3	; 163
    3302:	f7 4e       	sbci	r31, 0xE7	; 231
    3304:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:95
        static unsigned int prevExtLength;
        if (pattern[ptrnBuffer].extLength != prevExtLength){
    3306:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <EncGet()::prevExtLength>
    330a:	30 91 18 04 	lds	r19, 0x0418	; 0x800418 <EncGet()::prevExtLength+0x1>
    330e:	82 17       	cp	r24, r18
    3310:	93 07       	cpc	r25, r19
    3312:	09 f4       	brne	.+2      	; 0x3316 <EncGet()+0x432>
    3314:	37 ce       	rjmp	.-914    	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:96
          prevExtLength = pattern[ptrnBuffer].extLength;
    3316:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <EncGet()::prevExtLength+0x1>
    331a:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <EncGet()::prevExtLength>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:97
          patternNeedSaved = TRUE;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <patternNeedSaved>
    3324:	18 ce       	rjmp	.-976    	; 0x2f56 <EncGet()+0x72>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:114
        break;
      }
    }
  }
  ///////////////////////////////////CONFIG MODE////////////////////////////////////
  else if (seq.configMode){                                                               //  [zabox] rewrite for two complete pages & no wrong encoder updates
    3326:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    332a:	88 23       	and	r24, r24
    332c:	09 f4       	brne	.+2      	; 0x3330 <EncGet()+0x44c>
    332e:	cb c0       	rjmp	.+406    	; 0x34c6 <EncGet()+0x5e2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:116
    
    if (seq.configPage == 1) {    
    3330:	80 91 49 1e 	lds	r24, 0x1E49	; 0x801e49 <seq+0xa>
    3334:	81 30       	cpi	r24, 0x01	; 1
    3336:	09 f0       	breq	.+2      	; 0x333a <EncGet()+0x456>
    3338:	92 c0       	rjmp	.+292    	; 0x345e <EncGet()+0x57a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:120
      
  //---------------------Page 1----------------------------------------------------
    
    switch (curIndex){
    333a:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <curIndex>
    333e:	81 30       	cpi	r24, 0x01	; 1
    3340:	09 f4       	brne	.+2      	; 0x3344 <EncGet()+0x460>
    3342:	48 c0       	rjmp	.+144    	; 0x33d4 <EncGet()+0x4f0>
    3344:	58 f1       	brcs	.+86     	; 0x339c <EncGet()+0x4b8>
    3346:	82 30       	cpi	r24, 0x02	; 2
    3348:	09 f4       	brne	.+2      	; 0x334c <EncGet()+0x468>
    334a:	68 c0       	rjmp	.+208    	; 0x341c <EncGet()+0x538>
    334c:	83 30       	cpi	r24, 0x03	; 3
    334e:	09 f0       	breq	.+2      	; 0x3352 <EncGet()+0x46e>
    3350:	19 ce       	rjmp	.-974    	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:157
          seq.setupNeedSaved = TRUE;
          needLcdUpdate = TRUE;
        }
        break;
      case 3:
        seq.RXchannel = EncGet(seq.RXchannel, 1);
    3352:	80 91 43 1e 	lds	r24, 0x1E43	; 0x801e43 <seq+0x4>
    3356:	61 e0       	ldi	r22, 0x01	; 1
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:158
        seq.RXchannel = constrain(seq.RXchannel, 1, 16);
    3360:	61 e0       	ldi	r22, 0x01	; 1
    3362:	70 e0       	ldi	r23, 0x00	; 0
    3364:	88 23       	and	r24, r24
    3366:	39 f0       	breq	.+14     	; 0x3376 <EncGet()+0x492>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:158 (discriminator 1)
    3368:	bc 01       	movw	r22, r24
    336a:	77 27       	eor	r23, r23
    336c:	61 31       	cpi	r22, 0x11	; 17
    336e:	71 05       	cpc	r23, r1
    3370:	14 f0       	brlt	.+4      	; 0x3376 <EncGet()+0x492>
    3372:	60 e1       	ldi	r22, 0x10	; 16
    3374:	70 e0       	ldi	r23, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:158 (discriminator 4)
    3376:	60 93 43 1e 	sts	0x1E43, r22	; 0x801e43 <seq+0x4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:160 (discriminator 4)
        static unsigned int prevRX;
        if (seq.RXchannel != prevRX){
    337a:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <EncGet()::prevRX>
    337e:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <EncGet()::prevRX+0x1>
    3382:	68 17       	cp	r22, r24
    3384:	79 07       	cpc	r23, r25
    3386:	09 f4       	brne	.+2      	; 0x338a <EncGet()+0x4a6>
    3388:	fd cd       	rjmp	.-1030   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:161
          prevRX = seq.RXchannel;
    338a:	70 93 0f 04 	sts	0x040F, r23	; 0x80040f <EncGet()::prevRX+0x1>
    338e:	60 93 0e 04 	sts	0x040E, r22	; 0x80040e <EncGet()::prevRX>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:162
          MIDI.setInputChannel(seq.RXchannel);
    3392:	8b e1       	ldi	r24, 0x1B	; 27
    3394:	90 e2       	ldi	r25, 0x20	; 32
    3396:	0e 94 9f 3d 	call	0x7b3e	; 0x7b3e <MIDI_Class::setInputChannel(unsigned char)>
    339a:	3e c0       	rjmp	.+124    	; 0x3418 <EncGet()+0x534>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:124
    
    switch (curIndex){
      //track position
      case 0:
      
        seq.sync = EncGet(seq.sync, 1);                       //sync select
    339c:	80 91 40 1e 	lds	r24, 0x1E40	; 0x801e40 <seq+0x1>
    33a0:	61 e0       	ldi	r22, 0x01	; 1
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:125
        seq.sync = constrain(seq.sync, 0, 2);
    33aa:	99 27       	eor	r25, r25
    33ac:	83 30       	cpi	r24, 0x03	; 3
    33ae:	91 05       	cpc	r25, r1
    33b0:	14 f0       	brlt	.+4      	; 0x33b6 <EncGet()+0x4d2>
    33b2:	82 e0       	ldi	r24, 0x02	; 2
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	80 93 40 1e 	sts	0x1E40, r24	; 0x801e40 <seq+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:127
        static byte prevSeqSync;
        if (seq.sync != prevSeqSync){
    33ba:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <EncGet()::prevSeqSync>
    33be:	28 17       	cp	r18, r24
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <EncGet()+0x4e0>
    33c2:	e0 cd       	rjmp	.-1088   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:128
          prevSeqSync = seq.sync;
    33c4:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <EncGet()::prevSeqSync>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:129
          seq.syncChanged = TRUE;
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	80 93 41 1e 	sts	0x1E41, r24	; 0x801e41 <seq+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:192
        seq.muteModeHH = EncGet(seq.muteModeHH, 1);                              // [zabox]
        seq.muteModeHH = constrain(seq.muteModeHH, 0, 1);
        static boolean prev_muteModeHH;
        if (seq.muteModeHH != prev_muteModeHH){
          prev_muteModeHH = seq.muteModeHH;
          seq.setupNeedSaved = TRUE;
    33ce:	80 93 4b 1e 	sts	0x1E4B, r24	; 0x801e4b <seq+0xc>
    33d2:	c1 cd       	rjmp	.-1150   	; 0x2f56 <EncGet()+0x72>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:136
          needLcdUpdate = TRUE;
        }
        break;
      case 1:
  
        seq.defaultBpm = EncGet(seq.defaultBpm, 1);
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	80 91 46 1e 	lds	r24, 0x1E46	; 0x801e46 <seq+0x7>
    33dc:	90 91 47 1e 	lds	r25, 0x1E47	; 0x801e47 <seq+0x8>
    33e0:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    33e4:	8b 3f       	cpi	r24, 0xFB	; 251
    33e6:	91 05       	cpc	r25, r1
    33e8:	10 f0       	brcs	.+4      	; 0x33ee <EncGet()+0x50a>
    33ea:	8a ef       	ldi	r24, 0xFA	; 250
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	8e 31       	cpi	r24, 0x1E	; 30
    33f0:	91 05       	cpc	r25, r1
    33f2:	10 f4       	brcc	.+4      	; 0x33f8 <EncGet()+0x514>
    33f4:	8e e1       	ldi	r24, 0x1E	; 30
    33f6:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:137
        seq.defaultBpm = constrain(seq.defaultBpm, MIN_BPM, MAX_BPM);
    33f8:	90 93 47 1e 	sts	0x1E47, r25	; 0x801e47 <seq+0x8>
    33fc:	80 93 46 1e 	sts	0x1E46, r24	; 0x801e46 <seq+0x7>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:139
        static unsigned int prevDefaultBpm;
        if (seq.defaultBpm != prevDefaultBpm){
    3400:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <EncGet()::prevDefaultBpm>
    3404:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <EncGet()::prevDefaultBpm+0x1>
    3408:	82 17       	cp	r24, r18
    340a:	93 07       	cpc	r25, r19
    340c:	09 f4       	brne	.+2      	; 0x3410 <EncGet()+0x52c>
    340e:	ba cd       	rjmp	.-1164   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:140
          prevDefaultBpm = seq.defaultBpm;
    3410:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <EncGet()::prevDefaultBpm+0x1>
    3414:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <EncGet()::prevDefaultBpm>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:192
        seq.muteModeHH = EncGet(seq.muteModeHH, 1);                              // [zabox]
        seq.muteModeHH = constrain(seq.muteModeHH, 0, 1);
        static boolean prev_muteModeHH;
        if (seq.muteModeHH != prev_muteModeHH){
          prev_muteModeHH = seq.muteModeHH;
          seq.setupNeedSaved = TRUE;
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	d9 cf       	rjmp	.-78     	; 0x33ce <EncGet()+0x4ea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:147
          needLcdUpdate = TRUE;
        }
        break;
      case 2:
  
        seq.TXchannel = EncGet(seq.TXchannel, 1);
    341c:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    3420:	61 e0       	ldi	r22, 0x01	; 1
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:148
        seq.TXchannel = constrain(seq.TXchannel, 1, 16);
    342a:	88 23       	and	r24, r24
    342c:	a9 f0       	breq	.+42     	; 0x3458 <EncGet()+0x574>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:148 (discriminator 1)
    342e:	99 27       	eor	r25, r25
    3430:	81 31       	cpi	r24, 0x11	; 17
    3432:	91 05       	cpc	r25, r1
    3434:	14 f0       	brlt	.+4      	; 0x343a <EncGet()+0x556>
    3436:	80 e1       	ldi	r24, 0x10	; 16
    3438:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:148 (discriminator 4)
    343a:	80 93 42 1e 	sts	0x1E42, r24	; 0x801e42 <seq+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:150 (discriminator 4)
        static unsigned int prevTX;
        if (seq.TXchannel != prevTX){
    343e:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <EncGet()::prevTX>
    3442:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <EncGet()::prevTX+0x1>
    3446:	82 17       	cp	r24, r18
    3448:	93 07       	cpc	r25, r19
    344a:	09 f4       	brne	.+2      	; 0x344e <EncGet()+0x56a>
    344c:	9b cd       	rjmp	.-1226   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:151
          prevTX = seq.TXchannel;
    344e:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <EncGet()::prevTX+0x1>
    3452:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <EncGet()::prevTX>
    3456:	e0 cf       	rjmp	.-64     	; 0x3418 <EncGet()+0x534>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:148
        }
        break;
      case 2:
  
        seq.TXchannel = EncGet(seq.TXchannel, 1);
        seq.TXchannel = constrain(seq.TXchannel, 1, 16);
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	ee cf       	rjmp	.-36     	; 0x343a <EncGet()+0x556>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:169
          needLcdUpdate = TRUE;
        }
        break;
      }
    }
    else if (seq.configPage == 2) {
    345e:	82 30       	cpi	r24, 0x02	; 2
    3460:	09 f0       	breq	.+2      	; 0x3464 <EncGet()+0x580>
    3462:	90 cd       	rjmp	.-1248   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:173
            
  //---------------------Page 2----------------------------------------------------
    
    switch (curIndex){
    3464:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <curIndex>
    3468:	88 23       	and	r24, r24
    346a:	c1 f0       	breq	.+48     	; 0x349c <EncGet()+0x5b8>
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	09 f0       	breq	.+2      	; 0x3472 <EncGet()+0x58e>
    3470:	89 cd       	rjmp	.-1262   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:187
          seq.setupNeedSaved = TRUE;
          needLcdUpdate = TRUE;
        }
        break;
      case 1:
        seq.muteModeHH = EncGet(seq.muteModeHH, 1);                              // [zabox]
    3472:	80 91 4c 1e 	lds	r24, 0x1E4C	; 0x801e4c <seq+0xd>
    3476:	61 e0       	ldi	r22, 0x01	; 1
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    3480:	21 e0       	ldi	r18, 0x01	; 1
    3482:	89 2b       	or	r24, r25
    3484:	09 f4       	brne	.+2      	; 0x3488 <EncGet()+0x5a4>
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	20 93 4c 1e 	sts	0x1E4C, r18	; 0x801e4c <seq+0xd>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:190
        seq.muteModeHH = constrain(seq.muteModeHH, 0, 1);
        static boolean prev_muteModeHH;
        if (seq.muteModeHH != prev_muteModeHH){
    348c:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <EncGet()::prev_muteModeHH>
    3490:	28 17       	cp	r18, r24
    3492:	09 f4       	brne	.+2      	; 0x3496 <EncGet()+0x5b2>
    3494:	77 cd       	rjmp	.-1298   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:191
          prev_muteModeHH = seq.muteModeHH;
    3496:	20 93 0c 04 	sts	0x040C, r18	; 0x80040c <EncGet()::prev_muteModeHH>
    349a:	be cf       	rjmp	.-132    	; 0x3418 <EncGet()+0x534>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:176
  //---------------------Page 2----------------------------------------------------
    
    switch (curIndex){
      //track position
      case 0:
        seq.ptrnChangeSync = EncGet(seq.ptrnChangeSync, 1);               //pattern change sync select
    349c:	80 91 3f 1e 	lds	r24, 0x1E3F	; 0x801e3f <seq>
    34a0:	61 e0       	ldi	r22, 0x01	; 1
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
    34aa:	21 e0       	ldi	r18, 0x01	; 1
    34ac:	89 2b       	or	r24, r25
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <EncGet()+0x5ce>
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	20 93 3f 1e 	sts	0x1E3F, r18	; 0x801e3f <seq>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:179
        seq.ptrnChangeSync = constrain(seq.ptrnChangeSync, 0, 1);
        static boolean prevPtrnSyncChange;
        if (seq.ptrnChangeSync != prevPtrnSyncChange){
    34b6:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <EncGet()::prevPtrnSyncChange>
    34ba:	28 17       	cp	r18, r24
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <EncGet()+0x5dc>
    34be:	62 cd       	rjmp	.-1340   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:180
          prevPtrnSyncChange = seq.ptrnChangeSync;
    34c0:	20 93 0d 04 	sts	0x040D, r18	; 0x80040d <EncGet()::prevPtrnSyncChange>
    34c4:	a9 cf       	rjmp	.-174    	; 0x3418 <EncGet()+0x534>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:208
    }
    
    
  }
  else{
    seq.bpm = EncGet(seq.bpm,1);
    34c6:	61 e0       	ldi	r22, 0x01	; 1
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	80 91 44 1e 	lds	r24, 0x1E44	; 0x801e44 <seq+0x5>
    34ce:	90 91 45 1e 	lds	r25, 0x1E45	; 0x801e45 <seq+0x6>
    34d2:	0e 94 42 07 	call	0xe84	; 0xe84 <EncGet(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:209
    if (seq.bpm <= MIN_BPM) seq.bpm = MIN_BPM;
    34d6:	8f 31       	cpi	r24, 0x1F	; 31
    34d8:	91 05       	cpc	r25, r1
    34da:	78 f1       	brcs	.+94     	; 0x353a <EncGet()+0x656>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:209 (discriminator 1)
    34dc:	90 93 45 1e 	sts	0x1E45, r25	; 0x801e45 <seq+0x6>
    34e0:	80 93 44 1e 	sts	0x1E44, r24	; 0x801e44 <seq+0x5>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:210 (discriminator 1)
    if (seq.bpm >= MAX_BPM) seq.bpm = MAX_BPM;
    34e4:	80 91 44 1e 	lds	r24, 0x1E44	; 0x801e44 <seq+0x5>
    34e8:	90 91 45 1e 	lds	r25, 0x1E45	; 0x801e45 <seq+0x6>
    34ec:	8a 3f       	cpi	r24, 0xFA	; 250
    34ee:	91 05       	cpc	r25, r1
    34f0:	30 f0       	brcs	.+12     	; 0x34fe <EncGet()+0x61a>
    34f2:	8a ef       	ldi	r24, 0xFA	; 250
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	90 93 45 1e 	sts	0x1E45, r25	; 0x801e45 <seq+0x6>
    34fa:	80 93 44 1e 	sts	0x1E44, r24	; 0x801e44 <seq+0x5>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:212
    static unsigned int curBpm;
    if( seq.bpm != curBpm)
    34fe:	80 91 44 1e 	lds	r24, 0x1E44	; 0x801e44 <seq+0x5>
    3502:	90 91 45 1e 	lds	r25, 0x1E45	; 0x801e45 <seq+0x6>
    3506:	20 91 0a 04 	lds	r18, 0x040A	; 0x80040a <EncGet()::curBpm>
    350a:	30 91 0b 04 	lds	r19, 0x040B	; 0x80040b <EncGet()::curBpm+0x1>
    350e:	82 17       	cp	r24, r18
    3510:	93 07       	cpc	r25, r19
    3512:	09 f4       	brne	.+2      	; 0x3516 <EncGet()+0x632>
    3514:	37 cd       	rjmp	.-1426   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:214
    {
      curBpm = seq.bpm;
    3516:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <EncGet()::curBpm+0x1>
    351a:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <EncGet()::curBpm>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:215
      TimerSetFrequency();
    351e:	0e 94 56 17 	call	0x2eac	; 0x2eac <TimerSetFrequency()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:216
      if (curSeqMode != PTRN_STEP || tempoBtn.pressed) needLcdUpdate = TRUE;
    3522:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    3526:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    352a:	03 97       	sbiw	r24, 0x03	; 3
    352c:	09 f0       	breq	.+2      	; 0x3530 <EncGet()+0x64c>
    352e:	70 cd       	rjmp	.-1312   	; 0x3010 <EncGet()+0x12c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:216 (discriminator 2)
    3530:	80 91 02 1f 	lds	r24, 0x1F02	; 0x801f02 <tempoBtn+0x2>
    3534:	81 11       	cpse	r24, r1
    3536:	6c cd       	rjmp	.-1320   	; 0x3010 <EncGet()+0x12c>
    3538:	25 cd       	rjmp	.-1462   	; 0x2f84 <EncGet()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Enc.ino:209 (discriminator 1)
    
    
  }
  else{
    seq.bpm = EncGet(seq.bpm,1);
    if (seq.bpm <= MIN_BPM) seq.bpm = MIN_BPM;
    353a:	8e e1       	ldi	r24, 0x1E	; 30
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	ce cf       	rjmp	.-100    	; 0x34dc <EncGet()+0x5f8>

00003540 <TimerStart()>:
_Z10TimerStartv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:8
//             Timer Configuration
//-------------------------------------------------

void TimerStart()
{
  TCCR1A = TCCR1B = 0;
    3540:	e1 e8       	ldi	r30, 0x81	; 129
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	10 82       	st	Z, r1
    3546:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:10
  //prescale 8 => 16000000/8 = 2000000 Hz by tick
  TCCR1B |= _BV (CS11) | _BV (WGM12);
    354a:	80 81       	ld	r24, Z
    354c:	8a 60       	ori	r24, 0x0A	; 10
    354e:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:11
  TimerSetFrequency();
    3550:	0e 94 56 17 	call	0x2eac	; 0x2eac <TimerSetFrequency()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:12
  TIMSK1 |= _BV(OCIE1A);
    3554:	ef e6       	ldi	r30, 0x6F	; 111
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	82 60       	ori	r24, 0x02	; 2
    355c:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:14

}
    355e:	08 95       	ret

00003560 <initTrigTimer()>:
_Z13initTrigTimerv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:34



void initTrigTimer() {                         // [zabox] [v1.028] timer 2 setup for 2ms interrupt

  TCCR2A = _BV(WGM21);                           // Set timer to ctc mode
    3560:	82 e0       	ldi	r24, 0x02	; 2
    3562:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:36
  //TCCR2B = _BV(CS22) | (_BV(CS20);             // Set prescaler to 128
  TRIG_TIMER_STOP;
    3566:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:37
  TRIG_TIMER_ZERO;
    356a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:38
  OCR2A = 249;                                   // Set output compare register to 2ms
    356e:	99 ef       	ldi	r25, 0xF9	; 249
    3570:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:39
  TIMSK2 = _BV(OCIE2A);                          // Enable OC interrupt
    3574:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:41
 
}
    3578:	08 95       	ret

0000357a <initExpTimer()>:
_Z12initExpTimerv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:46


void initExpTimer() {                         // [zabox] [v1.028] timer 2 setup for 2ms interrupt

  TCCR2A = 0;                                    // Set timer to normal mode
    357a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:47
  TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);    // Set prescaler to 128
    357e:	87 e0       	ldi	r24, 0x07	; 7
    3580:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:48
  TIMSK2 = 0;                                    // Enable OC interrupt
    3584:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:50
 
}
    3588:	08 95       	ret

0000358a <SetSeqSync()>:
_Z10SetSeqSyncv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:27


void SetSeqSync() 
{
    //Sync configuration
    switch (seq.sync){                             // [zabox] [1.028] added expander mode
    358a:	80 91 40 1e 	lds	r24, 0x1E40	; 0x801e40 <seq+0x1>
    358e:	81 30       	cpi	r24, 0x01	; 1
    3590:	61 f0       	breq	.+24     	; 0x35aa <SetSeqSync()+0x20>
    3592:	18 f0       	brcs	.+6      	; 0x359a <SetSeqSync()+0x10>
    3594:	82 30       	cpi	r24, 0x02	; 2
    3596:	89 f0       	breq	.+34     	; 0x35ba <SetSeqSync()+0x30>
    3598:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:29
    case MASTER: 
      initTrigTimer();                          
    359a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <initTrigTimer()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:30
      DisconnectMidiHandleRealTime();
    359e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <DisconnectMidiHandleRealTime()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:31
      DisconnectMidiHandleNote();
    35a2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DisconnectMidiHandleNote()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:32
      TimerStart();//cf timer
    35a6:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <TimerStart()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:35
      break;
    case SLAVE:
      TimerStop();
    35aa:	0e 94 48 17 	call	0x2e90	; 0x2e90 <TimerStop()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:36
      initTrigTimer();                        
    35ae:	0e 94 b0 1a 	call	0x3560	; 0x3560 <initTrigTimer()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:37
      DisconnectMidiHandleNote();
    35b2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DisconnectMidiHandleNote()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:38
      ConnectMidiHandleRealTime();
    35b6:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <ConnectMidiHandleRealTime()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:41
      break;
    case EXPANDER:
      TimerStop();
    35ba:	0e 94 48 17 	call	0x2e90	; 0x2e90 <TimerStop()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:42
      initExpTimer();                 
    35be:	0e 94 bd 1a 	call	0x357a	; 0x357a <initExpTimer()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:43
      DisconnectMidiHandleRealTime();
    35c2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <DisconnectMidiHandleRealTime()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:44
      ConnectMidiHandleNote();
    35c6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <ConnectMidiHandleNote()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:45
      stepLeds = 0;
    35ca:	10 92 6e 1e 	sts	0x1E6E, r1	; 0x801e6e <stepLeds+0x1>
    35ce:	10 92 6d 1e 	sts	0x1E6D, r1	; 0x801e6d <stepLeds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:46
      configLed = 0;
    35d2:	10 92 67 1e 	sts	0x1E67, r1	; 0x801e67 <configLed+0x1>
    35d6:	10 92 66 1e 	sts	0x1E66, r1	; 0x801e66 <configLed>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:47
      menuLed = 0;
    35da:	10 92 68 1e 	sts	0x1E68, r1	; 0x801e68 <menuLed>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:50
      break;
    }
}
    35de:	08 95       	ret

000035e0 <initFlamTimer()>:
_Z13initFlamTimerv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:55


void initFlamTimer() {                        // [zabox] [v1.028] timer 3 setup for 2ms interrupt

 TCCR3A = 0;                                    // initialize
    35e0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:56
 TCCR3C = 0;                                    // initialize
    35e4:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:57
 FLAM_TIMER_STOP;
    35e8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:58
 cli();
    35ec:	f8 94       	cli
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:59
 FLAM_TIMER_ZERO;
    35ee:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    35f2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:60
 OCR3A = flam[1];                               // Set output compare register to 2ms
    35f6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <flam+0x2>
    35fa:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <flam+0x3>
    35fe:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    3602:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:61
 sei();
    3606:	78 94       	sei
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:62
 TIMSK3 = _BV(OCIE3A);                          // Enable OC interrupt
    3608:	82 e0       	ldi	r24, 0x02	; 2
    360a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:64
 
}
    360e:	08 95       	ret

00003610 <setFlam()>:
_Z7setFlamv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:69



void setFlam() {
  if (OCR3A != flam[pattern[ptrnBuffer].flam]) {
    3610:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    3614:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    3618:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    361c:	89 ec       	ldi	r24, 0xC9	; 201
    361e:	95 e0       	ldi	r25, 0x05	; 5
    3620:	48 9f       	mul	r20, r24
    3622:	f0 01       	movw	r30, r0
    3624:	49 9f       	mul	r20, r25
    3626:	f0 0d       	add	r31, r0
    3628:	11 24       	eor	r1, r1
    362a:	e4 56       	subi	r30, 0x64	; 100
    362c:	f9 4e       	sbci	r31, 0xE9	; 233
    362e:	e0 81       	ld	r30, Z
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	ee 0f       	add	r30, r30
    3634:	ff 1f       	adc	r31, r31
    3636:	e1 54       	subi	r30, 0x41	; 65
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	28 17       	cp	r18, r24
    3640:	39 07       	cpc	r19, r25
    3642:	21 f0       	breq	.+8      	; 0x364c <setFlam()+0x3c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:70
    OCR3A = flam[pattern[ptrnBuffer].flam];                              // Set output compare register to 2m
    3644:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    3648:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:72
  }
}
    364c:	08 95       	ret

0000364e <CountPPQN()>:
_Z9CountPPQNv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:41
  
  

//Tick proceed each pulse
void CountPPQN()
{
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:42
  blinkVeryFast =! blinkVeryFast;
    3652:	80 91 65 1e 	lds	r24, 0x1E65	; 0x801e65 <blinkVeryFast>
    3656:	21 e0       	ldi	r18, 0x01	; 1
    3658:	82 27       	eor	r24, r18
    365a:	80 93 65 1e 	sts	0x1E65, r24	; 0x801e65 <blinkVeryFast>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:43
  if (ppqn % (PPQN/2) == 0) blinkTempo = !blinkTempo;
    365e:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	60 e3       	ldi	r22, 0x30	; 48
    3666:	70 e0       	ldi	r23, 0x00	; 0
    3668:	0e 94 fd 4c 	call	0x99fa	; 0x99fa <__divmodhi4>
    366c:	89 2b       	or	r24, r25
    366e:	29 f4       	brne	.+10     	; 0x367a <CountPPQN()+0x2c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:43 (discriminator 1)
    3670:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <blinkTempo>
    3674:	82 27       	eor	r24, r18
    3676:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <blinkTempo>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:44
  if (ppqn  % (pattern[ptrnBuffer].scale/2) == 0) blinkFast = LOW;
    367a:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    367e:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    3682:	29 ec       	ldi	r18, 0xC9	; 201
    3684:	35 e0       	ldi	r19, 0x05	; 5
    3686:	92 9f       	mul	r25, r18
    3688:	f0 01       	movw	r30, r0
    368a:	93 9f       	mul	r25, r19
    368c:	f0 0d       	add	r31, r0
    368e:	11 24       	eor	r1, r1
    3690:	e7 56       	subi	r30, 0x67	; 103
    3692:	f9 4e       	sbci	r31, 0xE9	; 233
    3694:	60 81       	ld	r22, Z
    3696:	66 95       	lsr	r22
    3698:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__udivmodqi4>
    369c:	91 11       	cpse	r25, r1
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <CountPPQN()+0x56>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:44 (discriminator 1)
    36a0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <blinkFast>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:46
 // if (ppqn % 4 == 0) MIDI.sendRealTime(Clock);      //MidiSend(CLOCK_CMD);//as NAVA seq is 96ppqn we need to send clock each 4 internal ppqn
  if (ppqn % 4 == 0) {                                
    36a4:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    36a8:	83 70       	andi	r24, 0x03	; 3
    36aa:	39 f4       	brne	.+14     	; 0x36ba <CountPPQN()+0x6c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:47
    while (!(UCSR1A & (1 << UDRE1))) {};                                            // [zabox] directly adressing the uart fixes the midi clock lag
    36ac:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    36b0:	85 ff       	sbrs	r24, 5
    36b2:	fc cf       	rjmp	.-8      	; 0x36ac <CountPPQN()+0x5e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:48
    UDR1 = CLOCK_CMD; //Tick
    36b4:	88 ef       	ldi	r24, 0xF8	; 248
    36b6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:51
  }

  if (seq.sync == MASTER){                                                          // [zabox] has to be 0/2 for the correct phase
    36ba:	80 91 40 1e 	lds	r24, 0x1E40	; 0x801e40 <seq+0x1>
    36be:	81 11       	cpse	r24, r1
    36c0:	09 c0       	rjmp	.+18     	; 0x36d4 <CountPPQN()+0x86>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:52
    if (ppqn % 4 == 0){
    36c2:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    36c6:	83 70       	andi	r24, 0x03	; 3
    36c8:	09 f0       	breq	.+2      	; 0x36cc <CountPPQN()+0x7e>
    36ca:	f5 c1       	rjmp	.+1002   	; 0x3ab6 <CountPPQN()+0x468>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:53
      DIN_CLK_HIGH;                                                               
    36cc:	11 9a       	sbi	0x02, 1	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:54
      dinClkState = HIGH;
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <dinClkState>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:63
      dinClkState = LOW;
    }    
  }
  

  if (isRunning)
    36d4:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    36d8:	88 23       	and	r24, r24
    36da:	09 f4       	brne	.+2      	; 0x36de <CountPPQN()+0x90>
    36dc:	de c1       	rjmp	.+956    	; 0x3a9a <CountPPQN()+0x44c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:65
  {
    if (ppqn % pattern[ptrnBuffer].scale == (pattern[ptrnBuffer].scale/2)) tapStepCount++;
    36de:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    36e2:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	29 ec       	ldi	r18, 0xC9	; 201
    36ea:	35 e0       	ldi	r19, 0x05	; 5
    36ec:	42 9f       	mul	r20, r18
    36ee:	f0 01       	movw	r30, r0
    36f0:	43 9f       	mul	r20, r19
    36f2:	f0 0d       	add	r31, r0
    36f4:	52 9f       	mul	r21, r18
    36f6:	f0 0d       	add	r31, r0
    36f8:	11 24       	eor	r1, r1
    36fa:	e7 56       	subi	r30, 0x67	; 103
    36fc:	f9 4e       	sbci	r31, 0xE9	; 233
    36fe:	30 81       	ld	r19, Z
    3700:	63 2f       	mov	r22, r19
    3702:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__udivmodqi4>
    3706:	83 2f       	mov	r24, r19
    3708:	86 95       	lsr	r24
    370a:	98 13       	cpse	r25, r24
    370c:	05 c0       	rjmp	.+10     	; 0x3718 <CountPPQN()+0xca>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:65 (discriminator 1)
    370e:	80 91 3c 1e 	lds	r24, 0x1E3C	; 0x801e3c <tapStepCount>
    3712:	8f 5f       	subi	r24, 0xFF	; 255
    3714:	80 93 3c 1e 	sts	0x1E3C, r24	; 0x801e3c <tapStepCount>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:67

    if (tapStepCount > pattern[ptrnBuffer].length) tapStepCount = 0;
    3718:	89 ec       	ldi	r24, 0xC9	; 201
    371a:	95 e0       	ldi	r25, 0x05	; 5
    371c:	48 9f       	mul	r20, r24
    371e:	f0 01       	movw	r30, r0
    3720:	49 9f       	mul	r20, r25
    3722:	f0 0d       	add	r31, r0
    3724:	58 9f       	mul	r21, r24
    3726:	f0 0d       	add	r31, r0
    3728:	11 24       	eor	r1, r1
    372a:	e8 56       	subi	r30, 0x68	; 104
    372c:	f9 4e       	sbci	r31, 0xE9	; 233
    372e:	20 81       	ld	r18, Z
    3730:	80 91 3c 1e 	lds	r24, 0x1E3C	; 0x801e3c <tapStepCount>
    3734:	28 17       	cp	r18, r24
    3736:	10 f4       	brcc	.+4      	; 0x373c <CountPPQN()+0xee>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:67 (discriminator 1)
    3738:	10 92 3c 1e 	sts	0x1E3C, r1	; 0x801e3c <tapStepCount>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:70

    // Initialize the step value for trigger and gate value for cv gate track
    stepValue = 0;
    373c:	10 92 32 1e 	sts	0x1E32, r1	; 0x801e32 <stepValue+0x1>
    3740:	10 92 31 1e 	sts	0x1E31, r1	; 0x801e31 <stepValue>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:72

    if (ppqn % pattern[ptrnBuffer].scale == 0) stepChanged = TRUE;//Step changed ?
    3744:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    3748:	63 2f       	mov	r22, r19
    374a:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__udivmodqi4>
    374e:	91 11       	cpse	r25, r1
    3750:	03 c0       	rjmp	.+6      	; 0x3758 <CountPPQN()+0x10a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:72 (discriminator 1)
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	80 93 3b 1e 	sts	0x1E3B, r24	; 0x801e3b <stepChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:74

    if (((ppqn + shuffle[(pattern[ptrnBuffer].shuffle)-1][shufPolarity]) % pattern[ptrnBuffer].scale == 0) && stepChanged)
    3758:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    375c:	e0 91 2a 1e 	lds	r30, 0x1E2A	; 0x801e2a <shufPolarity>
    3760:	69 ec       	ldi	r22, 0xC9	; 201
    3762:	75 e0       	ldi	r23, 0x05	; 5
    3764:	46 9f       	mul	r20, r22
    3766:	d0 01       	movw	r26, r0
    3768:	47 9f       	mul	r20, r23
    376a:	b0 0d       	add	r27, r0
    376c:	56 9f       	mul	r21, r22
    376e:	b0 0d       	add	r27, r0
    3770:	11 24       	eor	r1, r1
    3772:	a5 56       	subi	r26, 0x65	; 101
    3774:	b9 4e       	sbci	r27, 0xE9	; 233
    3776:	4c 91       	ld	r20, X
    3778:	41 50       	subi	r20, 0x01	; 1
    377a:	55 0b       	sbc	r21, r21
    377c:	44 0f       	add	r20, r20
    377e:	55 1f       	adc	r21, r21
    3780:	e4 0f       	add	r30, r20
    3782:	f5 2f       	mov	r31, r21
    3784:	f1 1d       	adc	r31, r1
    3786:	ee 0f       	add	r30, r30
    3788:	ff 1f       	adc	r31, r31
    378a:	e1 53       	subi	r30, 0x31	; 49
    378c:	fe 4f       	sbci	r31, 0xFE	; 254
    378e:	40 81       	ld	r20, Z
    3790:	51 81       	ldd	r21, Z+1	; 0x01
    3792:	84 0f       	add	r24, r20
    3794:	95 2f       	mov	r25, r21
    3796:	91 1d       	adc	r25, r1
    3798:	63 2f       	mov	r22, r19
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	0e 94 fd 4c 	call	0x99fa	; 0x99fa <__divmodhi4>
    37a0:	89 2b       	or	r24, r25
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <CountPPQN()+0x158>
    37a4:	40 c1       	rjmp	.+640    	; 0x3a26 <CountPPQN()+0x3d8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:74 (discriminator 1)
    37a6:	80 91 3b 1e 	lds	r24, 0x1E3B	; 0x801e3b <stepChanged>
    37aa:	88 23       	and	r24, r24
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <CountPPQN()+0x162>
    37ae:	3b c1       	rjmp	.+630    	; 0x3a26 <CountPPQN()+0x3d8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:76
    {//Each Step
      stepChanged = FALSE;//flag that we already trig this step
    37b0:	10 92 3b 1e 	sts	0x1E3B, r1	; 0x801e3b <stepChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:77
      shufPolarity = !shufPolarity;
    37b4:	80 91 2a 1e 	lds	r24, 0x1E2A	; 0x801e2a <shufPolarity>
    37b8:	91 e0       	ldi	r25, 0x01	; 1
    37ba:	89 27       	eor	r24, r25
    37bc:	80 93 2a 1e 	sts	0x1E2A, r24	; 0x801e2a <shufPolarity>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:78
      blinkFast = HIGH;
    37c0:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <blinkFast>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:81

      //sequencer direction-----------
      switch (seq.dir){
    37c4:	80 91 48 1e 	lds	r24, 0x1E48	; 0x801e48 <seq+0x9>
    37c8:	81 30       	cpi	r24, 0x01	; 1
    37ca:	09 f4       	brne	.+2      	; 0x37ce <CountPPQN()+0x180>
    37cc:	9e c1       	rjmp	.+828    	; 0x3b0a <CountPPQN()+0x4bc>
    37ce:	08 f4       	brcc	.+2      	; 0x37d2 <CountPPQN()+0x184>
    37d0:	8c c1       	rjmp	.+792    	; 0x3aea <CountPPQN()+0x49c>
    37d2:	82 30       	cpi	r24, 0x02	; 2
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <CountPPQN()+0x18a>
    37d6:	79 c1       	rjmp	.+754    	; 0x3aca <CountPPQN()+0x47c>
    37d8:	83 30       	cpi	r24, 0x03	; 3
    37da:	09 f4       	brne	.+2      	; 0x37de <CountPPQN()+0x190>
    37dc:	9e c1       	rjmp	.+828    	; 0x3b1a <CountPPQN()+0x4cc>
    37de:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    37e2:	89 ec       	ldi	r24, 0xC9	; 201
    37e4:	95 e0       	ldi	r25, 0x05	; 5
    37e6:	28 9f       	mul	r18, r24
    37e8:	a0 01       	movw	r20, r0
    37ea:	29 9f       	mul	r18, r25
    37ec:	50 0d       	add	r21, r0
    37ee:	11 24       	eor	r1, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:102 (discriminator 2)
      }

      //Set step value to be trigged
      for (byte z = 0; z < NBR_INST; z++)
      {
        stepValue |= (bitRead(pattern[ptrnBuffer].inst[z], curStep)) << z;
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	a0 91 3d 1e 	lds	r26, 0x1E3D	; 0x801e3d <curStep>
    37f8:	60 91 31 1e 	lds	r22, 0x1E31	; 0x801e31 <stepValue>
    37fc:	70 91 32 1e 	lds	r23, 0x1E32	; 0x801e32 <stepValue+0x1>
    3800:	f9 01       	movw	r30, r18
    3802:	ee 0f       	add	r30, r30
    3804:	ff 1f       	adc	r31, r31
    3806:	e4 0f       	add	r30, r20
    3808:	f5 1f       	adc	r31, r21
    380a:	e3 56       	subi	r30, 0x63	; 99
    380c:	f9 4e       	sbci	r31, 0xE9	; 233
    380e:	80 81       	ld	r24, Z
    3810:	91 81       	ldd	r25, Z+1	; 0x01
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <CountPPQN()+0x1ca>
    3814:	96 95       	lsr	r25
    3816:	87 95       	ror	r24
    3818:	aa 95       	dec	r26
    381a:	e2 f7       	brpl	.-8      	; 0x3814 <CountPPQN()+0x1c6>
    381c:	81 70       	andi	r24, 0x01	; 1
    381e:	99 27       	eor	r25, r25
    3820:	02 2e       	mov	r0, r18
    3822:	02 c0       	rjmp	.+4      	; 0x3828 <CountPPQN()+0x1da>
    3824:	88 0f       	add	r24, r24
    3826:	99 1f       	adc	r25, r25
    3828:	0a 94       	dec	r0
    382a:	e2 f7       	brpl	.-8      	; 0x3824 <CountPPQN()+0x1d6>
    382c:	86 2b       	or	r24, r22
    382e:	97 2b       	or	r25, r23
    3830:	90 93 32 1e 	sts	0x1E32, r25	; 0x801e32 <stepValue+0x1>
    3834:	80 93 31 1e 	sts	0x1E31, r24	; 0x801e31 <stepValue>
    3838:	2f 5f       	subi	r18, 0xFF	; 255
    383a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:100 (discriminator 2)
        curStep = random(0, 16);
        break;
      }

      //Set step value to be trigged
      for (byte z = 0; z < NBR_INST; z++)
    383c:	20 31       	cpi	r18, 0x10	; 16
    383e:	31 05       	cpc	r19, r1
    3840:	c9 f6       	brne	.-78     	; 0x37f4 <CountPPQN()+0x1a6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:105
      {
        stepValue |= (bitRead(pattern[ptrnBuffer].inst[z], curStep)) << z;
      }
      //Set stepvalue depending metronome
      stepValue |= (bitRead(metronome,curStep) << RM);
    3842:	40 91 3d 1e 	lds	r20, 0x1E3D	; 0x801e3d <curStep>
    3846:	20 91 31 1e 	lds	r18, 0x1E31	; 0x801e31 <stepValue>
    384a:	30 91 32 1e 	lds	r19, 0x1E32	; 0x801e32 <stepValue+0x1>
    384e:	80 91 2b 1e 	lds	r24, 0x1E2B	; 0x801e2b <metronome>
    3852:	90 91 2c 1e 	lds	r25, 0x1E2C	; 0x801e2c <metronome+0x1>
    3856:	02 c0       	rjmp	.+4      	; 0x385c <CountPPQN()+0x20e>
    3858:	96 95       	lsr	r25
    385a:	87 95       	ror	r24
    385c:	4a 95       	dec	r20
    385e:	e2 f7       	brpl	.-8      	; 0x3858 <CountPPQN()+0x20a>
    3860:	43 e0       	ldi	r20, 0x03	; 3
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	4a 95       	dec	r20
    3868:	e1 f7       	brne	.-8      	; 0x3862 <CountPPQN()+0x214>
    386a:	88 70       	andi	r24, 0x08	; 8
    386c:	99 27       	eor	r25, r25
    386e:	82 2b       	or	r24, r18
    3870:	93 2b       	or	r25, r19
    3872:	90 93 32 1e 	sts	0x1E32, r25	; 0x801e32 <stepValue+0x1>
    3876:	80 93 31 1e 	sts	0x1E31, r24	; 0x801e31 <stepValue>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:107
      
      setFlam();                                                                                    // [zabox] [1.027] if changed, update flam interval
    387a:	0e 94 08 1b 	call	0x3610	; 0x3610 <setFlam()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:109
      
      if (stepValue){
    387e:	80 91 31 1e 	lds	r24, 0x1E31	; 0x801e31 <stepValue>
    3882:	90 91 32 1e 	lds	r25, 0x1E32	; 0x801e32 <stepValue+0x1>
    3886:	89 2b       	or	r24, r25
    3888:	09 f4       	brne	.+2      	; 0x388c <CountPPQN()+0x23e>
    388a:	62 c0       	rjmp	.+196    	; 0x3950 <CountPPQN()+0x302>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:110
        SetMux();
    388c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <SetMux()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:111
        int temp_muteInst = muteInst;                                                               // [zabox] OH/CH mute select
    3890:	80 91 a2 0c 	lds	r24, 0x0CA2	; 0x800ca2 <muteInst>
    3894:	90 91 a3 0c 	lds	r25, 0x0CA3	; 0x800ca3 <muteInst+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:112
        if (bitRead(stepValue, CH) && bitRead(muteInst, CH)) {                                      //
    3898:	20 91 31 1e 	lds	r18, 0x1E31	; 0x801e31 <stepValue>
    389c:	30 91 32 1e 	lds	r19, 0x1E32	; 0x801e32 <stepValue+0x1>
    38a0:	36 ff       	sbrs	r19, 6
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <CountPPQN()+0x25a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:112 (discriminator 1)
    38a4:	96 fd       	sbrc	r25, 6
    38a6:	45 c1       	rjmp	.+650    	; 0x3b32 <CountPPQN()+0x4e4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:115
          temp_muteInst |= (1 << HH);                                                               //  
        }   
        else if (bitRead(stepValue, OH) && bitRead(muteInst, OH)) {                                 //  
    38a8:	20 91 31 1e 	lds	r18, 0x1E31	; 0x801e31 <stepValue>
    38ac:	30 91 32 1e 	lds	r19, 0x1E32	; 0x801e32 <stepValue+0x1>
    38b0:	37 fd       	sbrc	r19, 7
    38b2:	42 c1       	rjmp	.+644    	; 0x3b38 <CountPPQN()+0x4ea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:111
      
      setFlam();                                                                                    // [zabox] [1.027] if changed, update flam interval
      
      if (stepValue){
        SetMux();
        int temp_muteInst = muteInst;                                                               // [zabox] OH/CH mute select
    38b4:	9c 01       	movw	r18, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:119
        }   
        else if (bitRead(stepValue, OH) && bitRead(muteInst, OH)) {                                 //  
          temp_muteInst |= (1 << HH);                                                               //
        }
        
        if (bitRead(pattern[ptrnBuffer].inst[CH], curStep) && !bitRead(muteInst, CH)) tempDoutTrig = B10;//CH trig                        // [zabox] + check if OH/CH mute
    38b6:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    38ba:	50 e0       	ldi	r21, 0x00	; 0
    38bc:	a0 91 3d 1e 	lds	r26, 0x1E3D	; 0x801e3d <curStep>
    38c0:	69 ec       	ldi	r22, 0xC9	; 201
    38c2:	75 e0       	ldi	r23, 0x05	; 5
    38c4:	46 9f       	mul	r20, r22
    38c6:	f0 01       	movw	r30, r0
    38c8:	47 9f       	mul	r20, r23
    38ca:	f0 0d       	add	r31, r0
    38cc:	56 9f       	mul	r21, r22
    38ce:	f0 0d       	add	r31, r0
    38d0:	11 24       	eor	r1, r1
    38d2:	e7 54       	subi	r30, 0x47	; 71
    38d4:	f9 4e       	sbci	r31, 0xE9	; 233
    38d6:	60 81       	ld	r22, Z
    38d8:	71 81       	ldd	r23, Z+1	; 0x01
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <CountPPQN()+0x292>
    38dc:	76 95       	lsr	r23
    38de:	67 95       	ror	r22
    38e0:	aa 95       	dec	r26
    38e2:	e2 f7       	brpl	.-8      	; 0x38dc <CountPPQN()+0x28e>
    38e4:	60 ff       	sbrs	r22, 0
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <CountPPQN()+0x29e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:119 (discriminator 1)
    38e8:	96 ff       	sbrs	r25, 6
    38ea:	2a c1       	rjmp	.+596    	; 0x3b40 <CountPPQN()+0x4f2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:120
        else if (bitRead(pattern[ptrnBuffer].inst[OH], curStep) && !bitRead(muteInst, OH)) tempDoutTrig = 0;// OH trig                    // [zabox] + check if OH/CH mute
    38ec:	60 91 3d 1e 	lds	r22, 0x1E3D	; 0x801e3d <curStep>
    38f0:	a9 ec       	ldi	r26, 0xC9	; 201
    38f2:	b5 e0       	ldi	r27, 0x05	; 5
    38f4:	4a 9f       	mul	r20, r26
    38f6:	f0 01       	movw	r30, r0
    38f8:	4b 9f       	mul	r20, r27
    38fa:	f0 0d       	add	r31, r0
    38fc:	5a 9f       	mul	r21, r26
    38fe:	f0 0d       	add	r31, r0
    3900:	11 24       	eor	r1, r1
    3902:	e5 54       	subi	r30, 0x45	; 69
    3904:	f9 4e       	sbci	r31, 0xE9	; 233
    3906:	40 81       	ld	r20, Z
    3908:	51 81       	ldd	r21, Z+1	; 0x01
    390a:	02 c0       	rjmp	.+4      	; 0x3910 <CountPPQN()+0x2c2>
    390c:	56 95       	lsr	r21
    390e:	47 95       	ror	r20
    3910:	6a 95       	dec	r22
    3912:	e2 f7       	brpl	.-8      	; 0x390c <CountPPQN()+0x2be>
    3914:	40 fd       	sbrc	r20, 0
    3916:	1b c1       	rjmp	.+566    	; 0x3b4e <CountPPQN()+0x500>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:122
        
        SetDoutTrig((stepValue) & (~temp_muteInst) | (tempDoutTrig));//Send TempDoutTrig too to prevet tick noise on HH circuit
    3918:	40 91 31 1e 	lds	r20, 0x1E31	; 0x801e31 <stepValue>
    391c:	50 91 32 1e 	lds	r21, 0x1E32	; 0x801e32 <stepValue+0x1>
    3920:	80 91 9e 0c 	lds	r24, 0x0C9E	; 0x800c9e <tempDoutTrig>
    3924:	90 91 9f 0c 	lds	r25, 0x0C9F	; 0x800c9f <tempDoutTrig+0x1>
    3928:	20 95       	com	r18
    392a:	30 95       	com	r19
    392c:	24 23       	and	r18, r20
    392e:	35 23       	and	r19, r21
    3930:	82 2b       	or	r24, r18
    3932:	93 2b       	or	r25, r19
    3934:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:124
        
        TRIG_TIMER_START;        // [zabox] [1.028] start trigger off timer
    3938:	85 e0       	ldi	r24, 0x05	; 5
    393a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:126
        
        if (stepValueFlam) {
    393e:	80 91 2f 1e 	lds	r24, 0x1E2F	; 0x801e2f <stepValueFlam>
    3942:	90 91 30 1e 	lds	r25, 0x1E30	; 0x801e30 <stepValueFlam+0x1>
    3946:	89 2b       	or	r24, r25
    3948:	19 f0       	breq	.+6      	; 0x3950 <CountPPQN()+0x302>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:127
          FLAM_TIMER_START;
    394a:	8b e0       	ldi	r24, 0x0B	; 11
    394c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:131
        } 
        
      }
      if (bitRead(pattern[ptrnBuffer].inst[TRIG_OUT], curStep)){
    3950:	20 91 3d 1e 	lds	r18, 0x1E3D	; 0x801e3d <curStep>
    3954:	30 91 ce 0c 	lds	r19, 0x0CCE	; 0x800cce <ptrnBuffer>
    3958:	89 ec       	ldi	r24, 0xC9	; 201
    395a:	95 e0       	ldi	r25, 0x05	; 5
    395c:	38 9f       	mul	r19, r24
    395e:	f0 01       	movw	r30, r0
    3960:	39 9f       	mul	r19, r25
    3962:	f0 0d       	add	r31, r0
    3964:	11 24       	eor	r1, r1
    3966:	e3 56       	subi	r30, 0x63	; 99
    3968:	f9 4e       	sbci	r31, 0xE9	; 233
    396a:	80 81       	ld	r24, Z
    396c:	91 81       	ldd	r25, Z+1	; 0x01
    396e:	02 c0       	rjmp	.+4      	; 0x3974 <CountPPQN()+0x326>
    3970:	96 95       	lsr	r25
    3972:	87 95       	ror	r24
    3974:	2a 95       	dec	r18
    3976:	e2 f7       	brpl	.-8      	; 0x3970 <CountPPQN()+0x322>
    3978:	80 ff       	sbrs	r24, 0
    397a:	04 c0       	rjmp	.+8      	; 0x3984 <CountPPQN()+0x336>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:132
        TRIG_LOW;//Trigout
    397c:	12 98       	cbi	0x02, 2	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:133
        trigCounterStart = TRUE;
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <trigCounterStart>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:137
      }

      //Trig external instrument-------------------------------------
      if (bitRead(pattern[ptrnBuffer].inst[EXT_INST], curStep))
    3984:	20 91 3d 1e 	lds	r18, 0x1E3D	; 0x801e3d <curStep>
    3988:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    398c:	c9 ec       	ldi	r28, 0xC9	; 201
    398e:	d5 e0       	ldi	r29, 0x05	; 5
    3990:	8c 9f       	mul	r24, r28
    3992:	f0 01       	movw	r30, r0
    3994:	8d 9f       	mul	r24, r29
    3996:	f0 0d       	add	r31, r0
    3998:	11 24       	eor	r1, r1
    399a:	e9 54       	subi	r30, 0x49	; 73
    399c:	f9 4e       	sbci	r31, 0xE9	; 233
    399e:	80 81       	ld	r24, Z
    39a0:	91 81       	ldd	r25, Z+1	; 0x01
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <CountPPQN()+0x35a>
    39a4:	96 95       	lsr	r25
    39a6:	87 95       	ror	r24
    39a8:	2a 95       	dec	r18
    39aa:	e2 f7       	brpl	.-8      	; 0x39a4 <CountPPQN()+0x356>
    39ac:	80 ff       	sbrs	r24, 0
    39ae:	20 c0       	rjmp	.+64     	; 0x39f0 <CountPPQN()+0x3a2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:139
      {
        InitMidiNoteOff();
    39b0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <InitMidiNoteOff()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:140
        MidiSendNoteOn(seq.TXchannel, pattern[ptrnBuffer].extNote[noteIndexCpt], HIGH_VEL);
    39b4:	e0 91 3a 1e 	lds	r30, 0x1E3A	; 0x801e3a <noteIndexCpt>
    39b8:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    39bc:	2c 9f       	mul	r18, r28
    39be:	c0 01       	movw	r24, r0
    39c0:	2d 9f       	mul	r18, r29
    39c2:	90 0d       	add	r25, r0
    39c4:	11 24       	eor	r1, r1
    39c6:	88 56       	subi	r24, 0x68	; 104
    39c8:	9d 4e       	sbci	r25, 0xED	; 237
    39ca:	e8 0f       	add	r30, r24
    39cc:	f9 2f       	mov	r31, r25
    39ce:	f1 1d       	adc	r31, r1
    39d0:	eb 5b       	subi	r30, 0xBB	; 187
    39d2:	fa 4f       	sbci	r31, 0xFA	; 250
    39d4:	40 e5       	ldi	r20, 0x50	; 80
    39d6:	60 81       	ld	r22, Z
    39d8:	80 91 42 1e 	lds	r24, 0x1E42	; 0x801e42 <seq+0x3>
    39dc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <MidiSendNoteOn(unsigned char, unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:141
        midiNoteOnActive = TRUE;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <midiNoteOnActive>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:142
        noteIndexCpt++;//incremente external inst note index
    39e6:	80 91 3a 1e 	lds	r24, 0x1E3A	; 0x801e3a <noteIndexCpt>
    39ea:	8f 5f       	subi	r24, 0xFF	; 255
    39ec:	80 93 3a 1e 	sts	0x1E3A, r24	; 0x801e3a <noteIndexCpt>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:144
      }
      if (noteIndexCpt > pattern[ptrnBuffer].extLength){
    39f0:	80 91 3a 1e 	lds	r24, 0x1E3A	; 0x801e3a <noteIndexCpt>
    39f4:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    39f8:	29 ec       	ldi	r18, 0xC9	; 201
    39fa:	35 e0       	ldi	r19, 0x05	; 5
    39fc:	92 9f       	mul	r25, r18
    39fe:	f0 01       	movw	r30, r0
    3a00:	93 9f       	mul	r25, r19
    3a02:	f0 0d       	add	r31, r0
    3a04:	11 24       	eor	r1, r1
    3a06:	e3 5a       	subi	r30, 0xA3	; 163
    3a08:	f7 4e       	sbci	r31, 0xE7	; 231
    3a0a:	90 81       	ld	r25, Z
    3a0c:	98 17       	cp	r25, r24
    3a0e:	10 f4       	brcc	.+4      	; 0x3a14 <CountPPQN()+0x3c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:145
        noteIndexCpt = 0;
    3a10:	10 92 3a 1e 	sts	0x1E3A, r1	; 0x801e3a <noteIndexCpt>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:157
      SetDoutTrig(tempDoutTrig);
*/      
      
      //TRIG_HIGH;
      //ResetDoutTrig();
      stepCount++;
    3a14:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <stepCount>
    3a18:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <stepCount+0x1>
    3a1c:	01 96       	adiw	r24, 0x01	; 1
    3a1e:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <stepCount+0x1>
    3a22:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <stepCount>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:160

    }
    if (stepCount > pattern[ptrnBuffer].length){// && (ppqn % 24 == pattern[ptrnBuffer].scale - 1))
    3a26:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <stepCount>
    3a2a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <stepCount+0x1>
    3a2e:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    3a32:	29 ec       	ldi	r18, 0xC9	; 201
    3a34:	35 e0       	ldi	r19, 0x05	; 5
    3a36:	42 9f       	mul	r20, r18
    3a38:	f0 01       	movw	r30, r0
    3a3a:	43 9f       	mul	r20, r19
    3a3c:	f0 0d       	add	r31, r0
    3a3e:	11 24       	eor	r1, r1
    3a40:	e8 56       	subi	r30, 0x68	; 104
    3a42:	f9 4e       	sbci	r31, 0xE9	; 233
    3a44:	20 81       	ld	r18, Z
    3a46:	28 17       	cp	r18, r24
    3a48:	19 06       	cpc	r1, r25
    3a4a:	3c f5       	brge	.+78     	; 0x3a9a <CountPPQN()+0x44c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:161
      endMeasure = TRUE;
    3a4c:	c1 e0       	ldi	r28, 0x01	; 1
    3a4e:	c0 93 2d 1e 	sts	0x1E2D, r28	; 0x801e2d <endMeasure>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:162
      trackPosNeedIncremante = TRUE;                                                
    3a52:	c0 93 8c 04 	sts	0x048C, r28	; 0x80048c <trackPosNeedIncremante>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:163
      stepCount = 0;
    3a56:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <stepCount+0x1>
    3a5a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <stepCount>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:165
      //In pattern play mode this peace of code execute in the PPQNCount function
      if(nextPatternReady && curSeqMode == PTRN_PLAY){
    3a5e:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <nextPatternReady>
    3a62:	88 23       	and	r24, r24
    3a64:	d1 f0       	breq	.+52     	; 0x3a9a <CountPPQN()+0x44c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:165 (discriminator 1)
    3a66:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    3a6a:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    3a6e:	02 97       	sbiw	r24, 0x02	; 2
    3a70:	a1 f4       	brne	.+40     	; 0x3a9a <CountPPQN()+0x44c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:166
        nextPatternReady = FALSE;
    3a72:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <nextPatternReady>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:167
        keybOct = DEFAULT_OCT;
    3a76:	83 e0       	ldi	r24, 0x03	; 3
    3a78:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <keybOct>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:168
        noteIndex = 0;
    3a7c:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:169
        InitMidiNoteOff();
    3a80:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <InitMidiNoteOff()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:170
        ptrnBuffer = !ptrnBuffer;
    3a84:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3a88:	8c 27       	eor	r24, r28
    3a8a:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <ptrnBuffer>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:171
        InitPattern();//SHOULD BE REMOVED WHEN EEPROM WILL BE INITIALIZED
    3a8e:	0e 94 57 13 	call	0x26ae	; 0x26ae <InitPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:172
        SetHHPattern();
    3a92:	0e 94 d5 11 	call	0x23aa	; 0x23aa <SetHHPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:173
        InstToStepWord();
    3a96:	0e 94 c2 13 	call	0x2784	; 0x2784 <InstToStepWord()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:182
//      endMeasure = FALSE;
//    }
  
  }
  
  ppqn++;                                                                 // [1.028] more consistent to run the counter from 0-95
    3a9a:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    3a9e:	8f 5f       	subi	r24, 0xFF	; 255
    3aa0:	80 93 3e 1e 	sts	0x1E3E, r24	; 0x801e3e <ppqn>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:183
  if (ppqn >= PPQN) ppqn = 0;
    3aa4:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    3aa8:	80 36       	cpi	r24, 0x60	; 96
    3aaa:	10 f0       	brcs	.+4      	; 0x3ab0 <CountPPQN()+0x462>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:183 (discriminator 1)
    3aac:	10 92 3e 1e 	sts	0x1E3E, r1	; 0x801e3e <ppqn>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:185
  
}
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:56
  if (seq.sync == MASTER){                                                          // [zabox] has to be 0/2 for the correct phase
    if (ppqn % 4 == 0){
      DIN_CLK_HIGH;                                                               
      dinClkState = HIGH;
    }
    else if (ppqn % 4 == 2) {
    3ab6:	80 91 3e 1e 	lds	r24, 0x1E3E	; 0x801e3e <ppqn>
    3aba:	83 70       	andi	r24, 0x03	; 3
    3abc:	82 30       	cpi	r24, 0x02	; 2
    3abe:	09 f0       	breq	.+2      	; 0x3ac2 <CountPPQN()+0x474>
    3ac0:	09 ce       	rjmp	.-1006   	; 0x36d4 <CountPPQN()+0x86>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:57
      DIN_CLK_LOW;
    3ac2:	11 98       	cbi	0x02, 1	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:58
      dinClkState = LOW;
    3ac4:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <dinClkState>
    3ac8:	05 ce       	rjmp	.-1014   	; 0x36d4 <CountPPQN()+0x86>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:89
        break;
      case BACKWARD:
        curStep = pattern[ptrnBuffer].length - stepCount;
        break;
      case PING_PONG:
        if (curStep == pattern[ptrnBuffer].length && changeDir == 1) changeDir = 0;
    3aca:	90 91 3d 1e 	lds	r25, 0x1E3D	; 0x801e3d <curStep>
    3ace:	80 91 2e 1e 	lds	r24, 0x1E2E	; 0x801e2e <changeDir>
    3ad2:	29 13       	cpse	r18, r25
    3ad4:	02 c0       	rjmp	.+4      	; 0x3ada <CountPPQN()+0x48c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:89 (discriminator 1)
    3ad6:	81 11       	cpse	r24, r1
    3ad8:	0f c0       	rjmp	.+30     	; 0x3af8 <CountPPQN()+0x4aa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:90
        else if (curStep == 0 && changeDir == 0)  changeDir = 1;
    3ada:	90 91 3d 1e 	lds	r25, 0x1E3D	; 0x801e3d <curStep>
    3ade:	99 23       	and	r25, r25
    3ae0:	71 f0       	breq	.+28     	; 0x3afe <CountPPQN()+0x4b0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:91
        if (changeDir) curStep = stepCount;
    3ae2:	80 91 2e 1e 	lds	r24, 0x1E2E	; 0x801e2e <changeDir>
    3ae6:	88 23       	and	r24, r24
    3ae8:	81 f0       	breq	.+32     	; 0x3b0a <CountPPQN()+0x4bc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:91 (discriminator 1)
    3aea:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <stepCount>
    3aee:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <stepCount+0x1>
    3af2:	80 93 3d 1e 	sts	0x1E3D, r24	; 0x801e3d <curStep>
    3af6:	73 ce       	rjmp	.-794    	; 0x37de <CountPPQN()+0x190>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:89
        break;
      case BACKWARD:
        curStep = pattern[ptrnBuffer].length - stepCount;
        break;
      case PING_PONG:
        if (curStep == pattern[ptrnBuffer].length && changeDir == 1) changeDir = 0;
    3af8:	10 92 2e 1e 	sts	0x1E2E, r1	; 0x801e2e <changeDir>
    3afc:	f2 cf       	rjmp	.-28     	; 0x3ae2 <CountPPQN()+0x494>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:90 (discriminator 1)
        else if (curStep == 0 && changeDir == 0)  changeDir = 1;
    3afe:	81 11       	cpse	r24, r1
    3b00:	f0 cf       	rjmp	.-32     	; 0x3ae2 <CountPPQN()+0x494>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:90
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	80 93 2e 1e 	sts	0x1E2E, r24	; 0x801e2e <changeDir>
    3b08:	ec cf       	rjmp	.-40     	; 0x3ae2 <CountPPQN()+0x494>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:92
        if (changeDir) curStep = stepCount;
        else curStep = pattern[ptrnBuffer].length - stepCount;
    3b0a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <stepCount>
    3b0e:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <stepCount+0x1>
    3b12:	28 1b       	sub	r18, r24
    3b14:	20 93 3d 1e 	sts	0x1E3D, r18	; 0x801e3d <curStep>
    3b18:	62 ce       	rjmp	.-828    	; 0x37de <CountPPQN()+0x190>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:95
        break;
      case RANDOM:
        curStep = random(0, 16);
    3b1a:	20 e1       	ldi	r18, 0x10	; 16
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	50 e0       	ldi	r21, 0x00	; 0
    3b22:	60 e0       	ldi	r22, 0x00	; 0
    3b24:	70 e0       	ldi	r23, 0x00	; 0
    3b26:	cb 01       	movw	r24, r22
    3b28:	0e 94 58 4a 	call	0x94b0	; 0x94b0 <random(long, long)>
    3b2c:	60 93 3d 1e 	sts	0x1E3D, r22	; 0x801e3d <curStep>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:96
        break;
    3b30:	56 ce       	rjmp	.-852    	; 0x37de <CountPPQN()+0x190>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:113
      
      if (stepValue){
        SetMux();
        int temp_muteInst = muteInst;                                                               // [zabox] OH/CH mute select
        if (bitRead(stepValue, CH) && bitRead(muteInst, CH)) {                                      //
          temp_muteInst |= (1 << HH);                                                               //  
    3b32:	9c 01       	movw	r18, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:116
        }   
        else if (bitRead(stepValue, OH) && bitRead(muteInst, OH)) {                                 //  
          temp_muteInst |= (1 << HH);                                                               //
    3b34:	20 62       	ori	r18, 0x20	; 32
    3b36:	bf ce       	rjmp	.-642    	; 0x38b6 <CountPPQN()+0x268>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:116 (discriminator 1)
    3b38:	9c 01       	movw	r18, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:115 (discriminator 1)
        SetMux();
        int temp_muteInst = muteInst;                                                               // [zabox] OH/CH mute select
        if (bitRead(stepValue, CH) && bitRead(muteInst, CH)) {                                      //
          temp_muteInst |= (1 << HH);                                                               //  
        }   
        else if (bitRead(stepValue, OH) && bitRead(muteInst, OH)) {                                 //  
    3b3a:	97 ff       	sbrs	r25, 7
    3b3c:	bc ce       	rjmp	.-648    	; 0x38b6 <CountPPQN()+0x268>
    3b3e:	fa cf       	rjmp	.-12     	; 0x3b34 <CountPPQN()+0x4e6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:119
          temp_muteInst |= (1 << HH);                                                               //
        }
        
        if (bitRead(pattern[ptrnBuffer].inst[CH], curStep) && !bitRead(muteInst, CH)) tempDoutTrig = B10;//CH trig                        // [zabox] + check if OH/CH mute
    3b40:	82 e0       	ldi	r24, 0x02	; 2
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	90 93 9f 0c 	sts	0x0C9F, r25	; 0x800c9f <tempDoutTrig+0x1>
    3b48:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <tempDoutTrig>
    3b4c:	e5 ce       	rjmp	.-566    	; 0x3918 <CountPPQN()+0x2ca>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:120 (discriminator 1)
        else if (bitRead(pattern[ptrnBuffer].inst[OH], curStep) && !bitRead(muteInst, OH)) tempDoutTrig = 0;// OH trig                    // [zabox] + check if OH/CH mute
    3b4e:	97 fd       	sbrc	r25, 7
    3b50:	e3 ce       	rjmp	.-570    	; 0x3918 <CountPPQN()+0x2ca>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:120
    3b52:	10 92 9f 0c 	sts	0x0C9F, r1	; 0x800c9f <tempDoutTrig+0x1>
    3b56:	10 92 9e 0c 	sts	0x0C9E, r1	; 0x800c9e <tempDoutTrig>
    3b5a:	de ce       	rjmp	.-580    	; 0x3918 <CountPPQN()+0x2ca>

00003b5c <__vector_13>:
__vector_13():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:8
//                  BPM
//-------------------------------------------------

/////////////////////Function//////////////////////
//Timer interrupt
ISR(TIMER1_COMPA_vect) {
    3b5c:	1f 92       	push	r1
    3b5e:	0f 92       	push	r0
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	0f 92       	push	r0
    3b64:	11 24       	eor	r1, r1
    3b66:	0b b6       	in	r0, 0x3b	; 59
    3b68:	0f 92       	push	r0
    3b6a:	2f 93       	push	r18
    3b6c:	3f 93       	push	r19
    3b6e:	4f 93       	push	r20
    3b70:	5f 93       	push	r21
    3b72:	6f 93       	push	r22
    3b74:	7f 93       	push	r23
    3b76:	8f 93       	push	r24
    3b78:	9f 93       	push	r25
    3b7a:	af 93       	push	r26
    3b7c:	bf 93       	push	r27
    3b7e:	ef 93       	push	r30
    3b80:	ff 93       	push	r31
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:9
  CountPPQN();
    3b82:	0e 94 27 1b 	call	0x364e	; 0x364e <CountPPQN()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Clock.ino:10
}
    3b86:	ff 91       	pop	r31
    3b88:	ef 91       	pop	r30
    3b8a:	bf 91       	pop	r27
    3b8c:	af 91       	pop	r26
    3b8e:	9f 91       	pop	r25
    3b90:	8f 91       	pop	r24
    3b92:	7f 91       	pop	r23
    3b94:	6f 91       	pop	r22
    3b96:	5f 91       	pop	r21
    3b98:	4f 91       	pop	r20
    3b9a:	3f 91       	pop	r19
    3b9c:	2f 91       	pop	r18
    3b9e:	0f 90       	pop	r0
    3ba0:	0b be       	out	0x3b, r0	; 59
    3ba2:	0f 90       	pop	r0
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	0f 90       	pop	r0
    3ba8:	1f 90       	pop	r1
    3baa:	18 95       	reti

00003bac <HandleClock()>:
_Z11HandleClockv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:48
}

//Handle clock
void HandleClock()
{
  DIN_CLK_HIGH;                                                                  
    3bac:	11 9a       	sbi	0x02, 1	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:49
  CountPPQN();//execute 4x because internal sequencer run as 96 ppqn
    3bae:	0e 94 27 1b 	call	0x364e	; 0x364e <CountPPQN()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:50
  CountPPQN();
    3bb2:	0e 94 27 1b 	call	0x364e	; 0x364e <CountPPQN()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:52
  //delayMicroseconds(2000);                 // [zabox] [1.028] 
  CountPPQN();
    3bb6:	0e 94 27 1b 	call	0x364e	; 0x364e <CountPPQN()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:53
  CountPPQN();
    3bba:	0e 94 27 1b 	call	0x364e	; 0x364e <CountPPQN()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:54
  DIN_CLK_LOW;                                                                    
    3bbe:	11 98       	cbi	0x02, 1	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Midi.ino:56

}
    3bc0:	08 95       	ret

00003bc2 <_GLOBAL__sub_I_dinSr>:
_GLOBAL__sub_I_dinSr():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:72
    3bc2:	cf 92       	push	r12
    3bc4:	ef 92       	push	r14
    3bc6:	0f 93       	push	r16
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.h:144

		// Invert the SPI2X bit
		clockDiv ^= 0x1;

		// Pack into the SPISettings class
		spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
    3bc8:	e4 e8       	ldi	r30, 0x84	; 132
    3bca:	f4 e0       	ldi	r31, 0x04	; 4
    3bcc:	80 e5       	ldi	r24, 0x50	; 80
    3bce:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.h:146
			(dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
		spsr = clockDiv & SPI_2XCLOCK_MASK;
    3bd0:	11 82       	std	Z+1, r1	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.h:144

		// Invert the SPI2X bit
		clockDiv ^= 0x1;

		// Pack into the SPISettings class
		spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
    3bd2:	e2 e8       	ldi	r30, 0x82	; 130
    3bd4:	f4 e0       	ldi	r31, 0x04	; 4
    3bd6:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.h:146
			(dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
		spsr = clockDiv & SPI_2XCLOCK_MASK;
    3bd8:	11 82       	std	Z+1, r1	; 0x01
__static_initialization_and_destruction_0():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:22

//#include <MemoryFree.h>



LiquidCrystal lcd(18, 19, 20, 21, 22, 23);
    3bda:	87 e1       	ldi	r24, 0x17	; 23
    3bdc:	c8 2e       	mov	r12, r24
    3bde:	96 e1       	ldi	r25, 0x16	; 22
    3be0:	e9 2e       	mov	r14, r25
    3be2:	05 e1       	ldi	r16, 0x15	; 21
    3be4:	24 e1       	ldi	r18, 0x14	; 20
    3be6:	43 e1       	ldi	r20, 0x13	; 19
    3be8:	62 e1       	ldi	r22, 0x12	; 18
    3bea:	8e e2       	ldi	r24, 0x2E	; 46
    3bec:	94 e0       	ldi	r25, 0x04	; 4
    3bee:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I_dinSr():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/timer.ino:72
    3bf2:	0f 91       	pop	r16
    3bf4:	ef 90       	pop	r14
    3bf6:	cf 90       	pop	r12
    3bf8:	08 95       	ret

00003bfa <WireBeginTX(unsigned long)>:
_Z11WireBeginTXm():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:419
  delay(DELAY_WR);//delay between each write page
}*/

//wire begin
void WireBeginTX(unsigned long address)
{
    3bfa:	cf 92       	push	r12
    3bfc:	df 92       	push	r13
    3bfe:	ef 92       	push	r14
    3c00:	ff 92       	push	r15
    3c02:	6b 01       	movw	r12, r22
    3c04:	7c 01       	movw	r14, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:422
  byte hardwareAddress;
  if (address > 65535) hardwareAddress = HRDW_ADDRESS_UP;
  else hardwareAddress = HRDW_ADDRESS;
    3c06:	60 e5       	ldi	r22, 0x50	; 80
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:421

//wire begin
void WireBeginTX(unsigned long address)
{
  byte hardwareAddress;
  if (address > 65535) hardwareAddress = HRDW_ADDRESS_UP;
    3c08:	c1 14       	cp	r12, r1
    3c0a:	d1 04       	cpc	r13, r1
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	e8 06       	cpc	r14, r24
    3c10:	f1 04       	cpc	r15, r1
    3c12:	08 f0       	brcs	.+2      	; 0x3c16 <WireBeginTX(unsigned long)+0x1c>
    3c14:	64 e5       	ldi	r22, 0x54	; 84
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:424
  else hardwareAddress = HRDW_ADDRESS;
  
  Wire.beginTransmission(hardwareAddress);
    3c16:	80 e5       	ldi	r24, 0x50	; 80
    3c18:	92 e2       	ldi	r25, 0x22	; 34
    3c1a:	0e 94 78 43 	call	0x86f0	; 0x86f0 <TwoWire::beginTransmission(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:425
  Wire.write((byte)(address >> 8));
    3c1e:	99 27       	eor	r25, r25
    3c20:	8f 2d       	mov	r24, r15
    3c22:	7e 2d       	mov	r23, r14
    3c24:	6d 2d       	mov	r22, r13
    3c26:	80 e5       	ldi	r24, 0x50	; 80
    3c28:	92 e2       	ldi	r25, 0x22	; 34
    3c2a:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:426
  Wire.write((byte)(address & 0xFF));
    3c2e:	6c 2d       	mov	r22, r12
    3c30:	80 e5       	ldi	r24, 0x50	; 80
    3c32:	92 e2       	ldi	r25, 0x22	; 34
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:427
}
    3c34:	ff 90       	pop	r15
    3c36:	ef 90       	pop	r14
    3c38:	df 90       	pop	r13
    3c3a:	cf 90       	pop	r12
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:426
  if (address > 65535) hardwareAddress = HRDW_ADDRESS_UP;
  else hardwareAddress = HRDW_ADDRESS;
  
  Wire.beginTransmission(hardwareAddress);
  Wire.write((byte)(address >> 8));
  Wire.write((byte)(address & 0xFF));
    3c3c:	0c 94 02 43 	jmp	0x8604	; 0x8604 <TwoWire::write(unsigned char)>

00003c40 <SavePattern(unsigned char)>:
_Z11SavePatternh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:52

////////////////////////Function//////////////////////

//save pattern
void SavePattern(byte patternNbr)
{
    3c40:	2f 92       	push	r2
    3c42:	3f 92       	push	r3
    3c44:	4f 92       	push	r4
    3c46:	5f 92       	push	r5
    3c48:	6f 92       	push	r6
    3c4a:	7f 92       	push	r7
    3c4c:	8f 92       	push	r8
    3c4e:	9f 92       	push	r9
    3c50:	af 92       	push	r10
    3c52:	bf 92       	push	r11
    3c54:	cf 92       	push	r12
    3c56:	df 92       	push	r13
    3c58:	ef 92       	push	r14
    3c5a:	ff 92       	push	r15
    3c5c:	1f 93       	push	r17
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	00 d0       	rcall	.+0      	; 0x3c64 <SavePattern(unsigned char)+0x24>
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <SavePattern(unsigned char)+0x26>
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	18 2f       	mov	r17, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:53
  unsigned long adress = (unsigned long)(PTRN_OFFSET + patternNbr * PTRN_SIZE);
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	a0 ec       	ldi	r26, 0xC0	; 192
    3c72:	b1 e0       	ldi	r27, 0x01	; 1
    3c74:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <__umulhisi3>
    3c78:	2b 01       	movw	r4, r22
    3c7a:	3c 01       	movw	r6, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:54
  WireBeginTX(adress); 
    3c7c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
    3c80:	f1 2c       	mov	r15, r1
    3c82:	e1 2c       	mov	r14, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:58 (discriminator 2)
  // Serial.println(adress);
  //TRIG-----------------------------------------------
  for (byte i = 0; i < NBR_INST; i++){ 
    byte lowbyte =  (pattern[ptrnBuffer].inst[i] & 0xFF);
    3c84:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    3c88:	f7 01       	movw	r30, r14
    3c8a:	ee 0f       	add	r30, r30
    3c8c:	ff 1f       	adc	r31, r31
    3c8e:	49 ec       	ldi	r20, 0xC9	; 201
    3c90:	55 e0       	ldi	r21, 0x05	; 5
    3c92:	24 9f       	mul	r18, r20
    3c94:	c0 01       	movw	r24, r0
    3c96:	25 9f       	mul	r18, r21
    3c98:	90 0d       	add	r25, r0
    3c9a:	11 24       	eor	r1, r1
    3c9c:	e8 0f       	add	r30, r24
    3c9e:	f9 1f       	adc	r31, r25
    3ca0:	e3 56       	subi	r30, 0x63	; 99
    3ca2:	f9 4e       	sbci	r31, 0xE9	; 233
    3ca4:	60 81       	ld	r22, Z
    3ca6:	d1 80       	ldd	r13, Z+1	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:60 (discriminator 2)
    byte highbyte = (pattern[ptrnBuffer].inst[i] >> 8) & 0xFF;
    Wire.write((byte)(lowbyte)); 
    3ca8:	80 e5       	ldi	r24, 0x50	; 80
    3caa:	92 e2       	ldi	r25, 0x22	; 34
    3cac:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:61 (discriminator 2)
    Wire.write((byte)(highbyte));
    3cb0:	6d 2d       	mov	r22, r13
    3cb2:	80 e5       	ldi	r24, 0x50	; 80
    3cb4:	92 e2       	ldi	r25, 0x22	; 34
    3cb6:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    3cba:	5f ef       	ldi	r21, 0xFF	; 255
    3cbc:	e5 1a       	sub	r14, r21
    3cbe:	f5 0a       	sbc	r15, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:57 (discriminator 2)
{
  unsigned long adress = (unsigned long)(PTRN_OFFSET + patternNbr * PTRN_SIZE);
  WireBeginTX(adress); 
  // Serial.println(adress);
  //TRIG-----------------------------------------------
  for (byte i = 0; i < NBR_INST; i++){ 
    3cc0:	80 e1       	ldi	r24, 0x10	; 16
    3cc2:	e8 16       	cp	r14, r24
    3cc4:	f1 04       	cpc	r15, r1
    3cc6:	f1 f6       	brne	.-68     	; 0x3c84 <SavePattern(unsigned char)+0x44>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:65
    Wire.write((byte)(lowbyte)); 
    Wire.write((byte)(highbyte));
  }//32 bytes

  //SETUP-----------------------------------------------
  Wire.write((byte)(pattern[ptrnBuffer].length));
    3cc8:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3ccc:	a9 ec       	ldi	r26, 0xC9	; 201
    3cce:	b5 e0       	ldi	r27, 0x05	; 5
    3cd0:	8a 9f       	mul	r24, r26
    3cd2:	f0 01       	movw	r30, r0
    3cd4:	8b 9f       	mul	r24, r27
    3cd6:	f0 0d       	add	r31, r0
    3cd8:	11 24       	eor	r1, r1
    3cda:	e8 56       	subi	r30, 0x68	; 104
    3cdc:	f9 4e       	sbci	r31, 0xE9	; 233
    3cde:	60 81       	ld	r22, Z
    3ce0:	80 e5       	ldi	r24, 0x50	; 80
    3ce2:	92 e2       	ldi	r25, 0x22	; 34
    3ce4:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:66
  Wire.write((byte)(pattern[ptrnBuffer].scale));
    3ce8:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3cec:	29 ec       	ldi	r18, 0xC9	; 201
    3cee:	35 e0       	ldi	r19, 0x05	; 5
    3cf0:	82 9f       	mul	r24, r18
    3cf2:	f0 01       	movw	r30, r0
    3cf4:	83 9f       	mul	r24, r19
    3cf6:	f0 0d       	add	r31, r0
    3cf8:	11 24       	eor	r1, r1
    3cfa:	e7 56       	subi	r30, 0x67	; 103
    3cfc:	f9 4e       	sbci	r31, 0xE9	; 233
    3cfe:	60 81       	ld	r22, Z
    3d00:	80 e5       	ldi	r24, 0x50	; 80
    3d02:	92 e2       	ldi	r25, 0x22	; 34
    3d04:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:67
  Wire.write((byte)(pattern[ptrnBuffer].shuffle));
    3d08:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3d0c:	49 ec       	ldi	r20, 0xC9	; 201
    3d0e:	55 e0       	ldi	r21, 0x05	; 5
    3d10:	84 9f       	mul	r24, r20
    3d12:	f0 01       	movw	r30, r0
    3d14:	85 9f       	mul	r24, r21
    3d16:	f0 0d       	add	r31, r0
    3d18:	11 24       	eor	r1, r1
    3d1a:	e5 56       	subi	r30, 0x65	; 101
    3d1c:	f9 4e       	sbci	r31, 0xE9	; 233
    3d1e:	60 81       	ld	r22, Z
    3d20:	80 e5       	ldi	r24, 0x50	; 80
    3d22:	92 e2       	ldi	r25, 0x22	; 34
    3d24:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:68
  Wire.write((byte)(pattern[ptrnBuffer].flam));
    3d28:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3d2c:	a9 ec       	ldi	r26, 0xC9	; 201
    3d2e:	b5 e0       	ldi	r27, 0x05	; 5
    3d30:	8a 9f       	mul	r24, r26
    3d32:	f0 01       	movw	r30, r0
    3d34:	8b 9f       	mul	r24, r27
    3d36:	f0 0d       	add	r31, r0
    3d38:	11 24       	eor	r1, r1
    3d3a:	e4 56       	subi	r30, 0x64	; 100
    3d3c:	f9 4e       	sbci	r31, 0xE9	; 233
    3d3e:	60 81       	ld	r22, Z
    3d40:	80 e5       	ldi	r24, 0x50	; 80
    3d42:	92 e2       	ldi	r25, 0x22	; 34
    3d44:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:69
  Wire.write((byte)(pattern[ptrnBuffer].extLength));
    3d48:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3d4c:	29 ec       	ldi	r18, 0xC9	; 201
    3d4e:	35 e0       	ldi	r19, 0x05	; 5
    3d50:	82 9f       	mul	r24, r18
    3d52:	f0 01       	movw	r30, r0
    3d54:	83 9f       	mul	r24, r19
    3d56:	f0 0d       	add	r31, r0
    3d58:	11 24       	eor	r1, r1
    3d5a:	e3 5a       	subi	r30, 0xA3	; 163
    3d5c:	f7 4e       	sbci	r31, 0xE7	; 231
    3d5e:	60 81       	ld	r22, Z
    3d60:	80 e5       	ldi	r24, 0x50	; 80
    3d62:	92 e2       	ldi	r25, 0x22	; 34
    3d64:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:70
  Wire.write((byte)(pattern[ptrnBuffer].groupPos));
    3d68:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3d6c:	49 ec       	ldi	r20, 0xC9	; 201
    3d6e:	55 e0       	ldi	r21, 0x05	; 5
    3d70:	84 9f       	mul	r24, r20
    3d72:	f0 01       	movw	r30, r0
    3d74:	85 9f       	mul	r24, r21
    3d76:	f0 0d       	add	r31, r0
    3d78:	11 24       	eor	r1, r1
    3d7a:	e2 5a       	subi	r30, 0xA2	; 162
    3d7c:	f7 4e       	sbci	r31, 0xE7	; 231
    3d7e:	60 81       	ld	r22, Z
    3d80:	80 e5       	ldi	r24, 0x50	; 80
    3d82:	92 e2       	ldi	r25, 0x22	; 34
    3d84:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:71
  Wire.write((byte)(pattern[ptrnBuffer].groupLength));
    3d88:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3d8c:	a9 ec       	ldi	r26, 0xC9	; 201
    3d8e:	b5 e0       	ldi	r27, 0x05	; 5
    3d90:	8a 9f       	mul	r24, r26
    3d92:	f0 01       	movw	r30, r0
    3d94:	8b 9f       	mul	r24, r27
    3d96:	f0 0d       	add	r31, r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	e1 5a       	subi	r30, 0xA1	; 161
    3d9c:	f7 4e       	sbci	r31, 0xE7	; 231
    3d9e:	60 81       	ld	r22, Z
    3da0:	80 e5       	ldi	r24, 0x50	; 80
    3da2:	92 e2       	ldi	r25, 0x22	; 34
    3da4:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:72
  Wire.write((byte)(pattern[ptrnBuffer].totalAcc));
    3da8:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3dac:	29 ec       	ldi	r18, 0xC9	; 201
    3dae:	35 e0       	ldi	r19, 0x05	; 5
    3db0:	82 9f       	mul	r24, r18
    3db2:	f0 01       	movw	r30, r0
    3db4:	83 9f       	mul	r24, r19
    3db6:	f0 0d       	add	r31, r0
    3db8:	11 24       	eor	r1, r1
    3dba:	e0 5a       	subi	r30, 0xA0	; 160
    3dbc:	f7 4e       	sbci	r31, 0xE7	; 231
    3dbe:	60 81       	ld	r22, Z
    3dc0:	80 e5       	ldi	r24, 0x50	; 80
    3dc2:	92 e2       	ldi	r25, 0x22	; 34
    3dc4:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    3dc8:	48 e1       	ldi	r20, 0x18	; 24
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	5a 83       	std	Y+2, r21	; 0x02
    3dce:	49 83       	std	Y+1, r20	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:75 (discriminator 2)

  for(int a =0; a < 24; a++){
    Wire.write( (byte)(0));//unused parameters
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	80 e5       	ldi	r24, 0x50	; 80
    3dd4:	92 e2       	ldi	r25, 0x22	; 34
    3dd6:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
    3ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	9a 83       	std	Y+2, r25	; 0x02
    3de2:	89 83       	std	Y+1, r24	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:74 (discriminator 2)
  Wire.write((byte)(pattern[ptrnBuffer].extLength));
  Wire.write((byte)(pattern[ptrnBuffer].groupPos));
  Wire.write((byte)(pattern[ptrnBuffer].groupLength));
  Wire.write((byte)(pattern[ptrnBuffer].totalAcc));

  for(int a =0; a < 24; a++){
    3de4:	89 2b       	or	r24, r25
    3de6:	a1 f7       	brne	.-24     	; 0x3dd0 <SavePattern(unsigned char)+0x190>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:78
    Wire.write( (byte)(0));//unused parameters
  }//32 bytes

  Wire.endTransmission();//end page transmission
    3de8:	80 e5       	ldi	r24, 0x50	; 80
    3dea:	92 e2       	ldi	r25, 0x22	; 34
    3dec:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:79
  delay(DELAY_WR);//delay between each write page
    3df0:	65 e0       	ldi	r22, 0x05	; 5
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:84

  //EXT INST-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 2; nbrPage++){
      MIDI.read();
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_SETUP_OFFSET);
    3dfc:	21 2f       	mov	r18, r17
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	a7 e0       	ldi	r26, 0x07	; 7
    3e02:	b0 e0       	ldi	r27, 0x00	; 0
    3e04:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <__umulhisi3>
    3e08:	6b 01       	movw	r12, r22
    3e0a:	7c 01       	movw	r14, r24
    3e0c:	81 2c       	mov	r8, r1
    3e0e:	91 2c       	mov	r9, r1
    3e10:	54 01       	movw	r10, r8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:86
    //Serial.println(adress);
    WireBeginTX(adress);
    3e12:	a3 01       	movw	r20, r6
    3e14:	92 01       	movw	r18, r4
    3e16:	20 5c       	subi	r18, 0xC0	; 192
    3e18:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1a:	4f 4f       	sbci	r20, 0xFF	; 255
    3e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1e:	29 83       	std	Y+1, r18	; 0x01
    3e20:	3a 83       	std	Y+2, r19	; 0x02
    3e22:	4b 83       	std	Y+3, r20	; 0x03
    3e24:	5c 83       	std	Y+4, r21	; 0x04
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:83
  Wire.endTransmission();//end page transmission
  delay(DELAY_WR);//delay between each write page

  //EXT INST-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 2; nbrPage++){
      MIDI.read();
    3e26:	8b e1       	ldi	r24, 0x1B	; 27
    3e28:	90 e2       	ldi	r25, 0x20	; 32
    3e2a:	0e 94 9d 42 	call	0x853a	; 0x853a <MIDI_Class::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:86
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_SETUP_OFFSET);
    //Serial.println(adress);
    WireBeginTX(adress);
    3e2e:	69 81       	ldd	r22, Y+1	; 0x01
    3e30:	7a 81       	ldd	r23, Y+2	; 0x02
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	9c 81       	ldd	r25, Y+4	; 0x04
    3e36:	68 0d       	add	r22, r8
    3e38:	79 1d       	adc	r23, r9
    3e3a:	8a 1d       	adc	r24, r10
    3e3c:	9b 1d       	adc	r25, r11
    3e3e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
    3e42:	24 01       	movw	r4, r8
    3e44:	35 01       	movw	r6, r10
    3e46:	10 e4       	ldi	r17, 0x40	; 64
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:88 (discriminator 2)
    for (byte j = 0; j < MAX_PAGE_SIZE; j++){
      Wire.write((byte)(pattern[ptrnBuffer].extNote[j + (MAX_PAGE_SIZE * nbrPage)] & 0xFF));
    3e48:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3e4c:	49 ec       	ldi	r20, 0xC9	; 201
    3e4e:	55 e0       	ldi	r21, 0x05	; 5
    3e50:	84 9f       	mul	r24, r20
    3e52:	f0 01       	movw	r30, r0
    3e54:	85 9f       	mul	r24, r21
    3e56:	f0 0d       	add	r31, r0
    3e58:	11 24       	eor	r1, r1
    3e5a:	e8 56       	subi	r30, 0x68	; 104
    3e5c:	fd 4e       	sbci	r31, 0xED	; 237
    3e5e:	e4 0d       	add	r30, r4
    3e60:	f5 1d       	adc	r31, r5
    3e62:	eb 5b       	subi	r30, 0xBB	; 187
    3e64:	fa 4f       	sbci	r31, 0xFA	; 250
    3e66:	60 81       	ld	r22, Z
    3e68:	80 e5       	ldi	r24, 0x50	; 80
    3e6a:	92 e2       	ldi	r25, 0x22	; 34
    3e6c:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    3e70:	11 50       	subi	r17, 0x01	; 1
    3e72:	5f ef       	ldi	r21, 0xFF	; 255
    3e74:	45 1a       	sub	r4, r21
    3e76:	55 0a       	sbc	r5, r21
    3e78:	65 0a       	sbc	r6, r21
    3e7a:	75 0a       	sbc	r7, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:87 (discriminator 2)
  for(int nbrPage = 0; nbrPage < 2; nbrPage++){
      MIDI.read();
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_SETUP_OFFSET);
    //Serial.println(adress);
    WireBeginTX(adress);
    for (byte j = 0; j < MAX_PAGE_SIZE; j++){
    3e7c:	11 11       	cpse	r17, r1
    3e7e:	e4 cf       	rjmp	.-56     	; 0x3e48 <SavePattern(unsigned char)+0x208>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:90 (discriminator 2)
      Wire.write((byte)(pattern[ptrnBuffer].extNote[j + (MAX_PAGE_SIZE * nbrPage)] & 0xFF));
    }//64 bytes  fisrt page
    Wire.endTransmission();//end page transmission
    3e80:	80 e5       	ldi	r24, 0x50	; 80
    3e82:	92 e2       	ldi	r25, 0x22	; 34
    3e84:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:91 (discriminator 2)
    delay(DELAY_WR);//delay between each write page
    3e88:	65 e0       	ldi	r22, 0x05	; 5
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
    3e94:	80 e4       	ldi	r24, 0x40	; 64
    3e96:	88 0e       	add	r8, r24
    3e98:	91 1c       	adc	r9, r1
    3e9a:	a1 1c       	adc	r10, r1
    3e9c:	b1 1c       	adc	r11, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:82 (discriminator 2)

  Wire.endTransmission();//end page transmission
  delay(DELAY_WR);//delay between each write page

  //EXT INST-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 2; nbrPage++){
    3e9e:	90 e8       	ldi	r25, 0x80	; 128
    3ea0:	89 16       	cp	r8, r25
    3ea2:	91 04       	cpc	r9, r1
    3ea4:	a1 04       	cpc	r10, r1
    3ea6:	b1 04       	cpc	r11, r1
    3ea8:	09 f0       	breq	.+2      	; 0x3eac <SavePattern(unsigned char)+0x26c>
    3eaa:	bd cf       	rjmp	.-134    	; 0x3e26 <SavePattern(unsigned char)+0x1e6>
    3eac:	a3 e0       	ldi	r26, 0x03	; 3
    3eae:	ca 0e       	add	r12, r26
    3eb0:	d1 1c       	adc	r13, r1
    3eb2:	e1 1c       	adc	r14, r1
    3eb4:	f1 1c       	adc	r15, r1
    3eb6:	16 01       	movw	r2, r12
    3eb8:	27 01       	movw	r4, r14
    3eba:	96 e0       	ldi	r25, 0x06	; 6
    3ebc:	22 0c       	add	r2, r2
    3ebe:	33 1c       	adc	r3, r3
    3ec0:	44 1c       	adc	r4, r4
    3ec2:	55 1c       	adc	r5, r5
    3ec4:	9a 95       	dec	r25
    3ec6:	d1 f7       	brne	.-12     	; 0x3ebc <SavePattern(unsigned char)+0x27c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:82
    3ec8:	f1 2c       	mov	r15, r1
    3eca:	e1 2c       	mov	r14, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:96
    delay(DELAY_WR);//delay between each write page
  }//2 * 64 bytes = 128 bytes

  //VELOCITY-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 4; nbrPage++){
      MIDI.read();
    3ecc:	8b e1       	ldi	r24, 0x1B	; 27
    3ece:	90 e2       	ldi	r25, 0x20	; 32
    3ed0:	0e 94 9d 42 	call	0x853a	; 0x853a <MIDI_Class::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:99
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
    //Serial.println(adress);
    WireBeginTX(adress);
    3ed4:	c2 01       	movw	r24, r4
    3ed6:	b1 01       	movw	r22, r2
    3ed8:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
    3edc:	47 01       	movw	r8, r14
    3ede:	14 e0       	ldi	r17, 0x04	; 4
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:102
    for (byte i = 0; i < 4; i++){//loop as many instrument for a page
      for (byte j = 0; j < NBR_STEP; j++){
        Wire.write((byte)(pattern[ptrnBuffer].velocity[i + 4*nbrPage][j] & 0xFF)); 
    3ee0:	b1 2c       	mov	r11, r1
    3ee2:	a1 2c       	mov	r10, r1
    3ee4:	34 01       	movw	r6, r8
    3ee6:	84 e0       	ldi	r24, 0x04	; 4
    3ee8:	66 0c       	add	r6, r6
    3eea:	77 1c       	adc	r7, r7
    3eec:	8a 95       	dec	r24
    3eee:	e1 f7       	brne	.-8      	; 0x3ee8 <SavePattern(unsigned char)+0x2a8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:102 (discriminator 2)
    3ef0:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    3ef4:	29 ec       	ldi	r18, 0xC9	; 201
    3ef6:	35 e0       	ldi	r19, 0x05	; 5
    3ef8:	82 9f       	mul	r24, r18
    3efa:	f0 01       	movw	r30, r0
    3efc:	83 9f       	mul	r24, r19
    3efe:	f0 0d       	add	r31, r0
    3f00:	11 24       	eor	r1, r1
    3f02:	e6 0d       	add	r30, r6
    3f04:	f7 1d       	adc	r31, r7
    3f06:	ea 0d       	add	r30, r10
    3f08:	fb 1d       	adc	r31, r11
    3f0a:	e3 52       	subi	r30, 0x23	; 35
    3f0c:	f9 4e       	sbci	r31, 0xE9	; 233
    3f0e:	60 81       	ld	r22, Z
    3f10:	80 e5       	ldi	r24, 0x50	; 80
    3f12:	92 e2       	ldi	r25, 0x22	; 34
    3f14:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    3f18:	3f ef       	ldi	r19, 0xFF	; 255
    3f1a:	a3 1a       	sub	r10, r19
    3f1c:	b3 0a       	sbc	r11, r19
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:101 (discriminator 2)
      MIDI.read();
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
    //Serial.println(adress);
    WireBeginTX(adress);
    for (byte i = 0; i < 4; i++){//loop as many instrument for a page
      for (byte j = 0; j < NBR_STEP; j++){
    3f1e:	40 e1       	ldi	r20, 0x10	; 16
    3f20:	a4 16       	cp	r10, r20
    3f22:	b1 04       	cpc	r11, r1
    3f24:	29 f7       	brne	.-54     	; 0x3ef0 <SavePattern(unsigned char)+0x2b0>
    3f26:	11 50       	subi	r17, 0x01	; 1
    3f28:	5f ef       	ldi	r21, 0xFF	; 255
    3f2a:	85 1a       	sub	r8, r21
    3f2c:	95 0a       	sbc	r9, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:100 (discriminator 2)
  for(int nbrPage = 0; nbrPage < 4; nbrPage++){
      MIDI.read();
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
    //Serial.println(adress);
    WireBeginTX(adress);
    for (byte i = 0; i < 4; i++){//loop as many instrument for a page
    3f2e:	11 11       	cpse	r17, r1
    3f30:	d7 cf       	rjmp	.-82     	; 0x3ee0 <SavePattern(unsigned char)+0x2a0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:105 (discriminator 2)
      for (byte j = 0; j < NBR_STEP; j++){
        Wire.write((byte)(pattern[ptrnBuffer].velocity[i + 4*nbrPage][j] & 0xFF)); 
      }
    }
    Wire.endTransmission();//end of 64 bytes transfer
    3f32:	80 e5       	ldi	r24, 0x50	; 80
    3f34:	92 e2       	ldi	r25, 0x22	; 34
    3f36:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:106 (discriminator 2)
    delay(DELAY_WR);//delay between each write page
    3f3a:	65 e0       	ldi	r22, 0x05	; 5
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
    3f46:	80 e4       	ldi	r24, 0x40	; 64
    3f48:	28 0e       	add	r2, r24
    3f4a:	31 1c       	adc	r3, r1
    3f4c:	41 1c       	adc	r4, r1
    3f4e:	51 1c       	adc	r5, r1
    3f50:	94 e0       	ldi	r25, 0x04	; 4
    3f52:	e9 0e       	add	r14, r25
    3f54:	f1 1c       	adc	r15, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:95 (discriminator 2)
    Wire.endTransmission();//end page transmission
    delay(DELAY_WR);//delay between each write page
  }//2 * 64 bytes = 128 bytes

  //VELOCITY-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 4; nbrPage++){
    3f56:	a0 e1       	ldi	r26, 0x10	; 16
    3f58:	ea 16       	cp	r14, r26
    3f5a:	f1 04       	cpc	r15, r1
    3f5c:	09 f0       	breq	.+2      	; 0x3f60 <SavePattern(unsigned char)+0x320>
    3f5e:	b6 cf       	rjmp	.-148    	; 0x3ecc <SavePattern(unsigned char)+0x28c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:108
      }
    }
    Wire.endTransmission();//end of 64 bytes transfer
    delay(DELAY_WR);//delay between each write page
  }//4 * 64 bytes = 256 bytes
}
    3f60:	0f 90       	pop	r0
    3f62:	0f 90       	pop	r0
    3f64:	0f 90       	pop	r0
    3f66:	0f 90       	pop	r0
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	ff 90       	pop	r15
    3f70:	ef 90       	pop	r14
    3f72:	df 90       	pop	r13
    3f74:	cf 90       	pop	r12
    3f76:	bf 90       	pop	r11
    3f78:	af 90       	pop	r10
    3f7a:	9f 90       	pop	r9
    3f7c:	8f 90       	pop	r8
    3f7e:	7f 90       	pop	r7
    3f80:	6f 90       	pop	r6
    3f82:	5f 90       	pop	r5
    3f84:	4f 90       	pop	r4
    3f86:	3f 90       	pop	r3
    3f88:	2f 90       	pop	r2
    3f8a:	08 95       	ret

00003f8c <SaveTrack(unsigned char)>:
_Z9SaveTrackh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:163
  }
}

//Track save
void SaveTrack(byte trackNbr)
{
    3f8c:	4f 92       	push	r4
    3f8e:	5f 92       	push	r5
    3f90:	6f 92       	push	r6
    3f92:	7f 92       	push	r7
    3f94:	8f 92       	push	r8
    3f96:	9f 92       	push	r9
    3f98:	af 92       	push	r10
    3f9a:	bf 92       	push	r11
    3f9c:	cf 92       	push	r12
    3f9e:	df 92       	push	r13
    3fa0:	ef 92       	push	r14
    3fa2:	ff 92       	push	r15
    3fa4:	1f 93       	push	r17
    3fa6:	cf 93       	push	r28
    3fa8:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:164
  byte lowbyte =  (byte)(track[trkBuffer].length & 0xFF);
    3faa:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <trkBuffer>
    3fae:	22 e0       	ldi	r18, 0x02	; 2
    3fb0:	34 e0       	ldi	r19, 0x04	; 4
    3fb2:	92 9f       	mul	r25, r18
    3fb4:	f0 01       	movw	r30, r0
    3fb6:	93 9f       	mul	r25, r19
    3fb8:	f0 0d       	add	r31, r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	e9 56       	subi	r30, 0x69	; 105
    3fbe:	fb 4f       	sbci	r31, 0xFB	; 251
    3fc0:	20 81       	ld	r18, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:166
  byte highbyte = (byte)((track[trkBuffer].length >> 8) & 0xFF);
  track[trkBuffer].patternNbr[1022] = lowbyte;
    3fc4:	df 01       	movw	r26, r30
    3fc6:	bc 5f       	subi	r27, 0xFC	; 252
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:164
}

//Track save
void SaveTrack(byte trackNbr)
{
  byte lowbyte =  (byte)(track[trkBuffer].length & 0xFF);
    3fc8:	2c 93       	st	X, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:167
  byte highbyte = (byte)((track[trkBuffer].length >> 8) & 0xFF);
  track[trkBuffer].patternNbr[1022] = lowbyte;
  track[trkBuffer].patternNbr[1023] = highbyte;
    3fca:	ef 5f       	subi	r30, 0xFF	; 255
    3fcc:	fb 4f       	sbci	r31, 0xFB	; 251
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:165

//Track save
void SaveTrack(byte trackNbr)
{
  byte lowbyte =  (byte)(track[trkBuffer].length & 0xFF);
  byte highbyte = (byte)((track[trkBuffer].length >> 8) & 0xFF);
    3fce:	90 83       	st	Z, r25
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:171
  track[trkBuffer].patternNbr[1022] = lowbyte;
  track[trkBuffer].patternNbr[1023] = highbyte;

  unsigned long adress;
  for(int nbrPage = 0; nbrPage < TRACK_SIZE/MAX_PAGE_SIZE; nbrPage++){
    adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	a0 e0       	ldi	r26, 0x00	; 0
    3fd6:	6c 01       	movw	r12, r24
    3fd8:	7d 01       	movw	r14, r26
    3fda:	8a e0       	ldi	r24, 0x0A	; 10
    3fdc:	cc 0c       	add	r12, r12
    3fde:	dd 1c       	adc	r13, r13
    3fe0:	ee 1c       	adc	r14, r14
    3fe2:	ff 1c       	adc	r15, r15
    3fe4:	8a 95       	dec	r24
    3fe6:	d1 f7       	brne	.-12     	; 0x3fdc <SaveTrack(unsigned char)+0x50>
    3fe8:	81 2c       	mov	r8, r1
    3fea:	91 2c       	mov	r9, r1
    3fec:	54 01       	movw	r10, r8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:172
    WireBeginTX(adress);
    3fee:	80 ee       	ldi	r24, 0xE0	; 224
    3ff0:	d8 0e       	add	r13, r24
    3ff2:	e1 1c       	adc	r14, r1
    3ff4:	f1 1c       	adc	r15, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:174
    for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
      Wire.write((byte)(track[trkBuffer].patternNbr[i + (MAX_PAGE_SIZE * nbrPage)] & 0xFF)); 
    3ff6:	c2 e0       	ldi	r28, 0x02	; 2
    3ff8:	d4 e0       	ldi	r29, 0x04	; 4
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:172
  track[trkBuffer].patternNbr[1023] = highbyte;

  unsigned long adress;
  for(int nbrPage = 0; nbrPage < TRACK_SIZE/MAX_PAGE_SIZE; nbrPage++){
    adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
    WireBeginTX(adress);
    3ffa:	c7 01       	movw	r24, r14
    3ffc:	b6 01       	movw	r22, r12
    3ffe:	68 0d       	add	r22, r8
    4000:	79 1d       	adc	r23, r9
    4002:	8a 1d       	adc	r24, r10
    4004:	9b 1d       	adc	r25, r11
    4006:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
    400a:	24 01       	movw	r4, r8
    400c:	35 01       	movw	r6, r10
    400e:	10 e4       	ldi	r17, 0x40	; 64
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:174 (discriminator 2)
    for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
      Wire.write((byte)(track[trkBuffer].patternNbr[i + (MAX_PAGE_SIZE * nbrPage)] & 0xFF)); 
    4010:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <trkBuffer>
    4014:	8c 9f       	mul	r24, r28
    4016:	f0 01       	movw	r30, r0
    4018:	8d 9f       	mul	r24, r29
    401a:	f0 0d       	add	r31, r0
    401c:	11 24       	eor	r1, r1
    401e:	e9 56       	subi	r30, 0x69	; 105
    4020:	fb 4f       	sbci	r31, 0xFB	; 251
    4022:	e4 0d       	add	r30, r4
    4024:	f5 1d       	adc	r31, r5
    4026:	62 81       	ldd	r22, Z+2	; 0x02
    4028:	80 e5       	ldi	r24, 0x50	; 80
    402a:	92 e2       	ldi	r25, 0x22	; 34
    402c:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    4030:	11 50       	subi	r17, 0x01	; 1
    4032:	8f ef       	ldi	r24, 0xFF	; 255
    4034:	48 1a       	sub	r4, r24
    4036:	58 0a       	sbc	r5, r24
    4038:	68 0a       	sbc	r6, r24
    403a:	78 0a       	sbc	r7, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:173 (discriminator 2)

  unsigned long adress;
  for(int nbrPage = 0; nbrPage < TRACK_SIZE/MAX_PAGE_SIZE; nbrPage++){
    adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
    WireBeginTX(adress);
    for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
    403c:	11 11       	cpse	r17, r1
    403e:	e8 cf       	rjmp	.-48     	; 0x4010 <SaveTrack(unsigned char)+0x84>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:176 (discriminator 2)
      Wire.write((byte)(track[trkBuffer].patternNbr[i + (MAX_PAGE_SIZE * nbrPage)] & 0xFF)); 
    }
    Wire.endTransmission();//end of 64 bytes transfer
    4040:	80 e5       	ldi	r24, 0x50	; 80
    4042:	92 e2       	ldi	r25, 0x22	; 34
    4044:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:177 (discriminator 2)
    delay(DELAY_WR);//delay between each write page
    4048:	65 e0       	ldi	r22, 0x05	; 5
    404a:	70 e0       	ldi	r23, 0x00	; 0
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
    4054:	80 e4       	ldi	r24, 0x40	; 64
    4056:	88 0e       	add	r8, r24
    4058:	91 1c       	adc	r9, r1
    405a:	a1 1c       	adc	r10, r1
    405c:	b1 1c       	adc	r11, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:170 (discriminator 2)
  byte highbyte = (byte)((track[trkBuffer].length >> 8) & 0xFF);
  track[trkBuffer].patternNbr[1022] = lowbyte;
  track[trkBuffer].patternNbr[1023] = highbyte;

  unsigned long adress;
  for(int nbrPage = 0; nbrPage < TRACK_SIZE/MAX_PAGE_SIZE; nbrPage++){
    405e:	81 14       	cp	r8, r1
    4060:	84 e0       	ldi	r24, 0x04	; 4
    4062:	98 06       	cpc	r9, r24
    4064:	a1 04       	cpc	r10, r1
    4066:	b1 04       	cpc	r11, r1
    4068:	41 f6       	brne	.-112    	; 0x3ffa <SaveTrack(unsigned char)+0x6e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:180
    }
    Wire.endTransmission();//end of 64 bytes transfer
    delay(DELAY_WR);//delay between each write page
  }

}
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	1f 91       	pop	r17
    4070:	ff 90       	pop	r15
    4072:	ef 90       	pop	r14
    4074:	df 90       	pop	r13
    4076:	cf 90       	pop	r12
    4078:	bf 90       	pop	r11
    407a:	af 90       	pop	r10
    407c:	9f 90       	pop	r9
    407e:	8f 90       	pop	r8
    4080:	7f 90       	pop	r7
    4082:	6f 90       	pop	r6
    4084:	5f 90       	pop	r5
    4086:	4f 90       	pop	r4
    4088:	08 95       	ret

0000408a <SaveSeqSetup()>:
_Z12SaveSeqSetupv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:203
  track[trkBuffer].length =  (unsigned long)(lowbyte | highbyte << 8);
}

//Save Setup
void SaveSeqSetup()
{
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:205
  unsigned long adress = (unsigned long)(OFFSET_SETUP);
  WireBeginTX(adress);
    408e:	60 e0       	ldi	r22, 0x00	; 0
    4090:	70 e2       	ldi	r23, 0x20	; 32
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:206
  Wire.write((byte)(seq.sync)); 
    409a:	cf e3       	ldi	r28, 0x3F	; 63
    409c:	de e1       	ldi	r29, 0x1E	; 30
    409e:	69 81       	ldd	r22, Y+1	; 0x01
    40a0:	80 e5       	ldi	r24, 0x50	; 80
    40a2:	92 e2       	ldi	r25, 0x22	; 34
    40a4:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:207
  Wire.write((byte)(seq.defaultBpm));
    40a8:	6f 81       	ldd	r22, Y+7	; 0x07
    40aa:	80 e5       	ldi	r24, 0x50	; 80
    40ac:	92 e2       	ldi	r25, 0x22	; 34
    40ae:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:208
  Wire.write((byte)(seq.TXchannel));
    40b2:	6b 81       	ldd	r22, Y+3	; 0x03
    40b4:	80 e5       	ldi	r24, 0x50	; 80
    40b6:	92 e2       	ldi	r25, 0x22	; 34
    40b8:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:209
  Wire.write((byte)(seq.RXchannel));
    40bc:	6c 81       	ldd	r22, Y+4	; 0x04
    40be:	80 e5       	ldi	r24, 0x50	; 80
    40c0:	92 e2       	ldi	r25, 0x22	; 34
    40c2:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:210
  Wire.write((byte)(seq.ptrnChangeSync));
    40c6:	68 81       	ld	r22, Y
    40c8:	80 e5       	ldi	r24, 0x50	; 80
    40ca:	92 e2       	ldi	r25, 0x22	; 34
    40cc:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:211
  Wire.write((byte)(seq.muteModeHH));                                  // [zabox]
    40d0:	6d 85       	ldd	r22, Y+13	; 0x0d
    40d2:	80 e5       	ldi	r24, 0x50	; 80
    40d4:	92 e2       	ldi	r25, 0x22	; 34
    40d6:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:212
  Wire.endTransmission();//end page transmission
    40da:	80 e5       	ldi	r24, 0x50	; 80
    40dc:	92 e2       	ldi	r25, 0x22	; 34
    40de:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:213
  delay(DELAY_WR);//delay between each write page
    40e2:	65 e0       	ldi	r22, 0x05	; 5
    40e4:	70 e0       	ldi	r23, 0x00	; 0
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:214
}
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:213
  Wire.write((byte)(seq.TXchannel));
  Wire.write((byte)(seq.RXchannel));
  Wire.write((byte)(seq.ptrnChangeSync));
  Wire.write((byte)(seq.muteModeHH));                                  // [zabox]
  Wire.endTransmission();//end page transmission
  delay(DELAY_WR);//delay between each write page
    40ee:	0c 94 a6 4b 	jmp	0x974c	; 0x974c <delay>

000040f2 <SeqConfiguration()>:
_Z16SeqConfigurationv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:9
//-------------------------------------------------

/////////////////////Function//////////////////////
void SeqConfiguration()
{
  if(seq.syncChanged){                               
    40f2:	80 91 41 1e 	lds	r24, 0x1E41	; 0x801e41 <seq+0x2>
    40f6:	88 23       	and	r24, r24
    40f8:	21 f0       	breq	.+8      	; 0x4102 <__stack+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:10
    SetSeqSync();
    40fa:	0e 94 c5 1a 	call	0x358a	; 0x358a <SetSeqSync()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:11
    seq.syncChanged = FALSE;
    40fe:	10 92 41 1e 	sts	0x1E41, r1	; 0x801e41 <seq+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:13
  }
  if (seq.setupNeedSaved && enterBtn.justPressed){
    4102:	80 91 4b 1e 	lds	r24, 0x1E4B	; 0x801e4b <seq+0xc>
    4106:	88 23       	and	r24, r24
    4108:	51 f0       	breq	.+20     	; 0x411e <__stack+0x1f>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:13 (discriminator 1)
    410a:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <enterBtn+0x3>
    410e:	88 23       	and	r24, r24
    4110:	31 f0       	breq	.+12     	; 0x411e <__stack+0x1f>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:14
    SaveSeqSetup();
    4112:	0e 94 45 20 	call	0x408a	; 0x408a <SaveSeqSetup()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:15
    seq.setupNeedSaved = FALSE;
    4116:	10 92 4b 1e 	sts	0x1E4B, r1	; 0x801e4b <seq+0xc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:16
    LcdPrintSaved();
    411a:	0e 94 18 09 	call	0x1230	; 0x1230 <LcdPrintSaved()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:18
  }
  if (!seq.configMode) seq.setupNeedSaved = FALSE;
    411e:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    4122:	81 11       	cpse	r24, r1
    4124:	02 c0       	rjmp	.+4      	; 0x412a <__stack+0x2b>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:18 (discriminator 1)
    4126:	10 92 4b 1e 	sts	0x1E4B, r1	; 0x801e4b <seq+0xc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqConf.ino:20

}
    412a:	08 95       	ret

0000412c <SavePatternGroup(unsigned char, unsigned char)>:
_Z16SavePatternGrouphh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:239
  seq.muteModeHH = constrain(seq.muteModeHH, 0, 1);                       // [zabox]
}

//Save pattern group
void SavePatternGroup(byte firstPattern, byte length)
{
    412c:	bf 92       	push	r11
    412e:	cf 92       	push	r12
    4130:	df 92       	push	r13
    4132:	ef 92       	push	r14
    4134:	ff 92       	push	r15
    4136:	0f 93       	push	r16
    4138:	1f 93       	push	r17
    413a:	cf 93       	push	r28
    413c:	df 93       	push	r29
    413e:	b6 2e       	mov	r11, r22
    4140:	28 2f       	mov	r18, r24
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	a0 ec       	ldi	r26, 0xC0	; 192
    4146:	b1 e0       	ldi	r27, 0x01	; 1
    4148:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <__umulhisi3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:240
  for (int a = 0; a <= length ; a++){
    414c:	d0 e0       	ldi	r29, 0x00	; 0
    414e:	c0 e0       	ldi	r28, 0x00	; 0
    4150:	0b 2d       	mov	r16, r11
    4152:	10 e0       	ldi	r17, 0x00	; 0
    4154:	6b 01       	movw	r12, r22
    4156:	7c 01       	movw	r14, r24
    4158:	20 ec       	ldi	r18, 0xC0	; 192
    415a:	c2 0e       	add	r12, r18
    415c:	21 e0       	ldi	r18, 0x01	; 1
    415e:	d2 1e       	adc	r13, r18
    4160:	e1 1c       	adc	r14, r1
    4162:	f1 1c       	adc	r15, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:240 (discriminator 3)
    4164:	0c 17       	cp	r16, r28
    4166:	1d 07       	cpc	r17, r29
    4168:	f4 f0       	brlt	.+60     	; 0x41a6 <SavePatternGroup(unsigned char, unsigned char)+0x7a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:241 (discriminator 2)
    unsigned long adress = (unsigned long)(PTRN_OFFSET + ((firstPattern + a) * PTRN_SIZE) + OFFSET_GROUP);
    416a:	6b 5d       	subi	r22, 0xDB	; 219
    416c:	7f 4f       	sbci	r23, 0xFF	; 255
    416e:	8f 4f       	sbci	r24, 0xFF	; 255
    4170:	9f 4f       	sbci	r25, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:242 (discriminator 2)
    WireBeginTX(adress);
    4172:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:249 (discriminator 2)
     Serial.println(adress);
     Serial.print("groupPos=");
     Serial.println(a);
     Serial.print("groupLeght=");
     Serial.println(length);*/
    Wire.write((byte)(a)); //pattern[ptrnBuffer].groupPos
    4176:	6c 2f       	mov	r22, r28
    4178:	80 e5       	ldi	r24, 0x50	; 80
    417a:	92 e2       	ldi	r25, 0x22	; 34
    417c:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:250 (discriminator 2)
    Wire.write((byte)(length));//pattern[ptrnBuffer].groupLength
    4180:	6b 2d       	mov	r22, r11
    4182:	80 e5       	ldi	r24, 0x50	; 80
    4184:	92 e2       	ldi	r25, 0x22	; 34
    4186:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:251 (discriminator 2)
    Wire.endTransmission();//end page transmission
    418a:	80 e5       	ldi	r24, 0x50	; 80
    418c:	92 e2       	ldi	r25, 0x22	; 34
    418e:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:252 (discriminator 2)
    delay(DELAY_WR);//delay between each write page
    4192:	65 e0       	ldi	r22, 0x05	; 5
    4194:	70 e0       	ldi	r23, 0x00	; 0
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:240 (discriminator 2)
}

//Save pattern group
void SavePatternGroup(byte firstPattern, byte length)
{
  for (int a = 0; a <= length ; a++){
    419e:	21 96       	adiw	r28, 0x01	; 1
    41a0:	c7 01       	movw	r24, r14
    41a2:	b6 01       	movw	r22, r12
    41a4:	d7 cf       	rjmp	.-82     	; 0x4154 <SavePatternGroup(unsigned char, unsigned char)+0x28>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:254
    Wire.write((byte)(a)); //pattern[ptrnBuffer].groupPos
    Wire.write((byte)(length));//pattern[ptrnBuffer].groupLength
    Wire.endTransmission();//end page transmission
    delay(DELAY_WR);//delay between each write page
  }
}
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	ff 90       	pop	r15
    41b0:	ef 90       	pop	r14
    41b2:	df 90       	pop	r13
    41b4:	cf 90       	pop	r12
    41b6:	bf 90       	pop	r11
    41b8:	08 95       	ret

000041ba <ClearPatternGroup(unsigned char, unsigned char)>:
_Z17ClearPatternGrouphh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:258

//Clear pattern group
void ClearPatternGroup(byte firstPattern, byte length)
{
    41ba:	cf 92       	push	r12
    41bc:	df 92       	push	r13
    41be:	ef 92       	push	r14
    41c0:	ff 92       	push	r15
    41c2:	0f 93       	push	r16
    41c4:	1f 93       	push	r17
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	06 2f       	mov	r16, r22
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	a0 ec       	ldi	r26, 0xC0	; 192
    41d2:	b1 e0       	ldi	r27, 0x01	; 1
    41d4:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <__umulhisi3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:259
  for (int a = 0; a <= length ; a++){
    41d8:	d0 e0       	ldi	r29, 0x00	; 0
    41da:	c0 e0       	ldi	r28, 0x00	; 0
    41dc:	10 e0       	ldi	r17, 0x00	; 0
    41de:	6b 01       	movw	r12, r22
    41e0:	7c 01       	movw	r14, r24
    41e2:	20 ec       	ldi	r18, 0xC0	; 192
    41e4:	c2 0e       	add	r12, r18
    41e6:	21 e0       	ldi	r18, 0x01	; 1
    41e8:	d2 1e       	adc	r13, r18
    41ea:	e1 1c       	adc	r14, r1
    41ec:	f1 1c       	adc	r15, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:259 (discriminator 3)
    41ee:	0c 17       	cp	r16, r28
    41f0:	1d 07       	cpc	r17, r29
    41f2:	f4 f0       	brlt	.+60     	; 0x4230 <ClearPatternGroup(unsigned char, unsigned char)+0x76>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:260 (discriminator 2)
    unsigned long adress = (unsigned long)(PTRN_OFFSET + ((firstPattern + a) * PTRN_SIZE) + OFFSET_GROUP);
    41f4:	6b 5d       	subi	r22, 0xDB	; 219
    41f6:	7f 4f       	sbci	r23, 0xFF	; 255
    41f8:	8f 4f       	sbci	r24, 0xFF	; 255
    41fa:	9f 4f       	sbci	r25, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:261 (discriminator 2)
    WireBeginTX(adress);
    41fc:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:262 (discriminator 2)
    Wire.write((byte)(0)); //pattern[ptrnBuffer].groupPos
    4200:	60 e0       	ldi	r22, 0x00	; 0
    4202:	80 e5       	ldi	r24, 0x50	; 80
    4204:	92 e2       	ldi	r25, 0x22	; 34
    4206:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:263 (discriminator 2)
    Wire.write((byte)(0));//pattern[ptrnBuffer].groupLength
    420a:	60 e0       	ldi	r22, 0x00	; 0
    420c:	80 e5       	ldi	r24, 0x50	; 80
    420e:	92 e2       	ldi	r25, 0x22	; 34
    4210:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:264 (discriminator 2)
    Wire.endTransmission();//end page transmission
    4214:	80 e5       	ldi	r24, 0x50	; 80
    4216:	92 e2       	ldi	r25, 0x22	; 34
    4218:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:265 (discriminator 2)
    delay(DELAY_WR);//delay between each write page
    421c:	65 e0       	ldi	r22, 0x05	; 5
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:259 (discriminator 2)
}

//Clear pattern group
void ClearPatternGroup(byte firstPattern, byte length)
{
  for (int a = 0; a <= length ; a++){
    4228:	21 96       	adiw	r28, 0x01	; 1
    422a:	c7 01       	movw	r24, r14
    422c:	b6 01       	movw	r22, r12
    422e:	d7 cf       	rjmp	.-82     	; 0x41de <ClearPatternGroup(unsigned char, unsigned char)+0x24>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:267
    Wire.write((byte)(0)); //pattern[ptrnBuffer].groupPos
    Wire.write((byte)(0));//pattern[ptrnBuffer].groupLength
    Wire.endTransmission();//end page transmission
    delay(DELAY_WR);//delay between each write page
  }
}
    4230:	df 91       	pop	r29
    4232:	cf 91       	pop	r28
    4234:	1f 91       	pop	r17
    4236:	0f 91       	pop	r16
    4238:	ff 90       	pop	r15
    423a:	ef 90       	pop	r14
    423c:	df 90       	pop	r13
    423e:	cf 90       	pop	r12
    4240:	08 95       	ret

00004242 <InitEEprom()>:
_Z10InitEEpromv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:285

//==================================================================================================
//==================================================================================================
//init pattern in the EEprom
void InitEEprom()
{
    4242:	3f 92       	push	r3
    4244:	4f 92       	push	r4
    4246:	5f 92       	push	r5
    4248:	6f 92       	push	r6
    424a:	7f 92       	push	r7
    424c:	8f 92       	push	r8
    424e:	9f 92       	push	r9
    4250:	af 92       	push	r10
    4252:	bf 92       	push	r11
    4254:	cf 92       	push	r12
    4256:	df 92       	push	r13
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	40 ec       	ldi	r20, 0xC0	; 192
    4266:	c4 2e       	mov	r12, r20
    4268:	d1 2c       	mov	r13, r1
    426a:	e1 2c       	mov	r14, r1
    426c:	f1 2c       	mov	r15, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:289
  unsigned long adress;
  
  //Pattern init
  for (byte nbrPattern = 0; nbrPattern < MAX_PTRN ; nbrPattern++)
    426e:	10 e0       	ldi	r17, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:342
      }
      Wire.endTransmission();//end of 64 bytes transfer
      delay(DELAY_WR);//delay between each write page
    }//4 * 64 bytes = 256 bytes
    static unsigned int tempInitLeds;
    tempInitLeds |= bitSet(tempInitLeds, (nbrPattern / 8));
    4270:	41 2c       	mov	r4, r1
    4272:	51 2c       	mov	r5, r1
    4274:	32 01       	movw	r6, r4
    4276:	43 94       	inc	r4
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:291
  unsigned long adress;
  
  //Pattern init
  for (byte nbrPattern = 0; nbrPattern < MAX_PTRN ; nbrPattern++)
  {
    adress = (unsigned long)(PTRN_OFFSET + nbrPattern * PTRN_SIZE);
    4278:	c7 01       	movw	r24, r14
    427a:	b6 01       	movw	r22, r12
    427c:	60 5c       	subi	r22, 0xC0	; 192
    427e:	71 09       	sbc	r23, r1
    4280:	81 09       	sbc	r24, r1
    4282:	91 09       	sbc	r25, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:292
    WireBeginTX(adress); 
    4284:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
    4288:	c0 e1       	ldi	r28, 0x10	; 16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:296 (discriminator 2)
    // Serial.println(adress);
    //TRIG-----------------------------------------------
    for (byte i = 0; i < NBR_INST; i++){ 
      Wire.write((byte)(0)); 
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	80 e5       	ldi	r24, 0x50	; 80
    428e:	92 e2       	ldi	r25, 0x22	; 34
    4290:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:297 (discriminator 2)
      Wire.write((byte)(0));
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	80 e5       	ldi	r24, 0x50	; 80
    4298:	92 e2       	ldi	r25, 0x22	; 34
    429a:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    429e:	c1 50       	subi	r28, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:295 (discriminator 2)
  {
    adress = (unsigned long)(PTRN_OFFSET + nbrPattern * PTRN_SIZE);
    WireBeginTX(adress); 
    // Serial.println(adress);
    //TRIG-----------------------------------------------
    for (byte i = 0; i < NBR_INST; i++){ 
    42a0:	a1 f7       	brne	.-24     	; 0x428a <InitEEprom()+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:301
      Wire.write((byte)(0)); 
      Wire.write((byte)(0));
    }//32 bytes

    //SETUP-----------------------------------------------
    Wire.write((byte)(DEFAULT_LEN - 1));
    42a2:	6f e0       	ldi	r22, 0x0F	; 15
    42a4:	80 e5       	ldi	r24, 0x50	; 80
    42a6:	92 e2       	ldi	r25, 0x22	; 34
    42a8:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:302
    Wire.write((byte)(DEFAULT_SCALE));
    42ac:	68 e1       	ldi	r22, 0x18	; 24
    42ae:	80 e5       	ldi	r24, 0x50	; 80
    42b0:	92 e2       	ldi	r25, 0x22	; 34
    42b2:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:303
    Wire.write((byte)(DEFAULT_SHUF));
    42b6:	61 e0       	ldi	r22, 0x01	; 1
    42b8:	80 e5       	ldi	r24, 0x50	; 80
    42ba:	92 e2       	ldi	r25, 0x22	; 34
    42bc:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:304
    Wire.write((byte)(DEFAULT_FLAM));                                      // [1.028] flam
    42c0:	60 e0       	ldi	r22, 0x00	; 0
    42c2:	80 e5       	ldi	r24, 0x50	; 80
    42c4:	92 e2       	ldi	r25, 0x22	; 34
    42c6:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:305
    Wire.write((byte)(0));
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	80 e5       	ldi	r24, 0x50	; 80
    42ce:	92 e2       	ldi	r25, 0x22	; 34
    42d0:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:306
    Wire.write((byte)(0));
    42d4:	60 e0       	ldi	r22, 0x00	; 0
    42d6:	80 e5       	ldi	r24, 0x50	; 80
    42d8:	92 e2       	ldi	r25, 0x22	; 34
    42da:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:307
    Wire.write((byte)(0));
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	80 e5       	ldi	r24, 0x50	; 80
    42e2:	92 e2       	ldi	r25, 0x22	; 34
    42e4:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:308
    Wire.write((byte)(0));
    42e8:	60 e0       	ldi	r22, 0x00	; 0
    42ea:	80 e5       	ldi	r24, 0x50	; 80
    42ec:	92 e2       	ldi	r25, 0x22	; 34
    42ee:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:313
    for(int a = 0; a < 24; a++){
      //Wire.write( (byte)(0));//unused parameters
    }//32 bytes

    Wire.endTransmission();//end page transmission
    42f2:	80 e5       	ldi	r24, 0x50	; 80
    42f4:	92 e2       	ldi	r25, 0x22	; 34
    42f6:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:314
    delay(DELAY_WR);//delay between each write page
    42fa:	65 e0       	ldi	r22, 0x05	; 5
    42fc:	70 e0       	ldi	r23, 0x00	; 0
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
    4306:	46 01       	movw	r8, r12
    4308:	57 01       	movw	r10, r14
    430a:	20 e8       	ldi	r18, 0x80	; 128
    430c:	82 1a       	sub	r8, r18
    430e:	91 08       	sbc	r9, r1
    4310:	a1 08       	sbc	r10, r1
    4312:	b1 08       	sbc	r11, r1
    4314:	c2 e0       	ldi	r28, 0x02	; 2
    4316:	d0 e0       	ldi	r29, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:320

    //EXT INST-----------------------------------------------
    for(int nbrPage = 0; nbrPage < 2; nbrPage++){
      adress = (unsigned long)(PTRN_OFFSET + (nbrPattern * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_SETUP_OFFSET);
      //Serial.println(adress);
      WireBeginTX(adress);
    4318:	c5 01       	movw	r24, r10
    431a:	b4 01       	movw	r22, r8
    431c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
    4320:	00 e4       	ldi	r16, 0x40	; 64
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:322 (discriminator 2)
      for (byte j = 0; j < MAX_PAGE_SIZE; j++){
        Wire.write((byte)(0));
    4322:	60 e0       	ldi	r22, 0x00	; 0
    4324:	80 e5       	ldi	r24, 0x50	; 80
    4326:	92 e2       	ldi	r25, 0x22	; 34
    4328:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    432c:	01 50       	subi	r16, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:321 (discriminator 2)
    //EXT INST-----------------------------------------------
    for(int nbrPage = 0; nbrPage < 2; nbrPage++){
      adress = (unsigned long)(PTRN_OFFSET + (nbrPattern * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_SETUP_OFFSET);
      //Serial.println(adress);
      WireBeginTX(adress);
      for (byte j = 0; j < MAX_PAGE_SIZE; j++){
    432e:	c9 f7       	brne	.-14     	; 0x4322 <InitEEprom()+0xe0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:324 (discriminator 2)
        Wire.write((byte)(0));
      }//64 bytes -> fisrt page
      Wire.endTransmission();//end page transmission
    4330:	80 e5       	ldi	r24, 0x50	; 80
    4332:	92 e2       	ldi	r25, 0x22	; 34
    4334:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:325 (discriminator 2)
      delay(DELAY_WR);//delay between each write page
    4338:	65 e0       	ldi	r22, 0x05	; 5
    433a:	70 e0       	ldi	r23, 0x00	; 0
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
    4344:	30 e4       	ldi	r19, 0x40	; 64
    4346:	83 0e       	add	r8, r19
    4348:	91 1c       	adc	r9, r1
    434a:	a1 1c       	adc	r10, r1
    434c:	b1 1c       	adc	r11, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:317 (discriminator 2)

    Wire.endTransmission();//end page transmission
    delay(DELAY_WR);//delay between each write page

    //EXT INST-----------------------------------------------
    for(int nbrPage = 0; nbrPage < 2; nbrPage++){
    434e:	21 97       	sbiw	r28, 0x01	; 1
    4350:	09 f0       	breq	.+2      	; 0x4354 <InitEEprom()+0x112>
    4352:	db c0       	rjmp	.+438    	; 0x450a <InitEEprom()+0x2c8>
    4354:	46 01       	movw	r8, r12
    4356:	57 01       	movw	r10, r14
    4358:	c4 e0       	ldi	r28, 0x04	; 4
    435a:	d0 e0       	ldi	r29, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:332

    //VELOCITY-----------------------------------------------
    for(int nbrPage = 0; nbrPage < 4; nbrPage++){
      adress = (unsigned long)(PTRN_OFFSET + (nbrPattern * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
      //Serial.println(adress);
      WireBeginTX(adress);
    435c:	c5 01       	movw	r24, r10
    435e:	b4 01       	movw	r22, r8
    4360:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
    4364:	04 e0       	ldi	r16, 0x04	; 4
    4366:	30 e1       	ldi	r19, 0x10	; 16
    4368:	33 2e       	mov	r3, r19
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:335 (discriminator 2)
      for (byte i = 0; i < 4; i++){//loop as many instrument for a page
        for (byte j = 0; j < NBR_STEP; j++){
          Wire.write((byte)(0)); 
    436a:	60 e0       	ldi	r22, 0x00	; 0
    436c:	80 e5       	ldi	r24, 0x50	; 80
    436e:	92 e2       	ldi	r25, 0x22	; 34
    4370:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    4374:	3a 94       	dec	r3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:334 (discriminator 2)
    for(int nbrPage = 0; nbrPage < 4; nbrPage++){
      adress = (unsigned long)(PTRN_OFFSET + (nbrPattern * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
      //Serial.println(adress);
      WireBeginTX(adress);
      for (byte i = 0; i < 4; i++){//loop as many instrument for a page
        for (byte j = 0; j < NBR_STEP; j++){
    4376:	31 10       	cpse	r3, r1
    4378:	f8 cf       	rjmp	.-16     	; 0x436a <InitEEprom()+0x128>
    437a:	01 50       	subi	r16, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:333 (discriminator 2)
    //VELOCITY-----------------------------------------------
    for(int nbrPage = 0; nbrPage < 4; nbrPage++){
      adress = (unsigned long)(PTRN_OFFSET + (nbrPattern * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
      //Serial.println(adress);
      WireBeginTX(adress);
      for (byte i = 0; i < 4; i++){//loop as many instrument for a page
    437c:	a1 f7       	brne	.-24     	; 0x4366 <InitEEprom()+0x124>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:338 (discriminator 2)
        for (byte j = 0; j < NBR_STEP; j++){
          Wire.write((byte)(0)); 
        }
      }
      Wire.endTransmission();//end of 64 bytes transfer
    437e:	80 e5       	ldi	r24, 0x50	; 80
    4380:	92 e2       	ldi	r25, 0x22	; 34
    4382:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:339 (discriminator 2)
      delay(DELAY_WR);//delay between each write page
    4386:	65 e0       	ldi	r22, 0x05	; 5
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
    4392:	21 97       	sbiw	r28, 0x01	; 1
    4394:	40 e4       	ldi	r20, 0x40	; 64
    4396:	84 0e       	add	r8, r20
    4398:	91 1c       	adc	r9, r1
    439a:	a1 1c       	adc	r10, r1
    439c:	b1 1c       	adc	r11, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:329 (discriminator 2)
      Wire.endTransmission();//end page transmission
      delay(DELAY_WR);//delay between each write page
    }//2 * 64 bytes = 128 bytes

    //VELOCITY-----------------------------------------------
    for(int nbrPage = 0; nbrPage < 4; nbrPage++){
    439e:	20 97       	sbiw	r28, 0x00	; 0
    43a0:	e9 f6       	brne	.-70     	; 0x435c <InitEEprom()+0x11a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:342 (discriminator 2)
      }
      Wire.endTransmission();//end of 64 bytes transfer
      delay(DELAY_WR);//delay between each write page
    }//4 * 64 bytes = 256 bytes
    static unsigned int tempInitLeds;
    tempInitLeds |= bitSet(tempInitLeds, (nbrPattern / 8));
    43a2:	81 2f       	mov	r24, r17
    43a4:	86 95       	lsr	r24
    43a6:	86 95       	lsr	r24
    43a8:	86 95       	lsr	r24
    43aa:	a3 01       	movw	r20, r6
    43ac:	92 01       	movw	r18, r4
    43ae:	04 c0       	rjmp	.+8      	; 0x43b8 <InitEEprom()+0x176>
    43b0:	22 0f       	add	r18, r18
    43b2:	33 1f       	adc	r19, r19
    43b4:	44 1f       	adc	r20, r20
    43b6:	55 1f       	adc	r21, r21
    43b8:	8a 95       	dec	r24
    43ba:	d2 f7       	brpl	.-12     	; 0x43b0 <InitEEprom()+0x16e>
    43bc:	c9 01       	movw	r24, r18
    43be:	20 91 26 04 	lds	r18, 0x0426	; 0x800426 <InitEEprom()::tempInitLeds>
    43c2:	30 91 27 04 	lds	r19, 0x0427	; 0x800427 <InitEEprom()::tempInitLeds+0x1>
    43c6:	82 2b       	or	r24, r18
    43c8:	93 2b       	or	r25, r19
    43ca:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <InitEEprom()::tempInitLeds+0x1>
    43ce:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <InitEEprom()::tempInitLeds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:343 (discriminator 2)
    SetDoutLed(tempInitLeds, 0, 0);
    43d2:	40 e0       	ldi	r20, 0x00	; 0
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	60 e0       	ldi	r22, 0x00	; 0
    43d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SetDoutLed(unsigned int, unsigned int, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:289 (discriminator 2)
void InitEEprom()
{
  unsigned long adress;
  
  //Pattern init
  for (byte nbrPattern = 0; nbrPattern < MAX_PTRN ; nbrPattern++)
    43dc:	1f 5f       	subi	r17, 0xFF	; 255
    43de:	30 ec       	ldi	r19, 0xC0	; 192
    43e0:	c3 0e       	add	r12, r19
    43e2:	31 e0       	ldi	r19, 0x01	; 1
    43e4:	d3 1e       	adc	r13, r19
    43e6:	e1 1c       	adc	r14, r1
    43e8:	f1 1c       	adc	r15, r1
    43ea:	40 ec       	ldi	r20, 0xC0	; 192
    43ec:	c4 16       	cp	r12, r20
    43ee:	40 ee       	ldi	r20, 0xE0	; 224
    43f0:	d4 06       	cpc	r13, r20
    43f2:	e1 04       	cpc	r14, r1
    43f4:	f1 04       	cpc	r15, r1
    43f6:	09 f0       	breq	.+2      	; 0x43fa <InitEEprom()+0x1b8>
    43f8:	3f cf       	rjmp	.-386    	; 0x4278 <InitEEprom()+0x36>
    43fa:	d0 e0       	ldi	r29, 0x00	; 0
    43fc:	c0 e0       	ldi	r28, 0x00	; 0
    43fe:	c1 2c       	mov	r12, r1
    4400:	90 ee       	ldi	r25, 0xE0	; 224
    4402:	d9 2e       	mov	r13, r25
    4404:	e1 2c       	mov	r14, r1
    4406:	f1 2c       	mov	r15, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:361
      }
      Wire.endTransmission();//end of 64 bytes transfer
      delay(DELAY_WR);//delay between each write page
    }
    static unsigned int tempInitLeds;
    tempInitLeds |= bitSet(tempInitLeds, trackNbr);
    4408:	41 2c       	mov	r4, r1
    440a:	51 2c       	mov	r5, r1
    440c:	32 01       	movw	r6, r4
    440e:	43 94       	inc	r4
    4410:	46 01       	movw	r8, r12
    4412:	57 01       	movw	r10, r14
    4414:	10 e0       	ldi	r17, 0x00	; 0
    4416:	00 e0       	ldi	r16, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:353
  
  //Track Init
  for (unsigned long trackNbr = 0; trackNbr < MAX_TRACK; trackNbr++){
    for(unsigned long nbrPage = 0; nbrPage < (TRACK_SIZE/MAX_PAGE_SIZE); nbrPage++){// to init 1024 byte track size we need 16 pages of 64 bytes
      adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
      WireBeginTX(adress);
    4418:	c5 01       	movw	r24, r10
    441a:	b4 01       	movw	r22, r8
    441c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
    4420:	80 e4       	ldi	r24, 0x40	; 64
    4422:	38 2e       	mov	r3, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:355 (discriminator 2)
      for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
        Wire.write((byte)(0)); 
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	80 e5       	ldi	r24, 0x50	; 80
    4428:	92 e2       	ldi	r25, 0x22	; 34
    442a:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
    442e:	3a 94       	dec	r3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:354 (discriminator 2)
  //Track Init
  for (unsigned long trackNbr = 0; trackNbr < MAX_TRACK; trackNbr++){
    for(unsigned long nbrPage = 0; nbrPage < (TRACK_SIZE/MAX_PAGE_SIZE); nbrPage++){// to init 1024 byte track size we need 16 pages of 64 bytes
      adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
      WireBeginTX(adress);
      for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
    4430:	31 10       	cpse	r3, r1
    4432:	f8 cf       	rjmp	.-16     	; 0x4424 <InitEEprom()+0x1e2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:357 (discriminator 2)
        Wire.write((byte)(0)); 
      }
      Wire.endTransmission();//end of 64 bytes transfer
    4434:	80 e5       	ldi	r24, 0x50	; 80
    4436:	92 e2       	ldi	r25, 0x22	; 34
    4438:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:358 (discriminator 2)
      delay(DELAY_WR);//delay between each write page
    443c:	65 e0       	ldi	r22, 0x05	; 5
    443e:	70 e0       	ldi	r23, 0x00	; 0
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
    4448:	0f 5f       	subi	r16, 0xFF	; 255
    444a:	1f 4f       	sbci	r17, 0xFF	; 255
    444c:	50 e4       	ldi	r21, 0x40	; 64
    444e:	85 0e       	add	r8, r21
    4450:	91 1c       	adc	r9, r1
    4452:	a1 1c       	adc	r10, r1
    4454:	b1 1c       	adc	r11, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:351 (discriminator 2)
 /* Serial.print("patrn offset add=");
  Serial.println(adress);*/
  
  //Track Init
  for (unsigned long trackNbr = 0; trackNbr < MAX_TRACK; trackNbr++){
    for(unsigned long nbrPage = 0; nbrPage < (TRACK_SIZE/MAX_PAGE_SIZE); nbrPage++){// to init 1024 byte track size we need 16 pages of 64 bytes
    4456:	00 31       	cpi	r16, 0x10	; 16
    4458:	11 05       	cpc	r17, r1
    445a:	f1 f6       	brne	.-68     	; 0x4418 <InitEEprom()+0x1d6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:361 (discriminator 2)
      }
      Wire.endTransmission();//end of 64 bytes transfer
      delay(DELAY_WR);//delay between each write page
    }
    static unsigned int tempInitLeds;
    tempInitLeds |= bitSet(tempInitLeds, trackNbr);
    445c:	d3 01       	movw	r26, r6
    445e:	c2 01       	movw	r24, r4
    4460:	0c 2e       	mov	r0, r28
    4462:	04 c0       	rjmp	.+8      	; 0x446c <InitEEprom()+0x22a>
    4464:	88 0f       	add	r24, r24
    4466:	99 1f       	adc	r25, r25
    4468:	aa 1f       	adc	r26, r26
    446a:	bb 1f       	adc	r27, r27
    446c:	0a 94       	dec	r0
    446e:	d2 f7       	brpl	.-12     	; 0x4464 <InitEEprom()+0x222>
    4470:	20 91 24 04 	lds	r18, 0x0424	; 0x800424 <InitEEprom()::tempInitLeds>
    4474:	30 91 25 04 	lds	r19, 0x0425	; 0x800425 <InitEEprom()::tempInitLeds+0x1>
    4478:	82 2b       	or	r24, r18
    447a:	93 2b       	or	r25, r19
    447c:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <InitEEprom()::tempInitLeds+0x1>
    4480:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <InitEEprom()::tempInitLeds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:362 (discriminator 2)
    SetDoutLed(tempInitLeds, 0, 0);
    4484:	40 e0       	ldi	r20, 0x00	; 0
    4486:	70 e0       	ldi	r23, 0x00	; 0
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SetDoutLed(unsigned int, unsigned int, unsigned char)>
    448e:	21 96       	adiw	r28, 0x01	; 1
    4490:	34 e0       	ldi	r19, 0x04	; 4
    4492:	d3 0e       	add	r13, r19
    4494:	e1 1c       	adc	r14, r1
    4496:	f1 1c       	adc	r15, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:350 (discriminator 2)
  }
 /* Serial.print("patrn offset add=");
  Serial.println(adress);*/
  
  //Track Init
  for (unsigned long trackNbr = 0; trackNbr < MAX_TRACK; trackNbr++){
    4498:	c0 31       	cpi	r28, 0x10	; 16
    449a:	d1 05       	cpc	r29, r1
    449c:	09 f0       	breq	.+2      	; 0x44a0 <InitEEprom()+0x25e>
    449e:	b8 cf       	rjmp	.-144    	; 0x4410 <InitEEprom()+0x1ce>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:370
 /* Serial.print("track offset add=");
  Serial.println(TRACK_OFFSET);*/
  
  //Setup init
  adress = (unsigned long)(OFFSET_SETUP);
  WireBeginTX(adress);
    44a0:	60 e0       	ldi	r22, 0x00	; 0
    44a2:	70 e2       	ldi	r23, 0x20	; 32
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:371
  Wire.write((byte)(MASTER));//seq.sync)); 
    44ac:	60 e0       	ldi	r22, 0x00	; 0
    44ae:	80 e5       	ldi	r24, 0x50	; 80
    44b0:	92 e2       	ldi	r25, 0x22	; 34
    44b2:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:372
  Wire.write((byte)(DEFAULT_BPM));//seq.defaultBpm));
    44b6:	68 e7       	ldi	r22, 0x78	; 120
    44b8:	80 e5       	ldi	r24, 0x50	; 80
    44ba:	92 e2       	ldi	r25, 0x22	; 34
    44bc:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:373
  Wire.write((byte)(1));//seq.TXchannel));
    44c0:	61 e0       	ldi	r22, 0x01	; 1
    44c2:	80 e5       	ldi	r24, 0x50	; 80
    44c4:	92 e2       	ldi	r25, 0x22	; 34
    44c6:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:374
  Wire.write((byte)(1));//seq.RXchannel));
    44ca:	61 e0       	ldi	r22, 0x01	; 1
    44cc:	80 e5       	ldi	r24, 0x50	; 80
    44ce:	92 e2       	ldi	r25, 0x22	; 34
    44d0:	0e 94 02 43 	call	0x8604	; 0x8604 <TwoWire::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:376

  Wire.endTransmission();//end page transmission
    44d4:	80 e5       	ldi	r24, 0x50	; 80
    44d6:	92 e2       	ldi	r25, 0x22	; 34
    44d8:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:377
  delay(DELAY_WR);//delay between each write page
    44dc:	65 e0       	ldi	r22, 0x05	; 5
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	80 e0       	ldi	r24, 0x00	; 0
    44e2:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:380
  /*Serial.print("setup offset add=");
  Serial.println((unsigned long)(TRACK_OFFSET + (TRACK_SIZE * MAX_TRACK)));*/
}
    44e4:	df 91       	pop	r29
    44e6:	cf 91       	pop	r28
    44e8:	1f 91       	pop	r17
    44ea:	0f 91       	pop	r16
    44ec:	ff 90       	pop	r15
    44ee:	ef 90       	pop	r14
    44f0:	df 90       	pop	r13
    44f2:	cf 90       	pop	r12
    44f4:	bf 90       	pop	r11
    44f6:	af 90       	pop	r10
    44f8:	9f 90       	pop	r9
    44fa:	8f 90       	pop	r8
    44fc:	7f 90       	pop	r7
    44fe:	6f 90       	pop	r6
    4500:	5f 90       	pop	r5
    4502:	4f 90       	pop	r4
    4504:	3f 90       	pop	r3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:377
  Wire.write((byte)(DEFAULT_BPM));//seq.defaultBpm));
  Wire.write((byte)(1));//seq.TXchannel));
  Wire.write((byte)(1));//seq.RXchannel));

  Wire.endTransmission();//end page transmission
  delay(DELAY_WR);//delay between each write page
    4506:	0c 94 a6 4b 	jmp	0x974c	; 0x974c <delay>
    450a:	c1 e0       	ldi	r28, 0x01	; 1
    450c:	d0 e0       	ldi	r29, 0x00	; 0
    450e:	04 cf       	rjmp	.-504    	; 0x4318 <InitEEprom()+0xd6>

00004510 <LoadPattern(unsigned char)>:
_Z11LoadPatternh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:112
  }//4 * 64 bytes = 256 bytes
}

//Load Pattern
void LoadPattern(byte patternNbr)
{
    4510:	4f 92       	push	r4
    4512:	5f 92       	push	r5
    4514:	6f 92       	push	r6
    4516:	7f 92       	push	r7
    4518:	8f 92       	push	r8
    451a:	9f 92       	push	r9
    451c:	af 92       	push	r10
    451e:	bf 92       	push	r11
    4520:	cf 92       	push	r12
    4522:	df 92       	push	r13
    4524:	ef 92       	push	r14
    4526:	ff 92       	push	r15
    4528:	0f 93       	push	r16
    452a:	1f 93       	push	r17
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	00 d0       	rcall	.+0      	; 0x4532 <LoadPattern(unsigned char)+0x22>
    4532:	00 d0       	rcall	.+0      	; 0x4534 <LoadPattern(unsigned char)+0x24>
    4534:	cd b7       	in	r28, 0x3d	; 61
    4536:	de b7       	in	r29, 0x3e	; 62
    4538:	08 2f       	mov	r16, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:113
  unsigned long adress = (unsigned long)(PTRN_OFFSET + patternNbr * PTRN_SIZE);
    453a:	28 2f       	mov	r18, r24
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	a0 ec       	ldi	r26, 0xC0	; 192
    4540:	b1 e0       	ldi	r27, 0x01	; 1
    4542:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <__umulhisi3>
    4546:	2b 01       	movw	r4, r22
    4548:	3c 01       	movw	r6, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:114
  WireBeginTX(adress); 
    454a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:115
  Wire.endTransmission();
    454e:	80 e5       	ldi	r24, 0x50	; 80
    4550:	92 e2       	ldi	r25, 0x22	; 34
    4552:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:116
  Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request a 64 bytes page
    4556:	40 e4       	ldi	r20, 0x40	; 64
    4558:	50 e0       	ldi	r21, 0x00	; 0
    455a:	60 e5       	ldi	r22, 0x50	; 80
    455c:	70 e0       	ldi	r23, 0x00	; 0
    455e:	80 e5       	ldi	r24, 0x50	; 80
    4560:	92 e2       	ldi	r25, 0x22	; 34
    4562:	0e 94 75 43 	call	0x86ea	; 0x86ea <TwoWire::requestFrom(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:118
  //TRIG-----------------------------------------------
  for(int i =0; i<NBR_INST;i++){
    4566:	d1 2c       	mov	r13, r1
    4568:	c1 2c       	mov	r12, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:119
    pattern[!ptrnBuffer].inst[i] = (unsigned long)((Wire.read() & 0xFF) | (( Wire.read() << 8) & 0xFF00));
    456a:	11 e0       	ldi	r17, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:119 (discriminator 2)
    456c:	80 e5       	ldi	r24, 0x50	; 80
    456e:	92 e2       	ldi	r25, 0x22	; 34
    4570:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    4574:	b8 2e       	mov	r11, r24
    4576:	80 e5       	ldi	r24, 0x50	; 80
    4578:	92 e2       	ldi	r25, 0x22	; 34
    457a:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    457e:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    4582:	91 27       	eor	r25, r17
    4584:	f6 01       	movw	r30, r12
    4586:	ee 0f       	add	r30, r30
    4588:	ff 1f       	adc	r31, r31
    458a:	49 ec       	ldi	r20, 0xC9	; 201
    458c:	55 e0       	ldi	r21, 0x05	; 5
    458e:	94 9f       	mul	r25, r20
    4590:	90 01       	movw	r18, r0
    4592:	95 9f       	mul	r25, r21
    4594:	30 0d       	add	r19, r0
    4596:	11 24       	eor	r1, r1
    4598:	e2 0f       	add	r30, r18
    459a:	f3 1f       	adc	r31, r19
    459c:	e3 56       	subi	r30, 0x63	; 99
    459e:	f9 4e       	sbci	r31, 0xE9	; 233
    45a0:	f8 2e       	mov	r15, r24
    45a2:	e1 2c       	mov	r14, r1
    45a4:	c7 01       	movw	r24, r14
    45a6:	8b 29       	or	r24, r11
    45a8:	91 83       	std	Z+1, r25	; 0x01
    45aa:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:118 (discriminator 2)
  unsigned long adress = (unsigned long)(PTRN_OFFSET + patternNbr * PTRN_SIZE);
  WireBeginTX(adress); 
  Wire.endTransmission();
  Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request a 64 bytes page
  //TRIG-----------------------------------------------
  for(int i =0; i<NBR_INST;i++){
    45ac:	5f ef       	ldi	r21, 0xFF	; 255
    45ae:	c5 1a       	sub	r12, r21
    45b0:	d5 0a       	sbc	r13, r21
    45b2:	80 e1       	ldi	r24, 0x10	; 16
    45b4:	c8 16       	cp	r12, r24
    45b6:	d1 04       	cpc	r13, r1
    45b8:	c9 f6       	brne	.-78     	; 0x456c <LoadPattern(unsigned char)+0x5c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:123
    pattern[!ptrnBuffer].inst[i] = (unsigned long)((Wire.read() & 0xFF) | (( Wire.read() << 8) & 0xFF00));
    // Serial.println(Wire.read());
  }
  //SETUP-----------------------------------------------
  pattern[!ptrnBuffer].length = Wire.read();
    45ba:	80 e5       	ldi	r24, 0x50	; 80
    45bc:	92 e2       	ldi	r25, 0x22	; 34
    45be:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    45c2:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    45c6:	91 27       	eor	r25, r17
    45c8:	a9 ec       	ldi	r26, 0xC9	; 201
    45ca:	b5 e0       	ldi	r27, 0x05	; 5
    45cc:	9a 9f       	mul	r25, r26
    45ce:	f0 01       	movw	r30, r0
    45d0:	9b 9f       	mul	r25, r27
    45d2:	f0 0d       	add	r31, r0
    45d4:	11 24       	eor	r1, r1
    45d6:	e8 56       	subi	r30, 0x68	; 104
    45d8:	f9 4e       	sbci	r31, 0xE9	; 233
    45da:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:124
  pattern[!ptrnBuffer].scale = Wire.read();
    45dc:	80 e5       	ldi	r24, 0x50	; 80
    45de:	92 e2       	ldi	r25, 0x22	; 34
    45e0:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    45e4:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    45e8:	91 27       	eor	r25, r17
    45ea:	29 ec       	ldi	r18, 0xC9	; 201
    45ec:	35 e0       	ldi	r19, 0x05	; 5
    45ee:	92 9f       	mul	r25, r18
    45f0:	f0 01       	movw	r30, r0
    45f2:	93 9f       	mul	r25, r19
    45f4:	f0 0d       	add	r31, r0
    45f6:	11 24       	eor	r1, r1
    45f8:	e7 56       	subi	r30, 0x67	; 103
    45fa:	f9 4e       	sbci	r31, 0xE9	; 233
    45fc:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:125
  prevShuf = pattern[!ptrnBuffer].shuffle = Wire.read();                                                         // [zabox] [1.027] flam
    45fe:	80 e5       	ldi	r24, 0x50	; 80
    4600:	92 e2       	ldi	r25, 0x22	; 34
    4602:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    4606:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    460a:	91 27       	eor	r25, r17
    460c:	49 ec       	ldi	r20, 0xC9	; 201
    460e:	55 e0       	ldi	r21, 0x05	; 5
    4610:	94 9f       	mul	r25, r20
    4612:	f0 01       	movw	r30, r0
    4614:	95 9f       	mul	r25, r21
    4616:	f0 0d       	add	r31, r0
    4618:	11 24       	eor	r1, r1
    461a:	e5 56       	subi	r30, 0x65	; 101
    461c:	f9 4e       	sbci	r31, 0xE9	; 233
    461e:	80 83       	st	Z, r24
    4620:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <prevShuf>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:126
  prevFlam = pattern[!ptrnBuffer].flam = Wire.read();                                                            // [zabox] [1.027] flam
    4624:	80 e5       	ldi	r24, 0x50	; 80
    4626:	92 e2       	ldi	r25, 0x22	; 34
    4628:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    462c:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    4630:	91 27       	eor	r25, r17
    4632:	a9 ec       	ldi	r26, 0xC9	; 201
    4634:	b5 e0       	ldi	r27, 0x05	; 5
    4636:	9a 9f       	mul	r25, r26
    4638:	f0 01       	movw	r30, r0
    463a:	9b 9f       	mul	r25, r27
    463c:	f0 0d       	add	r31, r0
    463e:	11 24       	eor	r1, r1
    4640:	e4 56       	subi	r30, 0x64	; 100
    4642:	f9 4e       	sbci	r31, 0xE9	; 233
    4644:	80 83       	st	Z, r24
    4646:	80 93 c8 0c 	sts	0x0CC8, r24	; 0x800cc8 <prevFlam>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:127
  pattern[!ptrnBuffer].extLength = Wire.read();
    464a:	80 e5       	ldi	r24, 0x50	; 80
    464c:	92 e2       	ldi	r25, 0x22	; 34
    464e:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    4652:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    4656:	91 27       	eor	r25, r17
    4658:	29 ec       	ldi	r18, 0xC9	; 201
    465a:	35 e0       	ldi	r19, 0x05	; 5
    465c:	92 9f       	mul	r25, r18
    465e:	f0 01       	movw	r30, r0
    4660:	93 9f       	mul	r25, r19
    4662:	f0 0d       	add	r31, r0
    4664:	11 24       	eor	r1, r1
    4666:	e3 5a       	subi	r30, 0xA3	; 163
    4668:	f7 4e       	sbci	r31, 0xE7	; 231
    466a:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:128
  pattern[!ptrnBuffer].groupPos = Wire.read();
    466c:	80 e5       	ldi	r24, 0x50	; 80
    466e:	92 e2       	ldi	r25, 0x22	; 34
    4670:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    4674:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    4678:	91 27       	eor	r25, r17
    467a:	49 ec       	ldi	r20, 0xC9	; 201
    467c:	55 e0       	ldi	r21, 0x05	; 5
    467e:	94 9f       	mul	r25, r20
    4680:	f0 01       	movw	r30, r0
    4682:	95 9f       	mul	r25, r21
    4684:	f0 0d       	add	r31, r0
    4686:	11 24       	eor	r1, r1
    4688:	e2 5a       	subi	r30, 0xA2	; 162
    468a:	f7 4e       	sbci	r31, 0xE7	; 231
    468c:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:129
  pattern[!ptrnBuffer].groupLength = Wire.read();
    468e:	80 e5       	ldi	r24, 0x50	; 80
    4690:	92 e2       	ldi	r25, 0x22	; 34
    4692:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    4696:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    469a:	91 27       	eor	r25, r17
    469c:	a9 ec       	ldi	r26, 0xC9	; 201
    469e:	b5 e0       	ldi	r27, 0x05	; 5
    46a0:	9a 9f       	mul	r25, r26
    46a2:	f0 01       	movw	r30, r0
    46a4:	9b 9f       	mul	r25, r27
    46a6:	f0 0d       	add	r31, r0
    46a8:	11 24       	eor	r1, r1
    46aa:	e1 5a       	subi	r30, 0xA1	; 161
    46ac:	f7 4e       	sbci	r31, 0xE7	; 231
    46ae:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:130
  pattern[!ptrnBuffer].totalAcc = Wire.read();
    46b0:	80 e5       	ldi	r24, 0x50	; 80
    46b2:	92 e2       	ldi	r25, 0x22	; 34
    46b4:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    46b8:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    46bc:	19 27       	eor	r17, r25
    46be:	29 ec       	ldi	r18, 0xC9	; 201
    46c0:	35 e0       	ldi	r19, 0x05	; 5
    46c2:	12 9f       	mul	r17, r18
    46c4:	f0 01       	movw	r30, r0
    46c6:	13 9f       	mul	r17, r19
    46c8:	f0 0d       	add	r31, r0
    46ca:	11 24       	eor	r1, r1
    46cc:	e0 5a       	subi	r30, 0xA0	; 160
    46ce:	f7 4e       	sbci	r31, 0xE7	; 231
    46d0:	80 83       	st	Z, r24
    46d2:	48 e1       	ldi	r20, 0x18	; 24
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	5a 83       	std	Y+2, r21	; 0x02
    46d8:	49 83       	std	Y+1, r20	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:132 (discriminator 2)
  for(int a = 0; a < 24; a++){
    Wire.read();
    46da:	80 e5       	ldi	r24, 0x50	; 80
    46dc:	92 e2       	ldi	r25, 0x22	; 34
    46de:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    46e2:	89 81       	ldd	r24, Y+1	; 0x01
    46e4:	9a 81       	ldd	r25, Y+2	; 0x02
    46e6:	01 97       	sbiw	r24, 0x01	; 1
    46e8:	9a 83       	std	Y+2, r25	; 0x02
    46ea:	89 83       	std	Y+1, r24	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:131 (discriminator 2)
  prevFlam = pattern[!ptrnBuffer].flam = Wire.read();                                                            // [zabox] [1.027] flam
  pattern[!ptrnBuffer].extLength = Wire.read();
  pattern[!ptrnBuffer].groupPos = Wire.read();
  pattern[!ptrnBuffer].groupLength = Wire.read();
  pattern[!ptrnBuffer].totalAcc = Wire.read();
  for(int a = 0; a < 24; a++){
    46ec:	89 2b       	or	r24, r25
    46ee:	a9 f7       	brne	.-22     	; 0x46da <LoadPattern(unsigned char)+0x1ca>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:137
    Wire.read();
  }
  //EXT INST-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 2; nbrPage++){
      MIDI.read();
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_SETUP_OFFSET);
    46f0:	20 2f       	mov	r18, r16
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	a7 e0       	ldi	r26, 0x07	; 7
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <__umulhisi3>
    46fc:	6b 01       	movw	r12, r22
    46fe:	7c 01       	movw	r14, r24
    4700:	81 2c       	mov	r8, r1
    4702:	91 2c       	mov	r9, r1
    4704:	54 01       	movw	r10, r8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:138
    WireBeginTX(adress);
    4706:	a3 01       	movw	r20, r6
    4708:	92 01       	movw	r18, r4
    470a:	20 5c       	subi	r18, 0xC0	; 192
    470c:	3f 4f       	sbci	r19, 0xFF	; 255
    470e:	4f 4f       	sbci	r20, 0xFF	; 255
    4710:	5f 4f       	sbci	r21, 0xFF	; 255
    4712:	29 83       	std	Y+1, r18	; 0x01
    4714:	3a 83       	std	Y+2, r19	; 0x02
    4716:	4b 83       	std	Y+3, r20	; 0x03
    4718:	5c 83       	std	Y+4, r21	; 0x04
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:143
    Wire.endTransmission();
    Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes

    for (byte j = 0; j < MAX_PAGE_SIZE; j++){
      pattern[!ptrnBuffer].extNote[j + (MAX_PAGE_SIZE * nbrPage) ] = Wire.read();
    471a:	01 e0       	ldi	r16, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:136
  for(int a = 0; a < 24; a++){
    Wire.read();
  }
  //EXT INST-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 2; nbrPage++){
      MIDI.read();
    471c:	8b e1       	ldi	r24, 0x1B	; 27
    471e:	90 e2       	ldi	r25, 0x20	; 32
    4720:	0e 94 9d 42 	call	0x853a	; 0x853a <MIDI_Class::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:138
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_SETUP_OFFSET);
    WireBeginTX(adress);
    4724:	69 81       	ldd	r22, Y+1	; 0x01
    4726:	7a 81       	ldd	r23, Y+2	; 0x02
    4728:	8b 81       	ldd	r24, Y+3	; 0x03
    472a:	9c 81       	ldd	r25, Y+4	; 0x04
    472c:	68 0d       	add	r22, r8
    472e:	79 1d       	adc	r23, r9
    4730:	8a 1d       	adc	r24, r10
    4732:	9b 1d       	adc	r25, r11
    4734:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:139
    Wire.endTransmission();
    4738:	80 e5       	ldi	r24, 0x50	; 80
    473a:	92 e2       	ldi	r25, 0x22	; 34
    473c:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:140
    Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    4740:	40 e4       	ldi	r20, 0x40	; 64
    4742:	50 e0       	ldi	r21, 0x00	; 0
    4744:	60 e5       	ldi	r22, 0x50	; 80
    4746:	70 e0       	ldi	r23, 0x00	; 0
    4748:	80 e5       	ldi	r24, 0x50	; 80
    474a:	92 e2       	ldi	r25, 0x22	; 34
    474c:	0e 94 75 43 	call	0x86ea	; 0x86ea <TwoWire::requestFrom(int, int)>
    4750:	24 01       	movw	r4, r8
    4752:	35 01       	movw	r6, r10
    4754:	10 e4       	ldi	r17, 0x40	; 64
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:143 (discriminator 2)

    for (byte j = 0; j < MAX_PAGE_SIZE; j++){
      pattern[!ptrnBuffer].extNote[j + (MAX_PAGE_SIZE * nbrPage) ] = Wire.read();
    4756:	80 e5       	ldi	r24, 0x50	; 80
    4758:	92 e2       	ldi	r25, 0x22	; 34
    475a:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    475e:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    4762:	90 27       	eor	r25, r16
    4764:	49 ec       	ldi	r20, 0xC9	; 201
    4766:	55 e0       	ldi	r21, 0x05	; 5
    4768:	94 9f       	mul	r25, r20
    476a:	f0 01       	movw	r30, r0
    476c:	95 9f       	mul	r25, r21
    476e:	f0 0d       	add	r31, r0
    4770:	11 24       	eor	r1, r1
    4772:	e8 56       	subi	r30, 0x68	; 104
    4774:	fd 4e       	sbci	r31, 0xED	; 237
    4776:	e4 0d       	add	r30, r4
    4778:	f5 1d       	adc	r31, r5
    477a:	eb 5b       	subi	r30, 0xBB	; 187
    477c:	fa 4f       	sbci	r31, 0xFA	; 250
    477e:	80 83       	st	Z, r24
    4780:	11 50       	subi	r17, 0x01	; 1
    4782:	5f ef       	ldi	r21, 0xFF	; 255
    4784:	45 1a       	sub	r4, r21
    4786:	55 0a       	sbc	r5, r21
    4788:	65 0a       	sbc	r6, r21
    478a:	75 0a       	sbc	r7, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:142 (discriminator 2)
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_SETUP_OFFSET);
    WireBeginTX(adress);
    Wire.endTransmission();
    Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes

    for (byte j = 0; j < MAX_PAGE_SIZE; j++){
    478c:	11 11       	cpse	r17, r1
    478e:	e3 cf       	rjmp	.-58     	; 0x4756 <LoadPattern(unsigned char)+0x246>
    4790:	80 e4       	ldi	r24, 0x40	; 64
    4792:	88 0e       	add	r8, r24
    4794:	91 1c       	adc	r9, r1
    4796:	a1 1c       	adc	r10, r1
    4798:	b1 1c       	adc	r11, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:135 (discriminator 2)
  pattern[!ptrnBuffer].totalAcc = Wire.read();
  for(int a = 0; a < 24; a++){
    Wire.read();
  }
  //EXT INST-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 2; nbrPage++){
    479a:	90 e8       	ldi	r25, 0x80	; 128
    479c:	89 16       	cp	r8, r25
    479e:	91 04       	cpc	r9, r1
    47a0:	a1 04       	cpc	r10, r1
    47a2:	b1 04       	cpc	r11, r1
    47a4:	09 f0       	breq	.+2      	; 0x47a8 <LoadPattern(unsigned char)+0x298>
    47a6:	ba cf       	rjmp	.-140    	; 0x471c <LoadPattern(unsigned char)+0x20c>
    47a8:	a3 e0       	ldi	r26, 0x03	; 3
    47aa:	ca 0e       	add	r12, r26
    47ac:	d1 1c       	adc	r13, r1
    47ae:	e1 1c       	adc	r14, r1
    47b0:	f1 1c       	adc	r15, r1
    47b2:	26 01       	movw	r4, r12
    47b4:	37 01       	movw	r6, r14
    47b6:	26 e0       	ldi	r18, 0x06	; 6
    47b8:	44 0c       	add	r4, r4
    47ba:	55 1c       	adc	r5, r5
    47bc:	66 1c       	adc	r6, r6
    47be:	77 1c       	adc	r7, r7
    47c0:	2a 95       	dec	r18
    47c2:	d1 f7       	brne	.-12     	; 0x47b8 <LoadPattern(unsigned char)+0x2a8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:135
    47c4:	1a 82       	std	Y+2, r1	; 0x02
    47c6:	19 82       	std	Y+1, r1	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:155
    WireBeginTX(adress);
    Wire.endTransmission();
    Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    for (byte i = 0; i < 4; i++){//loop as many instrument for a page
      for (byte j = 0; j < NBR_STEP; j++){
        pattern[!ptrnBuffer].velocity[i + 4*nbrPage][j] = (Wire.read() & 0xFF);
    47c8:	cc 24       	eor	r12, r12
    47ca:	c3 94       	inc	r12
    47cc:	39 ec       	ldi	r19, 0xC9	; 201
    47ce:	a3 2e       	mov	r10, r19
    47d0:	35 e0       	ldi	r19, 0x05	; 5
    47d2:	b3 2e       	mov	r11, r19
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:148
      pattern[!ptrnBuffer].extNote[j + (MAX_PAGE_SIZE * nbrPage) ] = Wire.read();
    }
  }
  //VELOCITY-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 4; nbrPage++){
      MIDI.read();
    47d4:	8b e1       	ldi	r24, 0x1B	; 27
    47d6:	90 e2       	ldi	r25, 0x20	; 32
    47d8:	0e 94 9d 42 	call	0x853a	; 0x853a <MIDI_Class::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:150
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
    WireBeginTX(adress);
    47dc:	c3 01       	movw	r24, r6
    47de:	b2 01       	movw	r22, r4
    47e0:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:151
    Wire.endTransmission();
    47e4:	80 e5       	ldi	r24, 0x50	; 80
    47e6:	92 e2       	ldi	r25, 0x22	; 34
    47e8:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:152
    Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    47ec:	40 e4       	ldi	r20, 0x40	; 64
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	60 e5       	ldi	r22, 0x50	; 80
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	80 e5       	ldi	r24, 0x50	; 80
    47f6:	92 e2       	ldi	r25, 0x22	; 34
    47f8:	0e 94 75 43 	call	0x86ea	; 0x86ea <TwoWire::requestFrom(int, int)>
    47fc:	e9 80       	ldd	r14, Y+1	; 0x01
    47fe:	fa 80       	ldd	r15, Y+2	; 0x02
    4800:	94 e0       	ldi	r25, 0x04	; 4
    4802:	d9 2e       	mov	r13, r25
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:155
    for (byte i = 0; i < 4; i++){//loop as many instrument for a page
      for (byte j = 0; j < NBR_STEP; j++){
        pattern[!ptrnBuffer].velocity[i + 4*nbrPage][j] = (Wire.read() & 0xFF);
    4804:	10 e0       	ldi	r17, 0x00	; 0
    4806:	00 e0       	ldi	r16, 0x00	; 0
    4808:	47 01       	movw	r8, r14
    480a:	84 e0       	ldi	r24, 0x04	; 4
    480c:	88 0c       	add	r8, r8
    480e:	99 1c       	adc	r9, r9
    4810:	8a 95       	dec	r24
    4812:	e1 f7       	brne	.-8      	; 0x480c <LoadPattern(unsigned char)+0x2fc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:155 (discriminator 2)
    4814:	80 e5       	ldi	r24, 0x50	; 80
    4816:	92 e2       	ldi	r25, 0x22	; 34
    4818:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    481c:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    4820:	9c 25       	eor	r25, r12
    4822:	9a 9d       	mul	r25, r10
    4824:	f0 01       	movw	r30, r0
    4826:	9b 9d       	mul	r25, r11
    4828:	f0 0d       	add	r31, r0
    482a:	11 24       	eor	r1, r1
    482c:	e8 0d       	add	r30, r8
    482e:	f9 1d       	adc	r31, r9
    4830:	e0 0f       	add	r30, r16
    4832:	f1 1f       	adc	r31, r17
    4834:	e3 52       	subi	r30, 0x23	; 35
    4836:	f9 4e       	sbci	r31, 0xE9	; 233
    4838:	80 83       	st	Z, r24
    483a:	0f 5f       	subi	r16, 0xFF	; 255
    483c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:154 (discriminator 2)
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
    WireBeginTX(adress);
    Wire.endTransmission();
    Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    for (byte i = 0; i < 4; i++){//loop as many instrument for a page
      for (byte j = 0; j < NBR_STEP; j++){
    483e:	00 31       	cpi	r16, 0x10	; 16
    4840:	11 05       	cpc	r17, r1
    4842:	41 f7       	brne	.-48     	; 0x4814 <LoadPattern(unsigned char)+0x304>
    4844:	da 94       	dec	r13
    4846:	bf ef       	ldi	r27, 0xFF	; 255
    4848:	eb 1a       	sub	r14, r27
    484a:	fb 0a       	sbc	r15, r27
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:153 (discriminator 2)
      MIDI.read();
    adress = (unsigned long)(PTRN_OFFSET + (patternNbr * PTRN_SIZE) + (MAX_PAGE_SIZE * nbrPage) + PTRN_EXT_OFFSET);
    WireBeginTX(adress);
    Wire.endTransmission();
    Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    for (byte i = 0; i < 4; i++){//loop as many instrument for a page
    484c:	d1 10       	cpse	r13, r1
    484e:	da cf       	rjmp	.-76     	; 0x4804 <LoadPattern(unsigned char)+0x2f4>
    4850:	20 e4       	ldi	r18, 0x40	; 64
    4852:	42 0e       	add	r4, r18
    4854:	51 1c       	adc	r5, r1
    4856:	61 1c       	adc	r6, r1
    4858:	71 1c       	adc	r7, r1
    485a:	49 81       	ldd	r20, Y+1	; 0x01
    485c:	5a 81       	ldd	r21, Y+2	; 0x02
    485e:	4c 5f       	subi	r20, 0xFC	; 252
    4860:	5f 4f       	sbci	r21, 0xFF	; 255
    4862:	5a 83       	std	Y+2, r21	; 0x02
    4864:	49 83       	std	Y+1, r20	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:147 (discriminator 2)
    for (byte j = 0; j < MAX_PAGE_SIZE; j++){
      pattern[!ptrnBuffer].extNote[j + (MAX_PAGE_SIZE * nbrPage) ] = Wire.read();
    }
  }
  //VELOCITY-----------------------------------------------
  for(int nbrPage = 0; nbrPage < 4; nbrPage++){
    4866:	40 31       	cpi	r20, 0x10	; 16
    4868:	51 05       	cpc	r21, r1
    486a:	09 f0       	breq	.+2      	; 0x486e <LoadPattern(unsigned char)+0x35e>
    486c:	b3 cf       	rjmp	.-154    	; 0x47d4 <LoadPattern(unsigned char)+0x2c4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:159
      for (byte j = 0; j < NBR_STEP; j++){
        pattern[!ptrnBuffer].velocity[i + 4*nbrPage][j] = (Wire.read() & 0xFF);
      }
    }
  }
}
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
    4872:	0f 90       	pop	r0
    4874:	0f 90       	pop	r0
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	1f 91       	pop	r17
    487c:	0f 91       	pop	r16
    487e:	ff 90       	pop	r15
    4880:	ef 90       	pop	r14
    4882:	df 90       	pop	r13
    4884:	cf 90       	pop	r12
    4886:	bf 90       	pop	r11
    4888:	af 90       	pop	r10
    488a:	9f 90       	pop	r9
    488c:	8f 90       	pop	r8
    488e:	7f 90       	pop	r7
    4890:	6f 90       	pop	r6
    4892:	5f 90       	pop	r5
    4894:	4f 90       	pop	r4
    4896:	08 95       	ret

00004898 <LoadTrack(unsigned char)>:
_Z9LoadTrackh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:184

}

//Load track
void LoadTrack(byte trackNbr)
{
    4898:	4f 92       	push	r4
    489a:	5f 92       	push	r5
    489c:	6f 92       	push	r6
    489e:	7f 92       	push	r7
    48a0:	8f 92       	push	r8
    48a2:	9f 92       	push	r9
    48a4:	af 92       	push	r10
    48a6:	bf 92       	push	r11
    48a8:	cf 92       	push	r12
    48aa:	df 92       	push	r13
    48ac:	ef 92       	push	r14
    48ae:	ff 92       	push	r15
    48b0:	1f 93       	push	r17
    48b2:	cf 93       	push	r28
    48b4:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:187
  unsigned long adress;
  for(int nbrPage = 0; nbrPage < TRACK_SIZE/MAX_PAGE_SIZE; nbrPage++){
    adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	b0 e0       	ldi	r27, 0x00	; 0
    48ba:	a0 e0       	ldi	r26, 0x00	; 0
    48bc:	6c 01       	movw	r12, r24
    48be:	7d 01       	movw	r14, r26
    48c0:	8a e0       	ldi	r24, 0x0A	; 10
    48c2:	cc 0c       	add	r12, r12
    48c4:	dd 1c       	adc	r13, r13
    48c6:	ee 1c       	adc	r14, r14
    48c8:	ff 1c       	adc	r15, r15
    48ca:	8a 95       	dec	r24
    48cc:	d1 f7       	brne	.-12     	; 0x48c2 <LoadTrack(unsigned char)+0x2a>
    48ce:	80 ee       	ldi	r24, 0xE0	; 224
    48d0:	d8 0e       	add	r13, r24
    48d2:	e1 1c       	adc	r14, r1
    48d4:	f1 1c       	adc	r15, r1
    48d6:	81 2c       	mov	r8, r1
    48d8:	91 2c       	mov	r9, r1
    48da:	54 01       	movw	r10, r8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:193
    WireBeginTX(adress);
    Wire.endTransmission();
    if (adress > 65535) Wire.requestFrom(HRDW_ADDRESS_UP,MAX_PAGE_SIZE); //request of  64 bytes
    else Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
      track[trkBuffer].patternNbr[i + (MAX_PAGE_SIZE * nbrPage)] = (Wire.read() & 0xFF); 
    48dc:	c2 e0       	ldi	r28, 0x02	; 2
    48de:	d4 e0       	ldi	r29, 0x04	; 4
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:188
void LoadTrack(byte trackNbr)
{
  unsigned long adress;
  for(int nbrPage = 0; nbrPage < TRACK_SIZE/MAX_PAGE_SIZE; nbrPage++){
    adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
    WireBeginTX(adress);
    48e0:	c7 01       	movw	r24, r14
    48e2:	b6 01       	movw	r22, r12
    48e4:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:189
    Wire.endTransmission();
    48e8:	80 e5       	ldi	r24, 0x50	; 80
    48ea:	92 e2       	ldi	r25, 0x22	; 34
    48ec:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:190
    if (adress > 65535) Wire.requestFrom(HRDW_ADDRESS_UP,MAX_PAGE_SIZE); //request of  64 bytes
    48f0:	40 e4       	ldi	r20, 0x40	; 64
    48f2:	50 e0       	ldi	r21, 0x00	; 0
    48f4:	64 e5       	ldi	r22, 0x54	; 84
    48f6:	70 e0       	ldi	r23, 0x00	; 0
    48f8:	c1 14       	cp	r12, r1
    48fa:	d1 04       	cpc	r13, r1
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	e8 06       	cpc	r14, r24
    4900:	f1 04       	cpc	r15, r1
    4902:	10 f4       	brcc	.+4      	; 0x4908 <LoadTrack(unsigned char)+0x70>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:191
    else Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    4904:	60 e5       	ldi	r22, 0x50	; 80
    4906:	70 e0       	ldi	r23, 0x00	; 0
    4908:	80 e5       	ldi	r24, 0x50	; 80
    490a:	92 e2       	ldi	r25, 0x22	; 34
    490c:	0e 94 75 43 	call	0x86ea	; 0x86ea <TwoWire::requestFrom(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:187
//Load track
void LoadTrack(byte trackNbr)
{
  unsigned long adress;
  for(int nbrPage = 0; nbrPage < TRACK_SIZE/MAX_PAGE_SIZE; nbrPage++){
    adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
    4910:	24 01       	movw	r4, r8
    4912:	35 01       	movw	r6, r10
    4914:	10 e0       	ldi	r17, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:193 (discriminator 2)
    WireBeginTX(adress);
    Wire.endTransmission();
    if (adress > 65535) Wire.requestFrom(HRDW_ADDRESS_UP,MAX_PAGE_SIZE); //request of  64 bytes
    else Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
      track[trkBuffer].patternNbr[i + (MAX_PAGE_SIZE * nbrPage)] = (Wire.read() & 0xFF); 
    4916:	80 e5       	ldi	r24, 0x50	; 80
    4918:	92 e2       	ldi	r25, 0x22	; 34
    491a:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    491e:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <trkBuffer>
    4922:	9c 9f       	mul	r25, r28
    4924:	f0 01       	movw	r30, r0
    4926:	9d 9f       	mul	r25, r29
    4928:	f0 0d       	add	r31, r0
    492a:	11 24       	eor	r1, r1
    492c:	e9 56       	subi	r30, 0x69	; 105
    492e:	fb 4f       	sbci	r31, 0xFB	; 251
    4930:	df 01       	movw	r26, r30
    4932:	a4 0d       	add	r26, r4
    4934:	b5 1d       	adc	r27, r5
    4936:	12 96       	adiw	r26, 0x02	; 2
    4938:	8c 93       	st	X, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:192 (discriminator 2)
    adress = (unsigned long)(PTRN_OFFSET + (trackNbr * TRACK_SIZE) + (MAX_PAGE_SIZE * nbrPage) + TRACK_OFFSET);
    WireBeginTX(adress);
    Wire.endTransmission();
    if (adress > 65535) Wire.requestFrom(HRDW_ADDRESS_UP,MAX_PAGE_SIZE); //request of  64 bytes
    else Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
    493a:	1f 5f       	subi	r17, 0xFF	; 255
    493c:	8f ef       	ldi	r24, 0xFF	; 255
    493e:	48 1a       	sub	r4, r24
    4940:	58 0a       	sbc	r5, r24
    4942:	68 0a       	sbc	r6, r24
    4944:	78 0a       	sbc	r7, r24
    4946:	10 34       	cpi	r17, 0x40	; 64
    4948:	31 f7       	brne	.-52     	; 0x4916 <LoadTrack(unsigned char)+0x7e>
    494a:	80 e4       	ldi	r24, 0x40	; 64
    494c:	88 0e       	add	r8, r24
    494e:	91 1c       	adc	r9, r1
    4950:	a1 1c       	adc	r10, r1
    4952:	b1 1c       	adc	r11, r1
    4954:	80 e4       	ldi	r24, 0x40	; 64
    4956:	c8 0e       	add	r12, r24
    4958:	d1 1c       	adc	r13, r1
    495a:	e1 1c       	adc	r14, r1
    495c:	f1 1c       	adc	r15, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:186 (discriminator 2)

//Load track
void LoadTrack(byte trackNbr)
{
  unsigned long adress;
  for(int nbrPage = 0; nbrPage < TRACK_SIZE/MAX_PAGE_SIZE; nbrPage++){
    495e:	81 14       	cp	r8, r1
    4960:	84 e0       	ldi	r24, 0x04	; 4
    4962:	98 06       	cpc	r9, r24
    4964:	a1 04       	cpc	r10, r1
    4966:	b1 04       	cpc	r11, r1
    4968:	09 f0       	breq	.+2      	; 0x496c <LoadTrack(unsigned char)+0xd4>
    496a:	ba cf       	rjmp	.-140    	; 0x48e0 <LoadTrack(unsigned char)+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:197
    for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
      track[trkBuffer].patternNbr[i + (MAX_PAGE_SIZE * nbrPage)] = (Wire.read() & 0xFF); 
    }
  }
  byte lowbyte = (byte)track[trkBuffer].patternNbr[1022];
  byte highbyte = (byte)track[trkBuffer].patternNbr[1023];
    496c:	df 01       	movw	r26, r30
    496e:	af 5f       	subi	r26, 0xFF	; 255
    4970:	bb 4f       	sbci	r27, 0xFB	; 251
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:198
  track[trkBuffer].length =  (unsigned long)(lowbyte | highbyte << 8);
    4972:	8c 91       	ld	r24, X
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:196
    else Wire.requestFrom(HRDW_ADDRESS,MAX_PAGE_SIZE); //request of  64 bytes
    for (byte i = 0; i < MAX_PAGE_SIZE; i++){//loop as many instrument for a page
      track[trkBuffer].patternNbr[i + (MAX_PAGE_SIZE * nbrPage)] = (Wire.read() & 0xFF); 
    }
  }
  byte lowbyte = (byte)track[trkBuffer].patternNbr[1022];
    4974:	11 97       	sbiw	r26, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:198
  byte highbyte = (byte)track[trkBuffer].patternNbr[1023];
  track[trkBuffer].length =  (unsigned long)(lowbyte | highbyte << 8);
    4976:	9c 91       	ld	r25, X
    4978:	89 27       	eor	r24, r25
    497a:	98 27       	eor	r25, r24
    497c:	89 27       	eor	r24, r25
    497e:	91 83       	std	Z+1, r25	; 0x01
    4980:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:199
}
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	1f 91       	pop	r17
    4988:	ff 90       	pop	r15
    498a:	ef 90       	pop	r14
    498c:	df 90       	pop	r13
    498e:	cf 90       	pop	r12
    4990:	bf 90       	pop	r11
    4992:	af 90       	pop	r10
    4994:	9f 90       	pop	r9
    4996:	8f 90       	pop	r8
    4998:	7f 90       	pop	r7
    499a:	6f 90       	pop	r6
    499c:	5f 90       	pop	r5
    499e:	4f 90       	pop	r4
    49a0:	08 95       	ret

000049a2 <LoadSeqSetup()>:
_Z12LoadSeqSetupv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:220

//Load Setup
void LoadSeqSetup()
{
  unsigned long adress = (unsigned long)(OFFSET_SETUP);
  WireBeginTX(adress); 
    49a2:	60 e0       	ldi	r22, 0x00	; 0
    49a4:	70 e2       	ldi	r23, 0x20	; 32
    49a6:	81 e0       	ldi	r24, 0x01	; 1
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:221
  Wire.endTransmission();
    49ae:	80 e5       	ldi	r24, 0x50	; 80
    49b0:	92 e2       	ldi	r25, 0x22	; 34
    49b2:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:222
  Wire.requestFrom(HRDW_ADDRESS_UP,SETUP_SIZE); //
    49b6:	40 e4       	ldi	r20, 0x40	; 64
    49b8:	50 e0       	ldi	r21, 0x00	; 0
    49ba:	64 e5       	ldi	r22, 0x54	; 84
    49bc:	70 e0       	ldi	r23, 0x00	; 0
    49be:	80 e5       	ldi	r24, 0x50	; 80
    49c0:	92 e2       	ldi	r25, 0x22	; 34
    49c2:	0e 94 75 43 	call	0x86ea	; 0x86ea <TwoWire::requestFrom(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:223
  seq.sync = (Wire.read() & 0xFF);
    49c6:	80 e5       	ldi	r24, 0x50	; 80
    49c8:	92 e2       	ldi	r25, 0x22	; 34
    49ca:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:224
  seq.sync = constrain(seq.sync, 0, 2);                                     // [zabox] [1.028] + expander mode
    49ce:	99 27       	eor	r25, r25
    49d0:	83 30       	cpi	r24, 0x03	; 3
    49d2:	91 05       	cpc	r25, r1
    49d4:	14 f0       	brlt	.+4      	; 0x49da <LoadSeqSetup()+0x38>
    49d6:	82 e0       	ldi	r24, 0x02	; 2
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	80 93 40 1e 	sts	0x1E40, r24	; 0x801e40 <seq+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:225
  seq.defaultBpm = (Wire.read() & 0xFF);
    49de:	80 e5       	ldi	r24, 0x50	; 80
    49e0:	92 e2       	ldi	r25, 0x22	; 34
    49e2:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:226
  seq.defaultBpm = constrain(seq.defaultBpm, MIN_BPM, MAX_BPM);
    49e6:	99 27       	eor	r25, r25
    49e8:	8b 3f       	cpi	r24, 0xFB	; 251
    49ea:	91 05       	cpc	r25, r1
    49ec:	10 f0       	brcs	.+4      	; 0x49f2 <LoadSeqSetup()+0x50>
    49ee:	8a ef       	ldi	r24, 0xFA	; 250
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	8e 31       	cpi	r24, 0x1E	; 30
    49f4:	91 05       	cpc	r25, r1
    49f6:	10 f4       	brcc	.+4      	; 0x49fc <LoadSeqSetup()+0x5a>
    49f8:	8e e1       	ldi	r24, 0x1E	; 30
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	90 93 47 1e 	sts	0x1E47, r25	; 0x801e47 <seq+0x8>
    4a00:	80 93 46 1e 	sts	0x1E46, r24	; 0x801e46 <seq+0x7>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:227
  seq.TXchannel = (Wire.read() & 0xFF);
    4a04:	80 e5       	ldi	r24, 0x50	; 80
    4a06:	92 e2       	ldi	r25, 0x22	; 34
    4a08:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:228
  seq.TXchannel = constrain(seq.TXchannel, 1 ,16);
    4a0c:	88 23       	and	r24, r24
    4a0e:	59 f1       	breq	.+86     	; 0x4a66 <LoadSeqSetup()+0xc4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:228 (discriminator 1)
    4a10:	99 27       	eor	r25, r25
    4a12:	81 31       	cpi	r24, 0x11	; 17
    4a14:	91 05       	cpc	r25, r1
    4a16:	14 f0       	brlt	.+4      	; 0x4a1c <LoadSeqSetup()+0x7a>
    4a18:	80 e1       	ldi	r24, 0x10	; 16
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:228 (discriminator 4)
    4a1c:	80 93 42 1e 	sts	0x1E42, r24	; 0x801e42 <seq+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:229 (discriminator 4)
  seq.RXchannel = (Wire.read() & 0xFF);
    4a20:	80 e5       	ldi	r24, 0x50	; 80
    4a22:	92 e2       	ldi	r25, 0x22	; 34
    4a24:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:230 (discriminator 4)
  seq.RXchannel = constrain(seq.RXchannel, 1 ,16);
    4a28:	88 23       	and	r24, r24
    4a2a:	01 f1       	breq	.+64     	; 0x4a6c <LoadSeqSetup()+0xca>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:230 (discriminator 1)
    4a2c:	99 27       	eor	r25, r25
    4a2e:	81 31       	cpi	r24, 0x11	; 17
    4a30:	91 05       	cpc	r25, r1
    4a32:	14 f0       	brlt	.+4      	; 0x4a38 <LoadSeqSetup()+0x96>
    4a34:	80 e1       	ldi	r24, 0x10	; 16
    4a36:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:230 (discriminator 4)
    4a38:	80 93 43 1e 	sts	0x1E43, r24	; 0x801e43 <seq+0x4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:231 (discriminator 4)
  seq.ptrnChangeSync = (Wire.read() & 0xFF);
    4a3c:	80 e5       	ldi	r24, 0x50	; 80
    4a3e:	92 e2       	ldi	r25, 0x22	; 34
    4a40:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    4a44:	91 e0       	ldi	r25, 0x01	; 1
    4a46:	81 11       	cpse	r24, r1
    4a48:	01 c0       	rjmp	.+2      	; 0x4a4c <LoadSeqSetup()+0xaa>
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	90 93 3f 1e 	sts	0x1E3F, r25	; 0x801e3f <seq>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:233 (discriminator 4)
  seq.ptrnChangeSync = constrain(seq.ptrnChangeSync, 0, 1);
  seq.muteModeHH = (Wire.read() & 0xFF);
    4a50:	80 e5       	ldi	r24, 0x50	; 80
    4a52:	92 e2       	ldi	r25, 0x22	; 34
    4a54:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
    4a58:	91 e0       	ldi	r25, 0x01	; 1
    4a5a:	81 11       	cpse	r24, r1
    4a5c:	01 c0       	rjmp	.+2      	; 0x4a60 <LoadSeqSetup()+0xbe>
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	90 93 4c 1e 	sts	0x1E4C, r25	; 0x801e4c <seq+0xd>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:235 (discriminator 4)
  seq.muteModeHH = constrain(seq.muteModeHH, 0, 1);                       // [zabox]
}
    4a64:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:228
  seq.sync = (Wire.read() & 0xFF);
  seq.sync = constrain(seq.sync, 0, 2);                                     // [zabox] [1.028] + expander mode
  seq.defaultBpm = (Wire.read() & 0xFF);
  seq.defaultBpm = constrain(seq.defaultBpm, MIN_BPM, MAX_BPM);
  seq.TXchannel = (Wire.read() & 0xFF);
  seq.TXchannel = constrain(seq.TXchannel, 1 ,16);
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	d8 cf       	rjmp	.-80     	; 0x4a1c <LoadSeqSetup()+0x7a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:230
  seq.RXchannel = (Wire.read() & 0xFF);
  seq.RXchannel = constrain(seq.RXchannel, 1 ,16);
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	e3 cf       	rjmp	.-58     	; 0x4a38 <LoadSeqSetup()+0x96>

00004a72 <InitSeq()>:
_Z7InitSeqv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:9
//-------------------------------------------------

/////////////////////Function//////////////////////
//Initialyse the sequencer before to run
void InitSeq()
{
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:10
  LoadSeqSetup();
    4a76:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <LoadSeqSetup()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:11
  ppqn = 0;
    4a7a:	10 92 3e 1e 	sts	0x1E3E, r1	; 0x801e3e <ppqn>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:12
  stepCount = 0;
    4a7e:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <stepCount+0x1>
    4a82:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <stepCount>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:13
  seq.configPage = 0;
    4a86:	cf e3       	ldi	r28, 0x3F	; 63
    4a88:	de e1       	ldi	r29, 0x1E	; 30
    4a8a:	1a 86       	std	Y+10, r1	; 0x0a
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:14
  seq.configMode = FALSE;
    4a8c:	1b 86       	std	Y+11, r1	; 0x0b
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:15
  randomSeed(analogRead(0));
    4a8e:	80 e0       	ldi	r24, 0x00	; 0
    4a90:	0e 94 1c 4c 	call	0x9838	; 0x9838 <analogRead>
    4a94:	bc 01       	movw	r22, r24
    4a96:	99 0f       	add	r25, r25
    4a98:	88 0b       	sbc	r24, r24
    4a9a:	99 0b       	sbc	r25, r25
    4a9c:	0e 94 36 4a 	call	0x946c	; 0x946c <randomSeed(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:16
  seq.dir = FORWARD;
    4aa0:	19 86       	std	Y+9, r1	; 0x09
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:17
  seq.bpm = seq.defaultBpm;
    4aa2:	8f 81       	ldd	r24, Y+7	; 0x07
    4aa4:	98 85       	ldd	r25, Y+8	; 0x08
    4aa6:	9e 83       	std	Y+6, r25	; 0x06
    4aa8:	8d 83       	std	Y+5, r24	; 0x05
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:18
  SetSeqSync();                               // [zabox] [1.028] moved
    4aaa:	0e 94 c5 1a 	call	0x358a	; 0x358a <SetSeqSync()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:19
  seq.syncChanged = FALSE;
    4aae:	1a 82       	std	Y+2, r1	; 0x02
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/SeqFunc.ino:20
}
    4ab0:	df 91       	pop	r29
    4ab2:	cf 91       	pop	r28
    4ab4:	08 95       	ret

00004ab6 <LoadPatternGroup(unsigned char, unsigned char)>:
_Z16LoadPatternGrouphh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:271
  }
}

//Load pattern group type => POSITION = 0 or LENGTH = 1
byte LoadPatternGroup(byte patternNum, byte type)
{
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	46 2f       	mov	r20, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:272
  unsigned long adress = (unsigned long)(PTRN_OFFSET + (patternNum * PTRN_SIZE) + OFFSET_GROUP + type);
    4abc:	28 2f       	mov	r18, r24
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	a0 ec       	ldi	r26, 0xC0	; 192
    4ac2:	b1 e0       	ldi	r27, 0x01	; 1
    4ac4:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <__umulhisi3>
    4ac8:	8b 01       	movw	r16, r22
    4aca:	9c 01       	movw	r18, r24
    4acc:	84 2f       	mov	r24, r20
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	b0 e0       	ldi	r27, 0x00	; 0
    4ad2:	a0 e0       	ldi	r26, 0x00	; 0
    4ad4:	85 96       	adiw	r24, 0x25	; 37
    4ad6:	a1 1d       	adc	r26, r1
    4ad8:	b1 1d       	adc	r27, r1
    4ada:	bc 01       	movw	r22, r24
    4adc:	cd 01       	movw	r24, r26
    4ade:	60 0f       	add	r22, r16
    4ae0:	71 1f       	adc	r23, r17
    4ae2:	82 1f       	adc	r24, r18
    4ae4:	93 1f       	adc	r25, r19
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:273
  WireBeginTX(adress);
    4ae6:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <WireBeginTX(unsigned long)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:274
  Wire.endTransmission();
    4aea:	80 e5       	ldi	r24, 0x50	; 80
    4aec:	92 e2       	ldi	r25, 0x22	; 34
    4aee:	0e 94 95 43 	call	0x872a	; 0x872a <TwoWire::endTransmission()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:275
  Wire.requestFrom(HRDW_ADDRESS,(unsigned long)(1)); //
    4af2:	41 e0       	ldi	r20, 0x01	; 1
    4af4:	50 e0       	ldi	r21, 0x00	; 0
    4af6:	60 e5       	ldi	r22, 0x50	; 80
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	80 e5       	ldi	r24, 0x50	; 80
    4afc:	92 e2       	ldi	r25, 0x22	; 34
    4afe:	0e 94 75 43 	call	0x86ea	; 0x86ea <TwoWire::requestFrom(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:276
  byte data = (Wire.read() & 0xFF);
    4b02:	80 e5       	ldi	r24, 0x50	; 80
    4b04:	92 e2       	ldi	r25, 0x22	; 34
    4b06:	0e 94 df 42 	call	0x85be	; 0x85be <TwoWire::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/EEprom.ino:278
  return data;
}
    4b0a:	1f 91       	pop	r17
    4b0c:	0f 91       	pop	r16
    4b0e:	08 95       	ret

00004b10 <LcdPrintScale()>:
_Z13LcdPrintScalev():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:249
}

//print special character for scale moniotring----------------
void LcdPrintScale()
{
  switch (pattern[ptrnBuffer].scale){
    4b10:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    4b14:	89 ec       	ldi	r24, 0xC9	; 201
    4b16:	95 e0       	ldi	r25, 0x05	; 5
    4b18:	28 9f       	mul	r18, r24
    4b1a:	f0 01       	movw	r30, r0
    4b1c:	29 9f       	mul	r18, r25
    4b1e:	f0 0d       	add	r31, r0
    4b20:	11 24       	eor	r1, r1
    4b22:	e7 56       	subi	r30, 0x67	; 103
    4b24:	f9 4e       	sbci	r31, 0xE9	; 233
    4b26:	80 81       	ld	r24, Z
    4b28:	80 31       	cpi	r24, 0x10	; 16
    4b2a:	99 f0       	breq	.+38     	; 0x4b52 <LcdPrintScale()+0x42>
    4b2c:	18 f4       	brcc	.+6      	; 0x4b34 <LcdPrintScale()+0x24>
    4b2e:	8c 30       	cpi	r24, 0x0C	; 12
    4b30:	31 f0       	breq	.+12     	; 0x4b3e <LcdPrintScale()+0x2e>
    4b32:	08 95       	ret
    4b34:	88 31       	cpi	r24, 0x18	; 24
    4b36:	c9 f0       	breq	.+50     	; 0x4b6a <LcdPrintScale()+0x5a>
    4b38:	80 32       	cpi	r24, 0x20	; 32
    4b3a:	f1 f0       	breq	.+60     	; 0x4b78 <LcdPrintScale()+0x68>
    4b3c:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:251
  case SCALE_32:
    lcd.write(byte(0));//1/
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	8e e2       	ldi	r24, 0x2E	; 46
    4b42:	94 e0       	ldi	r25, 0x04	; 4
    4b44:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <LiquidCrystal::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:252
    lcd.write(byte(4));//32
    4b48:	64 e0       	ldi	r22, 0x04	; 4
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:266
    lcd.write(byte(1));//16
    break;
  case  SCALE_8t:
    lcd.write(byte(0));//1/
    lcd.write(byte(3));//8
    lcd.write(byte(2));//t
    4b4a:	8e e2       	ldi	r24, 0x2E	; 46
    4b4c:	94 e0       	ldi	r25, 0x04	; 4
    4b4e:	0c 94 53 47 	jmp	0x8ea6	; 0x8ea6 <LiquidCrystal::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:255
  case SCALE_32:
    lcd.write(byte(0));//1/
    lcd.write(byte(4));//32
    break;
  case  SCALE_16t:
    lcd.write(byte(0));//1/
    4b52:	60 e0       	ldi	r22, 0x00	; 0
    4b54:	8e e2       	ldi	r24, 0x2E	; 46
    4b56:	94 e0       	ldi	r25, 0x04	; 4
    4b58:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <LiquidCrystal::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:256
    lcd.write(byte(1));//16
    4b5c:	61 e0       	ldi	r22, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:265
    lcd.write(byte(0));//1/
    lcd.write(byte(1));//16
    break;
  case  SCALE_8t:
    lcd.write(byte(0));//1/
    lcd.write(byte(3));//8
    4b5e:	8e e2       	ldi	r24, 0x2E	; 46
    4b60:	94 e0       	ldi	r25, 0x04	; 4
    4b62:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <LiquidCrystal::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:266
    lcd.write(byte(2));//t
    4b66:	62 e0       	ldi	r22, 0x02	; 2
    4b68:	f0 cf       	rjmp	.-32     	; 0x4b4a <LcdPrintScale()+0x3a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:260
    lcd.write(byte(0));//1/
    lcd.write(byte(1));//16
    lcd.write(byte(2));//t
    break;
  case  SCALE_16:
    lcd.write(byte(0));//1/
    4b6a:	60 e0       	ldi	r22, 0x00	; 0
    4b6c:	8e e2       	ldi	r24, 0x2E	; 46
    4b6e:	94 e0       	ldi	r25, 0x04	; 4
    4b70:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <LiquidCrystal::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:261
    lcd.write(byte(1));//16
    4b74:	61 e0       	ldi	r22, 0x01	; 1
    4b76:	e9 cf       	rjmp	.-46     	; 0x4b4a <LcdPrintScale()+0x3a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:264
    break;
  case  SCALE_8t:
    lcd.write(byte(0));//1/
    4b78:	60 e0       	ldi	r22, 0x00	; 0
    4b7a:	8e e2       	ldi	r24, 0x2E	; 46
    4b7c:	94 e0       	ldi	r25, 0x04	; 4
    4b7e:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <LiquidCrystal::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:265
    lcd.write(byte(3));//8
    4b82:	63 e0       	ldi	r22, 0x03	; 3
    4b84:	ec cf       	rjmp	.-40     	; 0x4b5e <LcdPrintScale()+0x4e>

00004b86 <LcdPrintTempo()>:
_Z13LcdPrintTempov():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:274
}

//Print tempo---------------------------------------------------------
void LcdPrintTempo()
{
  lcd.write(byte(5));
    4b86:	65 e0       	ldi	r22, 0x05	; 5
    4b88:	8e e2       	ldi	r24, 0x2E	; 46
    4b8a:	94 e0       	ldi	r25, 0x04	; 4
    4b8c:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <LiquidCrystal::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:275
  lcd.print("-");
    4b90:	62 e7       	ldi	r22, 0x72	; 114
    4b92:	72 e0       	ldi	r23, 0x02	; 2
    4b94:	8e e2       	ldi	r24, 0x2E	; 46
    4b96:	94 e0       	ldi	r25, 0x04	; 4
    4b98:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:276
  if (seq.sync == MASTER)lcd.print(seq.bpm);
    4b9c:	80 91 40 1e 	lds	r24, 0x1E40	; 0x801e40 <seq+0x1>
    4ba0:	81 11       	cpse	r24, r1
    4ba2:	0a c0       	rjmp	.+20     	; 0x4bb8 <LcdPrintTempo()+0x32>
    4ba4:	60 91 44 1e 	lds	r22, 0x1E44	; 0x801e44 <seq+0x5>
    4ba8:	70 91 45 1e 	lds	r23, 0x1E45	; 0x801e45 <seq+0x6>
    4bac:	4a e0       	ldi	r20, 0x0A	; 10
    4bae:	50 e0       	ldi	r21, 0x00	; 0
    4bb0:	8e e2       	ldi	r24, 0x2E	; 46
    4bb2:	94 e0       	ldi	r25, 0x04	; 4
    4bb4:	0c 94 30 4a 	jmp	0x9460	; 0x9460 <Print::print(unsigned int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:278
  else {
    lcd.print((char)219);
    4bb8:	6b ed       	ldi	r22, 0xDB	; 219
    4bba:	8e e2       	ldi	r24, 0x2E	; 46
    4bbc:	94 e0       	ldi	r25, 0x04	; 4
    4bbe:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:279
    lcd.print((char)219);
    4bc2:	6b ed       	ldi	r22, 0xDB	; 219
    4bc4:	8e e2       	ldi	r24, 0x2E	; 46
    4bc6:	94 e0       	ldi	r25, 0x04	; 4
    4bc8:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:280
    lcd.print((char)219);
    4bcc:	6b ed       	ldi	r22, 0xDB	; 219
    4bce:	8e e2       	ldi	r24, 0x2E	; 46
    4bd0:	94 e0       	ldi	r25, 0x04	; 4
    4bd2:	0c 94 7a 49 	jmp	0x92f4	; 0x92f4 <Print::print(char)>

00004bd6 <LcdUpdate()>:
_Z9LcdUpdatev():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:11
#include "string.h"

/////////////////////Function//////////////////////
//Initialise IO PORT and libraries
void LcdUpdate()
{
    4bd6:	ff 92       	push	r15
    4bd8:	0f 93       	push	r16
    4bda:	1f 93       	push	r17
    4bdc:	cf 93       	push	r28
    4bde:	df 93       	push	r29
    4be0:	00 d0       	rcall	.+0      	; 0x4be2 <LcdUpdate()+0xc>
    4be2:	00 d0       	rcall	.+0      	; 0x4be4 <LcdUpdate()+0xe>
    4be4:	1f 92       	push	r1
    4be6:	cd b7       	in	r28, 0x3d	; 61
    4be8:	de b7       	in	r29, 0x3e	; 62
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:14
  static byte previousMode;
  //display tempo
  if (tempoBtn.pressed) {                                                         // [1.028] 
    4bea:	80 91 02 1f 	lds	r24, 0x1F02	; 0x801f02 <tempoBtn+0x2>
    4bee:	88 23       	and	r24, r24
    4bf0:	b1 f0       	breq	.+44     	; 0x4c1e <LcdUpdate()+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:15
    if(curSeqMode != PTRN_PLAY && !shiftBtn && !seq.configMode) {                 // + !seq.configMode
    4bf2:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    4bf6:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    4bfa:	02 97       	sbiw	r24, 0x02	; 2
    4bfc:	81 f0       	breq	.+32     	; 0x4c1e <LcdUpdate()+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:15 (discriminator 1)
    4bfe:	80 91 7a 1e 	lds	r24, 0x1E7A	; 0x801e7a <shiftBtn>
    4c02:	81 11       	cpse	r24, r1
    4c04:	0c c0       	rjmp	.+24     	; 0x4c1e <LcdUpdate()+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:15 (discriminator 2)
    4c06:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    4c0a:	81 11       	cpse	r24, r1
    4c0c:	08 c0       	rjmp	.+16     	; 0x4c1e <LcdUpdate()+0x48>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:16
        lcd.setCursor(11,1);
    4c0e:	41 e0       	ldi	r20, 0x01	; 1
    4c10:	6b e0       	ldi	r22, 0x0B	; 11
    4c12:	8e e2       	ldi	r24, 0x2E	; 46
    4c14:	94 e0       	ldi	r25, 0x04	; 4
    4c16:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:17
        LcdPrintTempo();
    4c1a:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LcdPrintTempo()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:24
  }
  //display total  accent
  /*if (enterBtn.pressed && curSeqMode == PTRN_PLAY){
   LcdPrintTotalAcc();
   }*/
  if(needLcdUpdate){
    4c1e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <needLcdUpdate>
    4c22:	88 23       	and	r24, r24
    4c24:	a1 f0       	breq	.+40     	; 0x4c4e <LcdUpdate()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:26
    
    needLcdUpdate = FALSE;
    4c26:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:27
    if (seq.configMode)
    4c2a:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    4c2e:	88 23       	and	r24, r24
    4c30:	09 f4       	brne	.+2      	; 0x4c34 <LcdUpdate()+0x5e>
    4c32:	f8 c0       	rjmp	.+496    	; 0x4e24 <LcdUpdate()+0x24e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:29
    {
      lcd.setCursor(0,0);
    4c34:	40 e0       	ldi	r20, 0x00	; 0
    4c36:	60 e0       	ldi	r22, 0x00	; 0
    4c38:	8e e2       	ldi	r24, 0x2E	; 46
    4c3a:	94 e0       	ldi	r25, 0x04	; 4
    4c3c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:30
      switch (seq.configPage){
    4c40:	80 91 49 1e 	lds	r24, 0x1E49	; 0x801e49 <seq+0xa>
    4c44:	81 30       	cpi	r24, 0x01	; 1
    4c46:	71 f0       	breq	.+28     	; 0x4c64 <LcdUpdate()+0x8e>
    4c48:	82 30       	cpi	r24, 0x02	; 2
    4c4a:	09 f4       	brne	.+2      	; 0x4c4e <LcdUpdate()+0x78>
    4c4c:	78 c0       	rjmp	.+240    	; 0x4d3e <LcdUpdate()+0x168>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:238
         previousMode = TRACK_PLAY;
        break;
      }
    }
  }
}
    4c4e:	0f 90       	pop	r0
    4c50:	0f 90       	pop	r0
    4c52:	0f 90       	pop	r0
    4c54:	0f 90       	pop	r0
    4c56:	0f 90       	pop	r0
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	1f 91       	pop	r17
    4c5e:	0f 91       	pop	r16
    4c60:	ff 90       	pop	r15
    4c62:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:32
    if (seq.configMode)
    {
      lcd.setCursor(0,0);
      switch (seq.configPage){
      case 1:// first page
        lcd.print("syn bpm mTX mRX ");
    4c64:	67 eb       	ldi	r22, 0xB7	; 183
    4c66:	72 e0       	ldi	r23, 0x02	; 2
    4c68:	8e e2       	ldi	r24, 0x2E	; 46
    4c6a:	94 e0       	ldi	r25, 0x04	; 4
    4c6c:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:33
        lcd.setCursor(cursorPos[curIndex],0);
    4c70:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <curIndex>
    4c74:	f0 e0       	ldi	r31, 0x00	; 0
    4c76:	e6 58       	subi	r30, 0x86	; 134
    4c78:	fe 4f       	sbci	r31, 0xFE	; 254
    4c7a:	40 e0       	ldi	r20, 0x00	; 0
    4c7c:	60 81       	ld	r22, Z
    4c7e:	8e e2       	ldi	r24, 0x2E	; 46
    4c80:	94 e0       	ldi	r25, 0x04	; 4
    4c82:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:34
        lcd.print(letterUpConfPage1[curIndex]);
    4c86:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <curIndex>
    4c8a:	f0 e0       	ldi	r31, 0x00	; 0
    4c8c:	ee 0f       	add	r30, r30
    4c8e:	ff 1f       	adc	r31, r31
    4c90:	ee 59       	subi	r30, 0x9E	; 158
    4c92:	fe 4f       	sbci	r31, 0xFE	; 254
    4c94:	60 81       	ld	r22, Z
    4c96:	71 81       	ldd	r23, Z+1	; 0x01
    4c98:	8e e2       	ldi	r24, 0x2E	; 46
    4c9a:	94 e0       	ldi	r25, 0x04	; 4
    4c9c:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:35
        lcd.setCursor(0,1);
    4ca0:	41 e0       	ldi	r20, 0x01	; 1
    4ca2:	60 e0       	ldi	r22, 0x00	; 0
    4ca4:	8e e2       	ldi	r24, 0x2E	; 46
    4ca6:	94 e0       	ldi	r25, 0x04	; 4
    4ca8:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:36
        LcdClearLine();
    4cac:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:37
        lcd.setCursor(0,1);
    4cb0:	41 e0       	ldi	r20, 0x01	; 1
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	8e e2       	ldi	r24, 0x2E	; 46
    4cb6:	94 e0       	ldi	r25, 0x04	; 4
    4cb8:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:39
        char  sync[2];
        strcpy_P(sync, (char*)pgm_read_word(&(nameSync[seq.sync])));
    4cbc:	e0 91 40 1e 	lds	r30, 0x1E40	; 0x801e40 <seq+0x1>
    4cc0:	f0 e0       	ldi	r31, 0x00	; 0
    4cc2:	ee 0f       	add	r30, r30
    4cc4:	ff 1f       	adc	r31, r31
    4cc6:	e4 52       	subi	r30, 0x24	; 36
    4cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cca:	65 91       	lpm	r22, Z+
    4ccc:	74 91       	lpm	r23, Z
    4cce:	ce 01       	movw	r24, r28
    4cd0:	01 96       	adiw	r24, 0x01	; 1
    4cd2:	0e 94 1f 50 	call	0xa03e	; 0xa03e <strcpy_P>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:40
        lcd.print(sync);
    4cd6:	be 01       	movw	r22, r28
    4cd8:	6f 5f       	subi	r22, 0xFF	; 255
    4cda:	7f 4f       	sbci	r23, 0xFF	; 255
    4cdc:	8e e2       	ldi	r24, 0x2E	; 46
    4cde:	94 e0       	ldi	r25, 0x04	; 4
    4ce0:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:41
        lcd.setCursor(4,1);
    4ce4:	41 e0       	ldi	r20, 0x01	; 1
    4ce6:	64 e0       	ldi	r22, 0x04	; 4
    4ce8:	8e e2       	ldi	r24, 0x2E	; 46
    4cea:	94 e0       	ldi	r25, 0x04	; 4
    4cec:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:42
        lcd.print(seq.defaultBpm);
    4cf0:	60 91 46 1e 	lds	r22, 0x1E46	; 0x801e46 <seq+0x7>
    4cf4:	70 91 47 1e 	lds	r23, 0x1E47	; 0x801e47 <seq+0x8>
    4cf8:	4a e0       	ldi	r20, 0x0A	; 10
    4cfa:	50 e0       	ldi	r21, 0x00	; 0
    4cfc:	8e e2       	ldi	r24, 0x2E	; 46
    4cfe:	94 e0       	ldi	r25, 0x04	; 4
    4d00:	0e 94 30 4a 	call	0x9460	; 0x9460 <Print::print(unsigned int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:43
        lcd.setCursor(9,1);
    4d04:	41 e0       	ldi	r20, 0x01	; 1
    4d06:	69 e0       	ldi	r22, 0x09	; 9
    4d08:	8e e2       	ldi	r24, 0x2E	; 46
    4d0a:	94 e0       	ldi	r25, 0x04	; 4
    4d0c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:44
        lcd.print(seq.TXchannel);
    4d10:	4a e0       	ldi	r20, 0x0A	; 10
    4d12:	50 e0       	ldi	r21, 0x00	; 0
    4d14:	60 91 42 1e 	lds	r22, 0x1E42	; 0x801e42 <seq+0x3>
    4d18:	8e e2       	ldi	r24, 0x2E	; 46
    4d1a:	94 e0       	ldi	r25, 0x04	; 4
    4d1c:	0e 94 29 4a 	call	0x9452	; 0x9452 <Print::print(unsigned char, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:45
        lcd.setCursor(13,1);
    4d20:	41 e0       	ldi	r20, 0x01	; 1
    4d22:	6d e0       	ldi	r22, 0x0D	; 13
    4d24:	8e e2       	ldi	r24, 0x2E	; 46
    4d26:	94 e0       	ldi	r25, 0x04	; 4
    4d28:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:46
        lcd.print(seq.RXchannel);
    4d2c:	4a e0       	ldi	r20, 0x0A	; 10
    4d2e:	50 e0       	ldi	r21, 0x00	; 0
    4d30:	60 91 43 1e 	lds	r22, 0x1E43	; 0x801e43 <seq+0x4>
    4d34:	8e e2       	ldi	r24, 0x2E	; 46
    4d36:	94 e0       	ldi	r25, 0x04	; 4
    4d38:	0e 94 29 4a 	call	0x9452	; 0x9452 <Print::print(unsigned char, int)>
    4d3c:	88 cf       	rjmp	.-240    	; 0x4c4e <LcdUpdate()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:49
        break;
      case 2:// second page
        lcd.print("pCh mte nc. nc. ");                             // [zabox]
    4d3e:	68 ec       	ldi	r22, 0xC8	; 200
    4d40:	72 e0       	ldi	r23, 0x02	; 2
    4d42:	8e e2       	ldi	r24, 0x2E	; 46
    4d44:	94 e0       	ldi	r25, 0x04	; 4
    4d46:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:50
        lcd.setCursor(cursorPos[curIndex],0);
    4d4a:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <curIndex>
    4d4e:	f0 e0       	ldi	r31, 0x00	; 0
    4d50:	e6 58       	subi	r30, 0x86	; 134
    4d52:	fe 4f       	sbci	r31, 0xFE	; 254
    4d54:	40 e0       	ldi	r20, 0x00	; 0
    4d56:	60 81       	ld	r22, Z
    4d58:	8e e2       	ldi	r24, 0x2E	; 46
    4d5a:	94 e0       	ldi	r25, 0x04	; 4
    4d5c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:51
        lcd.print(letterUpConfPage2[curIndex]);
    4d60:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <curIndex>
    4d64:	f0 e0       	ldi	r31, 0x00	; 0
    4d66:	ee 0f       	add	r30, r30
    4d68:	ff 1f       	adc	r31, r31
    4d6a:	e6 5a       	subi	r30, 0xA6	; 166
    4d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d6e:	60 81       	ld	r22, Z
    4d70:	71 81       	ldd	r23, Z+1	; 0x01
    4d72:	8e e2       	ldi	r24, 0x2E	; 46
    4d74:	94 e0       	ldi	r25, 0x04	; 4
    4d76:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:52
        lcd.setCursor(0,1);
    4d7a:	41 e0       	ldi	r20, 0x01	; 1
    4d7c:	60 e0       	ldi	r22, 0x00	; 0
    4d7e:	8e e2       	ldi	r24, 0x2E	; 46
    4d80:	94 e0       	ldi	r25, 0x04	; 4
    4d82:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:53
        LcdClearLine();
    4d86:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:54
        lcd.setCursor(0,1);
    4d8a:	41 e0       	ldi	r20, 0x01	; 1
    4d8c:	60 e0       	ldi	r22, 0x00	; 0
    4d8e:	8e e2       	ldi	r24, 0x2E	; 46
    4d90:	94 e0       	ldi	r25, 0x04	; 4
    4d92:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:56
        char  ptrnSyncChange[2];
        strcpy_P(ptrnSyncChange, (char*)pgm_read_word(&(namePtrnChange[seq.ptrnChangeSync])));
    4d96:	e0 91 3f 1e 	lds	r30, 0x1E3F	; 0x801e3f <seq>
    4d9a:	f0 e0       	ldi	r31, 0x00	; 0
    4d9c:	ee 0f       	add	r30, r30
    4d9e:	ff 1f       	adc	r31, r31
    4da0:	e8 52       	subi	r30, 0x28	; 40
    4da2:	ff 4f       	sbci	r31, 0xFF	; 255
    4da4:	65 91       	lpm	r22, Z+
    4da6:	74 91       	lpm	r23, Z
    4da8:	ce 01       	movw	r24, r28
    4daa:	04 96       	adiw	r24, 0x04	; 4
    4dac:	0e 94 1f 50 	call	0xa03e	; 0xa03e <strcpy_P>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:57
        lcd.print(ptrnSyncChange);
    4db0:	be 01       	movw	r22, r28
    4db2:	6c 5f       	subi	r22, 0xFC	; 252
    4db4:	7f 4f       	sbci	r23, 0xFF	; 255
    4db6:	8e e2       	ldi	r24, 0x2E	; 46
    4db8:	94 e0       	ldi	r25, 0x04	; 4
    4dba:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:58
        lcd.setCursor(4,1);
    4dbe:	41 e0       	ldi	r20, 0x01	; 1
    4dc0:	64 e0       	ldi	r22, 0x04	; 4
    4dc2:	8e e2       	ldi	r24, 0x2E	; 46
    4dc4:	94 e0       	ldi	r25, 0x04	; 4
    4dc6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:60
        char  mute[2];
        strcpy_P(mute, (char*)pgm_read_word(&(nameMute[seq.muteModeHH])));
    4dca:	e0 91 4c 1e 	lds	r30, 0x1E4C	; 0x801e4c <seq+0xd>
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	ee 0f       	add	r30, r30
    4dd2:	ff 1f       	adc	r31, r31
    4dd4:	ec 52       	subi	r30, 0x2C	; 44
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	65 91       	lpm	r22, Z+
    4dda:	74 91       	lpm	r23, Z
    4ddc:	ce 01       	movw	r24, r28
    4dde:	01 96       	adiw	r24, 0x01	; 1
    4de0:	0e 94 1f 50 	call	0xa03e	; 0xa03e <strcpy_P>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:61
        lcd.print(mute);
    4de4:	be 01       	movw	r22, r28
    4de6:	6f 5f       	subi	r22, 0xFF	; 255
    4de8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dea:	8e e2       	ldi	r24, 0x2E	; 46
    4dec:	94 e0       	ldi	r25, 0x04	; 4
    4dee:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:62
        lcd.setCursor(8,1);
    4df2:	41 e0       	ldi	r20, 0x01	; 1
    4df4:	68 e0       	ldi	r22, 0x08	; 8
    4df6:	8e e2       	ldi	r24, 0x2E	; 46
    4df8:	94 e0       	ldi	r25, 0x04	; 4
    4dfa:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:63
        lcd.print("xxx");
    4dfe:	69 ed       	ldi	r22, 0xD9	; 217
    4e00:	72 e0       	ldi	r23, 0x02	; 2
    4e02:	8e e2       	ldi	r24, 0x2E	; 46
    4e04:	94 e0       	ldi	r25, 0x04	; 4
    4e06:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:64
        lcd.setCursor(12,1);
    4e0a:	41 e0       	ldi	r20, 0x01	; 1
    4e0c:	6c e0       	ldi	r22, 0x0C	; 12
    4e0e:	8e e2       	ldi	r24, 0x2E	; 46
    4e10:	94 e0       	ldi	r25, 0x04	; 4
    4e12:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:65
        lcd.print("xxx");
    4e16:	69 ed       	ldi	r22, 0xD9	; 217
    4e18:	72 e0       	ldi	r23, 0x02	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:74
    }
    else if (seq.sync == EXPANDER) {                                               // [1.028] Expander
      lcd.setCursor(0,0);
      lcd.print("    Expander    ");
      lcd.setCursor(0,1);
      lcd.print("                ");
    4e1a:	8e e2       	ldi	r24, 0x2E	; 46
    4e1c:	94 e0       	ldi	r25, 0x04	; 4
    4e1e:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    4e22:	15 cf       	rjmp	.-470    	; 0x4c4e <LcdUpdate()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:70
        lcd.print("xxx");
        break;
      }

    }
    else if (seq.sync == EXPANDER) {                                               // [1.028] Expander
    4e24:	80 91 40 1e 	lds	r24, 0x1E40	; 0x801e40 <seq+0x1>
    4e28:	82 30       	cpi	r24, 0x02	; 2
    4e2a:	a9 f4       	brne	.+42     	; 0x4e56 <LcdUpdate()+0x280>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:71
      lcd.setCursor(0,0);
    4e2c:	40 e0       	ldi	r20, 0x00	; 0
    4e2e:	60 e0       	ldi	r22, 0x00	; 0
    4e30:	8e e2       	ldi	r24, 0x2E	; 46
    4e32:	94 e0       	ldi	r25, 0x04	; 4
    4e34:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:72
      lcd.print("    Expander    ");
    4e38:	6d ed       	ldi	r22, 0xDD	; 221
    4e3a:	72 e0       	ldi	r23, 0x02	; 2
    4e3c:	8e e2       	ldi	r24, 0x2E	; 46
    4e3e:	94 e0       	ldi	r25, 0x04	; 4
    4e40:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:73
      lcd.setCursor(0,1);
    4e44:	41 e0       	ldi	r20, 0x01	; 1
    4e46:	60 e0       	ldi	r22, 0x00	; 0
    4e48:	8e e2       	ldi	r24, 0x2E	; 46
    4e4a:	94 e0       	ldi	r25, 0x04	; 4
    4e4c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:74
      lcd.print("                ");
    4e50:	66 e3       	ldi	r22, 0x36	; 54
    4e52:	72 e0       	ldi	r23, 0x02	; 2
    4e54:	e2 cf       	rjmp	.-60     	; 0x4e1a <LcdUpdate()+0x244>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:78
    }
    
    else{
      switch (curSeqMode){
    4e56:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    4e5a:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    4e5e:	82 30       	cpi	r24, 0x02	; 2
    4e60:	91 05       	cpc	r25, r1
    4e62:	09 f4       	brne	.+2      	; 0x4e66 <LcdUpdate()+0x290>
    4e64:	cc c0       	rjmp	.+408    	; 0x4ffe <LcdUpdate()+0x428>
    4e66:	08 f0       	brcs	.+2      	; 0x4e6a <LcdUpdate()+0x294>
    4e68:	92 c0       	rjmp	.+292    	; 0x4f8e <LcdUpdate()+0x3b8>
    4e6a:	00 97       	sbiw	r24, 0x00	; 0
    4e6c:	09 f4       	brne	.+2      	; 0x4e70 <LcdUpdate()+0x29a>
    4e6e:	af c2       	rjmp	.+1374   	; 0x53ce <LcdUpdate()+0x7f8>
    4e70:	01 97       	sbiw	r24, 0x01	; 1
    4e72:	09 f0       	breq	.+2      	; 0x4e76 <LcdUpdate()+0x2a0>
    4e74:	ec ce       	rjmp	.-552    	; 0x4c4e <LcdUpdate()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:204
          lcd.print(curPattern - (curBank*NBR_PATTERN) + 1);                     // [zabox] step button alignement
        }

        break;
      case TRACK_WRITE:
        lcd.setCursor(0,0);
    4e76:	40 e0       	ldi	r20, 0x00	; 0
    4e78:	60 e0       	ldi	r22, 0x00	; 0
    4e7a:	8e e2       	ldi	r24, 0x2E	; 46
    4e7c:	94 e0       	ldi	r25, 0x04	; 4
    4e7e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:205
        lcd.print("pos ptr len num ");
    4e82:	63 e4       	ldi	r22, 0x43	; 67
    4e84:	73 e0       	ldi	r23, 0x03	; 3
    4e86:	8e e2       	ldi	r24, 0x2E	; 46
    4e88:	94 e0       	ldi	r25, 0x04	; 4
    4e8a:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:206
        lcd.setCursor(cursorPos[curIndex],0);
    4e8e:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <curIndex>
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	e6 58       	subi	r30, 0x86	; 134
    4e96:	fe 4f       	sbci	r31, 0xFE	; 254
    4e98:	40 e0       	ldi	r20, 0x00	; 0
    4e9a:	60 81       	ld	r22, Z
    4e9c:	8e e2       	ldi	r24, 0x2E	; 46
    4e9e:	94 e0       	ldi	r25, 0x04	; 4
    4ea0:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:207
        lcd.print(letterUpTrackWrite[curIndex]);
    4ea4:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <curIndex>
    4ea8:	f0 e0       	ldi	r31, 0x00	; 0
    4eaa:	ee 0f       	add	r30, r30
    4eac:	ff 1f       	adc	r31, r31
    4eae:	ee 58       	subi	r30, 0x8E	; 142
    4eb0:	fe 4f       	sbci	r31, 0xFE	; 254
    4eb2:	60 81       	ld	r22, Z
    4eb4:	71 81       	ldd	r23, Z+1	; 0x01
    4eb6:	8e e2       	ldi	r24, 0x2E	; 46
    4eb8:	94 e0       	ldi	r25, 0x04	; 4
    4eba:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:208
        lcd.setCursor(0,1);
    4ebe:	41 e0       	ldi	r20, 0x01	; 1
    4ec0:	60 e0       	ldi	r22, 0x00	; 0
    4ec2:	8e e2       	ldi	r24, 0x2E	; 46
    4ec4:	94 e0       	ldi	r25, 0x04	; 4
    4ec6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:209
        LcdClearLine();
    4eca:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:210
        lcd.setCursor(0,1);
    4ece:	41 e0       	ldi	r20, 0x01	; 1
    4ed0:	60 e0       	ldi	r22, 0x00	; 0
    4ed2:	8e e2       	ldi	r24, 0x2E	; 46
    4ed4:	94 e0       	ldi	r25, 0x04	; 4
    4ed6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:211
        lcd.print(trk.pos + 1);                                                 // [zabox] 
    4eda:	60 91 93 04 	lds	r22, 0x0493	; 0x800493 <trk+0x2>
    4ede:	70 91 94 04 	lds	r23, 0x0494	; 0x800494 <trk+0x3>
    4ee2:	6f 5f       	subi	r22, 0xFF	; 255
    4ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ee6:	4a e0       	ldi	r20, 0x0A	; 10
    4ee8:	50 e0       	ldi	r21, 0x00	; 0
    4eea:	8e e2       	ldi	r24, 0x2E	; 46
    4eec:	94 e0       	ldi	r25, 0x04	; 4
    4eee:	0e 94 30 4a 	call	0x9460	; 0x9460 <Print::print(unsigned int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:212
        lcd.setCursor(4,1);
    4ef2:	41 e0       	ldi	r20, 0x01	; 1
    4ef4:	64 e0       	ldi	r22, 0x04	; 4
    4ef6:	8e e2       	ldi	r24, 0x2E	; 46
    4ef8:	94 e0       	ldi	r25, 0x04	; 4
    4efa:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:213
        lcd.print((char)((curPattern / 16) + 65));
    4efe:	60 91 34 1e 	lds	r22, 0x1E34	; 0x801e34 <curPattern>
    4f02:	62 95       	swap	r22
    4f04:	6f 70       	andi	r22, 0x0F	; 15
    4f06:	6f 5b       	subi	r22, 0xBF	; 191
    4f08:	8e e2       	ldi	r24, 0x2E	; 46
    4f0a:	94 e0       	ldi	r25, 0x04	; 4
    4f0c:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:214
        lcd.print((curPattern - (((curPattern / 16)*NBR_PATTERN)) + 1));        // [zabox] step button alignement
    4f10:	80 91 34 1e 	lds	r24, 0x1E34	; 0x801e34 <curPattern>
    4f14:	68 2f       	mov	r22, r24
    4f16:	70 e0       	ldi	r23, 0x00	; 0
    4f18:	82 95       	swap	r24
    4f1a:	8f 70       	andi	r24, 0x0F	; 15
    4f1c:	90 e1       	ldi	r25, 0x10	; 16
    4f1e:	89 9f       	mul	r24, r25
    4f20:	60 19       	sub	r22, r0
    4f22:	71 09       	sbc	r23, r1
    4f24:	11 24       	eor	r1, r1
    4f26:	6f 5f       	subi	r22, 0xFF	; 255
    4f28:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2a:	4a e0       	ldi	r20, 0x0A	; 10
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	8e e2       	ldi	r24, 0x2E	; 46
    4f30:	94 e0       	ldi	r25, 0x04	; 4
    4f32:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:215
        lcd.setCursor(8,1);
    4f36:	41 e0       	ldi	r20, 0x01	; 1
    4f38:	68 e0       	ldi	r22, 0x08	; 8
    4f3a:	8e e2       	ldi	r24, 0x2E	; 46
    4f3c:	94 e0       	ldi	r25, 0x04	; 4
    4f3e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:216
        lcd.print(track[trkBuffer].length);
    4f42:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <trkBuffer>
    4f46:	82 e0       	ldi	r24, 0x02	; 2
    4f48:	94 e0       	ldi	r25, 0x04	; 4
    4f4a:	28 9f       	mul	r18, r24
    4f4c:	f0 01       	movw	r30, r0
    4f4e:	29 9f       	mul	r18, r25
    4f50:	f0 0d       	add	r31, r0
    4f52:	11 24       	eor	r1, r1
    4f54:	e9 56       	subi	r30, 0x69	; 105
    4f56:	fb 4f       	sbci	r31, 0xFB	; 251
    4f58:	60 81       	ld	r22, Z
    4f5a:	71 81       	ldd	r23, Z+1	; 0x01
    4f5c:	4a e0       	ldi	r20, 0x0A	; 10
    4f5e:	50 e0       	ldi	r21, 0x00	; 0
    4f60:	8e e2       	ldi	r24, 0x2E	; 46
    4f62:	94 e0       	ldi	r25, 0x04	; 4
    4f64:	0e 94 30 4a 	call	0x9460	; 0x9460 <Print::print(unsigned int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:217
        lcd.setCursor(13,1);
    4f68:	41 e0       	ldi	r20, 0x01	; 1
    4f6a:	6d e0       	ldi	r22, 0x0D	; 13
    4f6c:	8e e2       	ldi	r24, 0x2E	; 46
    4f6e:	94 e0       	ldi	r25, 0x04	; 4
    4f70:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:218
        lcd.print(trk.current + 1);
    4f74:	60 91 92 04 	lds	r22, 0x0492	; 0x800492 <trk+0x1>
    4f78:	70 e0       	ldi	r23, 0x00	; 0
    4f7a:	6f 5f       	subi	r22, 0xFF	; 255
    4f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f7e:	4a e0       	ldi	r20, 0x0A	; 10
    4f80:	50 e0       	ldi	r21, 0x00	; 0
    4f82:	8e e2       	ldi	r24, 0x2E	; 46
    4f84:	94 e0       	ldi	r25, 0x04	; 4
    4f86:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:219
        previousMode = TRACK_WRITE;
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	74 c0       	rjmp	.+232    	; 0x5076 <LcdUpdate()+0x4a0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:78
      lcd.setCursor(0,1);
      lcd.print("                ");
    }
    
    else{
      switch (curSeqMode){
    4f8e:	85 30       	cpi	r24, 0x05	; 5
    4f90:	91 05       	cpc	r25, r1
    4f92:	08 f4       	brcc	.+2      	; 0x4f96 <LcdUpdate()+0x3c0>
    4f94:	73 c0       	rjmp	.+230    	; 0x507c <LcdUpdate()+0x4a6>
    4f96:	05 97       	sbiw	r24, 0x05	; 5
    4f98:	09 f0       	breq	.+2      	; 0x4f9c <LcdUpdate()+0x3c6>
    4f9a:	59 ce       	rjmp	.-846    	; 0x4c4e <LcdUpdate()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:187
          lcd.print(instName);
        }
        previousMode = PTRN_STEP;
        break;
      case MUTE:
        if (previousMode == PTRN_STEP){
    4f9c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <LcdUpdate()::previousMode>
    4fa0:	83 30       	cpi	r24, 0x03	; 3
    4fa2:	09 f0       	breq	.+2      	; 0x4fa6 <LcdUpdate()+0x3d0>
    4fa4:	02 c2       	rjmp	.+1028   	; 0x53aa <LcdUpdate()+0x7d4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:188
          lcd.setCursor(0,1);
    4fa6:	41 e0       	ldi	r20, 0x01	; 1
    4fa8:	60 e0       	ldi	r22, 0x00	; 0
    4faa:	8e e2       	ldi	r24, 0x2E	; 46
    4fac:	94 e0       	ldi	r25, 0x04	; 4
    4fae:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:189
          lcd.print("   ");
    4fb2:	63 e4       	ldi	r22, 0x43	; 67
    4fb4:	72 e0       	ldi	r23, 0x02	; 2
    4fb6:	8e e2       	ldi	r24, 0x2E	; 46
    4fb8:	94 e0       	ldi	r25, 0x04	; 4
    4fba:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:190
          lcd.setCursor(0,1);
    4fbe:	41 e0       	ldi	r20, 0x01	; 1
    4fc0:	60 e0       	ldi	r22, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:197
          lcd.print(curPattern - (curBank*NBR_PATTERN) + 1);                     // [zabox] step button alignement
        }
        else if (previousMode == PTRN_PLAY){
          lcd.setCursor(2,1);
          lcd.print("   ");
          lcd.setCursor(2,1);
    4fc2:	8e e2       	ldi	r24, 0x2E	; 46
    4fc4:	94 e0       	ldi	r25, 0x04	; 4
    4fc6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:198
          lcd.print(char(curBank+65));
    4fca:	60 91 35 1e 	lds	r22, 0x1E35	; 0x801e35 <curBank>
    4fce:	6f 5b       	subi	r22, 0xBF	; 191
    4fd0:	8e e2       	ldi	r24, 0x2E	; 46
    4fd2:	94 e0       	ldi	r25, 0x04	; 4
    4fd4:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:199
          lcd.print(curPattern - (curBank*NBR_PATTERN) + 1);                     // [zabox] step button alignement
    4fd8:	60 91 34 1e 	lds	r22, 0x1E34	; 0x801e34 <curPattern>
    4fdc:	70 e0       	ldi	r23, 0x00	; 0
    4fde:	80 91 35 1e 	lds	r24, 0x1E35	; 0x801e35 <curBank>
    4fe2:	90 e1       	ldi	r25, 0x10	; 16
    4fe4:	89 9f       	mul	r24, r25
    4fe6:	60 19       	sub	r22, r0
    4fe8:	71 09       	sbc	r23, r1
    4fea:	11 24       	eor	r1, r1
    4fec:	6f 5f       	subi	r22, 0xFF	; 255
    4fee:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff0:	4a e0       	ldi	r20, 0x0A	; 10
    4ff2:	50 e0       	ldi	r21, 0x00	; 0
    4ff4:	8e e2       	ldi	r24, 0x2E	; 46
    4ff6:	94 e0       	ldi	r25, 0x04	; 4
    4ff8:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
    4ffc:	28 ce       	rjmp	.-944    	; 0x4c4e <LcdUpdate()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:80
    }
    
    else{
      switch (curSeqMode){
      case PTRN_PLAY:
        lcd.setCursor(0,0);
    4ffe:	40 e0       	ldi	r20, 0x00	; 0
    5000:	60 e0       	ldi	r22, 0x00	; 0
    5002:	8e e2       	ldi	r24, 0x2E	; 46
    5004:	94 e0       	ldi	r25, 0x04	; 4
    5006:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:81
        lcd.print("  Pattern Play  ");
    500a:	6e ee       	ldi	r22, 0xEE	; 238
    500c:	72 e0       	ldi	r23, 0x02	; 2
    500e:	8e e2       	ldi	r24, 0x2E	; 46
    5010:	94 e0       	ldi	r25, 0x04	; 4
    5012:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:82
        lcd.setCursor(0,1);
    5016:	41 e0       	ldi	r20, 0x01	; 1
    5018:	60 e0       	ldi	r22, 0x00	; 0
    501a:	8e e2       	ldi	r24, 0x2E	; 46
    501c:	94 e0       	ldi	r25, 0x04	; 4
    501e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:83
        LcdClearLine(); 
    5022:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:84
        lcd.setCursor(2,1);
    5026:	41 e0       	ldi	r20, 0x01	; 1
    5028:	62 e0       	ldi	r22, 0x02	; 2
    502a:	8e e2       	ldi	r24, 0x2E	; 46
    502c:	94 e0       	ldi	r25, 0x04	; 4
    502e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:85
        lcd.print(char(curBank+65));
    5032:	60 91 35 1e 	lds	r22, 0x1E35	; 0x801e35 <curBank>
    5036:	6f 5b       	subi	r22, 0xBF	; 191
    5038:	8e e2       	ldi	r24, 0x2E	; 46
    503a:	94 e0       	ldi	r25, 0x04	; 4
    503c:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:86
        lcd.print(curPattern - (curBank*NBR_PATTERN) + 1);                          // [zabox] step button alignement
    5040:	60 91 34 1e 	lds	r22, 0x1E34	; 0x801e34 <curPattern>
    5044:	70 e0       	ldi	r23, 0x00	; 0
    5046:	80 91 35 1e 	lds	r24, 0x1E35	; 0x801e35 <curBank>
    504a:	90 e1       	ldi	r25, 0x10	; 16
    504c:	89 9f       	mul	r24, r25
    504e:	60 19       	sub	r22, r0
    5050:	71 09       	sbc	r23, r1
    5052:	11 24       	eor	r1, r1
    5054:	6f 5f       	subi	r22, 0xFF	; 255
    5056:	7f 4f       	sbci	r23, 0xFF	; 255
    5058:	4a e0       	ldi	r20, 0x0A	; 10
    505a:	50 e0       	ldi	r21, 0x00	; 0
    505c:	8e e2       	ldi	r24, 0x2E	; 46
    505e:	94 e0       	ldi	r25, 0x04	; 4
    5060:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:87
        lcd.setCursor(9,1);
    5064:	41 e0       	ldi	r20, 0x01	; 1
    5066:	69 e0       	ldi	r22, 0x09	; 9
    5068:	8e e2       	ldi	r24, 0x2E	; 46
    506a:	94 e0       	ldi	r25, 0x04	; 4
    506c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:88
        LcdPrintTempo(); 
    5070:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LcdPrintTempo()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:89
        previousMode = PTRN_PLAY;
    5074:	82 e0       	ldi	r24, 0x02	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:219
        lcd.print((curPattern - (((curPattern / 16)*NBR_PATTERN)) + 1));        // [zabox] step button alignement
        lcd.setCursor(8,1);
        lcd.print(track[trkBuffer].length);
        lcd.setCursor(13,1);
        lcd.print(trk.current + 1);
        previousMode = TRACK_WRITE;
    5076:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <LcdUpdate()::previousMode>
    507a:	e9 cd       	rjmp	.-1070   	; 0x4c4e <LcdUpdate()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:93
        LcdPrintTempo(); 
        previousMode = PTRN_PLAY;
        break;
      case PTRN_STEP:
      case PTRN_TAP:
        if (curInst == TOTAL_ACC){
    507c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <curInst>
    5080:	8c 30       	cpi	r24, 0x0C	; 12
    5082:	21 f4       	brne	.+8      	; 0x508c <LcdUpdate()+0x4b6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:94
          LcdPrintTotalAcc();
    5084:	0e 94 24 09 	call	0x1248	; 0x1248 <LcdPrintTotalAcc()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:184
          if (curFlam) {                                                            // test
            instName[1] = instName[1] + 32;
          }
          lcd.print(instName);
        }
        previousMode = PTRN_STEP;
    5088:	83 e0       	ldi	r24, 0x03	; 3
    508a:	f5 cf       	rjmp	.-22     	; 0x5076 <LcdUpdate()+0x4a0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:96
      case PTRN_STEP:
      case PTRN_TAP:
        if (curInst == TOTAL_ACC){
          LcdPrintTotalAcc();
        }
        else if (shufBtn.pressed){
    508c:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <shufBtn+0x2>
    5090:	88 23       	and	r24, r24
    5092:	09 f4       	brne	.+2      	; 0x5096 <LcdUpdate()+0x4c0>
    5094:	57 c0       	rjmp	.+174    	; 0x5144 <LcdUpdate()+0x56e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:129
            lcd.print((char)219);
          }
          
          */
          
          lcd.setCursor(0,0);
    5096:	40 e0       	ldi	r20, 0x00	; 0
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	8e e2       	ldi	r24, 0x2E	; 46
    509c:	94 e0       	ldi	r25, 0x04	; 4
    509e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:130
          lcd.print("Shuffle:        ");
    50a2:	6f ef       	ldi	r22, 0xFF	; 255
    50a4:	72 e0       	ldi	r23, 0x02	; 2
    50a6:	8e e2       	ldi	r24, 0x2E	; 46
    50a8:	94 e0       	ldi	r25, 0x04	; 4
    50aa:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:131
          lcd.setCursor(9,0);
    50ae:	40 e0       	ldi	r20, 0x00	; 0
    50b0:	69 e0       	ldi	r22, 0x09	; 9
    50b2:	8e e2       	ldi	r24, 0x2E	; 46
    50b4:	94 e0       	ldi	r25, 0x04	; 4
    50b6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:132
          LcdPrintLine(7);
    50ba:	87 e0       	ldi	r24, 0x07	; 7
    50bc:	0e 94 01 09 	call	0x1202	; 0x1202 <LcdPrintLine(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:133
          lcd.setCursor(8 + pattern[ptrnBuffer].shuffle, 0);
    50c0:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    50c4:	09 ec       	ldi	r16, 0xC9	; 201
    50c6:	15 e0       	ldi	r17, 0x05	; 5
    50c8:	80 9f       	mul	r24, r16
    50ca:	f0 01       	movw	r30, r0
    50cc:	81 9f       	mul	r24, r17
    50ce:	f0 0d       	add	r31, r0
    50d0:	11 24       	eor	r1, r1
    50d2:	e5 56       	subi	r30, 0x65	; 101
    50d4:	f9 4e       	sbci	r31, 0xE9	; 233
    50d6:	60 81       	ld	r22, Z
    50d8:	68 5f       	subi	r22, 0xF8	; 248
    50da:	40 e0       	ldi	r20, 0x00	; 0
    50dc:	8e e2       	ldi	r24, 0x2E	; 46
    50de:	94 e0       	ldi	r25, 0x04	; 4
    50e0:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:134
          lcd.print((char)219);
    50e4:	6b ed       	ldi	r22, 0xDB	; 219
    50e6:	8e e2       	ldi	r24, 0x2E	; 46
    50e8:	94 e0       	ldi	r25, 0x04	; 4
    50ea:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:135
          lcd.setCursor(0,1);
    50ee:	41 e0       	ldi	r20, 0x01	; 1
    50f0:	60 e0       	ldi	r22, 0x00	; 0
    50f2:	8e e2       	ldi	r24, 0x2E	; 46
    50f4:	94 e0       	ldi	r25, 0x04	; 4
    50f6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:136
          lcd.print("Flam:           ");
    50fa:	60 e1       	ldi	r22, 0x10	; 16
    50fc:	73 e0       	ldi	r23, 0x03	; 3
    50fe:	8e e2       	ldi	r24, 0x2E	; 46
    5100:	94 e0       	ldi	r25, 0x04	; 4
    5102:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:137
          lcd.setCursor(8,1);
    5106:	41 e0       	ldi	r20, 0x01	; 1
    5108:	68 e0       	ldi	r22, 0x08	; 8
    510a:	8e e2       	ldi	r24, 0x2E	; 46
    510c:	94 e0       	ldi	r25, 0x04	; 4
    510e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:138
          LcdPrintLine(8);
    5112:	88 e0       	ldi	r24, 0x08	; 8
    5114:	0e 94 01 09 	call	0x1202	; 0x1202 <LcdPrintLine(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:139
          lcd.setCursor(8 + pattern[ptrnBuffer].flam, 1);
    5118:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    511c:	80 9f       	mul	r24, r16
    511e:	f0 01       	movw	r30, r0
    5120:	81 9f       	mul	r24, r17
    5122:	f0 0d       	add	r31, r0
    5124:	11 24       	eor	r1, r1
    5126:	e4 56       	subi	r30, 0x64	; 100
    5128:	f9 4e       	sbci	r31, 0xE9	; 233
    512a:	60 81       	ld	r22, Z
    512c:	68 5f       	subi	r22, 0xF8	; 248
    512e:	41 e0       	ldi	r20, 0x01	; 1
    5130:	8e e2       	ldi	r24, 0x2E	; 46
    5132:	94 e0       	ldi	r25, 0x04	; 4
    5134:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:140
          lcd.print((char)219);        
    5138:	6b ed       	ldi	r22, 0xDB	; 219
    513a:	8e e2       	ldi	r24, 0x2E	; 46
    513c:	94 e0       	ldi	r25, 0x04	; 4
    513e:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
    5142:	a2 cf       	rjmp	.-188    	; 0x5088 <LcdUpdate()+0x4b2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:143
          
        }
        else if (keyboardMode){
    5144:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:144
          lcd.setCursor(0,0);
    5148:	40 e0       	ldi	r20, 0x00	; 0
    514a:	60 e0       	ldi	r22, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:143
          LcdPrintLine(8);
          lcd.setCursor(8 + pattern[ptrnBuffer].flam, 1);
          lcd.print((char)219);        
          
        }
        else if (keyboardMode){
    514c:	88 23       	and	r24, r24
    514e:	09 f4       	brne	.+2      	; 0x5152 <LcdUpdate()+0x57c>
    5150:	bc c0       	rjmp	.+376    	; 0x52ca <LcdUpdate()+0x6f4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:144
          lcd.setCursor(0,0);
    5152:	8e e2       	ldi	r24, 0x2E	; 46
    5154:	94 e0       	ldi	r25, 0x04	; 4
    5156:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:145
          lcd.print("idx not len oct ");
    515a:	61 e2       	ldi	r22, 0x21	; 33
    515c:	73 e0       	ldi	r23, 0x03	; 3
    515e:	8e e2       	ldi	r24, 0x2E	; 46
    5160:	94 e0       	ldi	r25, 0x04	; 4
    5162:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:146
          lcd.setCursor(cursorPos[curIndex],0);
    5166:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <curIndex>
    516a:	f0 e0       	ldi	r31, 0x00	; 0
    516c:	e6 58       	subi	r30, 0x86	; 134
    516e:	fe 4f       	sbci	r31, 0xFE	; 254
    5170:	40 e0       	ldi	r20, 0x00	; 0
    5172:	60 81       	ld	r22, Z
    5174:	8e e2       	ldi	r24, 0x2E	; 46
    5176:	94 e0       	ldi	r25, 0x04	; 4
    5178:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:147
          lcd.print(letterUpExtInst[curIndex]);
    517c:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <curIndex>
    5180:	f0 e0       	ldi	r31, 0x00	; 0
    5182:	ee 0f       	add	r30, r30
    5184:	ff 1f       	adc	r31, r31
    5186:	e6 59       	subi	r30, 0x96	; 150
    5188:	fe 4f       	sbci	r31, 0xFE	; 254
    518a:	60 81       	ld	r22, Z
    518c:	71 81       	ldd	r23, Z+1	; 0x01
    518e:	8e e2       	ldi	r24, 0x2E	; 46
    5190:	94 e0       	ldi	r25, 0x04	; 4
    5192:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:148
          lcd.setCursor(0,1);
    5196:	41 e0       	ldi	r20, 0x01	; 1
    5198:	60 e0       	ldi	r22, 0x00	; 0
    519a:	8e e2       	ldi	r24, 0x2E	; 46
    519c:	94 e0       	ldi	r25, 0x04	; 4
    519e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:149
          LcdClearLine();
    51a2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:150
          lcd.setCursor(1,1);
    51a6:	41 e0       	ldi	r20, 0x01	; 1
    51a8:	61 e0       	ldi	r22, 0x01	; 1
    51aa:	8e e2       	ldi	r24, 0x2E	; 46
    51ac:	94 e0       	ldi	r25, 0x04	; 4
    51ae:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:151
          lcd.print(noteIndex + 1);                                               // [zabox] looks better
    51b2:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <noteIndex>
    51b6:	70 e0       	ldi	r23, 0x00	; 0
    51b8:	6f 5f       	subi	r22, 0xFF	; 255
    51ba:	7f 4f       	sbci	r23, 0xFF	; 255
    51bc:	4a e0       	ldi	r20, 0x0A	; 10
    51be:	50 e0       	ldi	r21, 0x00	; 0
    51c0:	8e e2       	ldi	r24, 0x2E	; 46
    51c2:	94 e0       	ldi	r25, 0x04	; 4
    51c4:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:152
          lcd.setCursor(4,1);
    51c8:	41 e0       	ldi	r20, 0x01	; 1
    51ca:	64 e0       	ldi	r22, 0x04	; 4
    51cc:	8e e2       	ldi	r24, 0x2E	; 46
    51ce:	94 e0       	ldi	r25, 0x04	; 4
    51d0:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:154
          char note[2];
          strcpy_P(note, (char*)pgm_read_word(&(nameNote[pattern[ptrnBuffer].extNote[noteIndex] % 12])));
    51d4:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    51d8:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    51dc:	09 ec       	ldi	r16, 0xC9	; 201
    51de:	15 e0       	ldi	r17, 0x05	; 5
    51e0:	20 9f       	mul	r18, r16
    51e2:	c0 01       	movw	r24, r0
    51e4:	21 9f       	mul	r18, r17
    51e6:	90 0d       	add	r25, r0
    51e8:	11 24       	eor	r1, r1
    51ea:	88 56       	subi	r24, 0x68	; 104
    51ec:	9d 4e       	sbci	r25, 0xED	; 237
    51ee:	e8 0f       	add	r30, r24
    51f0:	f9 2f       	mov	r31, r25
    51f2:	f1 1d       	adc	r31, r1
    51f4:	eb 5b       	subi	r30, 0xBB	; 187
    51f6:	fa 4f       	sbci	r31, 0xFA	; 250
    51f8:	80 81       	ld	r24, Z
    51fa:	3c e0       	ldi	r19, 0x0C	; 12
    51fc:	f3 2e       	mov	r15, r19
    51fe:	6f 2d       	mov	r22, r15
    5200:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__udivmodqi4>
    5204:	e9 2f       	mov	r30, r25
    5206:	f0 e0       	ldi	r31, 0x00	; 0
    5208:	ee 0f       	add	r30, r30
    520a:	ff 1f       	adc	r31, r31
    520c:	e4 57       	subi	r30, 0x74	; 116
    520e:	ff 4f       	sbci	r31, 0xFF	; 255
    5210:	65 91       	lpm	r22, Z+
    5212:	74 91       	lpm	r23, Z
    5214:	ce 01       	movw	r24, r28
    5216:	04 96       	adiw	r24, 0x04	; 4
    5218:	0e 94 1f 50 	call	0xa03e	; 0xa03e <strcpy_P>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:155
          lcd.print(note);
    521c:	be 01       	movw	r22, r28
    521e:	6c 5f       	subi	r22, 0xFC	; 252
    5220:	7f 4f       	sbci	r23, 0xFF	; 255
    5222:	8e e2       	ldi	r24, 0x2E	; 46
    5224:	94 e0       	ldi	r25, 0x04	; 4
    5226:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:156
          lcd.print(pattern[ptrnBuffer].extNote[noteIndex] / 12);//note octave
    522a:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    522e:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <noteIndex>
    5232:	20 9f       	mul	r18, r16
    5234:	c0 01       	movw	r24, r0
    5236:	21 9f       	mul	r18, r17
    5238:	90 0d       	add	r25, r0
    523a:	11 24       	eor	r1, r1
    523c:	88 56       	subi	r24, 0x68	; 104
    523e:	9d 4e       	sbci	r25, 0xED	; 237
    5240:	e8 0f       	add	r30, r24
    5242:	f9 2f       	mov	r31, r25
    5244:	f1 1d       	adc	r31, r1
    5246:	eb 5b       	subi	r30, 0xBB	; 187
    5248:	fa 4f       	sbci	r31, 0xFA	; 250
    524a:	80 81       	ld	r24, Z
    524c:	6f 2d       	mov	r22, r15
    524e:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__udivmodqi4>
    5252:	68 2f       	mov	r22, r24
    5254:	70 e0       	ldi	r23, 0x00	; 0
    5256:	4a e0       	ldi	r20, 0x0A	; 10
    5258:	50 e0       	ldi	r21, 0x00	; 0
    525a:	8e e2       	ldi	r24, 0x2E	; 46
    525c:	94 e0       	ldi	r25, 0x04	; 4
    525e:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:157
          lcd.setCursor(9,1);
    5262:	41 e0       	ldi	r20, 0x01	; 1
    5264:	69 e0       	ldi	r22, 0x09	; 9
    5266:	8e e2       	ldi	r24, 0x2E	; 46
    5268:	94 e0       	ldi	r25, 0x04	; 4
    526a:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:158
          lcd.print(pattern[ptrnBuffer].extLength + 1);
    526e:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    5272:	80 9f       	mul	r24, r16
    5274:	f0 01       	movw	r30, r0
    5276:	81 9f       	mul	r24, r17
    5278:	f0 0d       	add	r31, r0
    527a:	11 24       	eor	r1, r1
    527c:	e3 5a       	subi	r30, 0xA3	; 163
    527e:	f7 4e       	sbci	r31, 0xE7	; 231
    5280:	60 81       	ld	r22, Z
    5282:	70 e0       	ldi	r23, 0x00	; 0
    5284:	6f 5f       	subi	r22, 0xFF	; 255
    5286:	7f 4f       	sbci	r23, 0xFF	; 255
    5288:	4a e0       	ldi	r20, 0x0A	; 10
    528a:	50 e0       	ldi	r21, 0x00	; 0
    528c:	8e e2       	ldi	r24, 0x2E	; 46
    528e:	94 e0       	ldi	r25, 0x04	; 4
    5290:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:159
          lcd.setCursor(13,1);
    5294:	41 e0       	ldi	r20, 0x01	; 1
    5296:	6d e0       	ldi	r22, 0x0D	; 13
    5298:	8e e2       	ldi	r24, 0x2E	; 46
    529a:	94 e0       	ldi	r25, 0x04	; 4
    529c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:161
          char octave[2];
          strcpy_P(octave, (char*)pgm_read_word(&(nameOct[keybOct])));
    52a0:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <keybOct>
    52a4:	f0 e0       	ldi	r31, 0x00	; 0
    52a6:	ee 0f       	add	r30, r30
    52a8:	ff 1f       	adc	r31, r31
    52aa:	ec 55       	subi	r30, 0x5C	; 92
    52ac:	ff 4f       	sbci	r31, 0xFF	; 255
    52ae:	65 91       	lpm	r22, Z+
    52b0:	74 91       	lpm	r23, Z
    52b2:	ce 01       	movw	r24, r28
    52b4:	01 96       	adiw	r24, 0x01	; 1
    52b6:	0e 94 1f 50 	call	0xa03e	; 0xa03e <strcpy_P>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:182
          char instName[3];
          strcpy_P(instName, (char*)pgm_read_word(&(selectInstString[curInst])));
          if (curFlam) {                                                            // test
            instName[1] = instName[1] + 32;
          }
          lcd.print(instName);
    52ba:	be 01       	movw	r22, r28
    52bc:	6f 5f       	subi	r22, 0xFF	; 255
    52be:	7f 4f       	sbci	r23, 0xFF	; 255
    52c0:	8e e2       	ldi	r24, 0x2E	; 46
    52c2:	94 e0       	ldi	r25, 0x04	; 4
    52c4:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
    52c8:	df ce       	rjmp	.-578    	; 0x5088 <LcdUpdate()+0x4b2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:165
          char octave[2];
          strcpy_P(octave, (char*)pgm_read_word(&(nameOct[keybOct])));
          lcd.print(octave);
        }
        else{
          lcd.setCursor(0,0);
    52ca:	8e e2       	ldi	r24, 0x2E	; 46
    52cc:	94 e0       	ldi	r25, 0x04	; 4
    52ce:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:166
          lcd.print("ptr len scl ins ");
    52d2:	62 e3       	ldi	r22, 0x32	; 50
    52d4:	73 e0       	ldi	r23, 0x03	; 3
    52d6:	8e e2       	ldi	r24, 0x2E	; 46
    52d8:	94 e0       	ldi	r25, 0x04	; 4
    52da:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:167
          lcd.setCursor(0,1);
    52de:	41 e0       	ldi	r20, 0x01	; 1
    52e0:	60 e0       	ldi	r22, 0x00	; 0
    52e2:	8e e2       	ldi	r24, 0x2E	; 46
    52e4:	94 e0       	ldi	r25, 0x04	; 4
    52e6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:168
          LcdClearLine(); 
    52ea:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:169
          lcd.setCursor(0,1);
    52ee:	41 e0       	ldi	r20, 0x01	; 1
    52f0:	60 e0       	ldi	r22, 0x00	; 0
    52f2:	8e e2       	ldi	r24, 0x2E	; 46
    52f4:	94 e0       	ldi	r25, 0x04	; 4
    52f6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:170
          lcd.print(char(curBank+65));
    52fa:	60 91 35 1e 	lds	r22, 0x1E35	; 0x801e35 <curBank>
    52fe:	6f 5b       	subi	r22, 0xBF	; 191
    5300:	8e e2       	ldi	r24, 0x2E	; 46
    5302:	94 e0       	ldi	r25, 0x04	; 4
    5304:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:171
          lcd.print(curPattern - (curBank*NBR_PATTERN) + 1);                     // [zabox] step button alignement
    5308:	60 91 34 1e 	lds	r22, 0x1E34	; 0x801e34 <curPattern>
    530c:	70 e0       	ldi	r23, 0x00	; 0
    530e:	80 91 35 1e 	lds	r24, 0x1E35	; 0x801e35 <curBank>
    5312:	90 e1       	ldi	r25, 0x10	; 16
    5314:	89 9f       	mul	r24, r25
    5316:	60 19       	sub	r22, r0
    5318:	71 09       	sbc	r23, r1
    531a:	11 24       	eor	r1, r1
    531c:	6f 5f       	subi	r22, 0xFF	; 255
    531e:	7f 4f       	sbci	r23, 0xFF	; 255
    5320:	4a e0       	ldi	r20, 0x0A	; 10
    5322:	50 e0       	ldi	r21, 0x00	; 0
    5324:	8e e2       	ldi	r24, 0x2E	; 46
    5326:	94 e0       	ldi	r25, 0x04	; 4
    5328:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:172
          lcd.setCursor(5,1);
    532c:	41 e0       	ldi	r20, 0x01	; 1
    532e:	65 e0       	ldi	r22, 0x05	; 5
    5330:	8e e2       	ldi	r24, 0x2E	; 46
    5332:	94 e0       	ldi	r25, 0x04	; 4
    5334:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:173
          lcd.print(pattern[ptrnBuffer].length+1);
    5338:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    533c:	89 ec       	ldi	r24, 0xC9	; 201
    533e:	95 e0       	ldi	r25, 0x05	; 5
    5340:	28 9f       	mul	r18, r24
    5342:	f0 01       	movw	r30, r0
    5344:	29 9f       	mul	r18, r25
    5346:	f0 0d       	add	r31, r0
    5348:	11 24       	eor	r1, r1
    534a:	e8 56       	subi	r30, 0x68	; 104
    534c:	f9 4e       	sbci	r31, 0xE9	; 233
    534e:	60 81       	ld	r22, Z
    5350:	70 e0       	ldi	r23, 0x00	; 0
    5352:	6f 5f       	subi	r22, 0xFF	; 255
    5354:	7f 4f       	sbci	r23, 0xFF	; 255
    5356:	4a e0       	ldi	r20, 0x0A	; 10
    5358:	50 e0       	ldi	r21, 0x00	; 0
    535a:	8e e2       	ldi	r24, 0x2E	; 46
    535c:	94 e0       	ldi	r25, 0x04	; 4
    535e:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:174
          lcd.setCursor(8,1);
    5362:	41 e0       	ldi	r20, 0x01	; 1
    5364:	68 e0       	ldi	r22, 0x08	; 8
    5366:	8e e2       	ldi	r24, 0x2E	; 46
    5368:	94 e0       	ldi	r25, 0x04	; 4
    536a:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:175
          LcdPrintScale();
    536e:	0e 94 88 25 	call	0x4b10	; 0x4b10 <LcdPrintScale()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:176
          lcd.setCursor(12,1);
    5372:	41 e0       	ldi	r20, 0x01	; 1
    5374:	6c e0       	ldi	r22, 0x0C	; 12
    5376:	8e e2       	ldi	r24, 0x2E	; 46
    5378:	94 e0       	ldi	r25, 0x04	; 4
    537a:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:178
          char instName[3];
          strcpy_P(instName, (char*)pgm_read_word(&(selectInstString[curInst])));
    537e:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <curInst>
    5382:	f0 e0       	ldi	r31, 0x00	; 0
    5384:	ee 0f       	add	r30, r30
    5386:	ff 1f       	adc	r31, r31
    5388:	ec 54       	subi	r30, 0x4C	; 76
    538a:	ff 4f       	sbci	r31, 0xFF	; 255
    538c:	65 91       	lpm	r22, Z+
    538e:	74 91       	lpm	r23, Z
    5390:	ce 01       	movw	r24, r28
    5392:	01 96       	adiw	r24, 0x01	; 1
    5394:	0e 94 1f 50 	call	0xa03e	; 0xa03e <strcpy_P>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:179
          if (curFlam) {                                                            // test
    5398:	80 91 36 1e 	lds	r24, 0x1E36	; 0x801e36 <curFlam>
    539c:	88 23       	and	r24, r24
    539e:	09 f4       	brne	.+2      	; 0x53a2 <LcdUpdate()+0x7cc>
    53a0:	8c cf       	rjmp	.-232    	; 0x52ba <LcdUpdate()+0x6e4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:180
            instName[1] = instName[1] + 32;
    53a2:	8a 81       	ldd	r24, Y+2	; 0x02
    53a4:	80 5e       	subi	r24, 0xE0	; 224
    53a6:	8a 83       	std	Y+2, r24	; 0x02
    53a8:	88 cf       	rjmp	.-240    	; 0x52ba <LcdUpdate()+0x6e4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:194
          lcd.print("   ");
          lcd.setCursor(0,1);
          lcd.print(char(curBank+65));
          lcd.print(curPattern - (curBank*NBR_PATTERN) + 1);                     // [zabox] step button alignement
        }
        else if (previousMode == PTRN_PLAY){
    53aa:	82 30       	cpi	r24, 0x02	; 2
    53ac:	09 f0       	breq	.+2      	; 0x53b0 <LcdUpdate()+0x7da>
    53ae:	4f cc       	rjmp	.-1890   	; 0x4c4e <LcdUpdate()+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:195
          lcd.setCursor(2,1);
    53b0:	41 e0       	ldi	r20, 0x01	; 1
    53b2:	62 e0       	ldi	r22, 0x02	; 2
    53b4:	8e e2       	ldi	r24, 0x2E	; 46
    53b6:	94 e0       	ldi	r25, 0x04	; 4
    53b8:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:196
          lcd.print("   ");
    53bc:	63 e4       	ldi	r22, 0x43	; 67
    53be:	72 e0       	ldi	r23, 0x02	; 2
    53c0:	8e e2       	ldi	r24, 0x2E	; 46
    53c2:	94 e0       	ldi	r25, 0x04	; 4
    53c4:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:197
          lcd.setCursor(2,1);
    53c8:	41 e0       	ldi	r20, 0x01	; 1
    53ca:	62 e0       	ldi	r22, 0x02	; 2
    53cc:	fa cd       	rjmp	.-1036   	; 0x4fc2 <LcdUpdate()+0x3ec>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:222
        lcd.setCursor(13,1);
        lcd.print(trk.current + 1);
        previousMode = TRACK_WRITE;
        break;
      case TRACK_PLAY:
        lcd.setCursor(0,0);
    53ce:	40 e0       	ldi	r20, 0x00	; 0
    53d0:	60 e0       	ldi	r22, 0x00	; 0
    53d2:	8e e2       	ldi	r24, 0x2E	; 46
    53d4:	94 e0       	ldi	r25, 0x04	; 4
    53d6:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:223
        lcd.print("   Track Play   ");
    53da:	64 e5       	ldi	r22, 0x54	; 84
    53dc:	73 e0       	ldi	r23, 0x03	; 3
    53de:	8e e2       	ldi	r24, 0x2E	; 46
    53e0:	94 e0       	ldi	r25, 0x04	; 4
    53e2:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:224
        lcd.setCursor(0,1);
    53e6:	41 e0       	ldi	r20, 0x01	; 1
    53e8:	60 e0       	ldi	r22, 0x00	; 0
    53ea:	8e e2       	ldi	r24, 0x2E	; 46
    53ec:	94 e0       	ldi	r25, 0x04	; 4
    53ee:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:225
        LcdClearLine(); 
    53f2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LcdClearLine()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:226
        lcd.setCursor(0,1);
    53f6:	41 e0       	ldi	r20, 0x01	; 1
    53f8:	60 e0       	ldi	r22, 0x00	; 0
    53fa:	8e e2       	ldi	r24, 0x2E	; 46
    53fc:	94 e0       	ldi	r25, 0x04	; 4
    53fe:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:227
        lcd.print("pos:");
    5402:	65 e6       	ldi	r22, 0x65	; 101
    5404:	73 e0       	ldi	r23, 0x03	; 3
    5406:	8e e2       	ldi	r24, 0x2E	; 46
    5408:	94 e0       	ldi	r25, 0x04	; 4
    540a:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:228
        lcd.print(trk.pos + 1);                                                 // [zabox]
    540e:	60 91 93 04 	lds	r22, 0x0493	; 0x800493 <trk+0x2>
    5412:	70 91 94 04 	lds	r23, 0x0494	; 0x800494 <trk+0x3>
    5416:	6f 5f       	subi	r22, 0xFF	; 255
    5418:	7f 4f       	sbci	r23, 0xFF	; 255
    541a:	4a e0       	ldi	r20, 0x0A	; 10
    541c:	50 e0       	ldi	r21, 0x00	; 0
    541e:	8e e2       	ldi	r24, 0x2E	; 46
    5420:	94 e0       	ldi	r25, 0x04	; 4
    5422:	0e 94 30 4a 	call	0x9460	; 0x9460 <Print::print(unsigned int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:229
        lcd.setCursor(8,1);
    5426:	41 e0       	ldi	r20, 0x01	; 1
    5428:	68 e0       	ldi	r22, 0x08	; 8
    542a:	8e e2       	ldi	r24, 0x2E	; 46
    542c:	94 e0       	ldi	r25, 0x04	; 4
    542e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:230
        lcd.print("ptrn:");
    5432:	6a e6       	ldi	r22, 0x6A	; 106
    5434:	73 e0       	ldi	r23, 0x03	; 3
    5436:	8e e2       	ldi	r24, 0x2E	; 46
    5438:	94 e0       	ldi	r25, 0x04	; 4
    543a:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:231
        lcd.print((char)((curPattern / 16) + 65));
    543e:	60 91 34 1e 	lds	r22, 0x1E34	; 0x801e34 <curPattern>
    5442:	62 95       	swap	r22
    5444:	6f 70       	andi	r22, 0x0F	; 15
    5446:	6f 5b       	subi	r22, 0xBF	; 191
    5448:	8e e2       	ldi	r24, 0x2E	; 46
    544a:	94 e0       	ldi	r25, 0x04	; 4
    544c:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:232
        lcd.print((curPattern - (((curPattern / 16)*NBR_PATTERN)) + 1));        // [zabox] step button alignement
    5450:	80 91 34 1e 	lds	r24, 0x1E34	; 0x801e34 <curPattern>
    5454:	68 2f       	mov	r22, r24
    5456:	70 e0       	ldi	r23, 0x00	; 0
    5458:	82 95       	swap	r24
    545a:	8f 70       	andi	r24, 0x0F	; 15
    545c:	90 e1       	ldi	r25, 0x10	; 16
    545e:	89 9f       	mul	r24, r25
    5460:	60 19       	sub	r22, r0
    5462:	71 09       	sbc	r23, r1
    5464:	11 24       	eor	r1, r1
    5466:	6f 5f       	subi	r22, 0xFF	; 255
    5468:	7f 4f       	sbci	r23, 0xFF	; 255
    546a:	4a e0       	ldi	r20, 0x0A	; 10
    546c:	50 e0       	ldi	r21, 0x00	; 0
    546e:	8e e2       	ldi	r24, 0x2E	; 46
    5470:	94 e0       	ldi	r25, 0x04	; 4
    5472:	0e 94 15 4a 	call	0x942a	; 0x942a <Print::print(int, int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:233
         previousMode = TRACK_PLAY;
    5476:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <LcdUpdate()::previousMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/LCD.ino:238
        break;
      }
    }
  }
}
    547a:	e9 cb       	rjmp	.-2094   	; 0x4c4e <LcdUpdate()+0x78>

0000547c <setup>:
setup():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:26

////////////////////////Setup//////////////////////
void setup()
{
    547c:	0f 93       	push	r16
    547e:	1f 93       	push	r17
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:27
  InitIO();//cf Dio
    5480:	0e 94 ae 04 	call	0x95c	; 0x95c <InitIO()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:28
  InitButtonCounter();//cf Button
    5484:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <InitButtonCounter()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:30
  
  SetDoutTrig(0);                                           // [zabox] [1.028] no random trigger pin states at startup (bd can oscillate with open trigger)
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	80 e0       	ldi	r24, 0x00	; 0
    548c:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:31
  SetDoutLed(0, 0, 0);                                      //                 no random leds at startup
    5490:	40 e0       	ldi	r20, 0x00	; 0
    5492:	70 e0       	ldi	r23, 0x00	; 0
    5494:	60 e0       	ldi	r22, 0x00	; 0
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	80 e0       	ldi	r24, 0x00	; 0
    549a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SetDoutLed(unsigned int, unsigned int, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:33
  
  initTrigTimer();                                          // [zabox] [1.028]  init 2ms trig timer
    549e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <initTrigTimer()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:34
  initFlamTimer();                                          // flam
    54a2:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <initFlamTimer()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:36
  
  lcd.begin(16, 2);                                         // [zabox] [1.028] must be executed before chreateChar with the new library
    54a6:	20 e0       	ldi	r18, 0x00	; 0
    54a8:	42 e0       	ldi	r20, 0x02	; 2
    54aa:	60 e1       	ldi	r22, 0x10	; 16
    54ac:	8e e2       	ldi	r24, 0x2E	; 46
    54ae:	94 e0       	ldi	r25, 0x04	; 4
    54b0:	0e 94 6f 46 	call	0x8cde	; 0x8cde <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:37
  lcd.createChar(0,font0);
    54b4:	42 e3       	ldi	r20, 0x32	; 50
    54b6:	51 e0       	ldi	r21, 0x01	; 1
    54b8:	60 e0       	ldi	r22, 0x00	; 0
    54ba:	8e e2       	ldi	r24, 0x2E	; 46
    54bc:	94 e0       	ldi	r25, 0x04	; 4
    54be:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <LiquidCrystal::createChar(unsigned char, unsigned char*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:38
  lcd.createChar(1,font1);
    54c2:	4a e2       	ldi	r20, 0x2A	; 42
    54c4:	51 e0       	ldi	r21, 0x01	; 1
    54c6:	61 e0       	ldi	r22, 0x01	; 1
    54c8:	8e e2       	ldi	r24, 0x2E	; 46
    54ca:	94 e0       	ldi	r25, 0x04	; 4
    54cc:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <LiquidCrystal::createChar(unsigned char, unsigned char*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:39
  lcd.createChar(2,font2);
    54d0:	42 e2       	ldi	r20, 0x22	; 34
    54d2:	51 e0       	ldi	r21, 0x01	; 1
    54d4:	62 e0       	ldi	r22, 0x02	; 2
    54d6:	8e e2       	ldi	r24, 0x2E	; 46
    54d8:	94 e0       	ldi	r25, 0x04	; 4
    54da:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <LiquidCrystal::createChar(unsigned char, unsigned char*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:40
  lcd.createChar(3,font3);
    54de:	4a e1       	ldi	r20, 0x1A	; 26
    54e0:	51 e0       	ldi	r21, 0x01	; 1
    54e2:	63 e0       	ldi	r22, 0x03	; 3
    54e4:	8e e2       	ldi	r24, 0x2E	; 46
    54e6:	94 e0       	ldi	r25, 0x04	; 4
    54e8:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <LiquidCrystal::createChar(unsigned char, unsigned char*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:41
  lcd.createChar(4,font4);
    54ec:	42 e1       	ldi	r20, 0x12	; 18
    54ee:	51 e0       	ldi	r21, 0x01	; 1
    54f0:	64 e0       	ldi	r22, 0x04	; 4
    54f2:	8e e2       	ldi	r24, 0x2E	; 46
    54f4:	94 e0       	ldi	r25, 0x04	; 4
    54f6:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <LiquidCrystal::createChar(unsigned char, unsigned char*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:42
  lcd.createChar(5,font5);
    54fa:	4a e0       	ldi	r20, 0x0A	; 10
    54fc:	51 e0       	ldi	r21, 0x01	; 1
    54fe:	65 e0       	ldi	r22, 0x05	; 5
    5500:	8e e2       	ldi	r24, 0x2E	; 46
    5502:	94 e0       	ldi	r25, 0x04	; 4
    5504:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <LiquidCrystal::createChar(unsigned char, unsigned char*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:45
  

  ScanDinBoot();
    5508:	0e 94 ed 06 	call	0xdda	; 0xdda <ScanDinBoot()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:47
  //Init EEprom-------------------------------------
  if (btnPlayStopByte == (BTN_PLAY | BTN_STOP)){
    550c:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <btnPlayStopByte>
    5510:	81 38       	cpi	r24, 0x81	; 129
    5512:	09 f0       	breq	.+2      	; 0x5516 <setup+0x9a>
    5514:	7d c0       	rjmp	.+250    	; 0x5610 <setup+0x194>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:48
    LcdPrintEEpromInit();
    5516:	0e 94 70 09 	call	0x12e0	; 0x12e0 <LcdPrintEEpromInit()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:49
    bootElapseTime = millis();
    551a:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
    551e:	60 93 61 04 	sts	0x0461, r22	; 0x800461 <bootElapseTime>
    5522:	70 93 62 04 	sts	0x0462, r23	; 0x800462 <bootElapseTime+0x1>
    5526:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <bootElapseTime+0x2>
    552a:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <bootElapseTime+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:51
    while (1){
      ButtonGet();
    552e:	0e 94 66 05 	call	0xacc	; 0xacc <ButtonGet()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:52
      if((millis() - bootElapseTime) > BOOTLOADER_TIME) break;
    5532:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
    5536:	00 91 61 04 	lds	r16, 0x0461	; 0x800461 <bootElapseTime>
    553a:	10 91 62 04 	lds	r17, 0x0462	; 0x800462 <bootElapseTime+0x1>
    553e:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <bootElapseTime+0x2>
    5542:	30 91 64 04 	lds	r19, 0x0464	; 0x800464 <bootElapseTime+0x3>
    5546:	60 1b       	sub	r22, r16
    5548:	71 0b       	sbc	r23, r17
    554a:	82 0b       	sbc	r24, r18
    554c:	93 0b       	sbc	r25, r19
    554e:	69 38       	cpi	r22, 0x89	; 137
    5550:	73 41       	sbci	r23, 0x13	; 19
    5552:	81 05       	cpc	r24, r1
    5554:	91 05       	cpc	r25, r1
    5556:	50 f4       	brcc	.+20     	; 0x556c <setup+0xf0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:53
      if (playBtn.pressed && enterBtn.pressed){
    5558:	80 91 4f 1f 	lds	r24, 0x1F4F	; 0x801f4f <playBtn+0x2>
    555c:	88 23       	and	r24, r24
    555e:	39 f3       	breq	.-50     	; 0x552e <setup+0xb2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:53 (discriminator 1)
    5560:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <enterBtn+0x2>
    5564:	88 23       	and	r24, r24
    5566:	19 f3       	breq	.-58     	; 0x552e <setup+0xb2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:54
        InitEEprom();
    5568:	0e 94 21 21 	call	0x4242	; 0x4242 <InitEEprom()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:70
      SetDacA(MAX_VEL);
    }
  }


  InitSeq();// cf Seq
    556c:	0e 94 39 25 	call	0x4a72	; 0x4a72 <InitSeq()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:72
  //Load default track
  LoadTrack(0);
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	0e 94 4c 24 	call	0x4898	; 0x4898 <LoadTrack(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:74
  //Load default pattern
  LoadPattern(0);
    5576:	80 e0       	ldi	r24, 0x00	; 0
    5578:	0e 94 88 22 	call	0x4510	; 0x4510 <LoadPattern(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:75
  ptrnBuffer = !ptrnBuffer;
    557c:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    5580:	91 e0       	ldi	r25, 0x01	; 1
    5582:	89 27       	eor	r24, r25
    5584:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <ptrnBuffer>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:76
  InitPattern();
    5588:	0e 94 57 13 	call	0x26ae	; 0x26ae <InitPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:77
  SetHHPattern();
    558c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <SetHHPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:78
  InstToStepWord();
    5590:	0e 94 c2 13 	call	0x2784	; 0x2784 <InstToStepWord()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:79
  SetMuxTrigMidi(RM, 0);                                    // [zabox] workaround. without the line, the first played step/instrument after power on had no sound
    5594:	60 e0       	ldi	r22, 0x00	; 0
    5596:	83 e0       	ldi	r24, 0x03	; 3
    5598:	0e 94 19 10 	call	0x2032	; 0x2032 <SetMuxTrigMidi(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:80
  SetDoutTrig(0);
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	80 e0       	ldi	r24, 0x00	; 0
    55a0:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:83
  

  MIDI.begin();//Serial1.begin(MIDI_BAUD);
    55a4:	61 e0       	ldi	r22, 0x01	; 1
    55a6:	8b e1       	ldi	r24, 0x1B	; 27
    55a8:	90 e2       	ldi	r25, 0x20	; 32
    55aa:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <MIDI_Class::begin(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:86
  //MIDI.setHandleNoteOn(HandleNoteOn);                     // [zabox] [1.028] moved bc expander mode
  //MIDI.setHandleNoteOff(HandleNoteOff);                   // 
  MIDI.setInputChannel(seq.RXchannel);
    55ae:	60 91 43 1e 	lds	r22, 0x1E43	; 0x801e43 <seq+0x4>
    55b2:	8b e1       	ldi	r24, 0x1B	; 27
    55b4:	90 e2       	ldi	r25, 0x20	; 32
    55b6:	0e 94 9f 3d 	call	0x7b3e	; 0x7b3e <MIDI_Class::setInputChannel(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:87
  MIDI.turnThruOff();                                       // [zabox] fixes double real time messages on midi out
    55ba:	8b e1       	ldi	r24, 0x1B	; 27
    55bc:	90 e2       	ldi	r25, 0x20	; 32
    55be:	0e 94 3c 3f 	call	0x7e78	; 0x7e78 <MIDI_Class::turnThruOff()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:96
  Serial.begin(115200);
  Serial.print("freeMemory()=");
  Serial.println(freeMemory());

#endif
  sei();
    55c2:	78 94       	sei
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:100

  //-----------------------------------------------

  lcd.clear();
    55c4:	8e e2       	ldi	r24, 0x2E	; 46
    55c6:	94 e0       	ldi	r25, 0x04	; 4
    55c8:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <LiquidCrystal::clear()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:101
  lcd.setCursor(0, 0);
    55cc:	40 e0       	ldi	r20, 0x00	; 0
    55ce:	60 e0       	ldi	r22, 0x00	; 0
    55d0:	8e e2       	ldi	r24, 0x2E	; 46
    55d2:	94 e0       	ldi	r25, 0x04	; 4
    55d4:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:102
  lcd.print("NAVA Custom v1.0");
    55d8:	60 e7       	ldi	r22, 0x70	; 112
    55da:	73 e0       	ldi	r23, 0x03	; 3
    55dc:	8e e2       	ldi	r24, 0x2E	; 46
    55de:	94 e0       	ldi	r25, 0x04	; 4
    55e0:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:103
  lcd.setCursor(0,1);
    55e4:	41 e0       	ldi	r20, 0x01	; 1
    55e6:	60 e0       	ldi	r22, 0x00	; 0
    55e8:	8e e2       	ldi	r24, 0x2E	; 46
    55ea:	94 e0       	ldi	r25, 0x04	; 4
    55ec:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:104
  lcd.print("by Oliver Series");
    55f0:	61 e8       	ldi	r22, 0x81	; 129
    55f2:	73 e0       	ldi	r23, 0x03	; 3
    55f4:	8e e2       	ldi	r24, 0x2E	; 46
    55f6:	94 e0       	ldi	r25, 0x04	; 4
    55f8:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:105
  delay(2000);
    55fc:	60 ed       	ldi	r22, 0xD0	; 208
    55fe:	77 e0       	ldi	r23, 0x07	; 7
    5600:	80 e0       	ldi	r24, 0x00	; 0
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	0e 94 a6 4b 	call	0x974c	; 0x974c <delay>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:108
  LcdUpdate();                                              // [1.028] if started in expader mode

}
    5608:	1f 91       	pop	r17
    560a:	0f 91       	pop	r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:106
  lcd.setCursor(0, 0);
  lcd.print("NAVA Custom v1.0");
  lcd.setCursor(0,1);
  lcd.print("by Oliver Series");
  delay(2000);
  LcdUpdate();                                              // [1.028] if started in expader mode
    560c:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <LcdUpdate()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:62
        break;
      }
    }
  }
  //TM2 adjustement for velocity
  else if (btnEnterByte == BTN_ENTER){
    5610:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <btnEnterByte>
    5614:	88 30       	cpi	r24, 0x08	; 8
    5616:	09 f0       	breq	.+2      	; 0x561a <setup+0x19e>
    5618:	a9 cf       	rjmp	.-174    	; 0x556c <setup+0xf0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:63
    LcdPrintTM2Adjust();
    561a:	0e 94 90 09 	call	0x1320	; 0x1320 <LcdPrintTM2Adjust()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:65 (discriminator 1)
    while (1){
      SetDacA(MAX_VEL);
    561e:	8f e7       	ldi	r24, 0x7F	; 127
    5620:	0e 94 d1 06 	call	0xda2	; 0xda2 <SetDacA(unsigned char)>
    5624:	fc cf       	rjmp	.-8      	; 0x561e <setup+0x1a2>

00005626 <SeqConfigurationExpander()>:
_Z24SeqConfigurationExpanderv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:169


void SeqConfigurationExpander()
{
  
   if (shiftBtn) {
    5626:	80 91 7a 1e 	lds	r24, 0x1E7A	; 0x801e7a <shiftBtn>
    562a:	88 23       	and	r24, r24
    562c:	f1 f0       	breq	.+60     	; 0x566a <SeqConfigurationExpander()+0x44>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:171
      
      if (tempoBtn.justPressed){
    562e:	80 91 03 1f 	lds	r24, 0x1F03	; 0x801f03 <tempoBtn+0x3>
    5632:	88 23       	and	r24, r24
    5634:	d1 f0       	breq	.+52     	; 0x566a <SeqConfigurationExpander()+0x44>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:172
        seq.configMode  = TRUE;
    5636:	91 e0       	ldi	r25, 0x01	; 1
    5638:	90 93 4a 1e 	sts	0x1E4A, r25	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:173
        seq.configPage++;
    563c:	80 91 49 1e 	lds	r24, 0x1E49	; 0x801e49 <seq+0xa>
    5640:	8f 5f       	subi	r24, 0xFF	; 255
    5642:	80 93 49 1e 	sts	0x1E49, r24	; 0x801e49 <seq+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:174
        curIndex = 0;
    5646:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <curIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:175
        bankLed = 0;
    564a:	10 92 5c 1e 	sts	0x1E5C, r1	; 0x801e5c <bankLed>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:176
        muteLed = 0;
    564e:	10 92 5b 1e 	sts	0x1E5B, r1	; 0x801e5b <muteLed>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:177
        needLcdUpdate = TRUE;
    5652:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:178
        if (seq.configPage > MAX_CONF_PAGE){
    5656:	83 30       	cpi	r24, 0x03	; 3
    5658:	60 f0       	brcs	.+24     	; 0x5672 <SeqConfigurationExpander()+0x4c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:179
          seq.configPage = 0;
    565a:	10 92 49 1e 	sts	0x1E49, r1	; 0x801e49 <seq+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:180
          seq.configMode  = FALSE;
    565e:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:181
          seq.setupNeedSaved = FALSE;
    5662:	10 92 4b 1e 	sts	0x1E4B, r1	; 0x801e4b <seq+0xc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:182
          LcdUpdate();
    5666:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <LcdUpdate()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:187
        }
      }
    }
    
    if (seq.configMode) {
    566a:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    566e:	88 23       	and	r24, r24
    5670:	69 f1       	breq	.+90     	; 0x56cc <SeqConfigurationExpander()+0xa6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:189
            
      ButtonGet();
    5672:	0e 94 66 05 	call	0xacc	; 0xacc <ButtonGet()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:190
      EncGet();
    5676:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <EncGet()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:192
      
      if (encBtn.justPressed){
    567a:	80 91 3a 1f 	lds	r24, 0x1F3A	; 0x801f3a <encBtn+0x3>
    567e:	88 23       	and	r24, r24
    5680:	51 f0       	breq	.+20     	; 0x5696 <SeqConfigurationExpander()+0x70>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:193
        curIndex++;
    5682:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <curIndex>
    5686:	8f 5f       	subi	r24, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:194
        if (curIndex >= MAX_CUR_POS)  curIndex = 0;
    5688:	84 30       	cpi	r24, 0x04	; 4
    568a:	e8 f4       	brcc	.+58     	; 0x56c6 <SeqConfigurationExpander()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:193
            
      ButtonGet();
      EncGet();
      
      if (encBtn.justPressed){
        curIndex++;
    568c:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <curIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:195
        if (curIndex >= MAX_CUR_POS)  curIndex = 0;
        needLcdUpdate = TRUE;
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:198
      }
      
      if (playBtn.justPressed) {
    5696:	80 91 50 1f 	lds	r24, 0x1F50	; 0x801f50 <playBtn+0x3>
    569a:	88 23       	and	r24, r24
    569c:	49 f0       	breq	.+18     	; 0x56b0 <SeqConfigurationExpander()+0x8a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:199
          seq.configPage = 0;
    569e:	10 92 49 1e 	sts	0x1E49, r1	; 0x801e49 <seq+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:200
          seq.configMode  = FALSE;
    56a2:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:201
          seq.setupNeedSaved = FALSE;
    56a6:	10 92 4b 1e 	sts	0x1E4B, r1	; 0x801e4b <seq+0xc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:202
          needLcdUpdate = TRUE;
    56aa:	81 e0       	ldi	r24, 0x01	; 1
    56ac:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:206
      }
      

      SeqConfiguration();
    56b0:	0e 94 79 20 	call	0x40f2	; 0x40f2 <SeqConfiguration()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:207
      if (enterBtn.justRelease) needLcdUpdate = TRUE;
    56b4:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <enterBtn+0x4>
    56b8:	88 23       	and	r24, r24
    56ba:	19 f0       	breq	.+6      	; 0x56c2 <SeqConfigurationExpander()+0x9c>
    56bc:	81 e0       	ldi	r24, 0x01	; 1
    56be:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:208
      LcdUpdate();
    56c2:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <LcdUpdate()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:194
      ButtonGet();
      EncGet();
      
      if (encBtn.justPressed){
        curIndex++;
        if (curIndex >= MAX_CUR_POS)  curIndex = 0;
    56c6:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <curIndex>
    56ca:	e2 cf       	rjmp	.-60     	; 0x5690 <SeqConfigurationExpander()+0x6a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:211
      SeqConfiguration();
      if (enterBtn.justRelease) needLcdUpdate = TRUE;
      LcdUpdate();
    }
  
}
    56cc:	08 95       	ret

000056ce <Expander()>:
_Z8Expanderv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:10


void Expander() 
{
  
  while(seq.sync == EXPANDER) {
    56ce:	80 91 40 1e 	lds	r24, 0x1E40	; 0x801e40 <seq+0x1>
    56d2:	82 30       	cpi	r24, 0x02	; 2
    56d4:	a1 f4       	brne	.+40     	; 0x56fe <Expander()+0x30>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:18
      DIN_START_LOW;
      delayMicroseconds(1);
      DIN_START_HIGH;
    #endif
       
    MIDI.read();
    56d6:	8b e1       	ldi	r24, 0x1B	; 27
    56d8:	90 e2       	ldi	r25, 0x20	; 32
    56da:	0e 94 9d 42 	call	0x853a	; 0x853a <MIDI_Class::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:19
    TriggerOffTimer();
    56de:	0e 94 6f 07 	call	0xede	; 0xede <TriggerOffTimer()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:20
    if (!(gateInst & 1)) SetTrigPeriod(TRIG_LENGHT);
    56e2:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <gateInst>
    56e6:	80 fd       	sbrc	r24, 0
    56e8:	03 c0       	rjmp	.+6      	; 0x56f0 <Expander()+0x22>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:20 (discriminator 1)
    56ea:	8a e0       	ldi	r24, 0x0A	; 10
    56ec:	0e 94 0a 07 	call	0xe14	; 0xe14 <SetTrigPeriod(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:22
    
    ButtonGetExpander();
    56f0:	0e 94 b1 07 	call	0xf62	; 0xf62 <ButtonGetExpander()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:23
    SetLedsExpander();
    56f4:	0e 94 93 08 	call	0x1126	; 0x1126 <SetLedsExpander()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:25
    
    SeqConfigurationExpander();
    56f8:	0e 94 13 2b 	call	0x5626	; 0x5626 <SeqConfigurationExpander()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:10


void Expander() 
{
  
  while(seq.sync == EXPANDER) {
    56fc:	e8 cf       	rjmp	.-48     	; 0x56ce <Expander()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Expander.ino:29
    
    SeqConfigurationExpander();
     
  }
  
}
    56fe:	08 95       	ret

00005700 <SeqParameter()>:
_Z12SeqParameterv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:8
//                 SEQ Parameter
//-------------------------------------------------
int selection = 0;
/////////////////////Function//////////////////////
void SeqParameter()
{  
    5700:	2f 92       	push	r2
    5702:	3f 92       	push	r3
    5704:	4f 92       	push	r4
    5706:	5f 92       	push	r5
    5708:	6f 92       	push	r6
    570a:	7f 92       	push	r7
    570c:	8f 92       	push	r8
    570e:	9f 92       	push	r9
    5710:	af 92       	push	r10
    5712:	bf 92       	push	r11
    5714:	cf 92       	push	r12
    5716:	df 92       	push	r13
    5718:	ef 92       	push	r14
    571a:	ff 92       	push	r15
    571c:	0f 93       	push	r16
    571e:	1f 93       	push	r17
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	00 d0       	rcall	.+0      	; 0x5726 <SeqParameter()+0x26>
    5726:	00 d0       	rcall	.+0      	; 0x5728 <SeqParameter()+0x28>
    5728:	00 d0       	rcall	.+0      	; 0x572a <SeqParameter()+0x2a>
    572a:	cd b7       	in	r28, 0x3d	; 61
    572c:	de b7       	in	r29, 0x3e	; 62
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:9
  readButtonState = StepButtonGet(MOMENTARY);
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	0e 94 98 01 	call	0x330	; 0x330 <StepButtonGet(unsigned char)>
    5734:	90 93 78 1e 	sts	0x1E78, r25	; 0x801e78 <readButtonState+0x1>
    5738:	80 93 77 1e 	sts	0x1E77, r24	; 0x801e77 <readButtonState>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:11
  //can not access config when isRunning
  if (isRunning && seq.configMode){
    573c:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    5740:	88 23       	and	r24, r24
    5742:	49 f0       	breq	.+18     	; 0x5756 <SeqParameter()+0x56>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:11 (discriminator 1)
    5744:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    5748:	88 23       	and	r24, r24
    574a:	29 f0       	breq	.+10     	; 0x5756 <SeqParameter()+0x56>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:12
    seq.configMode = FALSE;
    574c:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:13
    needLcdUpdate = TRUE;
    5750:	81 e0       	ldi	r24, 0x01	; 1
    5752:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:15
  }
  if (curSeqMode != MUTE) muteBtn.counter = 0;
    5756:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    575a:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    575e:	05 97       	sbiw	r24, 0x05	; 5
    5760:	11 f0       	breq	.+4      	; 0x5766 <SeqParameter()+0x66>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:15 (discriminator 1)
    5762:	10 92 b9 1e 	sts	0x1EB9, r1	; 0x801eb9 <muteBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:16
  if (!seq.configMode) seq.configPage = 0;
    5766:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    576a:	81 11       	cpse	r24, r1
    576c:	02 c0       	rjmp	.+4      	; 0x5772 <SeqParameter()+0x72>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:16 (discriminator 1)
    576e:	10 92 49 1e 	sts	0x1E49, r1	; 0x801e49 <seq+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:19

  //-------------------Encoder button---------------------------
  if(encBtn.justPressed){
    5772:	80 91 3a 1f 	lds	r24, 0x1F3A	; 0x801f3a <encBtn+0x3>
    5776:	88 23       	and	r24, r24
    5778:	59 f0       	breq	.+22     	; 0x5790 <SeqParameter()+0x90>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:20
    curIndex++;
    577a:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <curIndex>
    577e:	8f 5f       	subi	r24, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:21
    if (curIndex >= MAX_CUR_POS)  curIndex = 0;
    5780:	84 30       	cpi	r24, 0x04	; 4
    5782:	08 f0       	brcs	.+2      	; 0x5786 <SeqParameter()+0x86>
    5784:	f1 c0       	rjmp	.+482    	; 0x5968 <SeqParameter()+0x268>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:20
  if (curSeqMode != MUTE) muteBtn.counter = 0;
  if (!seq.configMode) seq.configPage = 0;

  //-------------------Encoder button---------------------------
  if(encBtn.justPressed){
    curIndex++;
    5786:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <curIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:22
    if (curIndex >= MAX_CUR_POS)  curIndex = 0;
    needLcdUpdate = TRUE;
    578a:	81 e0       	ldi	r24, 0x01	; 1
    578c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:25
  }
  //-------------------play button---------------------------
  if (playBtn.justPressed || midiStart){
    5790:	80 91 50 1f 	lds	r24, 0x1F50	; 0x801f50 <playBtn+0x3>
    5794:	81 11       	cpse	r24, r1
    5796:	04 c0       	rjmp	.+8      	; 0x57a0 <SeqParameter()+0xa0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:25 (discriminator 1)
    5798:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <midiStart>
    579c:	88 23       	and	r24, r24
    579e:	01 f1       	breq	.+64     	; 0x57e0 <SeqParameter()+0xe0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:26
    isRunning = TRUE;
    57a0:	01 e0       	ldi	r16, 0x01	; 1
    57a2:	00 93 39 1e 	sts	0x1E39, r16	; 0x801e39 <isRunning>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:27
    isStop = FALSE;
    57a6:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <isStop>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:28
    ppqn = 0;
    57aa:	10 92 3e 1e 	sts	0x1E3E, r1	; 0x801e3e <ppqn>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:29
    stepCount = 0;
    57ae:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <stepCount+0x1>
    57b2:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <stepCount>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:30
    tapStepCount = 0;
    57b6:	10 92 3c 1e 	sts	0x1E3C, r1	; 0x801e3c <tapStepCount>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:31
    changeDir = 1;//restart Forward
    57ba:	00 93 2e 1e 	sts	0x1E2E, r16	; 0x801e2e <changeDir>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:32
    stopBtn.counter = 0;
    57be:	10 92 48 1f 	sts	0x1F48, r1	; 0x801f48 <stopBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:33
    shufPolarity = 0;//Init shuffle polarity
    57c2:	10 92 2a 1e 	sts	0x1E2A, r1	; 0x801e2a <shufPolarity>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:34
    noteIndexCpt = 0;//init ext instrument note index counter
    57c6:	10 92 3a 1e 	sts	0x1E3A, r1	; 0x801e3a <noteIndexCpt>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:35
    blinkTempo = 0;                                                               // [zabox] looks more consistent
    57ca:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <blinkTempo>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:44
     nextPattern = group.firstPattern + group.pos;
     if(curPattern != nextPattern) selectedPatternChanged = TRUE;
     trackPosNeedIncremante = FALSE;
     needLcdUpdate = TRUE;*/

    MIDI.sendRealTime(Start);  //;MidiSend(START_CMD);
    57ce:	6a ef       	ldi	r22, 0xFA	; 250
    57d0:	70 e0       	ldi	r23, 0x00	; 0
    57d2:	8b e1       	ldi	r24, 0x1B	; 27
    57d4:	90 e2       	ldi	r25, 0x20	; 32
    57d6:	0e 94 67 3f 	call	0x7ece	; 0x7ece <MIDI_Class::sendRealTime(kMIDIType)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:45
      DIN_START_HIGH;
    57da:	10 9a       	sbi	0x02, 0	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:46
      dinStartState = HIGH;
    57dc:	00 93 66 04 	sts	0x0466, r16	; 0x800466 <dinStartState>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:52
//    DIN_CLK_HIGH;                                                               // [1.028] redundant
//    dinClkState = HIGH;
  }

  //-------------------stop button------------------------------
  if ((stopBtn.justPressed && !instBtn) || midiStop || midiContinue){
    57e0:	80 91 45 1f 	lds	r24, 0x1F45	; 0x801f45 <stopBtn+0x3>
    57e4:	88 23       	and	r24, r24
    57e6:	21 f0       	breq	.+8      	; 0x57f0 <SeqParameter()+0xf0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:52 (discriminator 1)
    57e8:	80 91 7b 1e 	lds	r24, 0x1E7B	; 0x801e7b <instBtn>
    57ec:	88 23       	and	r24, r24
    57ee:	41 f0       	breq	.+16     	; 0x5800 <SeqParameter()+0x100>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:52 (discriminator 3)
    57f0:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <midiStop>
    57f4:	81 11       	cpse	r24, r1
    57f6:	04 c0       	rjmp	.+8      	; 0x5800 <SeqParameter()+0x100>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:52 (discriminator 4)
    57f8:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <midiContinue>
    57fc:	88 23       	and	r24, r24
    57fe:	a1 f0       	breq	.+40     	; 0x5828 <SeqParameter()+0x128>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:54
    //Init Midi note off
    SendAllNoteOff();//InitMidiNoteOff();
    5800:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <SendAllNoteOff()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:55
    if (midiStop) stopBtn.counter = 0;
    5804:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <midiStop>
    5808:	88 23       	and	r24, r24
    580a:	09 f4       	brne	.+2      	; 0x580e <SeqParameter()+0x10e>
    580c:	b0 c0       	rjmp	.+352    	; 0x596e <SeqParameter()+0x26e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:55 (discriminator 1)
    580e:	10 92 48 1f 	sts	0x1F48, r1	; 0x801f48 <stopBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:57
    else if (midiContinue) stopBtn.counter = 1;
    stopBtn.counter++;
    5812:	80 91 48 1f 	lds	r24, 0x1F48	; 0x801f48 <stopBtn+0x6>
    5816:	8f 5f       	subi	r24, 0xFF	; 255
    5818:	80 93 48 1f 	sts	0x1F48, r24	; 0x801f48 <stopBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:58
    switch (stopBtn.counter){
    581c:	81 30       	cpi	r24, 0x01	; 1
    581e:	09 f4       	brne	.+2      	; 0x5822 <SeqParameter()+0x122>
    5820:	af c0       	rjmp	.+350    	; 0x5980 <SeqParameter()+0x280>
    5822:	82 30       	cpi	r24, 0x02	; 2
    5824:	09 f4       	brne	.+2      	; 0x5828 <SeqParameter()+0x128>
    5826:	ba c0       	rjmp	.+372    	; 0x599c <SeqParameter()+0x29c>
    5828:	20 91 8a 1e 	lds	r18, 0x1E8A	; 0x801e8a <trkBtn+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:79
      break;
    }
  }

  //-------------------Shift button pressed------------------------------
  if (shiftBtn){
    582c:	30 91 7a 1e 	lds	r19, 0x1E7A	; 0x801e7a <shiftBtn>
    5830:	90 91 95 1e 	lds	r25, 0x1E95	; 0x801e95 <ptrnBtn+0x3>
    5834:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <tapBtn+0x3>
    5838:	33 23       	and	r19, r19
    583a:	09 f4       	brne	.+2      	; 0x583e <SeqParameter()+0x13e>
    583c:	c2 c0       	rjmp	.+388    	; 0x59c2 <SeqParameter()+0x2c2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:80
    if (trkBtn.justPressed){
    583e:	22 23       	and	r18, r18
    5840:	69 f0       	breq	.+26     	; 0x585c <SeqParameter()+0x15c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:81
      needLcdUpdate = TRUE;
    5842:	21 e0       	ldi	r18, 0x01	; 1
    5844:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:82
      curSeqMode = TRACK_WRITE;
    5848:	21 e0       	ldi	r18, 0x01	; 1
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <curSeqMode+0x1>
    5850:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <curSeqMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:83
      keyboardMode = FALSE;
    5854:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <keyboardMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:84
      seq.configMode  = FALSE;
    5858:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:86
    }
    if (ptrnBtn.justPressed) {
    585c:	99 23       	and	r25, r25
    585e:	69 f0       	breq	.+26     	; 0x587a <SeqParameter()+0x17a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:87
      needLcdUpdate = TRUE;
    5860:	91 e0       	ldi	r25, 0x01	; 1
    5862:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:88
      curSeqMode = PTRN_STEP;
    5866:	23 e0       	ldi	r18, 0x03	; 3
    5868:	30 e0       	ldi	r19, 0x00	; 0
    586a:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <curSeqMode+0x1>
    586e:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <curSeqMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:89
      seq.configMode  = FALSE;
    5872:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:90
      trackNeedSaved = FALSE;
    5876:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <trackNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:92
    }
    if (tapBtn.justPressed){
    587a:	88 23       	and	r24, r24
    587c:	79 f0       	breq	.+30     	; 0x589c <SeqParameter()+0x19c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:93
      curSeqMode = PTRN_TAP;
    587e:	84 e0       	ldi	r24, 0x04	; 4
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <curSeqMode+0x1>
    5886:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <curSeqMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:94
      needLcdUpdate = TRUE;
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:95
      keyboardMode = FALSE;
    5890:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <keyboardMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:96
      seq.configMode  = FALSE;
    5894:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:97
      trackNeedSaved = FALSE;
    5898:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <trackNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:99
    }
    if (bankBtn.justPressed){
    589c:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <bankBtn+0x3>
    58a0:	88 23       	and	r24, r24
    58a2:	21 f0       	breq	.+8      	; 0x58ac <SeqParameter()+0x1ac>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:100
      CopyPatternToBuffer(curPattern);
    58a4:	80 91 34 1e 	lds	r24, 0x1E34	; 0x801e34 <curPattern>
    58a8:	0e 94 5f 12 	call	0x24be	; 0x24be <CopyPatternToBuffer(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:102
    } // copy current pattern to the buffer
    if (muteBtn.justPressed){
    58ac:	80 91 b6 1e 	lds	r24, 0x1EB6	; 0x801eb6 <muteBtn+0x3>
    58b0:	88 23       	and	r24, r24
    58b2:	39 f0       	breq	.+14     	; 0x58c2 <SeqParameter()+0x1c2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:103
      PasteBufferToPattern(curPattern);
    58b4:	80 91 34 1e 	lds	r24, 0x1E34	; 0x801e34 <curPattern>
    58b8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <PasteBufferToPattern(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:104
      patternWasEdited = TRUE;
    58bc:	81 e0       	ldi	r24, 0x01	; 1
    58be:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:108
    } //paste copy buffered pattern to the current pattern number

    //sequencer configuration page
    if (tempoBtn.justPressed && !isRunning){
    58c2:	80 91 03 1f 	lds	r24, 0x1F03	; 0x801f03 <tempoBtn+0x3>
    58c6:	88 23       	and	r24, r24
    58c8:	b9 f0       	breq	.+46     	; 0x58f8 <SeqParameter()+0x1f8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:108 (discriminator 1)
    58ca:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    58ce:	81 11       	cpse	r24, r1
    58d0:	13 c0       	rjmp	.+38     	; 0x58f8 <SeqParameter()+0x1f8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:109
      seq.configMode  = TRUE;
    58d2:	81 e0       	ldi	r24, 0x01	; 1
    58d4:	80 93 4a 1e 	sts	0x1E4A, r24	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:110
      seq.configPage++;
    58d8:	80 91 49 1e 	lds	r24, 0x1E49	; 0x801e49 <seq+0xa>
    58dc:	8f 5f       	subi	r24, 0xFF	; 255
    58de:	80 93 49 1e 	sts	0x1E49, r24	; 0x801e49 <seq+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:111
      curIndex = 0;
    58e2:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <curIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:112
      if (seq.configPage > MAX_CONF_PAGE){
    58e6:	83 30       	cpi	r24, 0x03	; 3
    58e8:	20 f0       	brcs	.+8      	; 0x58f2 <SeqParameter()+0x1f2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:113
        seq.configPage = 0;
    58ea:	10 92 49 1e 	sts	0x1E49, r1	; 0x801e49 <seq+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:114
        seq.configMode  = FALSE;
    58ee:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:116
      }
      needLcdUpdate = TRUE;
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:174
  }

  //==============================================================================
  //////////////////////////MODE PATTERN EDIT/////////////////////////////////

  if (curSeqMode == PTRN_STEP || curSeqMode == PTRN_TAP){
    58f8:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    58fc:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    5900:	03 97       	sbiw	r24, 0x03	; 3
    5902:	02 97       	sbiw	r24, 0x02	; 2
    5904:	08 f0       	brcs	.+2      	; 0x5908 <SeqParameter()+0x208>
    5906:	54 c6       	rjmp	.+3240   	; 0x65b0 <SeqParameter()+0xeb0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:180

    static boolean curInstChanged;//flag that curInstchanged to not update LCD more than one tiem

    //-------------------Select instrument------------------------------
    //Match with trig shift register out (cf schematic)
    if(readButtonState == 0) doublePush = 0; //init double push if all step button  released 
    5908:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    590c:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    5910:	00 97       	sbiw	r24, 0x00	; 0
    5912:	11 f4       	brne	.+4      	; 0x5918 <SeqParameter()+0x218>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:180 (discriminator 1)
    5914:	10 92 79 1e 	sts	0x1E79, r1	; 0x801e79 <doublePush>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:182

    if (instBtn && readButtonState){          // [zabox] [1.027] added flam
    5918:	20 91 7b 1e 	lds	r18, 0x1E7B	; 0x801e7b <instBtn>
    591c:	22 23       	and	r18, r18
    591e:	09 f4       	brne	.+2      	; 0x5922 <SeqParameter()+0x222>
    5920:	03 c1       	rjmp	.+518    	; 0x5b28 <SeqParameter()+0x428>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:182 (discriminator 1)
    5922:	89 2b       	or	r24, r25
    5924:	09 f4       	brne	.+2      	; 0x5928 <SeqParameter()+0x228>
    5926:	00 c1       	rjmp	.+512    	; 0x5b28 <SeqParameter()+0x428>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:183
      curInstChanged = TRUE;
    5928:	81 e0       	ldi	r24, 0x01	; 1
    592a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <SeqParameter()::curInstChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:184
      keyboardMode = FALSE;
    592e:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <keyboardMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:185
      switch(FirstBitOn()){
    5932:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    5936:	80 31       	cpi	r24, 0x10	; 16
    5938:	08 f0       	brcs	.+2      	; 0x593c <SeqParameter()+0x23c>
    593a:	e5 c0       	rjmp	.+458    	; 0x5b06 <SeqParameter()+0x406>
    593c:	e8 2f       	mov	r30, r24
    593e:	f0 e0       	ldi	r31, 0x00	; 0
    5940:	ec 55       	subi	r30, 0x5C	; 92
    5942:	f3 4d       	sbci	r31, 0xD3	; 211
    5944:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    5948:	62 2d       	mov	r22, r2
    594a:	62 2d       	mov	r22, r2
    594c:	6c 2d       	mov	r22, r12
    594e:	6c 2d       	mov	r22, r12
    5950:	6e 2d       	mov	r22, r14
    5952:	6e 2d       	mov	r22, r14
    5954:	70 2d       	mov	r23, r0
    5956:	70 2d       	mov	r23, r0
    5958:	72 2d       	mov	r23, r2
    595a:	72 2d       	mov	r23, r2
    595c:	74 2d       	mov	r23, r4
    595e:	78 2d       	mov	r23, r8
    5960:	7a 2d       	mov	r23, r10
    5962:	7a 2d       	mov	r23, r10
    5964:	86 30       	cpi	r24, 0x06	; 6
    5966:	84 30       	cpi	r24, 0x04	; 4
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:21 (discriminator 1)
  if (!seq.configMode) seq.configPage = 0;

  //-------------------Encoder button---------------------------
  if(encBtn.justPressed){
    curIndex++;
    if (curIndex >= MAX_CUR_POS)  curIndex = 0;
    5968:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <curIndex>
    596c:	0e cf       	rjmp	.-484    	; 0x578a <SeqParameter()+0x8a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:56
  //-------------------stop button------------------------------
  if ((stopBtn.justPressed && !instBtn) || midiStop || midiContinue){
    //Init Midi note off
    SendAllNoteOff();//InitMidiNoteOff();
    if (midiStop) stopBtn.counter = 0;
    else if (midiContinue) stopBtn.counter = 1;
    596e:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <midiContinue>
    5972:	88 23       	and	r24, r24
    5974:	09 f4       	brne	.+2      	; 0x5978 <SeqParameter()+0x278>
    5976:	4d cf       	rjmp	.-358    	; 0x5812 <SeqParameter()+0x112>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:56 (discriminator 1)
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	80 93 48 1f 	sts	0x1F48, r24	; 0x801f48 <stopBtn+0x6>
    597e:	49 cf       	rjmp	.-366    	; 0x5812 <SeqParameter()+0x112>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:60
    stopBtn.counter++;
    switch (stopBtn.counter){
    case 1:
      isStop = TRUE;
    5980:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <isStop>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:61
      isRunning = FALSE;
    5984:	10 92 39 1e 	sts	0x1E39, r1	; 0x801e39 <isRunning>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:62
      MIDI.sendRealTime(Stop);//;MidiSend(STOP_CMD);
    5988:	6c ef       	ldi	r22, 0xFC	; 252
    598a:	70 e0       	ldi	r23, 0x00	; 0
    598c:	8b e1       	ldi	r24, 0x1B	; 27
    598e:	90 e2       	ldi	r25, 0x20	; 32
    5990:	0e 94 67 3f 	call	0x7ece	; 0x7ece <MIDI_Class::sendRealTime(kMIDIType)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:63
      DIN_START_LOW;
    5994:	10 98       	cbi	0x02, 0	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:64
      dinStartState = LOW;
    5996:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <dinStartState>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:65
      break;
    599a:	46 cf       	rjmp	.-372    	; 0x5828 <SeqParameter()+0x128>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:67
    case 2:
      isStop = FALSE;
    599c:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <isStop>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:68
      isRunning = TRUE;
    59a0:	01 e0       	ldi	r16, 0x01	; 1
    59a2:	00 93 39 1e 	sts	0x1E39, r16	; 0x801e39 <isRunning>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:69
      stopBtn.counter = 0;
    59a6:	10 92 48 1f 	sts	0x1F48, r1	; 0x801f48 <stopBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:70
      ppqn = 0;
    59aa:	10 92 3e 1e 	sts	0x1E3E, r1	; 0x801e3e <ppqn>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:71
      MIDI.sendRealTime(Continue);//MidiSend(CONTINU_CMD);
    59ae:	6b ef       	ldi	r22, 0xFB	; 251
    59b0:	70 e0       	ldi	r23, 0x00	; 0
    59b2:	8b e1       	ldi	r24, 0x1B	; 27
    59b4:	90 e2       	ldi	r25, 0x20	; 32
    59b6:	0e 94 67 3f 	call	0x7ece	; 0x7ece <MIDI_Class::sendRealTime(kMIDIType)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:72
      DIN_START_HIGH;
    59ba:	10 9a       	sbi	0x02, 0	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:73
      dinStartState = HIGH;
    59bc:	00 93 66 04 	sts	0x0466, r16	; 0x800466 <dinStartState>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:74
      break;
    59c0:	33 cf       	rjmp	.-410    	; 0x5828 <SeqParameter()+0x128>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:121
      needLcdUpdate = TRUE;
    }
  }
  //-------------------Shift button released------------------------------
  else {
    if (trkBtn.justPressed){
    59c2:	22 23       	and	r18, r18
    59c4:	59 f0       	breq	.+22     	; 0x59dc <SeqParameter()+0x2dc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:122
      curSeqMode = TRACK_PLAY;
    59c6:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <curSeqMode+0x1>
    59ca:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <curSeqMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:123
      needLcdUpdate = TRUE;
    59ce:	21 e0       	ldi	r18, 0x01	; 1
    59d0:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:124
      keyboardMode = FALSE;
    59d4:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <keyboardMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:125
      seq.configMode  = FALSE;
    59d8:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:130
    }
    // if (backBtn.justPressed) ;//back  track postion
    //if (fwdBtn.justPressed) ;//foward track postion
    if (numBtn.pressed) ;//select Track number
    if (ptrnBtn.justPressed){
    59dc:	99 23       	and	r25, r25
    59de:	b9 f0       	breq	.+46     	; 0x5a0e <SeqParameter()+0x30e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:131
      if (curSeqMode == PTRN_STEP) curSeqMode = PTRN_PLAY;
    59e0:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <curSeqMode>
    59e4:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    59e8:	23 30       	cpi	r18, 0x03	; 3
    59ea:	31 05       	cpc	r19, r1
    59ec:	09 f0       	breq	.+2      	; 0x59f0 <SeqParameter()+0x2f0>
    59ee:	44 c0       	rjmp	.+136    	; 0x5a78 <SeqParameter()+0x378>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:131 (discriminator 1)
    59f0:	22 e0       	ldi	r18, 0x02	; 2
    59f2:	30 e0       	ldi	r19, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:132
      else curSeqMode = PTRN_STEP;
    59f4:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <curSeqMode+0x1>
    59f8:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <curSeqMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:133
      needLcdUpdate = TRUE;
    59fc:	91 e0       	ldi	r25, 0x01	; 1
    59fe:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:134
      keyboardMode = FALSE;
    5a02:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <keyboardMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:135
      seq.configMode  = FALSE;
    5a06:	10 92 4a 1e 	sts	0x1E4A, r1	; 0x801e4a <seq+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:136
      trackNeedSaved = FALSE;
    5a0a:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <trackNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:138
    }
    if (tapBtn.justPressed) ShiftLeftPattern();
    5a0e:	81 11       	cpse	r24, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:138 (discriminator 1)
    5a10:	0e 94 21 14 	call	0x2842	; 0x2842 <ShiftLeftPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:139
    if (dirBtn.justPressed) ShiftRightPattern();
    5a14:	80 91 0e 1f 	lds	r24, 0x1F0E	; 0x801f0e <dirBtn+0x3>
    5a18:	81 11       	cpse	r24, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:139 (discriminator 1)
    5a1a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <ShiftRightPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:140
    if (guideBtn.justPressed){
    5a1e:	80 91 2f 1f 	lds	r24, 0x1F2F	; 0x801f2f <guideBtn+0x3>
    5a22:	88 23       	and	r24, r24
    5a24:	49 f0       	breq	.+18     	; 0x5a38 <SeqParameter()+0x338>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:141
      guideBtn.counter++;
    5a26:	80 91 32 1f 	lds	r24, 0x1F32	; 0x801f32 <guideBtn+0x6>
    5a2a:	8f 5f       	subi	r24, 0xFF	; 255
    5a2c:	80 93 32 1f 	sts	0x1F32, r24	; 0x801f32 <guideBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:142
      switch (guideBtn.counter){
    5a30:	81 30       	cpi	r24, 0x01	; 1
    5a32:	29 f1       	breq	.+74     	; 0x5a7e <SeqParameter()+0x37e>
    5a34:	82 30       	cpi	r24, 0x02	; 2
    5a36:	31 f1       	breq	.+76     	; 0x5a84 <SeqParameter()+0x384>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:153
        guideBtn.counter = 0;
        break;
      }
    }
    //if (bankBtn && readButtonState) curBank = FirstBitOn();
    if (muteBtn.justPressed){
    5a38:	80 91 b6 1e 	lds	r24, 0x1EB6	; 0x801eb6 <muteBtn+0x3>
    5a3c:	88 23       	and	r24, r24
    5a3e:	49 f0       	breq	.+18     	; 0x5a52 <SeqParameter()+0x352>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:154
      muteBtn.counter++;
    5a40:	80 91 b9 1e 	lds	r24, 0x1EB9	; 0x801eb9 <muteBtn+0x6>
    5a44:	8f 5f       	subi	r24, 0xFF	; 255
    5a46:	80 93 b9 1e 	sts	0x1EB9, r24	; 0x801eb9 <muteBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:155
      switch (muteBtn.counter){
    5a4a:	81 30       	cpi	r24, 0x01	; 1
    5a4c:	09 f1       	breq	.+66     	; 0x5a90 <SeqParameter()+0x390>
    5a4e:	82 30       	cpi	r24, 0x02	; 2
    5a50:	71 f1       	breq	.+92     	; 0x5aae <SeqParameter()+0x3ae>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:166
        curSeqMode = prevSeqMode;
        muteBtn.counter = 0;
        break;
      }
    }
    if (curSeqMode != MUTE) muteBtn.counter = 0;
    5a52:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    5a56:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    5a5a:	05 97       	sbiw	r24, 0x05	; 5
    5a5c:	11 f0       	breq	.+4      	; 0x5a62 <SeqParameter()+0x362>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:166 (discriminator 1)
    5a5e:	10 92 b9 1e 	sts	0x1EB9, r1	; 0x801eb9 <muteBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:167
    if (!seq.configMode) seq.configPage = 0;
    5a62:	80 91 4a 1e 	lds	r24, 0x1E4A	; 0x801e4a <seq+0xb>
    5a66:	81 11       	cpse	r24, r1
    5a68:	02 c0       	rjmp	.+4      	; 0x5a6e <SeqParameter()+0x36e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:167 (discriminator 1)
    5a6a:	10 92 49 1e 	sts	0x1E49, r1	; 0x801e49 <seq+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:168
    if (tempoBtn.justRelease) needLcdUpdate = TRUE;
    5a6e:	80 91 04 1f 	lds	r24, 0x1F04	; 0x801f04 <tempoBtn+0x4>
    5a72:	81 11       	cpse	r24, r1
    5a74:	3e cf       	rjmp	.-388    	; 0x58f2 <SeqParameter()+0x1f2>
    5a76:	40 cf       	rjmp	.-384    	; 0x58f8 <SeqParameter()+0x1f8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:132
    // if (backBtn.justPressed) ;//back  track postion
    //if (fwdBtn.justPressed) ;//foward track postion
    if (numBtn.pressed) ;//select Track number
    if (ptrnBtn.justPressed){
      if (curSeqMode == PTRN_STEP) curSeqMode = PTRN_PLAY;
      else curSeqMode = PTRN_STEP;
    5a78:	23 e0       	ldi	r18, 0x03	; 3
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	bb cf       	rjmp	.-138    	; 0x59f4 <SeqParameter()+0x2f4>
_Z9Metronomeb():
    5a7e:	0e 94 33 01 	call	0x266	; 0x266 <Metronome(bool) [clone .part.0]>
    5a82:	da cf       	rjmp	.-76     	; 0x5a38 <SeqParameter()+0x338>
_Z12SeqParameterv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:147
      switch (guideBtn.counter){
      case 1:
        Metronome(TRUE);
        break;
      case 2:
        Metronome(FALSE);
    5a84:	80 e0       	ldi	r24, 0x00	; 0
    5a86:	0e 94 8e 04 	call	0x91c	; 0x91c <Metronome(bool)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:148
        guideBtn.counter = 0;
    5a8a:	10 92 32 1f 	sts	0x1F32, r1	; 0x801f32 <guideBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:149
        break;
    5a8e:	d4 cf       	rjmp	.-88     	; 0x5a38 <SeqParameter()+0x338>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:157
    //if (bankBtn && readButtonState) curBank = FirstBitOn();
    if (muteBtn.justPressed){
      muteBtn.counter++;
      switch (muteBtn.counter){
      case 1:
        prevSeqMode = curSeqMode;
    5a90:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    5a94:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    5a98:	90 93 38 1e 	sts	0x1E38, r25	; 0x801e38 <prevSeqMode+0x1>
    5a9c:	80 93 37 1e 	sts	0x1E37, r24	; 0x801e37 <prevSeqMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:158
        curSeqMode = MUTE; //paste copy buffered pattern to the current pattern number
    5aa0:	85 e0       	ldi	r24, 0x05	; 5
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <curSeqMode+0x1>
    5aa8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <curSeqMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:159
        break;
    5aac:	d2 cf       	rjmp	.-92     	; 0x5a52 <SeqParameter()+0x352>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:161
      case 2:
        curSeqMode = prevSeqMode;
    5aae:	80 91 37 1e 	lds	r24, 0x1E37	; 0x801e37 <prevSeqMode>
    5ab2:	90 91 38 1e 	lds	r25, 0x1E38	; 0x801e38 <prevSeqMode+0x1>
    5ab6:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <curSeqMode+0x1>
    5aba:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <curSeqMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:162
        muteBtn.counter = 0;
    5abe:	10 92 b9 1e 	sts	0x1EB9, r1	; 0x801eb9 <muteBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:163
        break;
    5ac2:	c7 cf       	rjmp	.-114    	; 0x5a52 <SeqParameter()+0x352>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:188
      curInstChanged = TRUE;
      keyboardMode = FALSE;
      switch(FirstBitOn()){
      case BD_BTN:
      case BD_LOW_BTN:
        curInst = BD;
    5ac4:	88 e0       	ldi	r24, 0x08	; 8
    5ac6:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:189
        if (doublePush == 0){
    5aca:	80 91 79 1e 	lds	r24, 0x1E79	; 0x801e79 <doublePush>
    5ace:	81 11       	cpse	r24, r1
    5ad0:	1a c0       	rjmp	.+52     	; 0x5b06 <SeqParameter()+0x406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:242
        curInst = RIDE;
        curFlam = 0;
        break;
      case CRASH_BTN:
        curInst = CRASH;
        curFlam = 0;
    5ad2:	10 92 36 1e 	sts	0x1E36, r1	; 0x801e36 <curFlam>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:243
        break;
    5ad6:	17 c0       	rjmp	.+46     	; 0x5b06 <SeqParameter()+0x406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:195
          curFlam = 0;
        }
        break;
      case SD_BTN:
      case SD_LOW_BTN:
        curInst = SD;
    5ad8:	89 e0       	ldi	r24, 0x09	; 9
    5ada:	f5 cf       	rjmp	.-22     	; 0x5ac6 <SeqParameter()+0x3c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:202
          curFlam = 0;
        }
        break;
      case LT_BTN:
      case LT_LOW_BTN:
        curInst = LT;
    5adc:	8a e0       	ldi	r24, 0x0A	; 10
    5ade:	f3 cf       	rjmp	.-26     	; 0x5ac6 <SeqParameter()+0x3c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:209
          curFlam = 0;
        }
        break;
      case MT_BTN:
      case MT_LOW_BTN:
        curInst = MT;
    5ae0:	8b e0       	ldi	r24, 0x0B	; 11
    5ae2:	f1 cf       	rjmp	.-30     	; 0x5ac6 <SeqParameter()+0x3c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:216
          curFlam = 0;
        }
        break;
      case HT_BTN:
      case HT_LOW_BTN:
        curInst = HT;
    5ae4:	82 e0       	ldi	r24, 0x02	; 2
    5ae6:	ef cf       	rjmp	.-34     	; 0x5ac6 <SeqParameter()+0x3c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:222
        if (doublePush == 0){
          curFlam = 0;
        }
        break;
      case RM_BTN:
        curInst = RM;
    5ae8:	83 e0       	ldi	r24, 0x03	; 3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:241
      case RIDE_BTN:
        curInst = RIDE;
        curFlam = 0;
        break;
      case CRASH_BTN:
        curInst = CRASH;
    5aea:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <curInst>
    5aee:	f1 cf       	rjmp	.-30     	; 0x5ad2 <SeqParameter()+0x3d2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:226
      case RM_BTN:
        curInst = RM;
        curFlam = 0;
        break;
      case HC_BTN:
        curInst = HC;
    5af0:	84 e0       	ldi	r24, 0x04	; 4
    5af2:	fb cf       	rjmp	.-10     	; 0x5aea <SeqParameter()+0x3ea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:231
        curFlam = 0;
        break;
      case CH_BTN:
      case CH_LOW_BTN:
        curFlam = 0;
    5af4:	10 92 36 1e 	sts	0x1E36, r1	; 0x801e36 <curFlam>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:232
        if (doublePush == 0){
    5af8:	80 91 79 1e 	lds	r24, 0x1E79	; 0x801e79 <doublePush>
    5afc:	81 11       	cpse	r24, r1
    5afe:	03 c0       	rjmp	.+6      	; 0x5b06 <SeqParameter()+0x406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:233
          curInst = CH;
    5b00:	8e e0       	ldi	r24, 0x0E	; 14
    5b02:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:249
      }
      //if (readButtonState == OH_BTN){
      //  curInst = OH;
      //  doublePush = 1;
      //}
      switch (readButtonState) {
    5b06:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    5b0a:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    5b0e:	80 33       	cpi	r24, 0x30	; 48
    5b10:	91 05       	cpc	r25, r1
    5b12:	09 f4       	brne	.+2      	; 0x5b16 <SeqParameter()+0x416>
    5b14:	09 c3       	rjmp	.+1554   	; 0x6128 <SeqParameter()+0xa28>
    5b16:	08 f0       	brcs	.+2      	; 0x5b1a <SeqParameter()+0x41a>
    5b18:	fb c2       	rjmp	.+1526   	; 0x6110 <SeqParameter()+0xa10>
    5b1a:	83 30       	cpi	r24, 0x03	; 3
    5b1c:	91 05       	cpc	r25, r1
    5b1e:	09 f4       	brne	.+2      	; 0x5b22 <SeqParameter()+0x422>
    5b20:	03 c3       	rjmp	.+1542   	; 0x6128 <SeqParameter()+0xa28>
    5b22:	0c 97       	sbiw	r24, 0x0c	; 12
    5b24:	09 f4       	brne	.+2      	; 0x5b28 <SeqParameter()+0x428>
    5b26:	00 c3       	rjmp	.+1536   	; 0x6128 <SeqParameter()+0xa28>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:280
        
        
        
        
    }
    if (curInstChanged && stepsBtn.justRelease){
    5b28:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <SeqParameter()::curInstChanged>
    5b2c:	88 23       	and	r24, r24
    5b2e:	49 f0       	breq	.+18     	; 0x5b42 <SeqParameter()+0x442>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:280 (discriminator 1)
    5b30:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <stepsBtn+0x4>
    5b34:	88 23       	and	r24, r24
    5b36:	29 f0       	breq	.+10     	; 0x5b42 <SeqParameter()+0x442>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:281
      needLcdUpdate = TRUE;
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:282
      curInstChanged = FALSE;
    5b3e:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <SeqParameter()::curInstChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:284
    }
    if (instBtn && enterBtn.justPressed){
    5b42:	80 91 7b 1e 	lds	r24, 0x1E7B	; 0x801e7b <instBtn>
    5b46:	88 23       	and	r24, r24
    5b48:	99 f0       	breq	.+38     	; 0x5b70 <SeqParameter()+0x470>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:284 (discriminator 1)
    5b4a:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <enterBtn+0x3>
    5b4e:	88 23       	and	r24, r24
    5b50:	31 f0       	breq	.+12     	; 0x5b5e <SeqParameter()+0x45e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:285
      curInst = TOTAL_ACC;
    5b52:	8c e0       	ldi	r24, 0x0C	; 12
    5b54:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:286
      needLcdUpdate = TRUE;
    5b58:	81 e0       	ldi	r24, 0x01	; 1
    5b5a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:288
    }
    if (instBtn && stopBtn.justPressed){
    5b5e:	80 91 45 1f 	lds	r24, 0x1F45	; 0x801f45 <stopBtn+0x3>
    5b62:	88 23       	and	r24, r24
    5b64:	29 f0       	breq	.+10     	; 0x5b70 <SeqParameter()+0x470>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:289
      curInst = TRIG_OUT;
    5b66:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:290
      needLcdUpdate = TRUE;
    5b6a:	81 e0       	ldi	r24, 0x01	; 1
    5b6c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:292
    }
    if (shiftBtn && guideBtn.justPressed){
    5b70:	80 91 7a 1e 	lds	r24, 0x1E7A	; 0x801e7a <shiftBtn>
    5b74:	88 23       	and	r24, r24
    5b76:	51 f0       	breq	.+20     	; 0x5b8c <SeqParameter()+0x48c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:292 (discriminator 1)
    5b78:	80 91 2f 1f 	lds	r24, 0x1F2F	; 0x801f2f <guideBtn+0x3>
    5b7c:	88 23       	and	r24, r24
    5b7e:	31 f0       	breq	.+12     	; 0x5b8c <SeqParameter()+0x48c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:293
      curInst = EXT_INST;
    5b80:	8d e0       	ldi	r24, 0x0D	; 13
    5b82:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:294
      needLcdUpdate = TRUE;
    5b86:	81 e0       	ldi	r24, 0x01	; 1
    5b88:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
    5b8c:	60 91 7f 1e 	lds	r22, 0x1E7F	; 0x801e7f <clearBtn+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:298
    }

    //-------------------Clear Button------------------------------
    if (clearBtn.pressed && !keyboardMode && curSeqMode != PTRN_TAP && isRunning){
    5b90:	80 91 7e 1e 	lds	r24, 0x1E7E	; 0x801e7e <clearBtn+0x2>
    5b94:	88 23       	and	r24, r24
    5b96:	09 f4       	brne	.+2      	; 0x5b9a <SeqParameter()+0x49a>
    5b98:	7a c0       	rjmp	.+244    	; 0x5c8e <SeqParameter()+0x58e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:298 (discriminator 1)
    5b9a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
    5b9e:	81 11       	cpse	r24, r1
    5ba0:	76 c0       	rjmp	.+236    	; 0x5c8e <SeqParameter()+0x58e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:298 (discriminator 2)
    5ba2:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    5ba6:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    5baa:	04 97       	sbiw	r24, 0x04	; 4
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <SeqParameter()+0x4b0>
    5bae:	6f c0       	rjmp	.+222    	; 0x5c8e <SeqParameter()+0x58e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:298 (discriminator 3)
    5bb0:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    5bb4:	88 23       	and	r24, r24
    5bb6:	09 f4       	brne	.+2      	; 0x5bba <SeqParameter()+0x4ba>
    5bb8:	6a c0       	rjmp	.+212    	; 0x5c8e <SeqParameter()+0x58e>
    5bba:	40 91 a2 0c 	lds	r20, 0x0CA2	; 0x800ca2 <muteInst>
    5bbe:	50 91 a3 0c 	lds	r21, 0x0CA3	; 0x800ca3 <muteInst+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:300
      
      if (clearBtn.justPressed)  prev_muteInst = muteInst;                                                    // [zabox] save mute state
    5bc2:	66 23       	and	r22, r22
    5bc4:	21 f0       	breq	.+8      	; 0x5bce <SeqParameter()+0x4ce>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:300 (discriminator 1)
    5bc6:	50 93 a1 0c 	sts	0x0CA1, r21	; 0x800ca1 <prev_muteInst+0x1>
    5bca:	40 93 a0 0c 	sts	0x0CA0, r20	; 0x800ca0 <prev_muteInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:302
      
      muteInst |= (1 << curInst);                                                                             // [zabox] mute current instrument while holding clear
    5bce:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <curInst>
    5bd2:	27 2f       	mov	r18, r23
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	07 2e       	mov	r0, r23
    5bdc:	02 c0       	rjmp	.+4      	; 0x5be2 <SeqParameter()+0x4e2>
    5bde:	88 0f       	add	r24, r24
    5be0:	99 1f       	adc	r25, r25
    5be2:	0a 94       	dec	r0
    5be4:	e2 f7       	brpl	.-8      	; 0x5bde <SeqParameter()+0x4de>
    5be6:	84 2b       	or	r24, r20
    5be8:	95 2b       	or	r25, r21
    5bea:	90 93 a3 0c 	sts	0x0CA3, r25	; 0x800ca3 <muteInst+0x1>
    5bee:	80 93 a2 0c 	sts	0x0CA2, r24	; 0x800ca2 <muteInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:304
      
      bitClear (pattern[ptrnBuffer].inst[curInst], curStep);
    5bf2:	40 91 3d 1e 	lds	r20, 0x1E3D	; 0x801e3d <curStep>
    5bf6:	50 91 ce 0c 	lds	r21, 0x0CCE	; 0x800cce <ptrnBuffer>
    5bfa:	f9 01       	movw	r30, r18
    5bfc:	ee 0f       	add	r30, r30
    5bfe:	ff 1f       	adc	r31, r31
    5c00:	a9 ec       	ldi	r26, 0xC9	; 201
    5c02:	b5 e0       	ldi	r27, 0x05	; 5
    5c04:	5a 9f       	mul	r21, r26
    5c06:	c0 01       	movw	r24, r0
    5c08:	5b 9f       	mul	r21, r27
    5c0a:	90 0d       	add	r25, r0
    5c0c:	11 24       	eor	r1, r1
    5c0e:	e8 0f       	add	r30, r24
    5c10:	f9 1f       	adc	r31, r25
    5c12:	e3 56       	subi	r30, 0x63	; 99
    5c14:	f9 4e       	sbci	r31, 0xE9	; 233
    5c16:	c1 2c       	mov	r12, r1
    5c18:	d1 2c       	mov	r13, r1
    5c1a:	76 01       	movw	r14, r12
    5c1c:	c3 94       	inc	r12
    5c1e:	04 c0       	rjmp	.+8      	; 0x5c28 <SeqParameter()+0x528>
    5c20:	cc 0c       	add	r12, r12
    5c22:	dd 1c       	adc	r13, r13
    5c24:	ee 1c       	adc	r14, r14
    5c26:	ff 1c       	adc	r15, r15
    5c28:	4a 95       	dec	r20
    5c2a:	d2 f7       	brpl	.-12     	; 0x5c20 <SeqParameter()+0x520>
    5c2c:	c0 94       	com	r12
    5c2e:	d0 94       	com	r13
    5c30:	e0 94       	com	r14
    5c32:	f0 94       	com	r15
    5c34:	40 81       	ld	r20, Z
    5c36:	51 81       	ldd	r21, Z+1	; 0x01
    5c38:	c4 22       	and	r12, r20
    5c3a:	d5 22       	and	r13, r21
    5c3c:	d1 82       	std	Z+1, r13	; 0x01
    5c3e:	c0 82       	st	Z, r12
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:305
      pattern[ptrnBuffer].velocity[curInst][curStep] = instVelLow[curInst];
    5c40:	e0 91 3d 1e 	lds	r30, 0x1E3D	; 0x801e3d <curStep>
    5c44:	a9 01       	movw	r20, r18
    5c46:	04 e0       	ldi	r16, 0x04	; 4
    5c48:	44 0f       	add	r20, r20
    5c4a:	55 1f       	adc	r21, r21
    5c4c:	0a 95       	dec	r16
    5c4e:	e1 f7       	brne	.-8      	; 0x5c48 <SeqParameter()+0x548>
    5c50:	48 0f       	add	r20, r24
    5c52:	59 1f       	adc	r21, r25
    5c54:	48 56       	subi	r20, 0x68	; 104
    5c56:	5d 4e       	sbci	r21, 0xED	; 237
    5c58:	e4 0f       	add	r30, r20
    5c5a:	f5 2f       	mov	r31, r21
    5c5c:	f1 1d       	adc	r31, r1
    5c5e:	eb 5b       	subi	r30, 0xBB	; 187
    5c60:	fb 4f       	sbci	r31, 0xFB	; 251
    5c62:	21 57       	subi	r18, 0x71	; 113
    5c64:	3e 4f       	sbci	r19, 0xFE	; 254
    5c66:	d9 01       	movw	r26, r18
    5c68:	2c 91       	ld	r18, X
    5c6a:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:306
      if (curInst == CH) pattern[ptrnBuffer].velocity[CH][curStep] = instVelHigh[HH];//update HH velocity that OH is trigged correctly    
    5c6c:	7e 30       	cpi	r23, 0x0E	; 14
    5c6e:	61 f4       	brne	.+24     	; 0x5c88 <SeqParameter()+0x588>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:306 (discriminator 1)
    5c70:	e0 91 3d 1e 	lds	r30, 0x1E3D	; 0x801e3d <curStep>
    5c74:	88 56       	subi	r24, 0x68	; 104
    5c76:	9d 4e       	sbci	r25, 0xED	; 237
    5c78:	e8 0f       	add	r30, r24
    5c7a:	f9 2f       	mov	r31, r25
    5c7c:	f1 1d       	adc	r31, r1
    5c7e:	eb 5d       	subi	r30, 0xDB	; 219
    5c80:	fa 4f       	sbci	r31, 0xFA	; 250
    5c82:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <instVelHigh+0x5>
    5c86:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:307
      patternWasEdited = TRUE;   
    5c88:	81 e0       	ldi	r24, 0x01	; 1
    5c8a:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:310
    }
    
    if (clearBtn.justRelease) muteInst = prev_muteInst;                                                       // [zabox] unmute
    5c8e:	80 91 80 1e 	lds	r24, 0x1E80	; 0x801e80 <clearBtn+0x4>
    5c92:	88 23       	and	r24, r24
    5c94:	41 f0       	breq	.+16     	; 0x5ca6 <SeqParameter()+0x5a6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:310 (discriminator 1)
    5c96:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <prev_muteInst>
    5c9a:	90 91 a1 0c 	lds	r25, 0x0CA1	; 0x800ca1 <prev_muteInst+0x1>
    5c9e:	90 93 a3 0c 	sts	0x0CA3, r25	; 0x800ca3 <muteInst+0x1>
    5ca2:	80 93 a2 0c 	sts	0x0CA2, r24	; 0x800ca2 <muteInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:313

    
    if (clearBtn.justPressed && !keyboardMode && curSeqMode != PTRN_TAP && !isRunning){
    5ca6:	66 23       	and	r22, r22
    5ca8:	09 f4       	brne	.+2      	; 0x5cac <SeqParameter()+0x5ac>
    5caa:	75 c0       	rjmp	.+234    	; 0x5d96 <SeqParameter()+0x696>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:313 (discriminator 1)
    5cac:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
    5cb0:	81 11       	cpse	r24, r1
    5cb2:	71 c0       	rjmp	.+226    	; 0x5d96 <SeqParameter()+0x696>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:313 (discriminator 2)
    5cb4:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    5cb8:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    5cbc:	04 97       	sbiw	r24, 0x04	; 4
    5cbe:	09 f4       	brne	.+2      	; 0x5cc2 <SeqParameter()+0x5c2>
    5cc0:	6a c0       	rjmp	.+212    	; 0x5d96 <SeqParameter()+0x696>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:313 (discriminator 3)
    5cc2:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    5cc6:	81 11       	cpse	r24, r1
    5cc8:	66 c0       	rjmp	.+204    	; 0x5d96 <SeqParameter()+0x696>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:316
      //clear full pattern
      for (int a = 0; a < NBR_INST; a++){
        pattern[ptrnBuffer].inst[a] = 0;
    5cca:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    5cce:	30 e0       	ldi	r19, 0x00	; 0
    5cd0:	89 ec       	ldi	r24, 0xC9	; 201
    5cd2:	95 e0       	ldi	r25, 0x05	; 5
    5cd4:	28 9f       	mul	r18, r24
    5cd6:	f0 01       	movw	r30, r0
    5cd8:	29 9f       	mul	r18, r25
    5cda:	f0 0d       	add	r31, r0
    5cdc:	38 9f       	mul	r19, r24
    5cde:	f0 0d       	add	r31, r0
    5ce0:	11 24       	eor	r1, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:315
    if (clearBtn.justRelease) muteInst = prev_muteInst;                                                       // [zabox] unmute

    
    if (clearBtn.justPressed && !keyboardMode && curSeqMode != PTRN_TAP && !isRunning){
      //clear full pattern
      for (int a = 0; a < NBR_INST; a++){
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:316 (discriminator 2)
        pattern[ptrnBuffer].inst[a] = 0;
    5ce6:	dc 01       	movw	r26, r24
    5ce8:	aa 0f       	add	r26, r26
    5cea:	bb 1f       	adc	r27, r27
    5cec:	ae 0f       	add	r26, r30
    5cee:	bf 1f       	adc	r27, r31
    5cf0:	a3 56       	subi	r26, 0x63	; 99
    5cf2:	b9 4e       	sbci	r27, 0xE9	; 233
    5cf4:	1d 92       	st	X+, r1
    5cf6:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:315 (discriminator 2)
    if (clearBtn.justRelease) muteInst = prev_muteInst;                                                       // [zabox] unmute

    
    if (clearBtn.justPressed && !keyboardMode && curSeqMode != PTRN_TAP && !isRunning){
      //clear full pattern
      for (int a = 0; a < NBR_INST; a++){
    5cf8:	01 96       	adiw	r24, 0x01	; 1
    5cfa:	80 31       	cpi	r24, 0x10	; 16
    5cfc:	91 05       	cpc	r25, r1
    5cfe:	99 f7       	brne	.-26     	; 0x5ce6 <SeqParameter()+0x5e6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:320
        pattern[ptrnBuffer].inst[a] = 0;
      }
      //init all intrument velocity
      for (int b = 0; b < NBR_STEP; b++){
        pattern[ptrnBuffer].velocity[BD][b] = instVelLow[BD];
    5d00:	c0 90 97 01 	lds	r12, 0x0197	; 0x800197 <instVelLow+0x8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:321
        pattern[ptrnBuffer].velocity[SD][b] = instVelLow[SD];
    5d04:	d0 90 98 01 	lds	r13, 0x0198	; 0x800198 <instVelLow+0x9>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:322
        pattern[ptrnBuffer].velocity[LT][b] = instVelLow[LT];
    5d08:	e0 90 99 01 	lds	r14, 0x0199	; 0x800199 <instVelLow+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:323
        pattern[ptrnBuffer].velocity[MT][b] = instVelLow[MT];
    5d0c:	f0 90 9a 01 	lds	r15, 0x019A	; 0x80019a <instVelLow+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:324
        pattern[ptrnBuffer].velocity[HT][b] = instVelLow[HT];
    5d10:	00 91 91 01 	lds	r16, 0x0191	; 0x800191 <instVelLow+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:325
        pattern[ptrnBuffer].velocity[RM][b] = instVelLow[RM];
    5d14:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <instVelLow+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:326
        pattern[ptrnBuffer].velocity[HC][b] = instVelLow[HC];
    5d18:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <instVelLow+0x4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:327
        pattern[ptrnBuffer].velocity[RIDE][b] = instVelLow[RIDE];
    5d1c:	50 91 95 01 	lds	r21, 0x0195	; 0x800195 <instVelLow+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:328
        pattern[ptrnBuffer].velocity[CRASH][b] = instVelLow[CRASH];
    5d20:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <instVelLow+0x7>
    5d24:	e3 50       	subi	r30, 0x03	; 3
    5d26:	f9 4e       	sbci	r31, 0xE9	; 233
    5d28:	80 e1       	ldi	r24, 0x10	; 16
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:320 (discriminator 2)
      for (int a = 0; a < NBR_INST; a++){
        pattern[ptrnBuffer].inst[a] = 0;
      }
      //init all intrument velocity
      for (int b = 0; b < NBR_STEP; b++){
        pattern[ptrnBuffer].velocity[BD][b] = instVelLow[BD];
    5d2c:	df 01       	movw	r26, r30
    5d2e:	a0 5a       	subi	r26, 0xA0	; 160
    5d30:	bf 4f       	sbci	r27, 0xFF	; 255
    5d32:	cc 92       	st	X, r12
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:321 (discriminator 2)
        pattern[ptrnBuffer].velocity[SD][b] = instVelLow[SD];
    5d34:	50 96       	adiw	r26, 0x10	; 16
    5d36:	dc 92       	st	X, r13
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:322 (discriminator 2)
        pattern[ptrnBuffer].velocity[LT][b] = instVelLow[LT];
    5d38:	50 96       	adiw	r26, 0x10	; 16
    5d3a:	ec 92       	st	X, r14
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:323 (discriminator 2)
        pattern[ptrnBuffer].velocity[MT][b] = instVelLow[MT];
    5d3c:	50 96       	adiw	r26, 0x10	; 16
    5d3e:	fc 92       	st	X, r15
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:324 (discriminator 2)
        pattern[ptrnBuffer].velocity[HT][b] = instVelLow[HT];
    5d40:	01 93       	st	Z+, r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:325 (discriminator 2)
        pattern[ptrnBuffer].velocity[RM][b] = instVelLow[RM];
    5d42:	77 87       	std	Z+15, r23	; 0x0f
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:326 (discriminator 2)
        pattern[ptrnBuffer].velocity[HC][b] = instVelLow[HC];
    5d44:	67 8f       	std	Z+31, r22	; 0x1f
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:327 (discriminator 2)
        pattern[ptrnBuffer].velocity[RIDE][b] = instVelLow[RIDE];
    5d46:	57 af       	std	Z+63, r21	; 0x3f
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:328 (discriminator 2)
        pattern[ptrnBuffer].velocity[CRASH][b] = instVelLow[CRASH];
    5d48:	df 01       	movw	r26, r30
    5d4a:	a1 5b       	subi	r26, 0xB1	; 177
    5d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    5d4e:	4c 93       	st	X, r20
    5d50:	01 97       	sbiw	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:319 (discriminator 2)
      //clear full pattern
      for (int a = 0; a < NBR_INST; a++){
        pattern[ptrnBuffer].inst[a] = 0;
      }
      //init all intrument velocity
      for (int b = 0; b < NBR_STEP; b++){
    5d52:	61 f7       	brne	.-40     	; 0x5d2c <SeqParameter()+0x62c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:330
        pattern[ptrnBuffer].velocity[RM][b] = instVelLow[RM];
        pattern[ptrnBuffer].velocity[HC][b] = instVelLow[HC];
        pattern[ptrnBuffer].velocity[RIDE][b] = instVelLow[RIDE];
        pattern[ptrnBuffer].velocity[CRASH][b] = instVelLow[CRASH];
      }
      pattern[ptrnBuffer].shuffle = DEFAULT_SHUF;
    5d54:	49 ec       	ldi	r20, 0xC9	; 201
    5d56:	55 e0       	ldi	r21, 0x05	; 5
    5d58:	24 9f       	mul	r18, r20
    5d5a:	c0 01       	movw	r24, r0
    5d5c:	25 9f       	mul	r18, r21
    5d5e:	90 0d       	add	r25, r0
    5d60:	34 9f       	mul	r19, r20
    5d62:	90 0d       	add	r25, r0
    5d64:	11 24       	eor	r1, r1
    5d66:	88 56       	subi	r24, 0x68	; 104
    5d68:	9d 4e       	sbci	r25, 0xED	; 237
    5d6a:	fc 01       	movw	r30, r24
    5d6c:	ed 5f       	subi	r30, 0xFD	; 253
    5d6e:	fb 4f       	sbci	r31, 0xFB	; 251
    5d70:	21 e0       	ldi	r18, 0x01	; 1
    5d72:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:331
      pattern[ptrnBuffer].flam = DEFAULT_FLAM;                                            // [1.028] flam
    5d74:	31 96       	adiw	r30, 0x01	; 1
    5d76:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:332
      pattern[ptrnBuffer].length = NBR_STEP - 1;
    5d78:	34 97       	sbiw	r30, 0x04	; 4
    5d7a:	3f e0       	ldi	r19, 0x0F	; 15
    5d7c:	30 83       	st	Z, r19
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:333
      pattern[ptrnBuffer].scale = SCALE_16;
    5d7e:	8f 5f       	subi	r24, 0xFF	; 255
    5d80:	9b 4f       	sbci	r25, 0xFB	; 251
    5d82:	38 e1       	ldi	r19, 0x18	; 24
    5d84:	fc 01       	movw	r30, r24
    5d86:	30 83       	st	Z, r19
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:334
      keybOct = DEFAULT_OCT;
    5d88:	83 e0       	ldi	r24, 0x03	; 3
    5d8a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <keybOct>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:335
      patternWasEdited = TRUE;
    5d8e:	20 93 cd 0c 	sts	0x0CCD, r18	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:336
      needLcdUpdate = TRUE;
    5d92:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:341
    }


    //-------------------shuffle Button------------------------------                          [zabox] test
    if (shufBtn.justPressed || shufBtn.justRelease) needLcdUpdate = TRUE;
    5d96:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <shufBtn+0x3>
    5d9a:	81 11       	cpse	r24, r1
    5d9c:	04 c0       	rjmp	.+8      	; 0x5da6 <SeqParameter()+0x6a6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:341 (discriminator 2)
    5d9e:	80 91 f9 1e 	lds	r24, 0x1EF9	; 0x801ef9 <shufBtn+0x4>
    5da2:	88 23       	and	r24, r24
    5da4:	19 f0       	breq	.+6      	; 0x5dac <SeqParameter()+0x6ac>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:341 (discriminator 3)
    5da6:	81 e0       	ldi	r24, 0x01	; 1
    5da8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:343
    
    if (shufBtn.pressed) {
    5dac:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <shufBtn+0x2>
    5db0:	88 23       	and	r24, r24
    5db2:	09 f4       	brne	.+2      	; 0x5db6 <SeqParameter()+0x6b6>
    5db4:	46 c0       	rjmp	.+140    	; 0x5e42 <SeqParameter()+0x742>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:345
      
      if (readButtonState) {
    5db6:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    5dba:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    5dbe:	89 2b       	or	r24, r25
    5dc0:	09 f4       	brne	.+2      	; 0x5dc4 <SeqParameter()+0x6c4>
    5dc2:	3f c0       	rjmp	.+126    	; 0x5e42 <SeqParameter()+0x742>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:346
        if (FirstBitOn() < 7) {
    5dc4:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    5dc8:	87 30       	cpi	r24, 0x07	; 7
    5dca:	08 f0       	brcs	.+2      	; 0x5dce <SeqParameter()+0x6ce>
    5dcc:	b8 c1       	rjmp	.+880    	; 0x613e <SeqParameter()+0xa3e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:347
          pattern[ptrnBuffer].shuffle = FirstBitOn() + 1;
    5dce:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    5dd2:	8f 5f       	subi	r24, 0xFF	; 255
    5dd4:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    5dd8:	49 ec       	ldi	r20, 0xC9	; 201
    5dda:	e4 2e       	mov	r14, r20
    5ddc:	45 e0       	ldi	r20, 0x05	; 5
    5dde:	f4 2e       	mov	r15, r20
    5de0:	9e 9d       	mul	r25, r14
    5de2:	f0 01       	movw	r30, r0
    5de4:	9f 9d       	mul	r25, r15
    5de6:	f0 0d       	add	r31, r0
    5de8:	11 24       	eor	r1, r1
    5dea:	e5 56       	subi	r30, 0x65	; 101
    5dec:	f9 4e       	sbci	r31, 0xE9	; 233
    5dee:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:348
          if (pattern[ptrnBuffer].shuffle != prevShuf){
    5df0:	60 91 c9 0c 	lds	r22, 0x0CC9	; 0x800cc9 <prevShuf>
    5df4:	86 17       	cp	r24, r22
    5df6:	29 f1       	breq	.+74     	; 0x5e42 <SeqParameter()+0x742>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:350
            
            lcd.setCursor(8 + prevShuf, 0);                                        // [zabox] [1.027] flam
    5df8:	68 5f       	subi	r22, 0xF8	; 248
    5dfa:	40 e0       	ldi	r20, 0x00	; 0
    5dfc:	8e e2       	ldi	r24, 0x2E	; 46
    5dfe:	94 e0       	ldi	r25, 0x04	; 4
    5e00:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:351
            lcd.print((char) 161);                                                 //
    5e04:	61 ea       	ldi	r22, 0xA1	; 161
    5e06:	8e e2       	ldi	r24, 0x2E	; 46
    5e08:	94 e0       	ldi	r25, 0x04	; 4
    5e0a:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:353
            
            prevShuf = pattern[ptrnBuffer].shuffle;
    5e0e:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    5e12:	8e 9d       	mul	r24, r14
    5e14:	f0 01       	movw	r30, r0
    5e16:	8f 9d       	mul	r24, r15
    5e18:	f0 0d       	add	r31, r0
    5e1a:	11 24       	eor	r1, r1
    5e1c:	e5 56       	subi	r30, 0x65	; 101
    5e1e:	f9 4e       	sbci	r31, 0xE9	; 233
    5e20:	60 81       	ld	r22, Z
    5e22:	60 93 c9 0c 	sts	0x0CC9, r22	; 0x800cc9 <prevShuf>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:355
            
            lcd.setCursor(8 + prevShuf, 0);                                        // [zabox] [1.027] flam
    5e26:	68 5f       	subi	r22, 0xF8	; 248
    5e28:	40 e0       	ldi	r20, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:370
            lcd.setCursor(8 + prevFlam, 1);                                        // [zabox] [1.027] flam
            lcd.print((char) 161);                                                 //
            
            prevFlam = pattern[ptrnBuffer].flam;
            
            lcd.setCursor(8 + prevFlam, 1);                                        // [zabox] [1.027] flam
    5e2a:	8e e2       	ldi	r24, 0x2E	; 46
    5e2c:	94 e0       	ldi	r25, 0x04	; 4
    5e2e:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:371
            lcd.print((char)219);                                                  //
    5e32:	6b ed       	ldi	r22, 0xDB	; 219
    5e34:	8e e2       	ldi	r24, 0x2E	; 46
    5e36:	94 e0       	ldi	r25, 0x04	; 4
    5e38:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:373
            
            patternWasEdited = TRUE;
    5e3c:	81 e0       	ldi	r24, 0x01	; 1
    5e3e:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:386
    
    
    

    //-------------------scale button------------------------------
    if (scaleBtn.justPressed && !keyboardMode){
    5e42:	80 91 24 1f 	lds	r24, 0x1F24	; 0x801f24 <scaleBtn+0x3>
    5e46:	88 23       	and	r24, r24
    5e48:	f1 f0       	breq	.+60     	; 0x5e86 <SeqParameter()+0x786>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:386 (discriminator 1)
    5e4a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
    5e4e:	81 11       	cpse	r24, r1
    5e50:	1a c0       	rjmp	.+52     	; 0x5e86 <SeqParameter()+0x786>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:387
      needLcdUpdate = TRUE;
    5e52:	81 e0       	ldi	r24, 0x01	; 1
    5e54:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:388
      patternWasEdited = TRUE;
    5e58:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:389
      scaleBtn.counter++;
    5e5c:	80 91 27 1f 	lds	r24, 0x1F27	; 0x801f27 <scaleBtn+0x6>
    5e60:	8f 5f       	subi	r24, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:390
      if (scaleBtn.counter == 4) scaleBtn.counter = 0;
    5e62:	84 30       	cpi	r24, 0x04	; 4
    5e64:	09 f4       	brne	.+2      	; 0x5e68 <SeqParameter()+0x768>
    5e66:	a0 c1       	rjmp	.+832    	; 0x61a8 <SeqParameter()+0xaa8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:389

    //-------------------scale button------------------------------
    if (scaleBtn.justPressed && !keyboardMode){
      needLcdUpdate = TRUE;
      patternWasEdited = TRUE;
      scaleBtn.counter++;
    5e68:	80 93 27 1f 	sts	0x1F27, r24	; 0x801f27 <scaleBtn+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:391
      if (scaleBtn.counter == 4) scaleBtn.counter = 0;
      switch (scaleBtn.counter){
    5e6c:	80 91 27 1f 	lds	r24, 0x1F27	; 0x801f27 <scaleBtn+0x6>
    5e70:	81 30       	cpi	r24, 0x01	; 1
    5e72:	09 f4       	brne	.+2      	; 0x5e76 <SeqParameter()+0x776>
    5e74:	aa c1       	rjmp	.+852    	; 0x61ca <SeqParameter()+0xaca>
    5e76:	08 f4       	brcc	.+2      	; 0x5e7a <SeqParameter()+0x77a>
    5e78:	9a c1       	rjmp	.+820    	; 0x61ae <SeqParameter()+0xaae>
    5e7a:	82 30       	cpi	r24, 0x02	; 2
    5e7c:	09 f4       	brne	.+2      	; 0x5e80 <SeqParameter()+0x780>
    5e7e:	b2 c1       	rjmp	.+868    	; 0x61e4 <SeqParameter()+0xae4>
    5e80:	83 30       	cpi	r24, 0x03	; 3
    5e82:	09 f4       	brne	.+2      	; 0x5e86 <SeqParameter()+0x786>
    5e84:	bc c1       	rjmp	.+888    	; 0x61fe <SeqParameter()+0xafe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:408
        break;
      }
    } 

    //-------------------last step button------------------------------
    if (lastStepBtn.pressed && readButtonState) {
    5e86:	80 91 d6 1e 	lds	r24, 0x1ED6	; 0x801ed6 <lastStepBtn+0x2>
    5e8a:	88 23       	and	r24, r24
    5e8c:	e1 f0       	breq	.+56     	; 0x5ec6 <SeqParameter()+0x7c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:408 (discriminator 1)
    5e8e:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    5e92:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    5e96:	89 2b       	or	r24, r25
    5e98:	b1 f0       	breq	.+44     	; 0x5ec6 <SeqParameter()+0x7c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:409
      pattern[ptrnBuffer].length = FirstBitOn();
    5e9a:	e0 90 ce 0c 	lds	r14, 0x0CCE	; 0x800cce <ptrnBuffer>
    5e9e:	f1 2c       	mov	r15, r1
    5ea0:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    5ea4:	29 ec       	ldi	r18, 0xC9	; 201
    5ea6:	35 e0       	ldi	r19, 0x05	; 5
    5ea8:	e2 9e       	mul	r14, r18
    5eaa:	f0 01       	movw	r30, r0
    5eac:	e3 9e       	mul	r14, r19
    5eae:	f0 0d       	add	r31, r0
    5eb0:	f2 9e       	mul	r15, r18
    5eb2:	f0 0d       	add	r31, r0
    5eb4:	11 24       	eor	r1, r1
    5eb6:	e8 56       	subi	r30, 0x68	; 104
    5eb8:	f9 4e       	sbci	r31, 0xE9	; 233
    5eba:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:410
      needLcdUpdate = TRUE;
    5ebc:	81 e0       	ldi	r24, 0x01	; 1
    5ebe:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:411
      patternWasEdited = TRUE;
    5ec2:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:415
    }
    //-------------------Steps buttons------------------------------
    /////////////////////////////STEP EDIT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (curSeqMode == PTRN_STEP){
    5ec6:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    5eca:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    5ece:	83 30       	cpi	r24, 0x03	; 3
    5ed0:	91 05       	cpc	r25, r1
    5ed2:	09 f0       	breq	.+2      	; 0x5ed6 <SeqParameter()+0x7d6>
    5ed4:	e2 c5       	rjmp	.+3012   	; 0x6a9a <SeqParameter()+0x139a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:416
      if (stepsBtn.justRelease) doublePush = FALSE; 
    5ed6:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <stepsBtn+0x4>
    5eda:	81 11       	cpse	r24, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:416 (discriminator 1)
    5edc:	10 92 79 1e 	sts	0x1E79, r1	; 0x801e79 <doublePush>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:417
      if(!lastStepBtn.pressed && !instBtn && !keyboardMode && !shufBtn.pressed){                                      // [zabox] test
    5ee0:	80 91 d6 1e 	lds	r24, 0x1ED6	; 0x801ed6 <lastStepBtn+0x2>
    5ee4:	81 11       	cpse	r24, r1
    5ee6:	bc c3       	rjmp	.+1912   	; 0x6660 <SeqParameter()+0xf60>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:417 (discriminator 1)
    5ee8:	80 91 7b 1e 	lds	r24, 0x1E7B	; 0x801e7b <instBtn>
    5eec:	81 11       	cpse	r24, r1
    5eee:	b8 c3       	rjmp	.+1904   	; 0x6660 <SeqParameter()+0xf60>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:417 (discriminator 2)
    5ef0:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <keyboardMode>
    5ef4:	81 11       	cpse	r24, r1
    5ef6:	b4 c3       	rjmp	.+1896   	; 0x6660 <SeqParameter()+0xf60>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:417 (discriminator 3)
    5ef8:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <shufBtn+0x2>
    5efc:	81 11       	cpse	r24, r1
    5efe:	b0 c3       	rjmp	.+1888   	; 0x6660 <SeqParameter()+0xf60>
    5f00:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <stepsBtn+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:418
        if (isRunning)
    5f04:	90 91 39 1e 	lds	r25, 0x1E39	; 0x801e39 <isRunning>
    5f08:	99 23       	and	r25, r25
    5f0a:	09 f4       	brne	.+2      	; 0x5f0e <SeqParameter()+0x80e>
    5f0c:	15 c5       	rjmp	.+2602   	; 0x6938 <SeqParameter()+0x1238>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:421
        {

          if(stepsBtn.pressed && encBtn.pressed) {
    5f0e:	88 23       	and	r24, r24
    5f10:	09 f4       	brne	.+2      	; 0x5f14 <SeqParameter()+0x814>
    5f12:	91 c0       	rjmp	.+290    	; 0x6036 <SeqParameter()+0x936>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:421 (discriminator 1)
    5f14:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <encBtn+0x2>
    5f18:	88 23       	and	r24, r24
    5f1a:	09 f4       	brne	.+2      	; 0x5f1e <SeqParameter()+0x81e>
    5f1c:	8c c0       	rjmp	.+280    	; 0x6036 <SeqParameter()+0x936>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:422
            if (selection) {
    5f1e:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <selection>
    5f22:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <selection+0x1>
    5f26:	89 2b       	or	r24, r25
    5f28:	09 f4       	brne	.+2      	; 0x5f2c <SeqParameter()+0x82c>
    5f2a:	76 c1       	rjmp	.+748    	; 0x6218 <SeqParameter()+0xb18>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:423
              selection = 0;
    5f2c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <selection+0x1>
    5f30:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <selection>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:424
              lcd.clear();
    5f34:	8e e2       	ldi	r24, 0x2E	; 46
    5f36:	94 e0       	ldi	r25, 0x04	; 4
    5f38:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <LiquidCrystal::clear()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:425
              lcd.setCursor(0, 0);
    5f3c:	40 e0       	ldi	r20, 0x00	; 0
    5f3e:	60 e0       	ldi	r22, 0x00	; 0
    5f40:	8e e2       	ldi	r24, 0x2E	; 46
    5f42:	94 e0       	ldi	r25, 0x04	; 4
    5f44:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:426
              lcd.print("Prob.    ratchet");
    5f48:	62 e9       	ldi	r22, 0x92	; 146
    5f4a:	73 e0       	ldi	r23, 0x03	; 3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:436
              LcdUpdate();
            } else {
              selection = 1;
              lcd.clear();
              lcd.setCursor(0, 0);
              lcd.print("prob.    Ratchet");
    5f4c:	8e e2       	ldi	r24, 0x2E	; 46
    5f4e:	94 e0       	ldi	r25, 0x04	; 4
    5f50:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:437
              lcd.setCursor(0, 1);
    5f54:	41 e0       	ldi	r20, 0x01	; 1
    5f56:	60 e0       	ldi	r22, 0x00	; 0
    5f58:	8e e2       	ldi	r24, 0x2E	; 46
    5f5a:	94 e0       	ldi	r25, 0x04	; 4
    5f5c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:438
              lcd.print(String(pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()]));
    5f60:	e0 90 ce 0c 	lds	r14, 0x0CCE	; 0x800cce <ptrnBuffer>
    5f64:	f1 2c       	mov	r15, r1
    5f66:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    5f6a:	10 e0       	ldi	r17, 0x00	; 0
    5f6c:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    5f70:	74 e0       	ldi	r23, 0x04	; 4
    5f72:	00 0f       	add	r16, r16
    5f74:	11 1f       	adc	r17, r17
    5f76:	7a 95       	dec	r23
    5f78:	e1 f7       	brne	.-8      	; 0x5f72 <SeqParameter()+0x872>
    5f7a:	f8 01       	movw	r30, r16
    5f7c:	e8 0f       	add	r30, r24
    5f7e:	f1 1d       	adc	r31, r1
    5f80:	ee 0f       	add	r30, r30
    5f82:	ff 1f       	adc	r31, r31
    5f84:	b9 ec       	ldi	r27, 0xC9	; 201
    5f86:	cb 2e       	mov	r12, r27
    5f88:	b5 e0       	ldi	r27, 0x05	; 5
    5f8a:	db 2e       	mov	r13, r27
    5f8c:	ec 9c       	mul	r14, r12
    5f8e:	80 01       	movw	r16, r0
    5f90:	ed 9c       	mul	r14, r13
    5f92:	10 0d       	add	r17, r0
    5f94:	fc 9c       	mul	r15, r12
    5f96:	10 0d       	add	r17, r0
    5f98:	11 24       	eor	r1, r1
    5f9a:	e0 0f       	add	r30, r16
    5f9c:	f1 1f       	adc	r31, r17
    5f9e:	e8 56       	subi	r30, 0x68	; 104
    5fa0:	fd 4e       	sbci	r31, 0xED	; 237
    5fa2:	60 81       	ld	r22, Z
    5fa4:	71 81       	ldd	r23, Z+1	; 0x01
    5fa6:	4a e0       	ldi	r20, 0x0A	; 10
    5fa8:	ce 01       	movw	r24, r28
    5faa:	01 96       	adiw	r24, 0x01	; 1
    5fac:	0e 94 ef 4a 	call	0x95de	; 0x95de <String::String(unsigned int, unsigned char)>
    5fb0:	be 01       	movw	r22, r28
    5fb2:	6f 5f       	subi	r22, 0xFF	; 255
    5fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb6:	8e e2       	ldi	r24, 0x2E	; 46
    5fb8:	94 e0       	ldi	r25, 0x04	; 4
    5fba:	0e 94 64 49 	call	0x92c8	; 0x92c8 <Print::print(String const&)>
    5fbe:	ce 01       	movw	r24, r28
    5fc0:	01 96       	adiw	r24, 0x01	; 1
    5fc2:	0e 94 76 4a 	call	0x94ec	; 0x94ec <String::~String()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:439
              lcd.setCursor(9, 1);
    5fc6:	41 e0       	ldi	r20, 0x01	; 1
    5fc8:	69 e0       	ldi	r22, 0x09	; 9
    5fca:	8e e2       	ldi	r24, 0x2E	; 46
    5fcc:	94 e0       	ldi	r25, 0x04	; 4
    5fce:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:440
              lcd.print(String(pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()]));
    5fd2:	e0 90 ce 0c 	lds	r14, 0x0CCE	; 0x800cce <ptrnBuffer>
    5fd6:	f1 2c       	mov	r15, r1
    5fd8:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    5fdc:	10 e0       	ldi	r17, 0x00	; 0
    5fde:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    5fe2:	94 e0       	ldi	r25, 0x04	; 4
    5fe4:	00 0f       	add	r16, r16
    5fe6:	11 1f       	adc	r17, r17
    5fe8:	9a 95       	dec	r25
    5fea:	e1 f7       	brne	.-8      	; 0x5fe4 <SeqParameter()+0x8e4>
    5fec:	f8 01       	movw	r30, r16
    5fee:	e8 0f       	add	r30, r24
    5ff0:	f1 1d       	adc	r31, r1
    5ff2:	f3 95       	inc	r31
    5ff4:	ee 0f       	add	r30, r30
    5ff6:	ff 1f       	adc	r31, r31
    5ff8:	ec 9c       	mul	r14, r12
    5ffa:	80 01       	movw	r16, r0
    5ffc:	ed 9c       	mul	r14, r13
    5ffe:	10 0d       	add	r17, r0
    6000:	fc 9c       	mul	r15, r12
    6002:	10 0d       	add	r17, r0
    6004:	11 24       	eor	r1, r1
    6006:	e0 0f       	add	r30, r16
    6008:	f1 1f       	adc	r31, r17
    600a:	e8 56       	subi	r30, 0x68	; 104
    600c:	fd 4e       	sbci	r31, 0xED	; 237
    600e:	60 81       	ld	r22, Z
    6010:	71 81       	ldd	r23, Z+1	; 0x01
    6012:	4a e0       	ldi	r20, 0x0A	; 10
    6014:	ce 01       	movw	r24, r28
    6016:	01 96       	adiw	r24, 0x01	; 1
    6018:	0e 94 ef 4a 	call	0x95de	; 0x95de <String::String(unsigned int, unsigned char)>
    601c:	be 01       	movw	r22, r28
    601e:	6f 5f       	subi	r22, 0xFF	; 255
    6020:	7f 4f       	sbci	r23, 0xFF	; 255
    6022:	8e e2       	ldi	r24, 0x2E	; 46
    6024:	94 e0       	ldi	r25, 0x04	; 4
    6026:	0e 94 64 49 	call	0x92c8	; 0x92c8 <Print::print(String const&)>
    602a:	ce 01       	movw	r24, r28
    602c:	01 96       	adiw	r24, 0x01	; 1
    602e:	0e 94 76 4a 	call	0x94ec	; 0x94ec <String::~String()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:441
              LcdUpdate();
    6032:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <LcdUpdate()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:446
            }
          }

          // HANDLE ENCODER /////////////////////////////////////////////          
          encoder_A = PINB & B1;// Read encoder pins
    6036:	93 b1       	in	r25, 0x03	; 3
    6038:	91 70       	andi	r25, 0x01	; 1
    603a:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <encoder_A>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:447
          encoder_B = PINB & B10;
    603e:	83 b1       	in	r24, 0x03	; 3
    6040:	82 70       	andi	r24, 0x02	; 2
    6042:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <encoder_B>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:448
          if(stepsBtn.pressed && (!encoder_A) && (encoder_A_prev)){
    6046:	20 91 9f 1e 	lds	r18, 0x1E9F	; 0x801e9f <stepsBtn+0x2>
    604a:	22 23       	and	r18, r18
    604c:	09 f4       	brne	.+2      	; 0x6050 <SeqParameter()+0x950>
    604e:	fd c1       	rjmp	.+1018   	; 0x644a <SeqParameter()+0xd4a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:448 (discriminator 1)
    6050:	91 11       	cpse	r25, r1
    6052:	fb c1       	rjmp	.+1014   	; 0x644a <SeqParameter()+0xd4a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:448 (discriminator 2)
    6054:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <encoder_A_prev>
    6058:	99 23       	and	r25, r25
    605a:	09 f4       	brne	.+2      	; 0x605e <SeqParameter()+0x95e>
    605c:	f6 c1       	rjmp	.+1004   	; 0x644a <SeqParameter()+0xd4a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:450
            // A has gone from high to low 
            if(encoder_B && pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] < 10) {
    605e:	88 23       	and	r24, r24
    6060:	09 f4       	brne	.+2      	; 0x6064 <SeqParameter()+0x964>
    6062:	ed c0       	rjmp	.+474    	; 0x623e <SeqParameter()+0xb3e>
    6064:	00 91 ce 0c 	lds	r16, 0x0CCE	; 0x800cce <ptrnBuffer>
    6068:	10 91 eb 01 	lds	r17, 0x01EB	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:450 (discriminator 1)
    606c:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    6070:	20 e1       	ldi	r18, 0x10	; 16
    6072:	12 9f       	mul	r17, r18
    6074:	f0 01       	movw	r30, r0
    6076:	11 24       	eor	r1, r1
    6078:	e8 0f       	add	r30, r24
    607a:	f1 1d       	adc	r31, r1
    607c:	ee 0f       	add	r30, r30
    607e:	ff 1f       	adc	r31, r31
    6080:	69 ec       	ldi	r22, 0xC9	; 201
    6082:	c6 2e       	mov	r12, r22
    6084:	65 e0       	ldi	r22, 0x05	; 5
    6086:	d6 2e       	mov	r13, r22
    6088:	0c 9d       	mul	r16, r12
    608a:	c0 01       	movw	r24, r0
    608c:	0d 9d       	mul	r16, r13
    608e:	90 0d       	add	r25, r0
    6090:	11 24       	eor	r1, r1
    6092:	e8 0f       	add	r30, r24
    6094:	f9 1f       	adc	r31, r25
    6096:	e8 56       	subi	r30, 0x68	; 104
    6098:	fd 4e       	sbci	r31, 0xED	; 237
    609a:	80 81       	ld	r24, Z
    609c:	91 81       	ldd	r25, Z+1	; 0x01
    609e:	0a 97       	sbiw	r24, 0x0a	; 10
    60a0:	08 f0       	brcs	.+2      	; 0x60a4 <SeqParameter()+0x9a4>
    60a2:	cd c0       	rjmp	.+410    	; 0x623e <SeqParameter()+0xb3e>
    60a4:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    60a8:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:452
              // B is high so clockwise   
              if (selection) {
    60ac:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <selection>
    60b0:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <selection+0x1>
    60b4:	40 e1       	ldi	r20, 0x10	; 16
    60b6:	04 9f       	mul	r16, r20
    60b8:	80 01       	movw	r16, r0
    60ba:	11 24       	eor	r1, r1
    60bc:	9c 9d       	mul	r25, r12
    60be:	70 01       	movw	r14, r0
    60c0:	9d 9d       	mul	r25, r13
    60c2:	f0 0c       	add	r15, r0
    60c4:	11 24       	eor	r1, r1
    60c6:	23 2b       	or	r18, r19
    60c8:	09 f0       	breq	.+2      	; 0x60cc <SeqParameter()+0x9cc>
    60ca:	10 c1       	rjmp	.+544    	; 0x62ec <SeqParameter()+0xbec>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:455
                pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] += 1;   
              } else {
                pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] += 1;   
    60cc:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    60d0:	a8 2f       	mov	r26, r24
    60d2:	b0 e0       	ldi	r27, 0x00	; 0
    60d4:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <curInst>
    60d8:	80 e1       	ldi	r24, 0x10	; 16
    60da:	e8 9f       	mul	r30, r24
    60dc:	f0 01       	movw	r30, r0
    60de:	11 24       	eor	r1, r1
    60e0:	ea 0f       	add	r30, r26
    60e2:	fb 1f       	adc	r31, r27
    60e4:	f3 95       	inc	r31
    60e6:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    60ea:	ee 0f       	add	r30, r30
    60ec:	ff 1f       	adc	r31, r31
    60ee:	2c 9d       	mul	r18, r12
    60f0:	c0 01       	movw	r24, r0
    60f2:	2d 9d       	mul	r18, r13
    60f4:	90 0d       	add	r25, r0
    60f6:	11 24       	eor	r1, r1
    60f8:	e8 0f       	add	r30, r24
    60fa:	f9 1f       	adc	r31, r25
    60fc:	e8 56       	subi	r30, 0x68	; 104
    60fe:	fd 4e       	sbci	r31, 0xED	; 237
    6100:	a0 0f       	add	r26, r16
    6102:	b1 1f       	adc	r27, r17
    6104:	b3 95       	inc	r27
    6106:	0d c1       	rjmp	.+538    	; 0x6322 <SeqParameter()+0xc22>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:237
        if (doublePush == 0){
          curInst = CH;
        }
        break;
      case RIDE_BTN:
        curInst = RIDE;
    6108:	86 e0       	ldi	r24, 0x06	; 6
    610a:	ef cc       	rjmp	.-1570   	; 0x5aea <SeqParameter()+0x3ea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:241
        curFlam = 0;
        break;
      case CRASH_BTN:
        curInst = CRASH;
    610c:	87 e0       	ldi	r24, 0x07	; 7
    610e:	ed cc       	rjmp	.-1574   	; 0x5aea <SeqParameter()+0x3ea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:249
      }
      //if (readButtonState == OH_BTN){
      //  curInst = OH;
      //  doublePush = 1;
      //}
      switch (readButtonState) {
    6110:	81 15       	cp	r24, r1
    6112:	23 e0       	ldi	r18, 0x03	; 3
    6114:	92 07       	cpc	r25, r18
    6116:	41 f0       	breq	.+16     	; 0x6128 <SeqParameter()+0xa28>
    6118:	81 15       	cp	r24, r1
    611a:	30 e3       	ldi	r19, 0x30	; 48
    611c:	93 07       	cpc	r25, r19
    611e:	51 f0       	breq	.+20     	; 0x6134 <SeqParameter()+0xa34>
    6120:	80 3c       	cpi	r24, 0xC0	; 192
    6122:	91 05       	cpc	r25, r1
    6124:	09 f0       	breq	.+2      	; 0x6128 <SeqParameter()+0xa28>
    6126:	00 cd       	rjmp	.-1536   	; 0x5b28 <SeqParameter()+0x428>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:251
        case BD_F_BTN:
          curFlam = 1;
    6128:	81 e0       	ldi	r24, 0x01	; 1
    612a:	80 93 36 1e 	sts	0x1E36, r24	; 0x801e36 <curFlam>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:272
          curFlam = 1;
          doublePush = 1;
        break;
        case OH_BTN:
          curInst = OH;
          doublePush = 1;
    612e:	80 93 79 1e 	sts	0x1E79, r24	; 0x801e79 <doublePush>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:273
        break;
    6132:	fa cc       	rjmp	.-1548   	; 0x5b28 <SeqParameter()+0x428>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:271
        case HT_F_BTN:
          curFlam = 1;
          doublePush = 1;
        break;
        case OH_BTN:
          curInst = OH;
    6134:	8f e0       	ldi	r24, 0x0F	; 15
    6136:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:272
          doublePush = 1;
    613a:	81 e0       	ldi	r24, 0x01	; 1
    613c:	f8 cf       	rjmp	.-16     	; 0x612e <SeqParameter()+0xa2e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:361
            lcd.print((char)219);                                                  //
            
            patternWasEdited = TRUE;
          }
        }  
        else if (FirstBitOn() > 7) {
    613e:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    6142:	88 30       	cpi	r24, 0x08	; 8
    6144:	08 f4       	brcc	.+2      	; 0x6148 <SeqParameter()+0xa48>
    6146:	7d ce       	rjmp	.-774    	; 0x5e42 <SeqParameter()+0x742>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:362
          pattern[ptrnBuffer].flam = FirstBitOn() - 8;
    6148:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    614c:	88 50       	subi	r24, 0x08	; 8
    614e:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    6152:	39 ec       	ldi	r19, 0xC9	; 201
    6154:	e3 2e       	mov	r14, r19
    6156:	35 e0       	ldi	r19, 0x05	; 5
    6158:	f3 2e       	mov	r15, r19
    615a:	9e 9d       	mul	r25, r14
    615c:	f0 01       	movw	r30, r0
    615e:	9f 9d       	mul	r25, r15
    6160:	f0 0d       	add	r31, r0
    6162:	11 24       	eor	r1, r1
    6164:	e4 56       	subi	r30, 0x64	; 100
    6166:	f9 4e       	sbci	r31, 0xE9	; 233
    6168:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:363
          if (pattern[ptrnBuffer].flam != prevFlam){
    616a:	60 91 c8 0c 	lds	r22, 0x0CC8	; 0x800cc8 <prevFlam>
    616e:	86 17       	cp	r24, r22
    6170:	09 f4       	brne	.+2      	; 0x6174 <SeqParameter()+0xa74>
    6172:	67 ce       	rjmp	.-818    	; 0x5e42 <SeqParameter()+0x742>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:365
            
            lcd.setCursor(8 + prevFlam, 1);                                        // [zabox] [1.027] flam
    6174:	68 5f       	subi	r22, 0xF8	; 248
    6176:	41 e0       	ldi	r20, 0x01	; 1
    6178:	8e e2       	ldi	r24, 0x2E	; 46
    617a:	94 e0       	ldi	r25, 0x04	; 4
    617c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:366
            lcd.print((char) 161);                                                 //
    6180:	61 ea       	ldi	r22, 0xA1	; 161
    6182:	8e e2       	ldi	r24, 0x2E	; 46
    6184:	94 e0       	ldi	r25, 0x04	; 4
    6186:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:368
            
            prevFlam = pattern[ptrnBuffer].flam;
    618a:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    618e:	8e 9d       	mul	r24, r14
    6190:	f0 01       	movw	r30, r0
    6192:	8f 9d       	mul	r24, r15
    6194:	f0 0d       	add	r31, r0
    6196:	11 24       	eor	r1, r1
    6198:	e4 56       	subi	r30, 0x64	; 100
    619a:	f9 4e       	sbci	r31, 0xE9	; 233
    619c:	60 81       	ld	r22, Z
    619e:	60 93 c8 0c 	sts	0x0CC8, r22	; 0x800cc8 <prevFlam>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:370
            
            lcd.setCursor(8 + prevFlam, 1);                                        // [zabox] [1.027] flam
    61a2:	68 5f       	subi	r22, 0xF8	; 248
    61a4:	41 e0       	ldi	r20, 0x01	; 1
    61a6:	41 ce       	rjmp	.-894    	; 0x5e2a <SeqParameter()+0x72a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:390 (discriminator 1)
    //-------------------scale button------------------------------
    if (scaleBtn.justPressed && !keyboardMode){
      needLcdUpdate = TRUE;
      patternWasEdited = TRUE;
      scaleBtn.counter++;
      if (scaleBtn.counter == 4) scaleBtn.counter = 0;
    61a8:	10 92 27 1f 	sts	0x1F27, r1	; 0x801f27 <scaleBtn+0x6>
    61ac:	5f ce       	rjmp	.-834    	; 0x5e6c <SeqParameter()+0x76c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:393
      switch (scaleBtn.counter){
      case 0:
        pattern[ptrnBuffer].scale =  SCALE_16;// 1/16
    61ae:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    61b2:	89 ec       	ldi	r24, 0xC9	; 201
    61b4:	95 e0       	ldi	r25, 0x05	; 5
    61b6:	28 9f       	mul	r18, r24
    61b8:	f0 01       	movw	r30, r0
    61ba:	29 9f       	mul	r18, r25
    61bc:	f0 0d       	add	r31, r0
    61be:	11 24       	eor	r1, r1
    61c0:	e7 56       	subi	r30, 0x67	; 103
    61c2:	f9 4e       	sbci	r31, 0xE9	; 233
    61c4:	88 e1       	ldi	r24, 0x18	; 24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:402
        break;
      case 2:
        pattern[ptrnBuffer].scale =  SCALE_8t;// 1/8t 
        break;
      case 3:
        pattern[ptrnBuffer].scale =  SCALE_16t;// 1/16t 
    61c6:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:403
        break;
    61c8:	5e ce       	rjmp	.-836    	; 0x5e86 <SeqParameter()+0x786>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:396
      switch (scaleBtn.counter){
      case 0:
        pattern[ptrnBuffer].scale =  SCALE_16;// 1/16
        break;
      case 1:
        pattern[ptrnBuffer].scale =  SCALE_32;// 1/32
    61ca:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    61ce:	89 ec       	ldi	r24, 0xC9	; 201
    61d0:	95 e0       	ldi	r25, 0x05	; 5
    61d2:	28 9f       	mul	r18, r24
    61d4:	f0 01       	movw	r30, r0
    61d6:	29 9f       	mul	r18, r25
    61d8:	f0 0d       	add	r31, r0
    61da:	11 24       	eor	r1, r1
    61dc:	e7 56       	subi	r30, 0x67	; 103
    61de:	f9 4e       	sbci	r31, 0xE9	; 233
    61e0:	8c e0       	ldi	r24, 0x0C	; 12
    61e2:	f1 cf       	rjmp	.-30     	; 0x61c6 <SeqParameter()+0xac6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:399
        break;
      case 2:
        pattern[ptrnBuffer].scale =  SCALE_8t;// 1/8t 
    61e4:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    61e8:	89 ec       	ldi	r24, 0xC9	; 201
    61ea:	95 e0       	ldi	r25, 0x05	; 5
    61ec:	28 9f       	mul	r18, r24
    61ee:	f0 01       	movw	r30, r0
    61f0:	29 9f       	mul	r18, r25
    61f2:	f0 0d       	add	r31, r0
    61f4:	11 24       	eor	r1, r1
    61f6:	e7 56       	subi	r30, 0x67	; 103
    61f8:	f9 4e       	sbci	r31, 0xE9	; 233
    61fa:	80 e2       	ldi	r24, 0x20	; 32
    61fc:	e4 cf       	rjmp	.-56     	; 0x61c6 <SeqParameter()+0xac6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:402
        break;
      case 3:
        pattern[ptrnBuffer].scale =  SCALE_16t;// 1/16t 
    61fe:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    6202:	89 ec       	ldi	r24, 0xC9	; 201
    6204:	95 e0       	ldi	r25, 0x05	; 5
    6206:	28 9f       	mul	r18, r24
    6208:	f0 01       	movw	r30, r0
    620a:	29 9f       	mul	r18, r25
    620c:	f0 0d       	add	r31, r0
    620e:	11 24       	eor	r1, r1
    6210:	e7 56       	subi	r30, 0x67	; 103
    6212:	f9 4e       	sbci	r31, 0xE9	; 233
    6214:	80 e1       	ldi	r24, 0x10	; 16
    6216:	d7 cf       	rjmp	.-82     	; 0x61c6 <SeqParameter()+0xac6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:433
              lcd.print(String(pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()]));
              lcd.setCursor(9, 1);
              lcd.print(String(pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()]));
              LcdUpdate();
            } else {
              selection = 1;
    6218:	81 e0       	ldi	r24, 0x01	; 1
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <selection+0x1>
    6220:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <selection>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:434
              lcd.clear();
    6224:	8e e2       	ldi	r24, 0x2E	; 46
    6226:	94 e0       	ldi	r25, 0x04	; 4
    6228:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <LiquidCrystal::clear()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:435
              lcd.setCursor(0, 0);
    622c:	40 e0       	ldi	r20, 0x00	; 0
    622e:	60 e0       	ldi	r22, 0x00	; 0
    6230:	8e e2       	ldi	r24, 0x2E	; 46
    6232:	94 e0       	ldi	r25, 0x04	; 4
    6234:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:436
              lcd.print("prob.    Ratchet");
    6238:	63 ea       	ldi	r22, 0xA3	; 163
    623a:	73 e0       	ldi	r23, 0x03	; 3
    623c:	87 ce       	rjmp	.-754    	; 0x5f4c <SeqParameter()+0x84c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:458
                pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] += 1;   
              } else {
                pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] += 1;   
              }            
            } else {
              if (selection && pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] > 0) {
    623e:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <selection>
    6242:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <selection+0x1>
    6246:	89 2b       	or	r24, r25
    6248:	09 f0       	breq	.+2      	; 0x624c <SeqParameter()+0xb4c>
    624a:	1d c3       	rjmp	.+1594   	; 0x6886 <SeqParameter()+0x1186>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:460
                pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] -= 1;   
              } else if (pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] > 0) {
    624c:	c0 90 ce 0c 	lds	r12, 0x0CCE	; 0x800cce <ptrnBuffer>
    6250:	d1 2c       	mov	r13, r1
    6252:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    6256:	10 e0       	ldi	r17, 0x00	; 0
    6258:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    625c:	24 e0       	ldi	r18, 0x04	; 4
    625e:	00 0f       	add	r16, r16
    6260:	11 1f       	adc	r17, r17
    6262:	2a 95       	dec	r18
    6264:	e1 f7       	brne	.-8      	; 0x625e <SeqParameter()+0xb5e>
    6266:	f8 01       	movw	r30, r16
    6268:	e8 0f       	add	r30, r24
    626a:	f1 1d       	adc	r31, r1
    626c:	f3 95       	inc	r31
    626e:	ee 0f       	add	r30, r30
    6270:	ff 1f       	adc	r31, r31
    6272:	49 ec       	ldi	r20, 0xC9	; 201
    6274:	e4 2e       	mov	r14, r20
    6276:	45 e0       	ldi	r20, 0x05	; 5
    6278:	f4 2e       	mov	r15, r20
    627a:	ce 9c       	mul	r12, r14
    627c:	80 01       	movw	r16, r0
    627e:	cf 9c       	mul	r12, r15
    6280:	10 0d       	add	r17, r0
    6282:	de 9c       	mul	r13, r14
    6284:	10 0d       	add	r17, r0
    6286:	11 24       	eor	r1, r1
    6288:	e0 0f       	add	r30, r16
    628a:	f1 1f       	adc	r31, r17
    628c:	e8 56       	subi	r30, 0x68	; 104
    628e:	fd 4e       	sbci	r31, 0xED	; 237
    6290:	80 81       	ld	r24, Z
    6292:	91 81       	ldd	r25, Z+1	; 0x01
    6294:	89 2b       	or	r24, r25
    6296:	09 f4       	brne	.+2      	; 0x629a <SeqParameter()+0xb9a>
    6298:	4f c0       	rjmp	.+158    	; 0x6338 <SeqParameter()+0xc38>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:461
                pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] -= 1;   
    629a:	c0 90 ce 0c 	lds	r12, 0x0CCE	; 0x800cce <ptrnBuffer>
    629e:	d1 2c       	mov	r13, r1
    62a0:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    62a4:	10 e0       	ldi	r17, 0x00	; 0
    62a6:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    62aa:	90 e0       	ldi	r25, 0x00	; 0
    62ac:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <curInst>
    62b0:	f0 e1       	ldi	r31, 0x10	; 16
    62b2:	af 9f       	mul	r26, r31
    62b4:	d0 01       	movw	r26, r0
    62b6:	11 24       	eor	r1, r1
    62b8:	a8 0f       	add	r26, r24
    62ba:	b9 1f       	adc	r27, r25
    62bc:	b3 95       	inc	r27
    62be:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    62c2:	aa 0f       	add	r26, r26
    62c4:	bb 1f       	adc	r27, r27
    62c6:	4e 9d       	mul	r20, r14
    62c8:	90 01       	movw	r18, r0
    62ca:	4f 9d       	mul	r20, r15
    62cc:	30 0d       	add	r19, r0
    62ce:	11 24       	eor	r1, r1
    62d0:	a2 0f       	add	r26, r18
    62d2:	b3 1f       	adc	r27, r19
    62d4:	a8 56       	subi	r26, 0x68	; 104
    62d6:	bd 4e       	sbci	r27, 0xED	; 237
    62d8:	f8 01       	movw	r30, r16
    62da:	34 e0       	ldi	r19, 0x04	; 4
    62dc:	ee 0f       	add	r30, r30
    62de:	ff 1f       	adc	r31, r31
    62e0:	3a 95       	dec	r19
    62e2:	e1 f7       	brne	.-8      	; 0x62dc <SeqParameter()+0xbdc>
    62e4:	e8 0f       	add	r30, r24
    62e6:	f9 1f       	adc	r31, r25
    62e8:	f3 95       	inc	r31
    62ea:	13 c3       	rjmp	.+1574   	; 0x6912 <SeqParameter()+0x1212>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:453
          if(stepsBtn.pressed && (!encoder_A) && (encoder_A_prev)){
            // A has gone from high to low 
            if(encoder_B && pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] < 10) {
              // B is high so clockwise   
              if (selection) {
                pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] += 1;   
    62ec:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    62f0:	a8 2f       	mov	r26, r24
    62f2:	b0 e0       	ldi	r27, 0x00	; 0
    62f4:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <curInst>
    62f8:	50 e1       	ldi	r21, 0x10	; 16
    62fa:	e5 9f       	mul	r30, r21
    62fc:	f0 01       	movw	r30, r0
    62fe:	11 24       	eor	r1, r1
    6300:	ea 0f       	add	r30, r26
    6302:	fb 1f       	adc	r31, r27
    6304:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    6308:	ee 0f       	add	r30, r30
    630a:	ff 1f       	adc	r31, r31
    630c:	2c 9d       	mul	r18, r12
    630e:	c0 01       	movw	r24, r0
    6310:	2d 9d       	mul	r18, r13
    6312:	90 0d       	add	r25, r0
    6314:	11 24       	eor	r1, r1
    6316:	e8 0f       	add	r30, r24
    6318:	f9 1f       	adc	r31, r25
    631a:	e8 56       	subi	r30, 0x68	; 104
    631c:	fd 4e       	sbci	r31, 0xED	; 237
    631e:	a0 0f       	add	r26, r16
    6320:	b1 1f       	adc	r27, r17
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:455
              } else {
                pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] += 1;   
    6322:	aa 0f       	add	r26, r26
    6324:	bb 1f       	adc	r27, r27
    6326:	ae 0d       	add	r26, r14
    6328:	bf 1d       	adc	r27, r15
    632a:	a8 56       	subi	r26, 0x68	; 104
    632c:	bd 4e       	sbci	r27, 0xED	; 237
    632e:	8d 91       	ld	r24, X+
    6330:	9c 91       	ld	r25, X
    6332:	01 96       	adiw	r24, 0x01	; 1
    6334:	91 83       	std	Z+1, r25	; 0x01
    6336:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:464
                pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] -= 1;   
              } else if (pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] > 0) {
                pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] -= 1;   
              }            
            }   
            lcd.clear();
    6338:	8e e2       	ldi	r24, 0x2E	; 46
    633a:	94 e0       	ldi	r25, 0x04	; 4
    633c:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <LiquidCrystal::clear()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:465
            lcd.setCursor(0, 0);
    6340:	40 e0       	ldi	r20, 0x00	; 0
    6342:	60 e0       	ldi	r22, 0x00	; 0
    6344:	8e e2       	ldi	r24, 0x2E	; 46
    6346:	94 e0       	ldi	r25, 0x04	; 4
    6348:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:466
            if (selection) {
    634c:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <selection>
    6350:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <selection+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:467
              lcd.print("Prob.    ratchet");
    6354:	62 e9       	ldi	r22, 0x92	; 146
    6356:	73 e0       	ldi	r23, 0x03	; 3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:466
                pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] -= 1;   
              }            
            }   
            lcd.clear();
            lcd.setCursor(0, 0);
            if (selection) {
    6358:	89 2b       	or	r24, r25
    635a:	11 f4       	brne	.+4      	; 0x6360 <SeqParameter()+0xc60>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:469
              lcd.print("Prob.    ratchet");
            } else {
              lcd.print("prob.    Ratchet");
    635c:	63 ea       	ldi	r22, 0xA3	; 163
    635e:	73 e0       	ldi	r23, 0x03	; 3
    6360:	8e e2       	ldi	r24, 0x2E	; 46
    6362:	94 e0       	ldi	r25, 0x04	; 4
    6364:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:471
            }
            lcd.setCursor(0, 1);
    6368:	41 e0       	ldi	r20, 0x01	; 1
    636a:	60 e0       	ldi	r22, 0x00	; 0
    636c:	8e e2       	ldi	r24, 0x2E	; 46
    636e:	94 e0       	ldi	r25, 0x04	; 4
    6370:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:472
            lcd.print(String(pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()]));
    6374:	e0 90 ce 0c 	lds	r14, 0x0CCE	; 0x800cce <ptrnBuffer>
    6378:	f1 2c       	mov	r15, r1
    637a:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    637e:	10 e0       	ldi	r17, 0x00	; 0
    6380:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    6384:	64 e0       	ldi	r22, 0x04	; 4
    6386:	00 0f       	add	r16, r16
    6388:	11 1f       	adc	r17, r17
    638a:	6a 95       	dec	r22
    638c:	e1 f7       	brne	.-8      	; 0x6386 <SeqParameter()+0xc86>
    638e:	f8 01       	movw	r30, r16
    6390:	e8 0f       	add	r30, r24
    6392:	f1 1d       	adc	r31, r1
    6394:	ee 0f       	add	r30, r30
    6396:	ff 1f       	adc	r31, r31
    6398:	a9 ec       	ldi	r26, 0xC9	; 201
    639a:	ca 2e       	mov	r12, r26
    639c:	a5 e0       	ldi	r26, 0x05	; 5
    639e:	da 2e       	mov	r13, r26
    63a0:	ec 9c       	mul	r14, r12
    63a2:	80 01       	movw	r16, r0
    63a4:	ed 9c       	mul	r14, r13
    63a6:	10 0d       	add	r17, r0
    63a8:	fc 9c       	mul	r15, r12
    63aa:	10 0d       	add	r17, r0
    63ac:	11 24       	eor	r1, r1
    63ae:	e0 0f       	add	r30, r16
    63b0:	f1 1f       	adc	r31, r17
    63b2:	e8 56       	subi	r30, 0x68	; 104
    63b4:	fd 4e       	sbci	r31, 0xED	; 237
    63b6:	60 81       	ld	r22, Z
    63b8:	71 81       	ldd	r23, Z+1	; 0x01
    63ba:	4a e0       	ldi	r20, 0x0A	; 10
    63bc:	ce 01       	movw	r24, r28
    63be:	01 96       	adiw	r24, 0x01	; 1
    63c0:	0e 94 ef 4a 	call	0x95de	; 0x95de <String::String(unsigned int, unsigned char)>
    63c4:	be 01       	movw	r22, r28
    63c6:	6f 5f       	subi	r22, 0xFF	; 255
    63c8:	7f 4f       	sbci	r23, 0xFF	; 255
    63ca:	8e e2       	ldi	r24, 0x2E	; 46
    63cc:	94 e0       	ldi	r25, 0x04	; 4
    63ce:	0e 94 64 49 	call	0x92c8	; 0x92c8 <Print::print(String const&)>
    63d2:	ce 01       	movw	r24, r28
    63d4:	01 96       	adiw	r24, 0x01	; 1
    63d6:	0e 94 76 4a 	call	0x94ec	; 0x94ec <String::~String()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:473
            lcd.setCursor(9, 1);
    63da:	41 e0       	ldi	r20, 0x01	; 1
    63dc:	69 e0       	ldi	r22, 0x09	; 9
    63de:	8e e2       	ldi	r24, 0x2E	; 46
    63e0:	94 e0       	ldi	r25, 0x04	; 4
    63e2:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:474
            lcd.print(String(pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()]));
    63e6:	e0 90 ce 0c 	lds	r14, 0x0CCE	; 0x800cce <ptrnBuffer>
    63ea:	f1 2c       	mov	r15, r1
    63ec:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    63f0:	10 e0       	ldi	r17, 0x00	; 0
    63f2:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    63f6:	b4 e0       	ldi	r27, 0x04	; 4
    63f8:	00 0f       	add	r16, r16
    63fa:	11 1f       	adc	r17, r17
    63fc:	ba 95       	dec	r27
    63fe:	e1 f7       	brne	.-8      	; 0x63f8 <SeqParameter()+0xcf8>
    6400:	f8 01       	movw	r30, r16
    6402:	e8 0f       	add	r30, r24
    6404:	f1 1d       	adc	r31, r1
    6406:	f3 95       	inc	r31
    6408:	ee 0f       	add	r30, r30
    640a:	ff 1f       	adc	r31, r31
    640c:	ec 9c       	mul	r14, r12
    640e:	80 01       	movw	r16, r0
    6410:	ed 9c       	mul	r14, r13
    6412:	10 0d       	add	r17, r0
    6414:	fc 9c       	mul	r15, r12
    6416:	10 0d       	add	r17, r0
    6418:	11 24       	eor	r1, r1
    641a:	e0 0f       	add	r30, r16
    641c:	f1 1f       	adc	r31, r17
    641e:	e8 56       	subi	r30, 0x68	; 104
    6420:	fd 4e       	sbci	r31, 0xED	; 237
    6422:	60 81       	ld	r22, Z
    6424:	71 81       	ldd	r23, Z+1	; 0x01
    6426:	4a e0       	ldi	r20, 0x0A	; 10
    6428:	ce 01       	movw	r24, r28
    642a:	01 96       	adiw	r24, 0x01	; 1
    642c:	0e 94 ef 4a 	call	0x95de	; 0x95de <String::String(unsigned int, unsigned char)>
    6430:	be 01       	movw	r22, r28
    6432:	6f 5f       	subi	r22, 0xFF	; 255
    6434:	7f 4f       	sbci	r23, 0xFF	; 255
    6436:	8e e2       	ldi	r24, 0x2E	; 46
    6438:	94 e0       	ldi	r25, 0x04	; 4
    643a:	0e 94 64 49 	call	0x92c8	; 0x92c8 <Print::print(String const&)>
    643e:	ce 01       	movw	r24, r28
    6440:	01 96       	adiw	r24, 0x01	; 1
    6442:	0e 94 76 4a 	call	0x94ec	; 0x94ec <String::~String()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:475
            LcdUpdate();
    6446:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <LcdUpdate()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:477
          }   
          encoder_A_prev = encoder_A;
    644a:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <encoder_A>
    644e:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <encoder_A_prev>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:480
          
          // HANDLE STEP BUTTON /////////////////////////////////////////////          
          if (stepsBtn.justPressed) {
    6452:	80 91 a0 1e 	lds	r24, 0x1EA0	; 0x801ea0 <stepsBtn+0x3>
    6456:	88 23       	and	r24, r24
    6458:	09 f4       	brne	.+2      	; 0x645c <SeqParameter()+0xd5c>
    645a:	89 c0       	rjmp	.+274    	; 0x656e <SeqParameter()+0xe6e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:481
            lcd.clear();
    645c:	8e e2       	ldi	r24, 0x2E	; 46
    645e:	94 e0       	ldi	r25, 0x04	; 4
    6460:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <LiquidCrystal::clear()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:482
            lcd.setCursor(0, 0);
    6464:	40 e0       	ldi	r20, 0x00	; 0
    6466:	60 e0       	ldi	r22, 0x00	; 0
    6468:	8e e2       	ldi	r24, 0x2E	; 46
    646a:	94 e0       	ldi	r25, 0x04	; 4
    646c:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:483
            if (selection) {
    6470:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <selection>
    6474:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <selection+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:484
              lcd.print("Prob.    ratchet");
    6478:	62 e9       	ldi	r22, 0x92	; 146
    647a:	73 e0       	ldi	r23, 0x03	; 3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:483
          
          // HANDLE STEP BUTTON /////////////////////////////////////////////          
          if (stepsBtn.justPressed) {
            lcd.clear();
            lcd.setCursor(0, 0);
            if (selection) {
    647c:	89 2b       	or	r24, r25
    647e:	11 f4       	brne	.+4      	; 0x6484 <SeqParameter()+0xd84>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:486
              lcd.print("Prob.    ratchet");
            } else {
              lcd.print("prob.    Ratchet");
    6480:	63 ea       	ldi	r22, 0xA3	; 163
    6482:	73 e0       	ldi	r23, 0x03	; 3
    6484:	8e e2       	ldi	r24, 0x2E	; 46
    6486:	94 e0       	ldi	r25, 0x04	; 4
    6488:	0e 94 72 49 	call	0x92e4	; 0x92e4 <Print::print(char const*)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:488
            }
            lcd.setCursor(0, 1);
    648c:	41 e0       	ldi	r20, 0x01	; 1
    648e:	60 e0       	ldi	r22, 0x00	; 0
    6490:	8e e2       	ldi	r24, 0x2E	; 46
    6492:	94 e0       	ldi	r25, 0x04	; 4
    6494:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:489
            lcd.print(String(pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()]));
    6498:	e0 90 ce 0c 	lds	r14, 0x0CCE	; 0x800cce <ptrnBuffer>
    649c:	f1 2c       	mov	r15, r1
    649e:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    64a2:	10 e0       	ldi	r17, 0x00	; 0
    64a4:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    64a8:	94 e0       	ldi	r25, 0x04	; 4
    64aa:	00 0f       	add	r16, r16
    64ac:	11 1f       	adc	r17, r17
    64ae:	9a 95       	dec	r25
    64b0:	e1 f7       	brne	.-8      	; 0x64aa <SeqParameter()+0xdaa>
    64b2:	f8 01       	movw	r30, r16
    64b4:	e8 0f       	add	r30, r24
    64b6:	f1 1d       	adc	r31, r1
    64b8:	ee 0f       	add	r30, r30
    64ba:	ff 1f       	adc	r31, r31
    64bc:	39 ec       	ldi	r19, 0xC9	; 201
    64be:	c3 2e       	mov	r12, r19
    64c0:	35 e0       	ldi	r19, 0x05	; 5
    64c2:	d3 2e       	mov	r13, r19
    64c4:	ec 9c       	mul	r14, r12
    64c6:	80 01       	movw	r16, r0
    64c8:	ed 9c       	mul	r14, r13
    64ca:	10 0d       	add	r17, r0
    64cc:	fc 9c       	mul	r15, r12
    64ce:	10 0d       	add	r17, r0
    64d0:	11 24       	eor	r1, r1
    64d2:	e0 0f       	add	r30, r16
    64d4:	f1 1f       	adc	r31, r17
    64d6:	e8 56       	subi	r30, 0x68	; 104
    64d8:	fd 4e       	sbci	r31, 0xED	; 237
    64da:	60 81       	ld	r22, Z
    64dc:	71 81       	ldd	r23, Z+1	; 0x01
    64de:	4a e0       	ldi	r20, 0x0A	; 10
    64e0:	ce 01       	movw	r24, r28
    64e2:	01 96       	adiw	r24, 0x01	; 1
    64e4:	0e 94 ef 4a 	call	0x95de	; 0x95de <String::String(unsigned int, unsigned char)>
    64e8:	be 01       	movw	r22, r28
    64ea:	6f 5f       	subi	r22, 0xFF	; 255
    64ec:	7f 4f       	sbci	r23, 0xFF	; 255
    64ee:	8e e2       	ldi	r24, 0x2E	; 46
    64f0:	94 e0       	ldi	r25, 0x04	; 4
    64f2:	0e 94 64 49 	call	0x92c8	; 0x92c8 <Print::print(String const&)>
    64f6:	ce 01       	movw	r24, r28
    64f8:	01 96       	adiw	r24, 0x01	; 1
    64fa:	0e 94 76 4a 	call	0x94ec	; 0x94ec <String::~String()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:490
            lcd.setCursor(9, 1);
    64fe:	41 e0       	ldi	r20, 0x01	; 1
    6500:	69 e0       	ldi	r22, 0x09	; 9
    6502:	8e e2       	ldi	r24, 0x2E	; 46
    6504:	94 e0       	ldi	r25, 0x04	; 4
    6506:	0e 94 56 46 	call	0x8cac	; 0x8cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:491
            lcd.print(String(pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()]));
    650a:	e0 90 ce 0c 	lds	r14, 0x0CCE	; 0x800cce <ptrnBuffer>
    650e:	f1 2c       	mov	r15, r1
    6510:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    6514:	10 e0       	ldi	r17, 0x00	; 0
    6516:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    651a:	44 e0       	ldi	r20, 0x04	; 4
    651c:	00 0f       	add	r16, r16
    651e:	11 1f       	adc	r17, r17
    6520:	4a 95       	dec	r20
    6522:	e1 f7       	brne	.-8      	; 0x651c <SeqParameter()+0xe1c>
    6524:	f8 01       	movw	r30, r16
    6526:	e8 0f       	add	r30, r24
    6528:	f1 1d       	adc	r31, r1
    652a:	f3 95       	inc	r31
    652c:	ee 0f       	add	r30, r30
    652e:	ff 1f       	adc	r31, r31
    6530:	ec 9c       	mul	r14, r12
    6532:	80 01       	movw	r16, r0
    6534:	ed 9c       	mul	r14, r13
    6536:	10 0d       	add	r17, r0
    6538:	fc 9c       	mul	r15, r12
    653a:	10 0d       	add	r17, r0
    653c:	11 24       	eor	r1, r1
    653e:	e0 0f       	add	r30, r16
    6540:	f1 1f       	adc	r31, r17
    6542:	e8 56       	subi	r30, 0x68	; 104
    6544:	fd 4e       	sbci	r31, 0xED	; 237
    6546:	60 81       	ld	r22, Z
    6548:	71 81       	ldd	r23, Z+1	; 0x01
    654a:	4a e0       	ldi	r20, 0x0A	; 10
    654c:	ce 01       	movw	r24, r28
    654e:	01 96       	adiw	r24, 0x01	; 1
    6550:	0e 94 ef 4a 	call	0x95de	; 0x95de <String::String(unsigned int, unsigned char)>
    6554:	be 01       	movw	r22, r28
    6556:	6f 5f       	subi	r22, 0xFF	; 255
    6558:	7f 4f       	sbci	r23, 0xFF	; 255
    655a:	8e e2       	ldi	r24, 0x2E	; 46
    655c:	94 e0       	ldi	r25, 0x04	; 4
    655e:	0e 94 64 49 	call	0x92c8	; 0x92c8 <Print::print(String const&)>
    6562:	ce 01       	movw	r24, r28
    6564:	01 96       	adiw	r24, 0x01	; 1
    6566:	0e 94 76 4a 	call	0x94ec	; 0x94ec <String::~String()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:492
            LcdUpdate();
    656a:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <LcdUpdate()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:494
          }  
          if (stepsBtn.justRelease) {
    656e:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <stepsBtn+0x4>
    6572:	88 23       	and	r24, r24
    6574:	19 f0       	breq	.+6      	; 0x657c <SeqParameter()+0xe7c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:495
            needLcdUpdate = TRUE;  
    6576:	81 e0       	ldi	r24, 0x01	; 1
    6578:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:499
          }

          
          pattern[ptrnBuffer].inst[curInst] = InstValueGet(pattern[ptrnBuffer].inst[curInst]);//cf InstValueGet()
    657c:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    6580:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    6584:	10 e0       	ldi	r17, 0x00	; 0
    6586:	00 0f       	add	r16, r16
    6588:	11 1f       	adc	r17, r17
    658a:	29 ec       	ldi	r18, 0xC9	; 201
    658c:	35 e0       	ldi	r19, 0x05	; 5
    658e:	42 9f       	mul	r20, r18
    6590:	c0 01       	movw	r24, r0
    6592:	43 9f       	mul	r20, r19
    6594:	90 0d       	add	r25, r0
    6596:	11 24       	eor	r1, r1
    6598:	08 0f       	add	r16, r24
    659a:	19 1f       	adc	r17, r25
    659c:	03 56       	subi	r16, 0x63	; 99
    659e:	19 4e       	sbci	r17, 0xE9	; 233
    65a0:	d8 01       	movw	r26, r16
    65a2:	8d 91       	ld	r24, X+
    65a4:	9c 91       	ld	r25, X
    65a6:	0e 94 06 02 	call	0x40c	; 0x40c <InstValueGet(unsigned int)>
    65aa:	f8 01       	movw	r30, r16
    65ac:	91 83       	std	Z+1, r25	; 0x01
    65ae:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:810
  }//ENDIF MODE EDIT

  //======================================================================================================================================================================================================================================
  //////////////////////////MODE PATTERN PLAY...//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  if (curSeqMode == PTRN_PLAY){
    65b0:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    65b4:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    65b8:	02 97       	sbiw	r24, 0x02	; 2
    65ba:	09 f0       	breq	.+2      	; 0x65be <SeqParameter()+0xebe>
    65bc:	51 c0       	rjmp	.+162    	; 0x6660 <SeqParameter()+0xf60>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:812
    //-------------------------------select pattern-----------------------------------
    if (stepsBtn.justRelease) doublePush = FALSE;
    65be:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <stepsBtn+0x4>
    65c2:	81 11       	cpse	r24, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:812 (discriminator 1)
    65c4:	10 92 79 1e 	sts	0x1E79, r1	; 0x801e79 <doublePush>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:813
    if (readButtonState){
    65c8:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    65cc:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    65d0:	89 2b       	or	r24, r25
    65d2:	19 f1       	breq	.+70     	; 0x661a <SeqParameter()+0xf1a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:814
      if (bankBtn.pressed){
    65d4:	80 91 aa 1e 	lds	r24, 0x1EAA	; 0x801eaa <bankBtn+0x2>
    65d8:	88 23       	and	r24, r24
    65da:	09 f4       	brne	.+2      	; 0x65de <SeqParameter()+0xede>
    65dc:	03 c7       	rjmp	.+3590   	; 0x73e4 <SeqParameter()+0x1ce4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:815
        if(FirstBitOn() >= MAX_BANK) curBank = MAX_BANK;
    65de:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    65e2:	87 30       	cpi	r24, 0x07	; 7
    65e4:	08 f4       	brcc	.+2      	; 0x65e8 <SeqParameter()+0xee8>
    65e6:	fb c6       	rjmp	.+3574   	; 0x73de <SeqParameter()+0x1cde>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:815 (discriminator 1)
    65e8:	87 e0       	ldi	r24, 0x07	; 7
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:816
        else curBank = FirstBitOn();
    65ea:	80 93 35 1e 	sts	0x1E35, r24	; 0x801e35 <curBank>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:817
        nextPattern = curBank * NBR_PATTERN + (curPattern % NBR_PATTERN);
    65ee:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    65f2:	80 91 35 1e 	lds	r24, 0x1E35	; 0x801e35 <curBank>
    65f6:	82 95       	swap	r24
    65f8:	80 7f       	andi	r24, 0xF0	; 240
    65fa:	29 2f       	mov	r18, r25
    65fc:	2f 70       	andi	r18, 0x0F	; 15
    65fe:	82 0f       	add	r24, r18
    6600:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:818
        group.length = 0;//should be 0 to play the right next pattern
    6604:	10 92 c4 0c 	sts	0x0CC4, r1	; 0x800cc4 <group>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:819
        if((curPattern != nextPattern) && !isRunning) selectedPatternChanged = TRUE;
    6608:	98 17       	cp	r25, r24
    660a:	39 f0       	breq	.+14     	; 0x661a <SeqParameter()+0xf1a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:819 (discriminator 1)
    660c:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    6610:	81 11       	cpse	r24, r1
    6612:	03 c0       	rjmp	.+6      	; 0x661a <SeqParameter()+0xf1a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:819 (discriminator 2)
    6614:	81 e0       	ldi	r24, 0x01	; 1
    6616:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:853
        }
      }
    }

    //--------------------------------sequencer run direction-----------------------
    if (shiftBtn && dirBtn.justPressed){
    661a:	80 91 7a 1e 	lds	r24, 0x1E7A	; 0x801e7a <shiftBtn>
    661e:	88 23       	and	r24, r24
    6620:	61 f0       	breq	.+24     	; 0x663a <SeqParameter()+0xf3a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:853 (discriminator 1)
    6622:	80 91 0e 1f 	lds	r24, 0x1F0E	; 0x801f0e <dirBtn+0x3>
    6626:	88 23       	and	r24, r24
    6628:	41 f0       	breq	.+16     	; 0x663a <SeqParameter()+0xf3a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:854
      if (seq.dir++ >= MAX_SEQ_DIR) seq.dir = FORWARD;
    662a:	80 91 48 1e 	lds	r24, 0x1E48	; 0x801e48 <seq+0x9>
    662e:	83 30       	cpi	r24, 0x03	; 3
    6630:	08 f0       	brcs	.+2      	; 0x6634 <SeqParameter()+0xf34>
    6632:	3a c7       	rjmp	.+3700   	; 0x74a8 <SeqParameter()+0x1da8>
    6634:	8f 5f       	subi	r24, 0xFF	; 255
    6636:	80 93 48 1e 	sts	0x1E48, r24	; 0x801e48 <seq+0x9>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:866
     group.pos++;
     if(curPattern != nextPattern) selectedPatternChanged = TRUE;
     trackPosNeedIncremante = FALSE;
     needLcdUpdate = TRUE;
     }
     else*/    if (trackPosNeedIncremante && group.length == 0){
    663a:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <trackPosNeedIncremante>
    663e:	88 23       	and	r24, r24
    6640:	79 f0       	breq	.+30     	; 0x6660 <SeqParameter()+0xf60>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:866 (discriminator 1)
    6642:	80 91 c4 0c 	lds	r24, 0x0CC4	; 0x800cc4 <group>
    6646:	81 11       	cpse	r24, r1
    6648:	0b c0       	rjmp	.+22     	; 0x6660 <SeqParameter()+0xf60>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:867
      if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    664a:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    664e:	80 91 33 1e 	lds	r24, 0x1E33	; 0x801e33 <nextPattern>
    6652:	98 17       	cp	r25, r24
    6654:	19 f0       	breq	.+6      	; 0x665c <SeqParameter()+0xf5c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:867 (discriminator 1)
    6656:	81 e0       	ldi	r24, 0x01	; 1
    6658:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:868
      trackPosNeedIncremante = FALSE;
    665c:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <trackPosNeedIncremante>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:879

  //===================================================================================================================================

  //////////////////////////MODE TRACK WRITE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  if (curSeqMode == TRACK_WRITE){
    6660:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    6664:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    6668:	01 97       	sbiw	r24, 0x01	; 1
    666a:	11 f0       	breq	.+4      	; 0x6670 <SeqParameter()+0xf70>
    666c:	0c 94 4a 3b 	jmp	0x7694	; 0x7694 <SeqParameter()+0x1f94>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:881
    //-------------------------------select pattern-----------------------------------
    if (readButtonState){
    6670:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    6674:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    6678:	89 2b       	or	r24, r25
    667a:	e9 f0       	breq	.+58     	; 0x66b6 <SeqParameter()+0xfb6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:883

      if (bankBtn.pressed){
    667c:	80 91 aa 1e 	lds	r24, 0x1EAA	; 0x801eaa <bankBtn+0x2>
    6680:	88 23       	and	r24, r24
    6682:	09 f4       	brne	.+2      	; 0x6686 <SeqParameter()+0xf86>
    6684:	17 c7       	rjmp	.+3630   	; 0x74b4 <SeqParameter()+0x1db4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:884
        if(FirstBitOn() >= MAX_BANK) curBank = MAX_BANK;
    6686:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    668a:	87 30       	cpi	r24, 0x07	; 7
    668c:	08 f4       	brcc	.+2      	; 0x6690 <SeqParameter()+0xf90>
    668e:	0f c7       	rjmp	.+3614   	; 0x74ae <SeqParameter()+0x1dae>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:884 (discriminator 1)
    6690:	87 e0       	ldi	r24, 0x07	; 7
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:885
        else curBank = FirstBitOn();
    6692:	80 93 35 1e 	sts	0x1E35, r24	; 0x801e35 <curBank>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:886
        nextPattern = curBank * NBR_PATTERN + (curPattern % NBR_PATTERN);
    6696:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    669a:	80 91 35 1e 	lds	r24, 0x1E35	; 0x801e35 <curBank>
    669e:	82 95       	swap	r24
    66a0:	80 7f       	andi	r24, 0xF0	; 240
    66a2:	29 2f       	mov	r18, r25
    66a4:	2f 70       	andi	r18, 0x0F	; 15
    66a6:	82 0f       	add	r24, r18
    66a8:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:887
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    66ac:	98 17       	cp	r25, r24
    66ae:	19 f0       	breq	.+6      	; 0x66b6 <SeqParameter()+0xfb6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:887 (discriminator 1)
    66b0:	81 e0       	ldi	r24, 0x01	; 1
    66b2:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:900
        nextPattern = FirstBitOn() + curBank * NBR_PATTERN;
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
      }
    }
    //decremente track position
    if (backBtn.justPressed){
    66b6:	20 91 cc 1e 	lds	r18, 0x1ECC	; 0x801ecc <backBtn+0x3>
    66ba:	22 23       	and	r18, r18
    66bc:	61 f1       	breq	.+88     	; 0x6716 <SeqParameter()+0x1016>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:901
      trk.pos--;
    66be:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    66c2:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    66c6:	01 97       	sbiw	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:902
      if (trk.pos < 0 || trk.pos > MAX_PTRN_TRACK) trk.pos = 0;
    66c8:	81 30       	cpi	r24, 0x01	; 1
    66ca:	f4 e0       	ldi	r31, 0x04	; 4
    66cc:	9f 07       	cpc	r25, r31
    66ce:	08 f0       	brcs	.+2      	; 0x66d2 <SeqParameter()+0xfd2>
    66d0:	0d c7       	rjmp	.+3610   	; 0x74ec <SeqParameter()+0x1dec>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:901
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
      }
    }
    //decremente track position
    if (backBtn.justPressed){
      trk.pos--;
    66d2:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <trk+0x3>
    66d6:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:903
      if (trk.pos < 0 || trk.pos > MAX_PTRN_TRACK) trk.pos = 0;
      nextPattern = track[trkBuffer].patternNbr[trk.pos];
    66da:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <trkBuffer>
    66de:	82 e0       	ldi	r24, 0x02	; 2
    66e0:	94 e0       	ldi	r25, 0x04	; 4
    66e2:	38 9f       	mul	r19, r24
    66e4:	f0 01       	movw	r30, r0
    66e6:	39 9f       	mul	r19, r25
    66e8:	f0 0d       	add	r31, r0
    66ea:	11 24       	eor	r1, r1
    66ec:	e9 56       	subi	r30, 0x69	; 105
    66ee:	fb 4f       	sbci	r31, 0xFB	; 251
    66f0:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    66f4:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    66f8:	e8 0f       	add	r30, r24
    66fa:	f9 1f       	adc	r31, r25
    66fc:	82 81       	ldd	r24, Z+2	; 0x02
    66fe:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:904
      if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    6702:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    6706:	89 17       	cp	r24, r25
    6708:	19 f0       	breq	.+6      	; 0x6710 <SeqParameter()+0x1010>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:904 (discriminator 1)
    670a:	81 e0       	ldi	r24, 0x01	; 1
    670c:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:905
      needLcdUpdate = TRUE;
    6710:	81 e0       	ldi	r24, 0x01	; 1
    6712:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:908
    }
    //incremente track position
    if (fwdBtn.justPressed){
    6716:	40 91 c1 1e 	lds	r20, 0x1EC1	; 0x801ec1 <fwdBtn+0x3>
    671a:	44 23       	and	r20, r20
    671c:	61 f1       	breq	.+88     	; 0x6776 <SeqParameter()+0x1076>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:909
      trk.pos++;
    671e:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    6722:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    6726:	01 96       	adiw	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:910
      if (trk.pos > MAX_PTRN_TRACK) trk.pos = MAX_PTRN_TRACK;
    6728:	81 30       	cpi	r24, 0x01	; 1
    672a:	34 e0       	ldi	r19, 0x04	; 4
    672c:	93 07       	cpc	r25, r19
    672e:	08 f0       	brcs	.+2      	; 0x6732 <SeqParameter()+0x1032>
    6730:	e2 c6       	rjmp	.+3524   	; 0x74f6 <SeqParameter()+0x1df6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:910 (discriminator 1)
    6732:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <trk+0x3>
    6736:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:911 (discriminator 1)
      nextPattern = track[trkBuffer].patternNbr[trk.pos];
    673a:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <trkBuffer>
    673e:	82 e0       	ldi	r24, 0x02	; 2
    6740:	94 e0       	ldi	r25, 0x04	; 4
    6742:	38 9f       	mul	r19, r24
    6744:	f0 01       	movw	r30, r0
    6746:	39 9f       	mul	r19, r25
    6748:	f0 0d       	add	r31, r0
    674a:	11 24       	eor	r1, r1
    674c:	e9 56       	subi	r30, 0x69	; 105
    674e:	fb 4f       	sbci	r31, 0xFB	; 251
    6750:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    6754:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    6758:	e8 0f       	add	r30, r24
    675a:	f9 1f       	adc	r31, r25
    675c:	82 81       	ldd	r24, Z+2	; 0x02
    675e:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:912 (discriminator 1)
      if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    6762:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    6766:	89 17       	cp	r24, r25
    6768:	19 f0       	breq	.+6      	; 0x6770 <SeqParameter()+0x1070>
    676a:	81 e0       	ldi	r24, 0x01	; 1
    676c:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:913
      needLcdUpdate = TRUE;
    6770:	81 e0       	ldi	r24, 0x01	; 1
    6772:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:916
    }
    //go to first measure
    if (clearBtn.justPressed){
    6776:	80 91 7f 1e 	lds	r24, 0x1E7F	; 0x801e7f <clearBtn+0x3>
    677a:	88 23       	and	r24, r24
    677c:	e1 f0       	breq	.+56     	; 0x67b6 <SeqParameter()+0x10b6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:917
      trk.pos = 0;
    677e:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <trk+0x3>
    6782:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:918
      nextPattern = track[trkBuffer].patternNbr[trk.pos];
    6786:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <trkBuffer>
    678a:	82 e0       	ldi	r24, 0x02	; 2
    678c:	94 e0       	ldi	r25, 0x04	; 4
    678e:	38 9f       	mul	r19, r24
    6790:	f0 01       	movw	r30, r0
    6792:	39 9f       	mul	r19, r25
    6794:	f0 0d       	add	r31, r0
    6796:	11 24       	eor	r1, r1
    6798:	e9 56       	subi	r30, 0x69	; 105
    679a:	fb 4f       	sbci	r31, 0xFB	; 251
    679c:	82 81       	ldd	r24, Z+2	; 0x02
    679e:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:919
      if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    67a2:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    67a6:	89 17       	cp	r24, r25
    67a8:	19 f0       	breq	.+6      	; 0x67b0 <SeqParameter()+0x10b0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:919 (discriminator 1)
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:920
      needLcdUpdate = TRUE;
    67b0:	81 e0       	ldi	r24, 0x01	; 1
    67b2:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:922
    }
    if(shiftBtn){
    67b6:	80 91 7a 1e 	lds	r24, 0x1E7A	; 0x801e7a <shiftBtn>
    67ba:	88 23       	and	r24, r24
    67bc:	09 f4       	brne	.+2      	; 0x67c0 <SeqParameter()+0x10c0>
    67be:	15 c7       	rjmp	.+3626   	; 0x75ea <SeqParameter()+0x1eea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:924
      //go to last measure
      if (numBtn.pressed){
    67c0:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <numBtn+0x2>
    67c4:	88 23       	and	r24, r24
    67c6:	01 f1       	breq	.+64     	; 0x6808 <SeqParameter()+0x1108>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:925
        trk.pos = track[trkBuffer].length;
    67c8:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <trkBuffer>
    67cc:	82 e0       	ldi	r24, 0x02	; 2
    67ce:	94 e0       	ldi	r25, 0x04	; 4
    67d0:	38 9f       	mul	r19, r24
    67d2:	f0 01       	movw	r30, r0
    67d4:	39 9f       	mul	r19, r25
    67d6:	f0 0d       	add	r31, r0
    67d8:	11 24       	eor	r1, r1
    67da:	e9 56       	subi	r30, 0x69	; 105
    67dc:	fb 4f       	sbci	r31, 0xFB	; 251
    67de:	80 81       	ld	r24, Z
    67e0:	91 81       	ldd	r25, Z+1	; 0x01
    67e2:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <trk+0x3>
    67e6:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:926
        nextPattern = track[trkBuffer].patternNbr[trk.pos];
    67ea:	e8 0f       	add	r30, r24
    67ec:	f9 1f       	adc	r31, r25
    67ee:	82 81       	ldd	r24, Z+2	; 0x02
    67f0:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:927
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    67f4:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    67f8:	89 17       	cp	r24, r25
    67fa:	19 f0       	breq	.+6      	; 0x6802 <SeqParameter()+0x1102>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:927 (discriminator 1)
    67fc:	81 e0       	ldi	r24, 0x01	; 1
    67fe:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:928
        needLcdUpdate = TRUE;
    6802:	81 e0       	ldi	r24, 0x01	; 1
    6804:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:932
      }
      //delete current pattern in the current position
   // if(backBtn.justPressed) {
      if (backBtn.justPressed && track[trkBuffer].length){                                                  // [zabox] fixes crashs when deleting the last track pos
    6808:	22 23       	and	r18, r18
    680a:	09 f4       	brne	.+2      	; 0x680e <SeqParameter()+0x110e>
    680c:	99 c6       	rjmp	.+3378   	; 0x7540 <SeqParameter()+0x1e40>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:932 (discriminator 1)
    680e:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <trkBuffer>
    6812:	30 e0       	ldi	r19, 0x00	; 0
    6814:	62 e0       	ldi	r22, 0x02	; 2
    6816:	74 e0       	ldi	r23, 0x04	; 4
    6818:	26 9f       	mul	r18, r22
    681a:	c0 01       	movw	r24, r0
    681c:	27 9f       	mul	r18, r23
    681e:	90 0d       	add	r25, r0
    6820:	36 9f       	mul	r19, r22
    6822:	90 0d       	add	r25, r0
    6824:	11 24       	eor	r1, r1
    6826:	fc 01       	movw	r30, r24
    6828:	e9 56       	subi	r30, 0x69	; 105
    682a:	fb 4f       	sbci	r31, 0xFB	; 251
    682c:	a0 81       	ld	r26, Z
    682e:	b1 81       	ldd	r27, Z+1	; 0x01
    6830:	10 97       	sbiw	r26, 0x00	; 0
    6832:	09 f4       	brne	.+2      	; 0x6836 <SeqParameter()+0x1136>
    6834:	85 c6       	rjmp	.+3338   	; 0x7540 <SeqParameter()+0x1e40>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:933
        if (trk.pos < (track[trkBuffer].length - 1)) {                                                      // [zabox] delete only valid track pos
    6836:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <trk+0x2>
    683a:	f0 91 94 04 	lds	r31, 0x0494	; 0x800494 <trk+0x3>
    683e:	8d 01       	movw	r16, r26
    6840:	01 50       	subi	r16, 0x01	; 1
    6842:	11 09       	sbc	r17, r1
    6844:	bf 01       	movw	r22, r30
    6846:	6f 5f       	subi	r22, 0xFF	; 255
    6848:	7f 4f       	sbci	r23, 0xFF	; 255
    684a:	e0 17       	cp	r30, r16
    684c:	f1 07       	cpc	r31, r17
    684e:	08 f0       	brcs	.+2      	; 0x6852 <SeqParameter()+0x1152>
    6850:	a8 c6       	rjmp	.+3408   	; 0x75a2 <SeqParameter()+0x1ea2>
    6852:	e8 0f       	add	r30, r24
    6854:	f9 1f       	adc	r31, r25
    6856:	e9 56       	subi	r30, 0x69	; 105
    6858:	fb 4f       	sbci	r31, 0xFB	; 251
    685a:	8e ef       	ldi	r24, 0xFE	; 254
    685c:	9b ef       	ldi	r25, 0xFB	; 251
    685e:	28 9f       	mul	r18, r24
    6860:	70 01       	movw	r14, r0
    6862:	29 9f       	mul	r18, r25
    6864:	f0 0c       	add	r15, r0
    6866:	38 9f       	mul	r19, r24
    6868:	f0 0c       	add	r15, r0
    686a:	11 24       	eor	r1, r1
    686c:	31 96       	adiw	r30, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:934 (discriminator 3)
        for (int a = trk.pos + 1; a < track[trkBuffer].length; a++){         
    686e:	cf 01       	movw	r24, r30
    6870:	87 59       	subi	r24, 0x97	; 151
    6872:	94 40       	sbci	r25, 0x04	; 4
    6874:	8e 0d       	add	r24, r14
    6876:	9f 1d       	adc	r25, r15
    6878:	8a 17       	cp	r24, r26
    687a:	9b 07       	cpc	r25, r27
    687c:	08 f0       	brcs	.+2      	; 0x6880 <SeqParameter()+0x1180>
    687e:	3e c6       	rjmp	.+3196   	; 0x74fc <SeqParameter()+0x1dfc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:935 (discriminator 2)
          track[trkBuffer].patternNbr[a] = track[trkBuffer].patternNbr[a + 1]; 
    6880:	83 81       	ldd	r24, Z+3	; 0x03
    6882:	82 83       	std	Z+2, r24	; 0x02
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:934 (discriminator 2)
      }
      //delete current pattern in the current position
   // if(backBtn.justPressed) {
      if (backBtn.justPressed && track[trkBuffer].length){                                                  // [zabox] fixes crashs when deleting the last track pos
        if (trk.pos < (track[trkBuffer].length - 1)) {                                                      // [zabox] delete only valid track pos
        for (int a = trk.pos + 1; a < track[trkBuffer].length; a++){         
    6884:	f3 cf       	rjmp	.-26     	; 0x686c <SeqParameter()+0x116c>
    6886:	00 91 ce 0c 	lds	r16, 0x0CCE	; 0x800cce <ptrnBuffer>
    688a:	10 91 eb 01 	lds	r17, 0x01EB	; 0x8001eb <curInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:458 (discriminator 1)
                pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] += 1;   
              } else {
                pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] += 1;   
              }            
            } else {
              if (selection && pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] > 0) {
    688e:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    6892:	90 e1       	ldi	r25, 0x10	; 16
    6894:	19 9f       	mul	r17, r25
    6896:	f0 01       	movw	r30, r0
    6898:	11 24       	eor	r1, r1
    689a:	e8 0f       	add	r30, r24
    689c:	f1 1d       	adc	r31, r1
    689e:	ee 0f       	add	r30, r30
    68a0:	ff 1f       	adc	r31, r31
    68a2:	a9 ec       	ldi	r26, 0xC9	; 201
    68a4:	ea 2e       	mov	r14, r26
    68a6:	a5 e0       	ldi	r26, 0x05	; 5
    68a8:	fa 2e       	mov	r15, r26
    68aa:	0e 9d       	mul	r16, r14
    68ac:	c0 01       	movw	r24, r0
    68ae:	0f 9d       	mul	r16, r15
    68b0:	90 0d       	add	r25, r0
    68b2:	11 24       	eor	r1, r1
    68b4:	e8 0f       	add	r30, r24
    68b6:	f9 1f       	adc	r31, r25
    68b8:	e8 56       	subi	r30, 0x68	; 104
    68ba:	fd 4e       	sbci	r31, 0xED	; 237
    68bc:	80 81       	ld	r24, Z
    68be:	91 81       	ldd	r25, Z+1	; 0x01
    68c0:	89 2b       	or	r24, r25
    68c2:	09 f4       	brne	.+2      	; 0x68c6 <SeqParameter()+0x11c6>
    68c4:	c3 cc       	rjmp	.-1658   	; 0x624c <SeqParameter()+0xb4c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:459
                pattern[ptrnBuffer].stepProb[curInst][FirstBitOn()] -= 1;   
    68c6:	c0 90 ce 0c 	lds	r12, 0x0CCE	; 0x800cce <ptrnBuffer>
    68ca:	d1 2c       	mov	r13, r1
    68cc:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <curInst>
    68d0:	10 e0       	ldi	r17, 0x00	; 0
    68d2:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    68d6:	90 e0       	ldi	r25, 0x00	; 0
    68d8:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <curInst>
    68dc:	e0 e1       	ldi	r30, 0x10	; 16
    68de:	ae 9f       	mul	r26, r30
    68e0:	d0 01       	movw	r26, r0
    68e2:	11 24       	eor	r1, r1
    68e4:	a8 0f       	add	r26, r24
    68e6:	b9 1f       	adc	r27, r25
    68e8:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    68ec:	aa 0f       	add	r26, r26
    68ee:	bb 1f       	adc	r27, r27
    68f0:	4e 9d       	mul	r20, r14
    68f2:	90 01       	movw	r18, r0
    68f4:	4f 9d       	mul	r20, r15
    68f6:	30 0d       	add	r19, r0
    68f8:	11 24       	eor	r1, r1
    68fa:	a2 0f       	add	r26, r18
    68fc:	b3 1f       	adc	r27, r19
    68fe:	a8 56       	subi	r26, 0x68	; 104
    6900:	bd 4e       	sbci	r27, 0xED	; 237
    6902:	f8 01       	movw	r30, r16
    6904:	64 e0       	ldi	r22, 0x04	; 4
    6906:	ee 0f       	add	r30, r30
    6908:	ff 1f       	adc	r31, r31
    690a:	6a 95       	dec	r22
    690c:	e1 f7       	brne	.-8      	; 0x6906 <SeqParameter()+0x1206>
    690e:	e8 0f       	add	r30, r24
    6910:	f9 1f       	adc	r31, r25
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:461
              } else if (pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] > 0) {
                pattern[ptrnBuffer].stepRatchet[curInst][FirstBitOn()] -= 1;   
    6912:	ee 0f       	add	r30, r30
    6914:	ff 1f       	adc	r31, r31
    6916:	ce 9c       	mul	r12, r14
    6918:	80 01       	movw	r16, r0
    691a:	cf 9c       	mul	r12, r15
    691c:	10 0d       	add	r17, r0
    691e:	de 9c       	mul	r13, r14
    6920:	10 0d       	add	r17, r0
    6922:	11 24       	eor	r1, r1
    6924:	e0 0f       	add	r30, r16
    6926:	f1 1f       	adc	r31, r17
    6928:	e8 56       	subi	r30, 0x68	; 104
    692a:	fd 4e       	sbci	r31, 0xED	; 237
    692c:	80 81       	ld	r24, Z
    692e:	91 81       	ldd	r25, Z+1	; 0x01
    6930:	01 97       	sbiw	r24, 0x01	; 1
    6932:	8d 93       	st	X+, r24
    6934:	9c 93       	st	X, r25
    6936:	00 cd       	rjmp	.-1536   	; 0x6338 <SeqParameter()+0xc38>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:506
        
        }
        else if (!isRunning)
        {//Return pattern number
        
          if (stepsBtn.pressed){
    6938:	88 23       	and	r24, r24
    693a:	09 f4       	brne	.+2      	; 0x693e <SeqParameter()+0x123e>
    693c:	91 ce       	rjmp	.-734    	; 0x6660 <SeqParameter()+0xf60>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:507
            if (bankBtn.pressed){
    693e:	80 91 aa 1e 	lds	r24, 0x1EAA	; 0x801eaa <bankBtn+0x2>
    6942:	88 23       	and	r24, r24
    6944:	e9 f0       	breq	.+58     	; 0x6980 <SeqParameter()+0x1280>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:509
              
              if(FirstBitOn() >= MAX_BANK) curBank = MAX_BANK;
    6946:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    694a:	87 30       	cpi	r24, 0x07	; 7
    694c:	b0 f0       	brcs	.+44     	; 0x697a <SeqParameter()+0x127a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:509 (discriminator 1)
    694e:	87 e0       	ldi	r24, 0x07	; 7
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:510
              else curBank = FirstBitOn();
    6950:	80 93 35 1e 	sts	0x1E35, r24	; 0x801e35 <curBank>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:511
              nextPattern = curBank * NBR_PATTERN + (curPattern % NBR_PATTERN);
    6954:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    6958:	80 91 35 1e 	lds	r24, 0x1E35	; 0x801e35 <curBank>
    695c:	82 95       	swap	r24
    695e:	80 7f       	andi	r24, 0xF0	; 240
    6960:	29 2f       	mov	r18, r25
    6962:	2f 70       	andi	r18, 0x0F	; 15
    6964:	82 0f       	add	r24, r18
    6966:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:512
              if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    696a:	98 17       	cp	r25, r24
    696c:	19 f0       	breq	.+6      	; 0x6974 <SeqParameter()+0x1274>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:512 (discriminator 1)
    696e:	81 e0       	ldi	r24, 0x01	; 1
    6970:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:513
              group.length = 0;
    6974:	10 92 c4 0c 	sts	0x0CC4, r1	; 0x800cc4 <group>
    6978:	1b ce       	rjmp	.-970    	; 0x65b0 <SeqParameter()+0xeb0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:510
        
          if (stepsBtn.pressed){
            if (bankBtn.pressed){
              
              if(FirstBitOn() >= MAX_BANK) curBank = MAX_BANK;
              else curBank = FirstBitOn();
    697a:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    697e:	e8 cf       	rjmp	.-48     	; 0x6950 <SeqParameter()+0x1250>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:516
              nextPattern = curBank * NBR_PATTERN + (curPattern % NBR_PATTERN);
              if(curPattern != nextPattern) selectedPatternChanged = TRUE;
              group.length = 0;
            }
            else{//pattern group edit------------------------------------------------------
              if (SecondBitOn())
    6980:	0e 94 5f 04 	call	0x8be	; 0x8be <SecondBitOn()>
    6984:	88 23       	and	r24, r24
    6986:	09 f4       	brne	.+2      	; 0x698a <SeqParameter()+0x128a>
    6988:	4e c0       	rjmp	.+156    	; 0x6a26 <SeqParameter()+0x1326>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:518
              {
                trackPosNeedIncremante = FALSE;                                                               // [zabox] fixes group bug
    698a:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <trackPosNeedIncremante>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:519
                group.length = SecondBitOn() - FirstBitOn();
    698e:	0e 94 5f 04 	call	0x8be	; 0x8be <SecondBitOn()>
    6992:	18 2f       	mov	r17, r24
    6994:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    6998:	18 1b       	sub	r17, r24
    699a:	10 93 c4 0c 	sts	0x0CC4, r17	; 0x800cc4 <group>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:520
                nextPattern = group.firstPattern = FirstBitOn() + curBank * NBR_PATTERN;
    699e:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    69a2:	90 91 35 1e 	lds	r25, 0x1E35	; 0x801e35 <curBank>
    69a6:	92 95       	swap	r25
    69a8:	90 7f       	andi	r25, 0xF0	; 240
    69aa:	89 0f       	add	r24, r25
    69ac:	80 93 c5 0c 	sts	0x0CC5, r24	; 0x800cc5 <group+0x1>
    69b0:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:521
                doublePush = TRUE;
    69b4:	81 e0       	ldi	r24, 0x01	; 1
    69b6:	80 93 79 1e 	sts	0x1E79, r24	; 0x801e79 <doublePush>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:522
                group.priority = TRUE;
    69ba:	80 93 c7 0c 	sts	0x0CC7, r24	; 0x800cc7 <group+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:524
                //Store groupe in eeprom
                if(enterBtn.justPressed){
    69be:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <enterBtn+0x3>
    69c2:	88 23       	and	r24, r24
    69c4:	29 f1       	breq	.+74     	; 0x6a10 <SeqParameter()+0x1310>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:525
                  group.priority = FALSE;
    69c6:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <group+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:529
                  byte tempLength;
                  byte tempPos;
                  //Test if one the  selected pattern is already in a Group
                  for (int a = 0; a <= group.length; a++){
    69ca:	10 e0       	ldi	r17, 0x00	; 0
    69cc:	00 e0       	ldi	r16, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:529 (discriminator 1)
    69ce:	60 91 c4 0c 	lds	r22, 0x0CC4	; 0x800cc4 <group>
    69d2:	80 91 c5 0c 	lds	r24, 0x0CC5	; 0x800cc5 <group+0x1>
    69d6:	60 17       	cp	r22, r16
    69d8:	11 06       	cpc	r1, r17
    69da:	c4 f0       	brlt	.+48     	; 0x6a0c <SeqParameter()+0x130c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:530
                    tempLength = LoadPatternGroup(group.firstPattern + a, LENGTH);
    69dc:	61 e0       	ldi	r22, 0x01	; 1
    69de:	80 0f       	add	r24, r16
    69e0:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <LoadPatternGroup(unsigned char, unsigned char)>
    69e4:	f8 2e       	mov	r15, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:531
                    if (tempLength){
    69e6:	88 23       	and	r24, r24
    69e8:	71 f0       	breq	.+28     	; 0x6a06 <SeqParameter()+0x1306>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:532
                      tempPos = LoadPatternGroup(group.firstPattern + a, POSITION);
    69ea:	80 91 c5 0c 	lds	r24, 0x0CC5	; 0x800cc5 <group+0x1>
    69ee:	60 e0       	ldi	r22, 0x00	; 0
    69f0:	80 0f       	add	r24, r16
    69f2:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <LoadPatternGroup(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:533
                      ClearPatternGroup(group.firstPattern + a - tempPos, tempLength);
    69f6:	90 91 c5 0c 	lds	r25, 0x0CC5	; 0x800cc5 <group+0x1>
    69fa:	90 0f       	add	r25, r16
    69fc:	6f 2d       	mov	r22, r15
    69fe:	98 1b       	sub	r25, r24
    6a00:	89 2f       	mov	r24, r25
    6a02:	0e 94 dd 20 	call	0x41ba	; 0x41ba <ClearPatternGroup(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:529 (discriminator 2)
                if(enterBtn.justPressed){
                  group.priority = FALSE;
                  byte tempLength;
                  byte tempPos;
                  //Test if one the  selected pattern is already in a Group
                  for (int a = 0; a <= group.length; a++){
    6a06:	0f 5f       	subi	r16, 0xFF	; 255
    6a08:	1f 4f       	sbci	r17, 0xFF	; 255
    6a0a:	e1 cf       	rjmp	.-62     	; 0x69ce <SeqParameter()+0x12ce>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:536
                    if (tempLength){
                      tempPos = LoadPatternGroup(group.firstPattern + a, POSITION);
                      ClearPatternGroup(group.firstPattern + a - tempPos, tempLength);
                    }
                  }
                  SavePatternGroup(group.firstPattern, group.length);
    6a0c:	0e 94 96 20 	call	0x412c	; 0x412c <SavePatternGroup(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:548
                  ClearPatternGroup(nextPattern - pattern[ptrnBuffer].groupPos, pattern[ptrnBuffer].groupLength);
                  group.length = 0;
                }
                group.pos = pattern[ptrnBuffer].groupPos;
              }
              if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    6a10:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    6a14:	80 91 33 1e 	lds	r24, 0x1E33	; 0x801e33 <nextPattern>
    6a18:	98 17       	cp	r25, r24
    6a1a:	09 f4       	brne	.+2      	; 0x6a1e <SeqParameter()+0x131e>
    6a1c:	c9 cd       	rjmp	.-1134   	; 0x65b0 <SeqParameter()+0xeb0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:548 (discriminator 1)
    6a1e:	81 e0       	ldi	r24, 0x01	; 1
    6a20:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
    6a24:	c5 cd       	rjmp	.-1142   	; 0x65b0 <SeqParameter()+0xeb0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:539
                    }
                  }
                  SavePatternGroup(group.firstPattern, group.length);
                }
              }
              else if (!doublePush){
    6a26:	80 91 79 1e 	lds	r24, 0x1E79	; 0x801e79 <doublePush>
    6a2a:	81 11       	cpse	r24, r1
    6a2c:	f1 cf       	rjmp	.-30     	; 0x6a10 <SeqParameter()+0x1310>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:540
                group.priority = FALSE;
    6a2e:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <group+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:541
                nextPattern = FirstBitOn() + curBank * NBR_PATTERN;
    6a32:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    6a36:	90 91 35 1e 	lds	r25, 0x1E35	; 0x801e35 <curBank>
    6a3a:	92 95       	swap	r25
    6a3c:	90 7f       	andi	r25, 0xF0	; 240
    6a3e:	89 0f       	add	r24, r25
    6a40:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:542
                if(enterBtn.justPressed){
    6a44:	90 91 ed 1e 	lds	r25, 0x1EED	; 0x801eed <enterBtn+0x3>
    6a48:	99 23       	and	r25, r25
    6a4a:	c1 f0       	breq	.+48     	; 0x6a7c <SeqParameter()+0x137c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:543
                  ClearPatternGroup(nextPattern - pattern[ptrnBuffer].groupPos, pattern[ptrnBuffer].groupLength);
    6a4c:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <ptrnBuffer>
    6a50:	49 ec       	ldi	r20, 0xC9	; 201
    6a52:	55 e0       	ldi	r21, 0x05	; 5
    6a54:	94 9f       	mul	r25, r20
    6a56:	90 01       	movw	r18, r0
    6a58:	95 9f       	mul	r25, r21
    6a5a:	30 0d       	add	r19, r0
    6a5c:	11 24       	eor	r1, r1
    6a5e:	28 56       	subi	r18, 0x68	; 104
    6a60:	3d 4e       	sbci	r19, 0xED	; 237
    6a62:	f9 01       	movw	r30, r18
    6a64:	e9 53       	subi	r30, 0x39	; 57
    6a66:	fa 4f       	sbci	r31, 0xFA	; 250
    6a68:	2a 53       	subi	r18, 0x3A	; 58
    6a6a:	3a 4f       	sbci	r19, 0xFA	; 250
    6a6c:	d9 01       	movw	r26, r18
    6a6e:	9c 91       	ld	r25, X
    6a70:	60 81       	ld	r22, Z
    6a72:	89 1b       	sub	r24, r25
    6a74:	0e 94 dd 20 	call	0x41ba	; 0x41ba <ClearPatternGroup(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:544
                  group.length = 0;
    6a78:	10 92 c4 0c 	sts	0x0CC4, r1	; 0x800cc4 <group>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:546
                }
                group.pos = pattern[ptrnBuffer].groupPos;
    6a7c:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    6a80:	89 ec       	ldi	r24, 0xC9	; 201
    6a82:	95 e0       	ldi	r25, 0x05	; 5
    6a84:	28 9f       	mul	r18, r24
    6a86:	f0 01       	movw	r30, r0
    6a88:	29 9f       	mul	r18, r25
    6a8a:	f0 0d       	add	r31, r0
    6a8c:	11 24       	eor	r1, r1
    6a8e:	e2 5a       	subi	r30, 0xA2	; 162
    6a90:	f7 4e       	sbci	r31, 0xE7	; 231
    6a92:	80 81       	ld	r24, Z
    6a94:	80 93 c6 0c 	sts	0x0CC6, r24	; 0x800cc6 <group+0x2>
    6a98:	bb cf       	rjmp	.-138    	; 0x6a10 <SeqParameter()+0x1310>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:563
       trackPosNeedIncremante = FALSE;
       needLcdUpdate = TRUE;
       }*/
    }
    //////////////////////////////TAP EDIT///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    else if (curSeqMode == PTRN_TAP)
    6a9a:	04 97       	sbiw	r24, 0x04	; 4
    6a9c:	09 f0       	breq	.+2      	; 0x6aa0 <SeqParameter()+0x13a0>
    6a9e:	88 cd       	rjmp	.-1264   	; 0x65b0 <SeqParameter()+0xeb0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:569
    {
      //static byte lastHHtrigged;// remmeber last OH or CH was trigged to prevent OH noise when trigget other instruments


      
      if (clearBtn.pressed){                                                                           // [zabox] new function in tap mode: hold clear + inst in tap mode
    6aa0:	80 91 7e 1e 	lds	r24, 0x1E7E	; 0x801e7e <clearBtn+0x2>
    6aa4:	88 23       	and	r24, r24
    6aa6:	09 f4       	brne	.+2      	; 0x6aaa <SeqParameter()+0x13aa>
    6aa8:	9a c0       	rjmp	.+308    	; 0x6bde <SeqParameter()+0x14de>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:571
      
        if (clearBtn.justPressed)  prev_muteInst = muteInst;                                           // [zabox] save mute state
    6aaa:	80 91 7f 1e 	lds	r24, 0x1E7F	; 0x801e7f <clearBtn+0x3>
    6aae:	88 23       	and	r24, r24
    6ab0:	41 f0       	breq	.+16     	; 0x6ac2 <SeqParameter()+0x13c2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:571 (discriminator 1)
    6ab2:	80 91 a2 0c 	lds	r24, 0x0CA2	; 0x800ca2 <muteInst>
    6ab6:	90 91 a3 0c 	lds	r25, 0x0CA3	; 0x800ca3 <muteInst+0x1>
    6aba:	90 93 a1 0c 	sts	0x0CA1, r25	; 0x800ca1 <prev_muteInst+0x1>
    6abe:	80 93 a0 0c 	sts	0x0CA0, r24	; 0x800ca0 <prev_muteInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:572
        if (readButtonState) {
    6ac2:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    6ac6:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    6aca:	89 2b       	or	r24, r25
    6acc:	09 f4       	brne	.+2      	; 0x6ad0 <SeqParameter()+0x13d0>
    6ace:	0f c1       	rjmp	.+542    	; 0x6cee <SeqParameter()+0x15ee>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:576
          
        byte clearInst;                                                         
          
        switch(FirstBitOn()){
    6ad0:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    6ad4:	80 31       	cpi	r24, 0x10	; 16
    6ad6:	b8 f4       	brcc	.+46     	; 0x6b06 <SeqParameter()+0x1406>
    6ad8:	e8 2f       	mov	r30, r24
    6ada:	f0 e0       	ldi	r31, 0x00	; 0
    6adc:	ee 58       	subi	r30, 0x8E	; 142
    6ade:	fa 4c       	sbci	r31, 0xCA	; 202
    6ae0:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    6ae4:	75 36       	cpi	r23, 0x65	; 101
    6ae6:	75 36       	cpi	r23, 0x65	; 101
    6ae8:	82 35       	cpi	r24, 0x52	; 82
    6aea:	82 35       	cpi	r24, 0x52	; 82
    6aec:	61 36       	cpi	r22, 0x61	; 97
    6aee:	61 36       	cpi	r22, 0x61	; 97
    6af0:	63 36       	cpi	r22, 0x63	; 99
    6af2:	63 36       	cpi	r22, 0x63	; 99
    6af4:	65 36       	cpi	r22, 0x65	; 101
    6af6:	65 36       	cpi	r22, 0x65	; 101
    6af8:	67 36       	cpi	r22, 0x67	; 103
    6afa:	69 36       	cpi	r22, 0x69	; 105
    6afc:	6b 36       	cpi	r22, 0x6B	; 107
    6afe:	6b 36       	cpi	r22, 0x6B	; 107
    6b00:	73 36       	cpi	r23, 0x63	; 99
    6b02:	71 36       	cpi	r23, 0x61	; 97
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:583
        case BD_LOW_BTN:
          clearInst = BD;
          break;
        case SD_BTN:
        case SD_LOW_BTN:
          clearInst = SD;
    6b04:	19 e0       	ldi	r17, 0x09	; 9
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:616
          break;
        case CRASH_BTN:
          clearInst = CRASH;
          break;
        }
        if (readButtonState == OH_BTN){
    6b06:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    6b0a:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    6b0e:	81 15       	cp	r24, r1
    6b10:	90 43       	sbci	r25, 0x30	; 48
    6b12:	21 f4       	brne	.+8      	; 0x6b1c <SeqParameter()+0x141c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:618
          clearInst = OH;
          doublePush = 1;
    6b14:	81 e0       	ldi	r24, 0x01	; 1
    6b16:	80 93 79 1e 	sts	0x1E79, r24	; 0x801e79 <doublePush>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:617
        case CRASH_BTN:
          clearInst = CRASH;
          break;
        }
        if (readButtonState == OH_BTN){
          clearInst = OH;
    6b1a:	1f e0       	ldi	r17, 0x0F	; 15
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:622
          doublePush = 1;
        }
            
                                                 
        muteInst = prev_muteInst | (1 << clearInst);                                                            // [zabox] mute inst
    6b1c:	21 2f       	mov	r18, r17
    6b1e:	30 e0       	ldi	r19, 0x00	; 0
    6b20:	81 e0       	ldi	r24, 0x01	; 1
    6b22:	90 e0       	ldi	r25, 0x00	; 0
    6b24:	01 2e       	mov	r0, r17
    6b26:	02 c0       	rjmp	.+4      	; 0x6b2c <SeqParameter()+0x142c>
    6b28:	88 0f       	add	r24, r24
    6b2a:	99 1f       	adc	r25, r25
    6b2c:	0a 94       	dec	r0
    6b2e:	e2 f7       	brpl	.-8      	; 0x6b28 <SeqParameter()+0x1428>
    6b30:	40 91 a0 0c 	lds	r20, 0x0CA0	; 0x800ca0 <prev_muteInst>
    6b34:	50 91 a1 0c 	lds	r21, 0x0CA1	; 0x800ca1 <prev_muteInst+0x1>
    6b38:	84 2b       	or	r24, r20
    6b3a:	95 2b       	or	r25, r21
    6b3c:	90 93 a3 0c 	sts	0x0CA3, r25	; 0x800ca3 <muteInst+0x1>
    6b40:	80 93 a2 0c 	sts	0x0CA2, r24	; 0x800ca2 <muteInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:624
      
        bitClear (pattern[ptrnBuffer].inst[clearInst], curStep);
    6b44:	a0 91 3d 1e 	lds	r26, 0x1E3D	; 0x801e3d <curStep>
    6b48:	60 91 ce 0c 	lds	r22, 0x0CCE	; 0x800cce <ptrnBuffer>
    6b4c:	f9 01       	movw	r30, r18
    6b4e:	ee 0f       	add	r30, r30
    6b50:	ff 1f       	adc	r31, r31
    6b52:	49 ec       	ldi	r20, 0xC9	; 201
    6b54:	55 e0       	ldi	r21, 0x05	; 5
    6b56:	64 9f       	mul	r22, r20
    6b58:	c0 01       	movw	r24, r0
    6b5a:	65 9f       	mul	r22, r21
    6b5c:	90 0d       	add	r25, r0
    6b5e:	11 24       	eor	r1, r1
    6b60:	e8 0f       	add	r30, r24
    6b62:	f9 1f       	adc	r31, r25
    6b64:	e3 56       	subi	r30, 0x63	; 99
    6b66:	f9 4e       	sbci	r31, 0xE9	; 233
    6b68:	41 e0       	ldi	r20, 0x01	; 1
    6b6a:	50 e0       	ldi	r21, 0x00	; 0
    6b6c:	60 e0       	ldi	r22, 0x00	; 0
    6b6e:	70 e0       	ldi	r23, 0x00	; 0
    6b70:	04 c0       	rjmp	.+8      	; 0x6b7a <SeqParameter()+0x147a>
    6b72:	44 0f       	add	r20, r20
    6b74:	55 1f       	adc	r21, r21
    6b76:	66 1f       	adc	r22, r22
    6b78:	77 1f       	adc	r23, r23
    6b7a:	aa 95       	dec	r26
    6b7c:	d2 f7       	brpl	.-12     	; 0x6b72 <SeqParameter()+0x1472>
    6b7e:	40 95       	com	r20
    6b80:	50 95       	com	r21
    6b82:	60 95       	com	r22
    6b84:	70 95       	com	r23
    6b86:	a0 81       	ld	r26, Z
    6b88:	b1 81       	ldd	r27, Z+1	; 0x01
    6b8a:	4a 23       	and	r20, r26
    6b8c:	5b 23       	and	r21, r27
    6b8e:	51 83       	std	Z+1, r21	; 0x01
    6b90:	40 83       	st	Z, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:625
        pattern[ptrnBuffer].velocity[clearInst][curStep] = instVelLow[clearInst];                               // [zabox] was missing here
    6b92:	e0 91 3d 1e 	lds	r30, 0x1E3D	; 0x801e3d <curStep>
    6b96:	a9 01       	movw	r20, r18
    6b98:	04 e0       	ldi	r16, 0x04	; 4
    6b9a:	44 0f       	add	r20, r20
    6b9c:	55 1f       	adc	r21, r21
    6b9e:	0a 95       	dec	r16
    6ba0:	e1 f7       	brne	.-8      	; 0x6b9a <SeqParameter()+0x149a>
    6ba2:	48 0f       	add	r20, r24
    6ba4:	59 1f       	adc	r21, r25
    6ba6:	48 56       	subi	r20, 0x68	; 104
    6ba8:	5d 4e       	sbci	r21, 0xED	; 237
    6baa:	e4 0f       	add	r30, r20
    6bac:	f5 2f       	mov	r31, r21
    6bae:	f1 1d       	adc	r31, r1
    6bb0:	eb 5b       	subi	r30, 0xBB	; 187
    6bb2:	fb 4f       	sbci	r31, 0xFB	; 251
    6bb4:	21 57       	subi	r18, 0x71	; 113
    6bb6:	3e 4f       	sbci	r19, 0xFE	; 254
    6bb8:	d9 01       	movw	r26, r18
    6bba:	2c 91       	ld	r18, X
    6bbc:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:626
        if (clearInst == CH) pattern[ptrnBuffer].velocity[CH][curStep] = HIGH_VEL;        //update HH velocity that OH is trigged correctly
    6bbe:	1e 30       	cpi	r17, 0x0E	; 14
    6bc0:	59 f4       	brne	.+22     	; 0x6bd8 <SeqParameter()+0x14d8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:626 (discriminator 1)
    6bc2:	e0 91 3d 1e 	lds	r30, 0x1E3D	; 0x801e3d <curStep>
    6bc6:	88 56       	subi	r24, 0x68	; 104
    6bc8:	9d 4e       	sbci	r25, 0xED	; 237
    6bca:	e8 0f       	add	r30, r24
    6bcc:	f9 2f       	mov	r31, r25
    6bce:	f1 1d       	adc	r31, r1
    6bd0:	eb 5d       	subi	r30, 0xDB	; 219
    6bd2:	fa 4f       	sbci	r31, 0xFA	; 250
    6bd4:	80 e5       	ldi	r24, 0x50	; 80
    6bd6:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:627
        patternWasEdited = TRUE;
    6bd8:	81 e0       	ldi	r24, 0x01	; 1
    6bda:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:632
        }
        else if (muteInst != prev_muteInst) muteInst = prev_muteInst;                                           // [zabox] unmute 
      }
      
      if (clearBtn.justRelease) muteInst = prev_muteInst;                                                       // [zabox] unmute
    6bde:	80 91 80 1e 	lds	r24, 0x1E80	; 0x801e80 <clearBtn+0x4>
    6be2:	88 23       	and	r24, r24
    6be4:	41 f0       	breq	.+16     	; 0x6bf6 <SeqParameter()+0x14f6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:632 (discriminator 1)
    6be6:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <prev_muteInst>
    6bea:	90 91 a1 0c 	lds	r25, 0x0CA1	; 0x800ca1 <prev_muteInst+0x1>
    6bee:	90 93 a3 0c 	sts	0x0CA3, r25	; 0x800ca3 <muteInst+0x1>
    6bf2:	80 93 a2 0c 	sts	0x0CA2, r24	; 0x800ca2 <muteInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:634
      
      if (!lastStepBtn.pressed && !instBtn && !clearBtn.pressed && !shufBtn.pressed)                            // [zabox] test
    6bf6:	80 91 d6 1e 	lds	r24, 0x1ED6	; 0x801ed6 <lastStepBtn+0x2>
    6bfa:	81 11       	cpse	r24, r1
    6bfc:	25 c1       	rjmp	.+586    	; 0x6e48 <SeqParameter()+0x1748>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:634 (discriminator 1)
    6bfe:	80 91 7b 1e 	lds	r24, 0x1E7B	; 0x801e7b <instBtn>
    6c02:	81 11       	cpse	r24, r1
    6c04:	21 c1       	rjmp	.+578    	; 0x6e48 <SeqParameter()+0x1748>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:634 (discriminator 2)
    6c06:	80 91 7e 1e 	lds	r24, 0x1E7E	; 0x801e7e <clearBtn+0x2>
    6c0a:	81 11       	cpse	r24, r1
    6c0c:	1d c1       	rjmp	.+570    	; 0x6e48 <SeqParameter()+0x1748>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:634 (discriminator 3)
    6c0e:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <shufBtn+0x2>
    6c12:	81 11       	cpse	r24, r1
    6c14:	19 c1       	rjmp	.+562    	; 0x6e48 <SeqParameter()+0x1748>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:640
      {
        static boolean doublePushOH;
        static byte tempVel[16];//store temp instrument velocity
        static byte triggedInst;

        if (bitRead(readButtonState,12) && bitRead(readButtonState,13)) doublePushOH = 1;
    6c16:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    6c1a:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    6c1e:	88 27       	eor	r24, r24
    6c20:	90 73       	andi	r25, 0x30	; 48
    6c22:	81 15       	cp	r24, r1
    6c24:	90 43       	sbci	r25, 0x30	; 48
    6c26:	09 f0       	breq	.+2      	; 0x6c2a <SeqParameter()+0x152a>
    6c28:	73 c0       	rjmp	.+230    	; 0x6d10 <SeqParameter()+0x1610>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:640 (discriminator 2)
    6c2a:	81 e0       	ldi	r24, 0x01	; 1
    6c2c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <SeqParameter()::doublePushOH>
    6c30:	28 e5       	ldi	r18, 0x58	; 88
    6c32:	22 2e       	mov	r2, r18
    6c34:	2f e1       	ldi	r18, 0x1F	; 31
    6c36:	32 2e       	mov	r3, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:617
        case CRASH_BTN:
          clearInst = CRASH;
          break;
        }
        if (readButtonState == OH_BTN){
          clearInst = OH;
    6c38:	f1 2c       	mov	r15, r1
    6c3a:	e1 2c       	mov	r14, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:756
                    bitClear(tempInst[CH],tapStepCount);
                  }
                }
                //If CH is tapped
                else {
                  lastHHtrigged = B10;
    6c3c:	32 e0       	ldi	r19, 0x02	; 2
    6c3e:	73 2e       	mov	r7, r19
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:758
                  if(isRunning){
                    bitSet(tempInst[CH],tapStepCount);
    6c40:	81 2c       	mov	r8, r1
    6c42:	91 2c       	mov	r9, r1
    6c44:	54 01       	movw	r10, r8
    6c46:	83 94       	inc	r8
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:737
                triggedInst = RIDE;
                break;
              }
              if (doublePushOH){
            //  if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[OH];
                if (isRunning) pattern[ptrnBuffer].velocity[OH][tapStepCount] = instVelHigh[OH];                     // [zabox] fixes oh low velocity bug in tap mode (dim leds, no sound after mux fix)
    6c48:	09 ec       	ldi	r16, 0xC9	; 201
    6c4a:	15 e0       	ldi	r17, 0x05	; 5
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:653
              //the "a" button is pressed NOW!
              switch (a){
              case BD_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[BD];
                tempVel[BD] = instVelHigh[BD];
                triggedInst = BD;
    6c4c:	58 e0       	ldi	r21, 0x08	; 8
    6c4e:	65 2e       	mov	r6, r21
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:711
                break;
              case CH_LOW_BTN:
                if (!doublePushOH){
                  if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[CH];
                  tempVel[CH] = instVelLow[CH];
                  triggedInst = CH;
    6c50:	6e e0       	ldi	r22, 0x0E	; 14
    6c52:	56 2e       	mov	r5, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:688
                triggedInst = MT;
                break;
              case MT_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[MT];
                tempVel[MT] = instVelLow[MT];
                triggedInst = MT;
    6c54:	7b e0       	ldi	r23, 0x0B	; 11
    6c56:	47 2e       	mov	r4, r23
    6c58:	de 2c       	mov	r13, r14
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:644

        if (bitRead(readButtonState,12) && bitRead(readButtonState,13)) doublePushOH = 1;
        else doublePushOH = 0;

        for (byte a = 0; a < NBR_STEP_BTN; a++){
          stepBtn[a].curState = bitRead(readButtonState,a);
    6c5a:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    6c5e:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    6c62:	0e 2c       	mov	r0, r14
    6c64:	02 c0       	rjmp	.+4      	; 0x6c6a <SeqParameter()+0x156a>
    6c66:	96 95       	lsr	r25
    6c68:	87 95       	ror	r24
    6c6a:	0a 94       	dec	r0
    6c6c:	e2 f7       	brpl	.-8      	; 0x6c66 <SeqParameter()+0x1566>
    6c6e:	28 2f       	mov	r18, r24
    6c70:	21 70       	andi	r18, 0x01	; 1
    6c72:	f1 01       	movw	r30, r2
    6c74:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:646

          if (stepBtn[a].curState != stepBtn[a].prevState){
    6c76:	31 81       	ldd	r19, Z+1	; 0x01
    6c78:	23 17       	cp	r18, r19
    6c7a:	09 f4       	brne	.+2      	; 0x6c7e <SeqParameter()+0x157e>
    6c7c:	d6 c0       	rjmp	.+428    	; 0x6e2a <SeqParameter()+0x172a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:647
            if ((stepBtn[a].pressed == LOW) && (stepBtn[a].curState == HIGH)){
    6c7e:	22 81       	ldd	r18, Z+2	; 0x02
    6c80:	21 11       	cpse	r18, r1
    6c82:	d3 c0       	rjmp	.+422    	; 0x6e2a <SeqParameter()+0x172a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:647 (discriminator 1)
    6c84:	80 ff       	sbrs	r24, 0
    6c86:	d1 c0       	rjmp	.+418    	; 0x6e2a <SeqParameter()+0x172a>
    6c88:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <SeqParameter()::doublePushOH>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:649
              //the "a" button is pressed NOW!
              switch (a){
    6c8c:	ef ef       	ldi	r30, 0xFF	; 255
    6c8e:	ee 0d       	add	r30, r14
    6c90:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    6c94:	ef 30       	cpi	r30, 0x0F	; 15
    6c96:	08 f0       	brcs	.+2      	; 0x6c9a <SeqParameter()+0x159a>
    6c98:	3e c0       	rjmp	.+124    	; 0x6d16 <SeqParameter()+0x1616>
    6c9a:	f0 e0       	ldi	r31, 0x00	; 0
    6c9c:	ee 5a       	subi	r30, 0xAE	; 174
    6c9e:	f9 4c       	sbci	r31, 0xC9	; 201
    6ca0:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    6ca4:	67 37       	cpi	r22, 0x77	; 119
    6ca6:	94 37       	cpi	r25, 0x74	; 116
    6ca8:	b7 37       	cpi	r27, 0x77	; 119
    6caa:	c6 37       	cpi	r28, 0x76	; 118
    6cac:	e9 37       	cpi	r30, 0x79	; 121
    6cae:	0a 38       	cpi	r16, 0x8A	; 138
    6cb0:	2c 38       	cpi	r18, 0x8C	; 140
    6cb2:	3b 38       	cpi	r19, 0x8B	; 139
    6cb4:	5d 38       	cpi	r21, 0x8D	; 141
    6cb6:	a1 38       	cpi	r26, 0x81	; 129
    6cb8:	c4 38       	cpi	r28, 0x84	; 132
    6cba:	6c 38       	cpi	r22, 0x8C	; 140
    6cbc:	90 38       	cpi	r25, 0x80	; 128
    6cbe:	e5 38       	cpi	r30, 0x85	; 133
    6cc0:	06 39       	cpi	r16, 0x96	; 150
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:587
        case SD_LOW_BTN:
          clearInst = SD;
          break;
        case LT_BTN:
        case LT_LOW_BTN:
          clearInst = LT;
    6cc2:	1a e0       	ldi	r17, 0x0A	; 10
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:588
          break;
    6cc4:	20 cf       	rjmp	.-448    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:591
        case MT_BTN:
        case MT_LOW_BTN:
          clearInst = MT ;
    6cc6:	1b e0       	ldi	r17, 0x0B	; 11
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:592
          break;
    6cc8:	1e cf       	rjmp	.-452    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:595
        case HT_BTN:
        case HT_LOW_BTN:
          clearInst = HT;
    6cca:	12 e0       	ldi	r17, 0x02	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:596
          break;
    6ccc:	1c cf       	rjmp	.-456    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:598
        case RM_BTN:
          clearInst = RM;
    6cce:	13 e0       	ldi	r17, 0x03	; 3
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:599
          break;
    6cd0:	1a cf       	rjmp	.-460    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:601
        case HC_BTN:
          clearInst = HC;
    6cd2:	14 e0       	ldi	r17, 0x04	; 4
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:602
          break;
    6cd4:	18 cf       	rjmp	.-464    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:605
        case CH_BTN:
        case CH_LOW_BTN:
          if (doublePush == 0){
    6cd6:	80 91 79 1e 	lds	r24, 0x1E79	; 0x801e79 <doublePush>
    6cda:	81 11       	cpse	r24, r1
    6cdc:	14 cf       	rjmp	.-472    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:606
            clearInst = CH;
    6cde:	1e e0       	ldi	r17, 0x0E	; 14
    6ce0:	12 cf       	rjmp	.-476    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:610
          }
          break;
        case RIDE_BTN:
          clearInst = RIDE;
    6ce2:	16 e0       	ldi	r17, 0x06	; 6
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:611
          break;
    6ce4:	10 cf       	rjmp	.-480    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:613
        case CRASH_BTN:
          clearInst = CRASH;
    6ce6:	17 e0       	ldi	r17, 0x07	; 7
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:614
          break;
    6ce8:	0e cf       	rjmp	.-484    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:579
        byte clearInst;                                                         
          
        switch(FirstBitOn()){
        case BD_BTN:
        case BD_LOW_BTN:
          clearInst = BD;
    6cea:	18 e0       	ldi	r17, 0x08	; 8
    6cec:	0c cf       	rjmp	.-488    	; 0x6b06 <SeqParameter()+0x1406>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:629
        bitClear (pattern[ptrnBuffer].inst[clearInst], curStep);
        pattern[ptrnBuffer].velocity[clearInst][curStep] = instVelLow[clearInst];                               // [zabox] was missing here
        if (clearInst == CH) pattern[ptrnBuffer].velocity[CH][curStep] = HIGH_VEL;        //update HH velocity that OH is trigged correctly
        patternWasEdited = TRUE;
        }
        else if (muteInst != prev_muteInst) muteInst = prev_muteInst;                                           // [zabox] unmute 
    6cee:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <prev_muteInst>
    6cf2:	90 91 a1 0c 	lds	r25, 0x0CA1	; 0x800ca1 <prev_muteInst+0x1>
    6cf6:	20 91 a2 0c 	lds	r18, 0x0CA2	; 0x800ca2 <muteInst>
    6cfa:	30 91 a3 0c 	lds	r19, 0x0CA3	; 0x800ca3 <muteInst+0x1>
    6cfe:	28 17       	cp	r18, r24
    6d00:	39 07       	cpc	r19, r25
    6d02:	09 f4       	brne	.+2      	; 0x6d06 <SeqParameter()+0x1606>
    6d04:	6c cf       	rjmp	.-296    	; 0x6bde <SeqParameter()+0x14de>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:629 (discriminator 1)
    6d06:	90 93 a3 0c 	sts	0x0CA3, r25	; 0x800ca3 <muteInst+0x1>
    6d0a:	80 93 a2 0c 	sts	0x0CA2, r24	; 0x800ca2 <muteInst>
    6d0e:	67 cf       	rjmp	.-306    	; 0x6bde <SeqParameter()+0x14de>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:641
        static boolean doublePushOH;
        static byte tempVel[16];//store temp instrument velocity
        static byte triggedInst;

        if (bitRead(readButtonState,12) && bitRead(readButtonState,13)) doublePushOH = 1;
        else doublePushOH = 0;
    6d10:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <SeqParameter()::doublePushOH>
    6d14:	8d cf       	rjmp	.-230    	; 0x6c30 <SeqParameter()+0x1530>
    6d16:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <instVelHigh+0x8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:651
          if (stepBtn[a].curState != stepBtn[a].prevState){
            if ((stepBtn[a].pressed == LOW) && (stepBtn[a].curState == HIGH)){
              //the "a" button is pressed NOW!
              switch (a){
              case BD_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[BD];
    6d1a:	88 23       	and	r24, r24
    6d1c:	c9 f0       	breq	.+50     	; 0x6d50 <SeqParameter()+0x1650>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:651 (discriminator 1)
    6d1e:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    6d22:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <instOut>
    6d26:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    6d2a:	f0 e1       	ldi	r31, 0x10	; 16
    6d2c:	2f 9f       	mul	r18, r31
    6d2e:	90 01       	movw	r18, r0
    6d30:	11 24       	eor	r1, r1
    6d32:	70 9f       	mul	r23, r16
    6d34:	a0 01       	movw	r20, r0
    6d36:	71 9f       	mul	r23, r17
    6d38:	50 0d       	add	r21, r0
    6d3a:	11 24       	eor	r1, r1
    6d3c:	24 0f       	add	r18, r20
    6d3e:	35 1f       	adc	r19, r21
    6d40:	28 56       	subi	r18, 0x68	; 104
    6d42:	3d 4e       	sbci	r19, 0xED	; 237
    6d44:	e2 0f       	add	r30, r18
    6d46:	f3 2f       	mov	r31, r19
    6d48:	f1 1d       	adc	r31, r1
    6d4a:	eb 5b       	subi	r30, 0xBB	; 187
    6d4c:	fb 4f       	sbci	r31, 0xFB	; 251
    6d4e:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:652
                tempVel[BD] = instVelHigh[BD];
    6d50:	60 93 fd 03 	sts	0x03FD, r22	; 0x8003fd <SeqParameter()::tempVel+0x8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:653
                triggedInst = BD;
    6d54:	60 92 f4 03 	sts	0x03F4, r6	; 0x8003f4 <__data_end>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:735
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[RIDE];
                tempVel[RIDE] = instVelHigh[RIDE];
                triggedInst = RIDE;
                break;
              }
              if (doublePushOH){
    6d58:	91 11       	cpse	r25, r1
    6d5a:	7b c2       	rjmp	.+1270   	; 0x7252 <SeqParameter()+0x1b52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:743
                tempVel[OH] = instVelHigh[OH];
                triggedInst = OH;
              }

              //-----SET Velocity Values-----//
              SetMuxTrigMidi(triggedInst, tempVel[triggedInst]);
    6d5c:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <__data_end>
    6d60:	e8 2f       	mov	r30, r24
    6d62:	f0 e0       	ldi	r31, 0x00	; 0
    6d64:	eb 50       	subi	r30, 0x0B	; 11
    6d66:	fc 4f       	sbci	r31, 0xFC	; 252
    6d68:	60 81       	ld	r22, Z
    6d6a:	0e 94 19 10 	call	0x2032	; 0x2032 <SetMuxTrigMidi(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:745

              if( a == CH_LOW_BTN || a == CH_BTN || readButtonState == OH_BTN){
    6d6e:	84 ef       	ldi	r24, 0xF4	; 244
    6d70:	8d 0d       	add	r24, r13
    6d72:	82 30       	cpi	r24, 0x02	; 2
    6d74:	40 f0       	brcs	.+16     	; 0x6d86 <SeqParameter()+0x1686>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:745 (discriminator 1)
    6d76:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    6d7a:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    6d7e:	81 15       	cp	r24, r1
    6d80:	90 43       	sbci	r25, 0x30	; 48
    6d82:	09 f0       	breq	.+2      	; 0x6d86 <SeqParameter()+0x1686>
    6d84:	b8 c2       	rjmp	.+1392   	; 0x72f6 <SeqParameter()+0x1bf6>
    6d86:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:747
                //If OH is tapped
                if (doublePushOH){
    6d8a:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <SeqParameter()::doublePushOH>
    6d8e:	99 23       	and	r25, r25
    6d90:	09 f4       	brne	.+2      	; 0x6d94 <SeqParameter()+0x1694>
    6d92:	7a c2       	rjmp	.+1268   	; 0x7288 <SeqParameter()+0x1b88>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:748
                  lastHHtrigged = 0;
    6d94:	10 92 9b 0c 	sts	0x0C9B, r1	; 0x800c9b <lastHHtrigged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:749
                  if(isRunning){
    6d98:	88 23       	and	r24, r24
    6d9a:	89 f1       	breq	.+98     	; 0x6dfe <SeqParameter()+0x16fe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:750
                    bitSet(tempInst[OH],tapStepCount);
    6d9c:	80 91 3c 1e 	lds	r24, 0x1E3C	; 0x801e3c <tapStepCount>
    6da0:	a5 01       	movw	r20, r10
    6da2:	94 01       	movw	r18, r8
    6da4:	04 c0       	rjmp	.+8      	; 0x6dae <SeqParameter()+0x16ae>
    6da6:	22 0f       	add	r18, r18
    6da8:	33 1f       	adc	r19, r19
    6daa:	44 1f       	adc	r20, r20
    6dac:	55 1f       	adc	r21, r21
    6dae:	8a 95       	dec	r24
    6db0:	d2 f7       	brpl	.-12     	; 0x6da6 <SeqParameter()+0x16a6>
    6db2:	c9 01       	movw	r24, r18
    6db4:	20 91 c2 0c 	lds	r18, 0x0CC2	; 0x800cc2 <tempInst+0x1e>
    6db8:	30 91 c3 0c 	lds	r19, 0x0CC3	; 0x800cc3 <tempInst+0x1f>
    6dbc:	82 2b       	or	r24, r18
    6dbe:	93 2b       	or	r25, r19
    6dc0:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <tempInst+0x1f>
    6dc4:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <tempInst+0x1e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:751
                    bitClear(tempInst[CH],tapStepCount);
    6dc8:	80 91 3c 1e 	lds	r24, 0x1E3C	; 0x801e3c <tapStepCount>
    6dcc:	a5 01       	movw	r20, r10
    6dce:	94 01       	movw	r18, r8
    6dd0:	04 c0       	rjmp	.+8      	; 0x6dda <SeqParameter()+0x16da>
    6dd2:	22 0f       	add	r18, r18
    6dd4:	33 1f       	adc	r19, r19
    6dd6:	44 1f       	adc	r20, r20
    6dd8:	55 1f       	adc	r21, r21
    6dda:	8a 95       	dec	r24
    6ddc:	d2 f7       	brpl	.-12     	; 0x6dd2 <SeqParameter()+0x16d2>
    6dde:	da 01       	movw	r26, r20
    6de0:	c9 01       	movw	r24, r18
    6de2:	80 95       	com	r24
    6de4:	90 95       	com	r25
    6de6:	a0 95       	com	r26
    6de8:	b0 95       	com	r27
    6dea:	20 91 c0 0c 	lds	r18, 0x0CC0	; 0x800cc0 <tempInst+0x1c>
    6dee:	30 91 c1 0c 	lds	r19, 0x0CC1	; 0x800cc1 <tempInst+0x1d>
    6df2:	82 23       	and	r24, r18
    6df4:	93 23       	and	r25, r19
    6df6:	90 93 c1 0c 	sts	0x0CC1, r25	; 0x800cc1 <tempInst+0x1d>
    6dfa:	80 93 c0 0c 	sts	0x0CC0, r24	; 0x800cc0 <tempInst+0x1c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:762
                  if(isRunning){
                    bitSet(tempInst[CH],tapStepCount);
                    bitClear(tempInst[OH],tapStepCount);
                  }
                }
                while (TCCR2B) {};                                                            // [zabox] [1.028] wait until the last trigger is low again (checks if timer2 is running)
    6dfe:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    6e02:	81 11       	cpse	r24, r1
    6e04:	fc cf       	rjmp	.-8      	; 0x6dfe <SeqParameter()+0x16fe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:763
                SetDoutTrig((1 << HH) | lastHHtrigged);
    6e06:	80 91 9b 0c 	lds	r24, 0x0C9B	; 0x800c9b <lastHHtrigged>
    6e0a:	80 62       	ori	r24, 0x20	; 32
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:771
                while (TCCR2B) {};                                                            // [zabox] [1.028] wait until the last trigger is low again (checks if timer2 is running)
                //SetDoutTrig(1 << instOut[a] | lastHHtrigged);
                SetDoutTrig((1 << instOut[a]) | (lastDoutTrig & B11));                        // [zabox] [1.027] fixes hh cuts when tapping other instruments  
                if(isRunning) bitSet(tempInst[instOut[a]],tapStepCount);
              }
              delayMicroseconds(2000);
    6e12:	80 ed       	ldi	r24, 0xD0	; 208
    6e14:	97 e0       	ldi	r25, 0x07	; 7
    6e16:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:773
              //SetDoutTrig(lastHHtrigged);
              SetDoutTrig(lastDoutTrig & B11);                                                // [zabox] [1.027] fixes hh cuts when tapping other instruments  
    6e1a:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <lastDoutTrig>
    6e1e:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <lastDoutTrig+0x1>
    6e22:	83 70       	andi	r24, 0x03	; 3
    6e24:	99 27       	eor	r25, r25
    6e26:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:776 (discriminator 2)
            }      
          }
          stepBtn[a].prevState = stepBtn[a].curState;
    6e2a:	d1 01       	movw	r26, r2
    6e2c:	8c 91       	ld	r24, X
    6e2e:	11 96       	adiw	r26, 0x01	; 1
    6e30:	8c 93       	st	X, r24
    6e32:	bf ef       	ldi	r27, 0xFF	; 255
    6e34:	eb 1a       	sub	r14, r27
    6e36:	fb 0a       	sbc	r15, r27
    6e38:	eb e0       	ldi	r30, 0x0B	; 11
    6e3a:	2e 0e       	add	r2, r30
    6e3c:	31 1c       	adc	r3, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:643 (discriminator 2)
        static byte triggedInst;

        if (bitRead(readButtonState,12) && bitRead(readButtonState,13)) doublePushOH = 1;
        else doublePushOH = 0;

        for (byte a = 0; a < NBR_STEP_BTN; a++){
    6e3e:	f0 e1       	ldi	r31, 0x10	; 16
    6e40:	ef 16       	cp	r14, r31
    6e42:	f1 04       	cpc	r15, r1
    6e44:	09 f0       	breq	.+2      	; 0x6e48 <SeqParameter()+0x1748>
    6e46:	08 cf       	rjmp	.-496    	; 0x6c58 <SeqParameter()+0x1558>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:780
          }
          stepBtn[a].prevState = stepBtn[a].curState;
        }//END FOR LOOP
      }

      if (endMeasure){//Update pattern at the end of measure to not get a double trig
    6e48:	30 91 2d 1e 	lds	r19, 0x1E2D	; 0x801e2d <endMeasure>
    6e4c:	33 23       	and	r19, r19
    6e4e:	09 f4       	brne	.+2      	; 0x6e52 <SeqParameter()+0x1752>
    6e50:	af cb       	rjmp	.-2210   	; 0x65b0 <SeqParameter()+0xeb0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:798
            tempInst[CH] = 0;// init tempInst
            patternWasEdited = TRUE;
          }
          else if (tempInst[inst])//if instruments was edited
          {
            pattern[ptrnBuffer].inst[inst] |= tempInst[inst];
    6e52:	40 91 ce 0c 	lds	r20, 0x0CCE	; 0x800cce <ptrnBuffer>
    6e56:	20 91 cd 0c 	lds	r18, 0x0CCD	; 0x800ccd <patternWasEdited>
    6e5a:	89 ec       	ldi	r24, 0xC9	; 201
    6e5c:	95 e0       	ldi	r25, 0x05	; 5
    6e5e:	48 9f       	mul	r20, r24
    6e60:	80 01       	movw	r16, r0
    6e62:	49 9f       	mul	r20, r25
    6e64:	10 0d       	add	r17, r0
    6e66:	11 24       	eor	r1, r1
    6e68:	90 e0       	ldi	r25, 0x00	; 0
    6e6a:	80 e0       	ldi	r24, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:791
            tempInst[OH] = 0;// init tempInst
            patternWasEdited = TRUE;
          }
          else if (tempInst[CH]){
            unsigned int i = tempInst[CH] & pattern[ptrnBuffer].inst[OH];
            pattern[ptrnBuffer].inst[OH] ^= i;
    6e6c:	f8 01       	movw	r30, r16
    6e6e:	e8 56       	subi	r30, 0x68	; 104
    6e70:	fd 4e       	sbci	r31, 0xED	; 237
    6e72:	df 01       	movw	r26, r30
    6e74:	ad 5d       	subi	r26, 0xDD	; 221
    6e76:	bb 4f       	sbci	r27, 0xFB	; 251
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:792
            pattern[ptrnBuffer].inst[CH] |= tempInst[CH];
    6e78:	5f 01       	movw	r10, r30
    6e7a:	4f ed       	ldi	r20, 0xDF	; 223
    6e7c:	a4 1a       	sub	r10, r20
    6e7e:	4b ef       	ldi	r20, 0xFB	; 251
    6e80:	b4 0a       	sbc	r11, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:782
        }//END FOR LOOP
      }

      if (endMeasure){//Update pattern at the end of measure to not get a double trig
        for (int inst = 0; inst < NBR_INST; inst++){
          if (tempInst[OH]){
    6e82:	60 91 c2 0c 	lds	r22, 0x0CC2	; 0x800cc2 <tempInst+0x1e>
    6e86:	70 91 c3 0c 	lds	r23, 0x0CC3	; 0x800cc3 <tempInst+0x1f>
    6e8a:	61 15       	cp	r22, r1
    6e8c:	71 05       	cpc	r23, r1
    6e8e:	09 f4       	brne	.+2      	; 0x6e92 <SeqParameter()+0x1792>
    6e90:	6d c2       	rjmp	.+1242   	; 0x736c <SeqParameter()+0x1c6c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:784
            unsigned int i = tempInst[OH] & pattern[ptrnBuffer].inst[CH];
            pattern[ptrnBuffer].inst[CH] ^= i;
    6e92:	7b 01       	movw	r14, r22
    6e94:	e0 94       	com	r14
    6e96:	f0 94       	com	r15
    6e98:	f5 01       	movw	r30, r10
    6e9a:	40 81       	ld	r20, Z
    6e9c:	51 81       	ldd	r21, Z+1	; 0x01
    6e9e:	4e 21       	and	r20, r14
    6ea0:	5f 21       	and	r21, r15
    6ea2:	51 83       	std	Z+1, r21	; 0x01
    6ea4:	40 83       	st	Z, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:785
            pattern[ptrnBuffer].inst[OH] |= tempInst[OH];
    6ea6:	4d 91       	ld	r20, X+
    6ea8:	5c 91       	ld	r21, X
    6eaa:	11 97       	sbiw	r26, 0x01	; 1
    6eac:	46 2b       	or	r20, r22
    6eae:	57 2b       	or	r21, r23
    6eb0:	11 96       	adiw	r26, 0x01	; 1
    6eb2:	5c 93       	st	X, r21
    6eb4:	4e 93       	st	-X, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:786
            tempInst[OH] = 0;// init tempInst
    6eb6:	10 92 c3 0c 	sts	0x0CC3, r1	; 0x800cc3 <tempInst+0x1f>
    6eba:	10 92 c2 0c 	sts	0x0CC2, r1	; 0x800cc2 <tempInst+0x1e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:800
          }
          else if (tempInst[inst])//if instruments was edited
          {
            pattern[ptrnBuffer].inst[inst] |= tempInst[inst];
            tempInst[inst] = 0;// init tempInst
            patternWasEdited = TRUE;
    6ebe:	23 2f       	mov	r18, r19
    6ec0:	02 96       	adiw	r24, 0x02	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:781 (discriminator 2)
          stepBtn[a].prevState = stepBtn[a].curState;
        }//END FOR LOOP
      }

      if (endMeasure){//Update pattern at the end of measure to not get a double trig
        for (int inst = 0; inst < NBR_INST; inst++){
    6ec2:	80 32       	cpi	r24, 0x20	; 32
    6ec4:	91 05       	cpc	r25, r1
    6ec6:	e9 f6       	brne	.-70     	; 0x6e82 <SeqParameter()+0x1782>
    6ec8:	20 93 cd 0c 	sts	0x0CCD, r18	; 0x800ccd <patternWasEdited>
    6ecc:	71 cb       	rjmp	.-2334   	; 0x65b0 <SeqParameter()+0xeb0>
    6ece:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <instVelLow+0x8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:656
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[BD];
                tempVel[BD] = instVelHigh[BD];
                triggedInst = BD;
                break;
              case BD_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[BD];
    6ed2:	88 23       	and	r24, r24
    6ed4:	c9 f0       	breq	.+50     	; 0x6f08 <SeqParameter()+0x1808>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:656 (discriminator 1)
    6ed6:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    6eda:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <instOut+0x1>
    6ede:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    6ee2:	40 e1       	ldi	r20, 0x10	; 16
    6ee4:	24 9f       	mul	r18, r20
    6ee6:	90 01       	movw	r18, r0
    6ee8:	11 24       	eor	r1, r1
    6eea:	70 9f       	mul	r23, r16
    6eec:	a0 01       	movw	r20, r0
    6eee:	71 9f       	mul	r23, r17
    6ef0:	50 0d       	add	r21, r0
    6ef2:	11 24       	eor	r1, r1
    6ef4:	24 0f       	add	r18, r20
    6ef6:	35 1f       	adc	r19, r21
    6ef8:	28 56       	subi	r18, 0x68	; 104
    6efa:	3d 4e       	sbci	r19, 0xED	; 237
    6efc:	e2 0f       	add	r30, r18
    6efe:	f3 2f       	mov	r31, r19
    6f00:	f1 1d       	adc	r31, r1
    6f02:	eb 5b       	subi	r30, 0xBB	; 187
    6f04:	fb 4f       	sbci	r31, 0xFB	; 251
    6f06:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:657
                tempVel[BD] = instVelLow[BD];
    6f08:	60 93 fd 03 	sts	0x03FD, r22	; 0x8003fd <SeqParameter()::tempVel+0x8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:658
                triggedInst = BD;
    6f0c:	60 92 f4 03 	sts	0x03F4, r6	; 0x8003f4 <__data_end>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:735
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[RIDE];
                tempVel[RIDE] = instVelHigh[RIDE];
                triggedInst = RIDE;
                break;
              }
              if (doublePushOH){
    6f10:	91 11       	cpse	r25, r1
    6f12:	9f c1       	rjmp	.+830    	; 0x7252 <SeqParameter()+0x1b52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:743
                tempVel[OH] = instVelHigh[OH];
                triggedInst = OH;
              }

              //-----SET Velocity Values-----//
              SetMuxTrigMidi(triggedInst, tempVel[triggedInst]);
    6f14:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <__data_end>
    6f18:	e8 2f       	mov	r30, r24
    6f1a:	f0 e0       	ldi	r31, 0x00	; 0
    6f1c:	eb 50       	subi	r30, 0x0B	; 11
    6f1e:	fc 4f       	sbci	r31, 0xFC	; 252
    6f20:	60 81       	ld	r22, Z
    6f22:	0e 94 19 10 	call	0x2032	; 0x2032 <SetMuxTrigMidi(unsigned char, unsigned char)>
    6f26:	27 cf       	rjmp	.-434    	; 0x6d76 <SeqParameter()+0x1676>
    6f28:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <instVelHigh+0x9>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:661
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[BD];
                tempVel[BD] = instVelLow[BD];
                triggedInst = BD;
                break;
              case SD_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[SD];
    6f2c:	88 23       	and	r24, r24
    6f2e:	c9 f0       	breq	.+50     	; 0x6f62 <SeqParameter()+0x1862>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:661 (discriminator 1)
    6f30:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    6f34:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <instOut+0x2>
    6f38:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    6f3c:	50 e1       	ldi	r21, 0x10	; 16
    6f3e:	25 9f       	mul	r18, r21
    6f40:	90 01       	movw	r18, r0
    6f42:	11 24       	eor	r1, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:666 (discriminator 1)
                tempVel[SD] = instVelHigh[SD];
                triggedInst = SD;
                break;
              case SD_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[SD];
    6f44:	70 9f       	mul	r23, r16
    6f46:	a0 01       	movw	r20, r0
    6f48:	71 9f       	mul	r23, r17
    6f4a:	50 0d       	add	r21, r0
    6f4c:	11 24       	eor	r1, r1
    6f4e:	24 0f       	add	r18, r20
    6f50:	35 1f       	adc	r19, r21
    6f52:	28 56       	subi	r18, 0x68	; 104
    6f54:	3d 4e       	sbci	r19, 0xED	; 237
    6f56:	e2 0f       	add	r30, r18
    6f58:	f3 2f       	mov	r31, r19
    6f5a:	f1 1d       	adc	r31, r1
    6f5c:	eb 5b       	subi	r30, 0xBB	; 187
    6f5e:	fb 4f       	sbci	r31, 0xFB	; 251
    6f60:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:667
                tempVel[SD] = instVelLow[SD];
    6f62:	60 93 fe 03 	sts	0x03FE, r22	; 0x8003fe <SeqParameter()::tempVel+0x9>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:668
                triggedInst = SD;
    6f66:	29 e0       	ldi	r18, 0x09	; 9
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:727
                triggedInst = HC;
                break;
              case CRASH_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[CRASH];
                tempVel[CRASH] = instVelHigh[CRASH];
                triggedInst = CRASH;
    6f68:	20 93 f4 03 	sts	0x03F4, r18	; 0x8003f4 <__data_end>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:728
                break;
    6f6c:	d1 cf       	rjmp	.-94     	; 0x6f10 <SeqParameter()+0x1810>
    6f6e:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <instVelLow+0x9>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:666
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[SD];
                tempVel[SD] = instVelHigh[SD];
                triggedInst = SD;
                break;
              case SD_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[SD];
    6f72:	88 23       	and	r24, r24
    6f74:	b1 f3       	breq	.-20     	; 0x6f62 <SeqParameter()+0x1862>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:666 (discriminator 1)
    6f76:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    6f7a:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <instOut+0x3>
    6f7e:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    6f82:	a0 e1       	ldi	r26, 0x10	; 16
    6f84:	2a 9f       	mul	r18, r26
    6f86:	90 01       	movw	r18, r0
    6f88:	11 24       	eor	r1, r1
    6f8a:	dc cf       	rjmp	.-72     	; 0x6f44 <SeqParameter()+0x1844>
    6f8c:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <instVelHigh+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:671
                tempVel[SD] = instVelLow[SD];
                triggedInst = SD;
                break;
              case LT_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[LT];
    6f90:	88 23       	and	r24, r24
    6f92:	c9 f0       	breq	.+50     	; 0x6fc6 <SeqParameter()+0x18c6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:671 (discriminator 1)
    6f94:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    6f98:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <instOut+0x4>
    6f9c:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    6fa0:	b0 e1       	ldi	r27, 0x10	; 16
    6fa2:	2b 9f       	mul	r18, r27
    6fa4:	90 01       	movw	r18, r0
    6fa6:	11 24       	eor	r1, r1
    6fa8:	70 9f       	mul	r23, r16
    6faa:	a0 01       	movw	r20, r0
    6fac:	71 9f       	mul	r23, r17
    6fae:	50 0d       	add	r21, r0
    6fb0:	11 24       	eor	r1, r1
    6fb2:	24 0f       	add	r18, r20
    6fb4:	35 1f       	adc	r19, r21
    6fb6:	28 56       	subi	r18, 0x68	; 104
    6fb8:	3d 4e       	sbci	r19, 0xED	; 237
    6fba:	e2 0f       	add	r30, r18
    6fbc:	f3 2f       	mov	r31, r19
    6fbe:	f1 1d       	adc	r31, r1
    6fc0:	eb 5b       	subi	r30, 0xBB	; 187
    6fc2:	fb 4f       	sbci	r31, 0xFB	; 251
    6fc4:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:672
                tempVel[LT] = instVelHigh[LT];
    6fc6:	60 93 ff 03 	sts	0x03FF, r22	; 0x8003ff <SeqParameter()::tempVel+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:673
                triggedInst = LT;
    6fca:	ea e0       	ldi	r30, 0x0A	; 10
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:722
                triggedInst = RM;
                break;
              case HC_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[HC];
                tempVel[HC] = instVelHigh[HC];
                triggedInst = HC;
    6fcc:	e0 93 f4 03 	sts	0x03F4, r30	; 0x8003f4 <__data_end>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:723
                break;
    6fd0:	9f cf       	rjmp	.-194    	; 0x6f10 <SeqParameter()+0x1810>
    6fd2:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <instVelLow+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:676
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[LT];
                tempVel[LT] = instVelHigh[LT];
                triggedInst = LT;
                break;
              case LT_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[LT];
    6fd6:	88 23       	and	r24, r24
    6fd8:	c9 f0       	breq	.+50     	; 0x700c <SeqParameter()+0x190c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:676 (discriminator 1)
    6fda:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    6fde:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <instOut+0x5>
    6fe2:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    6fe6:	f0 e1       	ldi	r31, 0x10	; 16
    6fe8:	2f 9f       	mul	r18, r31
    6fea:	90 01       	movw	r18, r0
    6fec:	11 24       	eor	r1, r1
    6fee:	70 9f       	mul	r23, r16
    6ff0:	a0 01       	movw	r20, r0
    6ff2:	71 9f       	mul	r23, r17
    6ff4:	50 0d       	add	r21, r0
    6ff6:	11 24       	eor	r1, r1
    6ff8:	24 0f       	add	r18, r20
    6ffa:	35 1f       	adc	r19, r21
    6ffc:	28 56       	subi	r18, 0x68	; 104
    6ffe:	3d 4e       	sbci	r19, 0xED	; 237
    7000:	e2 0f       	add	r30, r18
    7002:	f3 2f       	mov	r31, r19
    7004:	f1 1d       	adc	r31, r1
    7006:	eb 5b       	subi	r30, 0xBB	; 187
    7008:	fb 4f       	sbci	r31, 0xFB	; 251
    700a:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:677
                tempVel[LT] = instVelLow[LT];
    700c:	60 93 ff 03 	sts	0x03FF, r22	; 0x8003ff <SeqParameter()::tempVel+0xa>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:678
                triggedInst = LT;
    7010:	2a e0       	ldi	r18, 0x0A	; 10
    7012:	aa cf       	rjmp	.-172    	; 0x6f68 <SeqParameter()+0x1868>
    7014:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <instVelHigh+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:681
                break;
              case MT_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[MT];
    7018:	88 23       	and	r24, r24
    701a:	c9 f0       	breq	.+50     	; 0x704e <SeqParameter()+0x194e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:681 (discriminator 1)
    701c:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    7020:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <instOut+0x6>
    7024:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    7028:	40 e1       	ldi	r20, 0x10	; 16
    702a:	24 9f       	mul	r18, r20
    702c:	90 01       	movw	r18, r0
    702e:	11 24       	eor	r1, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:686 (discriminator 1)
                tempVel[MT] = instVelHigh[MT];
                triggedInst = MT;
                break;
              case MT_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[MT];
    7030:	70 9f       	mul	r23, r16
    7032:	a0 01       	movw	r20, r0
    7034:	71 9f       	mul	r23, r17
    7036:	50 0d       	add	r21, r0
    7038:	11 24       	eor	r1, r1
    703a:	24 0f       	add	r18, r20
    703c:	35 1f       	adc	r19, r21
    703e:	28 56       	subi	r18, 0x68	; 104
    7040:	3d 4e       	sbci	r19, 0xED	; 237
    7042:	e2 0f       	add	r30, r18
    7044:	f3 2f       	mov	r31, r19
    7046:	f1 1d       	adc	r31, r1
    7048:	eb 5b       	subi	r30, 0xBB	; 187
    704a:	fb 4f       	sbci	r31, 0xFB	; 251
    704c:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:687
                tempVel[MT] = instVelLow[MT];
    704e:	60 93 00 04 	sts	0x0400, r22	; 0x800400 <SeqParameter()::tempVel+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:688
                triggedInst = MT;
    7052:	40 92 f4 03 	sts	0x03F4, r4	; 0x8003f4 <__data_end>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:689
                break;
    7056:	5c cf       	rjmp	.-328    	; 0x6f10 <SeqParameter()+0x1810>
    7058:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <instVelLow+0xb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:686
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[MT];
                tempVel[MT] = instVelHigh[MT];
                triggedInst = MT;
                break;
              case MT_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[MT];
    705c:	88 23       	and	r24, r24
    705e:	b9 f3       	breq	.-18     	; 0x704e <SeqParameter()+0x194e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:686 (discriminator 1)
    7060:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    7064:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <instOut+0x7>
    7068:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    706c:	50 e1       	ldi	r21, 0x10	; 16
    706e:	25 9f       	mul	r18, r21
    7070:	90 01       	movw	r18, r0
    7072:	11 24       	eor	r1, r1
    7074:	dd cf       	rjmp	.-70     	; 0x7030 <SeqParameter()+0x1930>
    7076:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <instVelHigh+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:691
                tempVel[MT] = instVelLow[MT];
                triggedInst = MT;
                break;
              case HT_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[HT];
    707a:	88 23       	and	r24, r24
    707c:	c9 f0       	breq	.+50     	; 0x70b0 <SeqParameter()+0x19b0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:691 (discriminator 1)
    707e:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    7082:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <instOut+0x8>
    7086:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    708a:	a0 e1       	ldi	r26, 0x10	; 16
    708c:	2a 9f       	mul	r18, r26
    708e:	90 01       	movw	r18, r0
    7090:	11 24       	eor	r1, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:696 (discriminator 1)
                tempVel[HT] = instVelHigh[HT];
                triggedInst = HT;
                break;
              case HT_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[HT];
    7092:	70 9f       	mul	r23, r16
    7094:	a0 01       	movw	r20, r0
    7096:	71 9f       	mul	r23, r17
    7098:	50 0d       	add	r21, r0
    709a:	11 24       	eor	r1, r1
    709c:	24 0f       	add	r18, r20
    709e:	35 1f       	adc	r19, r21
    70a0:	28 56       	subi	r18, 0x68	; 104
    70a2:	3d 4e       	sbci	r19, 0xED	; 237
    70a4:	e2 0f       	add	r30, r18
    70a6:	f3 2f       	mov	r31, r19
    70a8:	f1 1d       	adc	r31, r1
    70aa:	eb 5b       	subi	r30, 0xBB	; 187
    70ac:	fb 4f       	sbci	r31, 0xFB	; 251
    70ae:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:697
                tempVel[HT] = instVelLow[HT];
    70b0:	60 93 f7 03 	sts	0x03F7, r22	; 0x8003f7 <SeqParameter()::tempVel+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:698
                triggedInst = HT;
    70b4:	70 92 f4 03 	sts	0x03F4, r7	; 0x8003f4 <__data_end>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:699
                break;
    70b8:	2b cf       	rjmp	.-426    	; 0x6f10 <SeqParameter()+0x1810>
    70ba:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <instVelLow+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:696
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[HT];
                tempVel[HT] = instVelHigh[HT];
                triggedInst = HT;
                break;
              case HT_LOW_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[HT];
    70be:	88 23       	and	r24, r24
    70c0:	b9 f3       	breq	.-18     	; 0x70b0 <SeqParameter()+0x19b0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:696 (discriminator 1)
    70c2:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    70c6:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <instOut+0x9>
    70ca:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    70ce:	b0 e1       	ldi	r27, 0x10	; 16
    70d0:	2b 9f       	mul	r18, r27
    70d2:	90 01       	movw	r18, r0
    70d4:	11 24       	eor	r1, r1
    70d6:	dd cf       	rjmp	.-70     	; 0x7092 <SeqParameter()+0x1992>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:701
                tempVel[HT] = instVelLow[HT];
                triggedInst = HT;
                break;
              case CH_BTN:
                if (!doublePushOH){
    70d8:	91 11       	cpse	r25, r1
    70da:	bb c0       	rjmp	.+374    	; 0x7252 <SeqParameter()+0x1b52>
    70dc:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <instVelHigh+0xe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:702
                  if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[CH];
    70e0:	88 23       	and	r24, r24
    70e2:	c9 f0       	breq	.+50     	; 0x7116 <SeqParameter()+0x1a16>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:702 (discriminator 1)
    70e4:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    70e8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <instOut+0xc>
    70ec:	30 91 ce 0c 	lds	r19, 0x0CCE	; 0x800cce <ptrnBuffer>
    70f0:	f0 e1       	ldi	r31, 0x10	; 16
    70f2:	8f 9f       	mul	r24, r31
    70f4:	c0 01       	movw	r24, r0
    70f6:	11 24       	eor	r1, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:709 (discriminator 1)
                  triggedInst = CH;
                }
                break;
              case CH_LOW_BTN:
                if (!doublePushOH){
                  if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[CH];
    70f8:	30 9f       	mul	r19, r16
    70fa:	a0 01       	movw	r20, r0
    70fc:	31 9f       	mul	r19, r17
    70fe:	50 0d       	add	r21, r0
    7100:	11 24       	eor	r1, r1
    7102:	84 0f       	add	r24, r20
    7104:	95 1f       	adc	r25, r21
    7106:	88 56       	subi	r24, 0x68	; 104
    7108:	9d 4e       	sbci	r25, 0xED	; 237
    710a:	e8 0f       	add	r30, r24
    710c:	f9 2f       	mov	r31, r25
    710e:	f1 1d       	adc	r31, r1
    7110:	eb 5b       	subi	r30, 0xBB	; 187
    7112:	fb 4f       	sbci	r31, 0xFB	; 251
    7114:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:710
                  tempVel[CH] = instVelLow[CH];
    7116:	20 93 03 04 	sts	0x0403, r18	; 0x800403 <SeqParameter()::tempVel+0xe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:711
                  triggedInst = CH;
    711a:	50 92 f4 03 	sts	0x03F4, r5	; 0x8003f4 <__data_end>
    711e:	1e ce       	rjmp	.-964    	; 0x6d5c <SeqParameter()+0x165c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:708
                  tempVel[CH] = instVelHigh[CH];
                  triggedInst = CH;
                }
                break;
              case CH_LOW_BTN:
                if (!doublePushOH){
    7120:	91 11       	cpse	r25, r1
    7122:	97 c0       	rjmp	.+302    	; 0x7252 <SeqParameter()+0x1b52>
    7124:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <instVelLow+0xe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:709
                  if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelLow[CH];
    7128:	88 23       	and	r24, r24
    712a:	a9 f3       	breq	.-22     	; 0x7116 <SeqParameter()+0x1a16>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:709 (discriminator 1)
    712c:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    7130:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <instOut+0xd>
    7134:	30 91 ce 0c 	lds	r19, 0x0CCE	; 0x800cce <ptrnBuffer>
    7138:	40 e1       	ldi	r20, 0x10	; 16
    713a:	84 9f       	mul	r24, r20
    713c:	c0 01       	movw	r24, r0
    713e:	11 24       	eor	r1, r1
    7140:	db cf       	rjmp	.-74     	; 0x70f8 <SeqParameter()+0x19f8>
    7142:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <instVelHigh+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:715
                  tempVel[CH] = instVelLow[CH];
                  triggedInst = CH;
                }
                break;
              case RM_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[RM];
    7146:	88 23       	and	r24, r24
    7148:	c9 f0       	breq	.+50     	; 0x717c <SeqParameter()+0x1a7c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:715 (discriminator 1)
    714a:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    714e:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <instOut+0xa>
    7152:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    7156:	50 e1       	ldi	r21, 0x10	; 16
    7158:	25 9f       	mul	r18, r21
    715a:	90 01       	movw	r18, r0
    715c:	11 24       	eor	r1, r1
    715e:	70 9f       	mul	r23, r16
    7160:	a0 01       	movw	r20, r0
    7162:	71 9f       	mul	r23, r17
    7164:	50 0d       	add	r21, r0
    7166:	11 24       	eor	r1, r1
    7168:	24 0f       	add	r18, r20
    716a:	35 1f       	adc	r19, r21
    716c:	28 56       	subi	r18, 0x68	; 104
    716e:	3d 4e       	sbci	r19, 0xED	; 237
    7170:	e2 0f       	add	r30, r18
    7172:	f3 2f       	mov	r31, r19
    7174:	f1 1d       	adc	r31, r1
    7176:	eb 5b       	subi	r30, 0xBB	; 187
    7178:	fb 4f       	sbci	r31, 0xFB	; 251
    717a:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:716
                tempVel[RM] = instVelHigh[RM];
    717c:	60 93 f8 03 	sts	0x03F8, r22	; 0x8003f8 <SeqParameter()::tempVel+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:717
                triggedInst = RM;
    7180:	a3 e0       	ldi	r26, 0x03	; 3
    7182:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <__data_end>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:718
                break;
    7186:	c4 ce       	rjmp	.-632    	; 0x6f10 <SeqParameter()+0x1810>
    7188:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <instVelHigh+0x4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:720
              case HC_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[HC];
    718c:	88 23       	and	r24, r24
    718e:	c9 f0       	breq	.+50     	; 0x71c2 <SeqParameter()+0x1ac2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:720 (discriminator 1)
    7190:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    7194:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <instOut+0xb>
    7198:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    719c:	b0 e1       	ldi	r27, 0x10	; 16
    719e:	2b 9f       	mul	r18, r27
    71a0:	90 01       	movw	r18, r0
    71a2:	11 24       	eor	r1, r1
    71a4:	70 9f       	mul	r23, r16
    71a6:	a0 01       	movw	r20, r0
    71a8:	71 9f       	mul	r23, r17
    71aa:	50 0d       	add	r21, r0
    71ac:	11 24       	eor	r1, r1
    71ae:	24 0f       	add	r18, r20
    71b0:	35 1f       	adc	r19, r21
    71b2:	28 56       	subi	r18, 0x68	; 104
    71b4:	3d 4e       	sbci	r19, 0xED	; 237
    71b6:	e2 0f       	add	r30, r18
    71b8:	f3 2f       	mov	r31, r19
    71ba:	f1 1d       	adc	r31, r1
    71bc:	eb 5b       	subi	r30, 0xBB	; 187
    71be:	fb 4f       	sbci	r31, 0xFB	; 251
    71c0:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:721
                tempVel[HC] = instVelHigh[HC];
    71c2:	60 93 f9 03 	sts	0x03F9, r22	; 0x8003f9 <SeqParameter()::tempVel+0x4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:722
                triggedInst = HC;
    71c6:	e4 e0       	ldi	r30, 0x04	; 4
    71c8:	01 cf       	rjmp	.-510    	; 0x6fcc <SeqParameter()+0x18cc>
    71ca:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <instVelHigh+0x7>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:725
                break;
              case CRASH_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[CRASH];
    71ce:	88 23       	and	r24, r24
    71d0:	c9 f0       	breq	.+50     	; 0x7204 <SeqParameter()+0x1b04>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:725 (discriminator 1)
    71d2:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    71d6:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <instOut+0xe>
    71da:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    71de:	f0 e1       	ldi	r31, 0x10	; 16
    71e0:	2f 9f       	mul	r18, r31
    71e2:	90 01       	movw	r18, r0
    71e4:	11 24       	eor	r1, r1
    71e6:	70 9f       	mul	r23, r16
    71e8:	a0 01       	movw	r20, r0
    71ea:	71 9f       	mul	r23, r17
    71ec:	50 0d       	add	r21, r0
    71ee:	11 24       	eor	r1, r1
    71f0:	24 0f       	add	r18, r20
    71f2:	35 1f       	adc	r19, r21
    71f4:	28 56       	subi	r18, 0x68	; 104
    71f6:	3d 4e       	sbci	r19, 0xED	; 237
    71f8:	e2 0f       	add	r30, r18
    71fa:	f3 2f       	mov	r31, r19
    71fc:	f1 1d       	adc	r31, r1
    71fe:	eb 5b       	subi	r30, 0xBB	; 187
    7200:	fb 4f       	sbci	r31, 0xFB	; 251
    7202:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:726
                tempVel[CRASH] = instVelHigh[CRASH];
    7204:	60 93 fc 03 	sts	0x03FC, r22	; 0x8003fc <SeqParameter()::tempVel+0x7>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:727
                triggedInst = CRASH;
    7208:	27 e0       	ldi	r18, 0x07	; 7
    720a:	ae ce       	rjmp	.-676    	; 0x6f68 <SeqParameter()+0x1868>
    720c:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <instVelHigh+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:730
                break;
              case RIDE_BTN:
                if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[RIDE];
    7210:	88 23       	and	r24, r24
    7212:	c9 f0       	breq	.+50     	; 0x7246 <SeqParameter()+0x1b46>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:730 (discriminator 1)
    7214:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    7218:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <instOut+0xf>
    721c:	70 91 ce 0c 	lds	r23, 0x0CCE	; 0x800cce <ptrnBuffer>
    7220:	40 e1       	ldi	r20, 0x10	; 16
    7222:	24 9f       	mul	r18, r20
    7224:	90 01       	movw	r18, r0
    7226:	11 24       	eor	r1, r1
    7228:	70 9f       	mul	r23, r16
    722a:	a0 01       	movw	r20, r0
    722c:	71 9f       	mul	r23, r17
    722e:	50 0d       	add	r21, r0
    7230:	11 24       	eor	r1, r1
    7232:	24 0f       	add	r18, r20
    7234:	35 1f       	adc	r19, r21
    7236:	28 56       	subi	r18, 0x68	; 104
    7238:	3d 4e       	sbci	r19, 0xED	; 237
    723a:	e2 0f       	add	r30, r18
    723c:	f3 2f       	mov	r31, r19
    723e:	f1 1d       	adc	r31, r1
    7240:	eb 5b       	subi	r30, 0xBB	; 187
    7242:	fb 4f       	sbci	r31, 0xFB	; 251
    7244:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:731
                tempVel[RIDE] = instVelHigh[RIDE];
    7246:	60 93 fb 03 	sts	0x03FB, r22	; 0x8003fb <SeqParameter()::tempVel+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:732
                triggedInst = RIDE;
    724a:	56 e0       	ldi	r21, 0x06	; 6
    724c:	50 93 f4 03 	sts	0x03F4, r21	; 0x8003f4 <__data_end>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:733
                break;
    7250:	5f ce       	rjmp	.-834    	; 0x6f10 <SeqParameter()+0x1810>
    7252:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <instVelHigh+0xf>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:737
              }
              if (doublePushOH){
            //  if (isRunning) pattern[ptrnBuffer].velocity[instOut[a]][tapStepCount] = instVelHigh[OH];
                if (isRunning) pattern[ptrnBuffer].velocity[OH][tapStepCount] = instVelHigh[OH];                     // [zabox] fixes oh low velocity bug in tap mode (dim leds, no sound after mux fix)
    7256:	88 23       	and	r24, r24
    7258:	89 f0       	breq	.+34     	; 0x727c <SeqParameter()+0x1b7c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:737 (discriminator 1)
    725a:	e0 91 3c 1e 	lds	r30, 0x1E3C	; 0x801e3c <tapStepCount>
    725e:	30 91 ce 0c 	lds	r19, 0x0CCE	; 0x800cce <ptrnBuffer>
    7262:	30 9f       	mul	r19, r16
    7264:	c0 01       	movw	r24, r0
    7266:	31 9f       	mul	r19, r17
    7268:	90 0d       	add	r25, r0
    726a:	11 24       	eor	r1, r1
    726c:	88 56       	subi	r24, 0x68	; 104
    726e:	9d 4e       	sbci	r25, 0xED	; 237
    7270:	e8 0f       	add	r30, r24
    7272:	f9 2f       	mov	r31, r25
    7274:	f1 1d       	adc	r31, r1
    7276:	eb 5c       	subi	r30, 0xCB	; 203
    7278:	fa 4f       	sbci	r31, 0xFA	; 250
    727a:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:738
                tempVel[OH] = instVelHigh[OH];
    727c:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <SeqParameter()::tempVel+0xf>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:739
                triggedInst = OH;
    7280:	8f e0       	ldi	r24, 0x0F	; 15
    7282:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <__data_end>
    7286:	6a cd       	rjmp	.-1324   	; 0x6d5c <SeqParameter()+0x165c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:756
                    bitClear(tempInst[CH],tapStepCount);
                  }
                }
                //If CH is tapped
                else {
                  lastHHtrigged = B10;
    7288:	70 92 9b 0c 	sts	0x0C9B, r7	; 0x800c9b <lastHHtrigged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:757
                  if(isRunning){
    728c:	88 23       	and	r24, r24
    728e:	09 f4       	brne	.+2      	; 0x7292 <SeqParameter()+0x1b92>
    7290:	b6 cd       	rjmp	.-1172   	; 0x6dfe <SeqParameter()+0x16fe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:758
                    bitSet(tempInst[CH],tapStepCount);
    7292:	80 91 3c 1e 	lds	r24, 0x1E3C	; 0x801e3c <tapStepCount>
    7296:	a5 01       	movw	r20, r10
    7298:	94 01       	movw	r18, r8
    729a:	04 c0       	rjmp	.+8      	; 0x72a4 <SeqParameter()+0x1ba4>
    729c:	22 0f       	add	r18, r18
    729e:	33 1f       	adc	r19, r19
    72a0:	44 1f       	adc	r20, r20
    72a2:	55 1f       	adc	r21, r21
    72a4:	8a 95       	dec	r24
    72a6:	d2 f7       	brpl	.-12     	; 0x729c <SeqParameter()+0x1b9c>
    72a8:	c9 01       	movw	r24, r18
    72aa:	20 91 c0 0c 	lds	r18, 0x0CC0	; 0x800cc0 <tempInst+0x1c>
    72ae:	30 91 c1 0c 	lds	r19, 0x0CC1	; 0x800cc1 <tempInst+0x1d>
    72b2:	82 2b       	or	r24, r18
    72b4:	93 2b       	or	r25, r19
    72b6:	90 93 c1 0c 	sts	0x0CC1, r25	; 0x800cc1 <tempInst+0x1d>
    72ba:	80 93 c0 0c 	sts	0x0CC0, r24	; 0x800cc0 <tempInst+0x1c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:759
                    bitClear(tempInst[OH],tapStepCount);
    72be:	80 91 3c 1e 	lds	r24, 0x1E3C	; 0x801e3c <tapStepCount>
    72c2:	a5 01       	movw	r20, r10
    72c4:	94 01       	movw	r18, r8
    72c6:	04 c0       	rjmp	.+8      	; 0x72d0 <SeqParameter()+0x1bd0>
    72c8:	22 0f       	add	r18, r18
    72ca:	33 1f       	adc	r19, r19
    72cc:	44 1f       	adc	r20, r20
    72ce:	55 1f       	adc	r21, r21
    72d0:	8a 95       	dec	r24
    72d2:	d2 f7       	brpl	.-12     	; 0x72c8 <SeqParameter()+0x1bc8>
    72d4:	da 01       	movw	r26, r20
    72d6:	c9 01       	movw	r24, r18
    72d8:	80 95       	com	r24
    72da:	90 95       	com	r25
    72dc:	a0 95       	com	r26
    72de:	b0 95       	com	r27
    72e0:	20 91 c2 0c 	lds	r18, 0x0CC2	; 0x800cc2 <tempInst+0x1e>
    72e4:	30 91 c3 0c 	lds	r19, 0x0CC3	; 0x800cc3 <tempInst+0x1f>
    72e8:	82 23       	and	r24, r18
    72ea:	93 23       	and	r25, r19
    72ec:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <tempInst+0x1f>
    72f0:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <tempInst+0x1e>
    72f4:	84 cd       	rjmp	.-1272   	; 0x6dfe <SeqParameter()+0x16fe>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:766
                }
                while (TCCR2B) {};                                                            // [zabox] [1.028] wait until the last trigger is low again (checks if timer2 is running)
                SetDoutTrig((1 << HH) | lastHHtrigged);
              }
              else{
                while (TCCR2B) {};                                                            // [zabox] [1.028] wait until the last trigger is low again (checks if timer2 is running)
    72f6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    72fa:	81 11       	cpse	r24, r1
    72fc:	fc cf       	rjmp	.-8      	; 0x72f6 <SeqParameter()+0x1bf6>
    72fe:	a7 01       	movw	r20, r14
    7300:	4c 5e       	subi	r20, 0xEC	; 236
    7302:	5d 4f       	sbci	r21, 0xFD	; 253
    7304:	6a 01       	movw	r12, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:768
                //SetDoutTrig(1 << instOut[a] | lastHHtrigged);
                SetDoutTrig((1 << instOut[a]) | (lastDoutTrig & B11));                        // [zabox] [1.027] fixes hh cuts when tapping other instruments  
    7306:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <lastDoutTrig>
    730a:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <lastDoutTrig+0x1>
    730e:	da 01       	movw	r26, r20
    7310:	2c 91       	ld	r18, X
    7312:	e1 e0       	ldi	r30, 0x01	; 1
    7314:	f0 e0       	ldi	r31, 0x00	; 0
    7316:	02 c0       	rjmp	.+4      	; 0x731c <SeqParameter()+0x1c1c>
    7318:	ee 0f       	add	r30, r30
    731a:	ff 1f       	adc	r31, r31
    731c:	2a 95       	dec	r18
    731e:	e2 f7       	brpl	.-8      	; 0x7318 <SeqParameter()+0x1c18>
    7320:	9f 01       	movw	r18, r30
    7322:	83 70       	andi	r24, 0x03	; 3
    7324:	99 27       	eor	r25, r25
    7326:	8e 2b       	or	r24, r30
    7328:	93 2b       	or	r25, r19
    732a:	0e 94 87 06 	call	0xd0e	; 0xd0e <SetDoutTrig(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:769
                if(isRunning) bitSet(tempInst[instOut[a]],tapStepCount);
    732e:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    7332:	88 23       	and	r24, r24
    7334:	09 f4       	brne	.+2      	; 0x7338 <SeqParameter()+0x1c38>
    7336:	6d cd       	rjmp	.-1318   	; 0x6e12 <SeqParameter()+0x1712>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:769 (discriminator 1)
    7338:	80 91 3c 1e 	lds	r24, 0x1E3C	; 0x801e3c <tapStepCount>
    733c:	d6 01       	movw	r26, r12
    733e:	ec 91       	ld	r30, X
    7340:	f0 e0       	ldi	r31, 0x00	; 0
    7342:	ee 0f       	add	r30, r30
    7344:	ff 1f       	adc	r31, r31
    7346:	ec 55       	subi	r30, 0x5C	; 92
    7348:	f3 4f       	sbci	r31, 0xF3	; 243
    734a:	a5 01       	movw	r20, r10
    734c:	94 01       	movw	r18, r8
    734e:	04 c0       	rjmp	.+8      	; 0x7358 <SeqParameter()+0x1c58>
    7350:	22 0f       	add	r18, r18
    7352:	33 1f       	adc	r19, r19
    7354:	44 1f       	adc	r20, r20
    7356:	55 1f       	adc	r21, r21
    7358:	8a 95       	dec	r24
    735a:	d2 f7       	brpl	.-12     	; 0x7350 <SeqParameter()+0x1c50>
    735c:	c9 01       	movw	r24, r18
    735e:	20 81       	ld	r18, Z
    7360:	31 81       	ldd	r19, Z+1	; 0x01
    7362:	82 2b       	or	r24, r18
    7364:	93 2b       	or	r25, r19
    7366:	91 83       	std	Z+1, r25	; 0x01
    7368:	80 83       	st	Z, r24
    736a:	53 cd       	rjmp	.-1370   	; 0x6e12 <SeqParameter()+0x1712>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:789
            pattern[ptrnBuffer].inst[CH] ^= i;
            pattern[ptrnBuffer].inst[OH] |= tempInst[OH];
            tempInst[OH] = 0;// init tempInst
            patternWasEdited = TRUE;
          }
          else if (tempInst[CH]){
    736c:	60 91 c0 0c 	lds	r22, 0x0CC0	; 0x800cc0 <tempInst+0x1c>
    7370:	70 91 c1 0c 	lds	r23, 0x0CC1	; 0x800cc1 <tempInst+0x1d>
    7374:	61 15       	cp	r22, r1
    7376:	71 05       	cpc	r23, r1
    7378:	b9 f0       	breq	.+46     	; 0x73a8 <SeqParameter()+0x1ca8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:791
            unsigned int i = tempInst[CH] & pattern[ptrnBuffer].inst[OH];
            pattern[ptrnBuffer].inst[OH] ^= i;
    737a:	7b 01       	movw	r14, r22
    737c:	e0 94       	com	r14
    737e:	f0 94       	com	r15
    7380:	4d 91       	ld	r20, X+
    7382:	5c 91       	ld	r21, X
    7384:	11 97       	sbiw	r26, 0x01	; 1
    7386:	4e 21       	and	r20, r14
    7388:	5f 21       	and	r21, r15
    738a:	11 96       	adiw	r26, 0x01	; 1
    738c:	5c 93       	st	X, r21
    738e:	4e 93       	st	-X, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:792
            pattern[ptrnBuffer].inst[CH] |= tempInst[CH];
    7390:	f5 01       	movw	r30, r10
    7392:	40 81       	ld	r20, Z
    7394:	51 81       	ldd	r21, Z+1	; 0x01
    7396:	46 2b       	or	r20, r22
    7398:	57 2b       	or	r21, r23
    739a:	51 83       	std	Z+1, r21	; 0x01
    739c:	40 83       	st	Z, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:793
            tempInst[CH] = 0;// init tempInst
    739e:	10 92 c1 0c 	sts	0x0CC1, r1	; 0x800cc1 <tempInst+0x1d>
    73a2:	10 92 c0 0c 	sts	0x0CC0, r1	; 0x800cc0 <tempInst+0x1c>
    73a6:	8b cd       	rjmp	.-1258   	; 0x6ebe <SeqParameter()+0x17be>
    73a8:	ac 01       	movw	r20, r24
    73aa:	4c 55       	subi	r20, 0x5C	; 92
    73ac:	53 4f       	sbci	r21, 0xF3	; 243
    73ae:	7a 01       	movw	r14, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:796
            patternWasEdited = TRUE;
          }
          else if (tempInst[inst])//if instruments was edited
    73b0:	fa 01       	movw	r30, r20
    73b2:	60 81       	ld	r22, Z
    73b4:	71 81       	ldd	r23, Z+1	; 0x01
    73b6:	61 15       	cp	r22, r1
    73b8:	71 05       	cpc	r23, r1
    73ba:	09 f4       	brne	.+2      	; 0x73be <SeqParameter()+0x1cbe>
    73bc:	81 cd       	rjmp	.-1278   	; 0x6ec0 <SeqParameter()+0x17c0>
    73be:	a8 01       	movw	r20, r16
    73c0:	48 0f       	add	r20, r24
    73c2:	59 1f       	adc	r21, r25
    73c4:	43 56       	subi	r20, 0x63	; 99
    73c6:	59 4e       	sbci	r21, 0xE9	; 233
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:798
          {
            pattern[ptrnBuffer].inst[inst] |= tempInst[inst];
    73c8:	fa 01       	movw	r30, r20
    73ca:	c0 80       	ld	r12, Z
    73cc:	d1 80       	ldd	r13, Z+1	; 0x01
    73ce:	6c 29       	or	r22, r12
    73d0:	7d 29       	or	r23, r13
    73d2:	71 83       	std	Z+1, r23	; 0x01
    73d4:	60 83       	st	Z, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:799
            tempInst[inst] = 0;// init tempInst
    73d6:	f7 01       	movw	r30, r14
    73d8:	11 82       	std	Z+1, r1	; 0x01
    73da:	10 82       	st	Z, r1
    73dc:	70 cd       	rjmp	.-1312   	; 0x6ebe <SeqParameter()+0x17be>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:816
    //-------------------------------select pattern-----------------------------------
    if (stepsBtn.justRelease) doublePush = FALSE;
    if (readButtonState){
      if (bankBtn.pressed){
        if(FirstBitOn() >= MAX_BANK) curBank = MAX_BANK;
        else curBank = FirstBitOn();
    73de:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    73e2:	03 c9       	rjmp	.-3578   	; 0x65ea <SeqParameter()+0xeea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:823
        group.length = 0;//should be 0 to play the right next pattern
        if((curPattern != nextPattern) && !isRunning) selectedPatternChanged = TRUE;
      }
      else{
        //Group selected
        if (SecondBitOn())
    73e4:	0e 94 5f 04 	call	0x8be	; 0x8be <SecondBitOn()>
    73e8:	88 23       	and	r24, r24
    73ea:	f1 f1       	breq	.+124    	; 0x7468 <SeqParameter()+0x1d68>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:825
        {
          group.length = SecondBitOn() - FirstBitOn();
    73ec:	0e 94 5f 04 	call	0x8be	; 0x8be <SecondBitOn()>
    73f0:	18 2f       	mov	r17, r24
    73f2:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    73f6:	18 1b       	sub	r17, r24
    73f8:	10 93 c4 0c 	sts	0x0CC4, r17	; 0x800cc4 <group>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:826
          nextPattern = group.firstPattern = FirstBitOn() + curBank * NBR_PATTERN;
    73fc:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    7400:	90 91 35 1e 	lds	r25, 0x1E35	; 0x801e35 <curBank>
    7404:	92 95       	swap	r25
    7406:	90 7f       	andi	r25, 0xF0	; 240
    7408:	89 0f       	add	r24, r25
    740a:	80 93 c5 0c 	sts	0x0CC5, r24	; 0x800cc5 <group+0x1>
    740e:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:827
          if (isRunning && (seq.ptrnChangeSync == SYNC)) {                                                    // [zabox] fixes group bug while running
    7412:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    7416:	88 23       	and	r24, r24
    7418:	41 f0       	breq	.+16     	; 0x742a <SeqParameter()+0x1d2a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:827 (discriminator 1)
    741a:	80 91 3f 1e 	lds	r24, 0x1E3F	; 0x801e3f <seq>
    741e:	88 23       	and	r24, r24
    7420:	21 f0       	breq	.+8      	; 0x742a <SeqParameter()+0x1d2a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:828
            group.pos = group.length;                                                                           
    7422:	80 91 c4 0c 	lds	r24, 0x0CC4	; 0x800cc4 <group>
    7426:	80 93 c6 0c 	sts	0x0CC6, r24	; 0x800cc6 <group+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:830
          }
          doublePush = TRUE;
    742a:	81 e0       	ldi	r24, 0x01	; 1
    742c:	80 93 79 1e 	sts	0x1E79, r24	; 0x801e79 <doublePush>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:831
          group.priority = TRUE;
    7430:	80 93 c7 0c 	sts	0x0CC7, r24	; 0x800cc7 <group+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:840
          group.priority = FALSE;
          group.length = 0;//should be 0 to play the right next pattern
          nextPattern = FirstBitOn() + curBank * NBR_PATTERN;
          group.pos = pattern[ptrnBuffer].groupPos;
        }
        if(curPattern != nextPattern && stepsBtn.justPressed) {                                                // [zabox] [1.027] fixes pattern change bug in slave mode
    7434:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    7438:	80 91 33 1e 	lds	r24, 0x1E33	; 0x801e33 <nextPattern>
    743c:	98 17       	cp	r25, r24
    743e:	09 f4       	brne	.+2      	; 0x7442 <SeqParameter()+0x1d42>
    7440:	ec c8       	rjmp	.-3624   	; 0x661a <SeqParameter()+0xf1a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:840 (discriminator 1)
    7442:	80 91 a0 1e 	lds	r24, 0x1EA0	; 0x801ea0 <stepsBtn+0x3>
    7446:	88 23       	and	r24, r24
    7448:	09 f4       	brne	.+2      	; 0x744c <SeqParameter()+0x1d4c>
    744a:	e7 c8       	rjmp	.-3634   	; 0x661a <SeqParameter()+0xf1a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:841
          if(seq.ptrnChangeSync == SYNC){
    744c:	80 91 3f 1e 	lds	r24, 0x1E3F	; 0x801e3f <seq>
    7450:	88 23       	and	r24, r24
    7452:	09 f4       	brne	.+2      	; 0x7456 <SeqParameter()+0x1d56>
    7454:	df c8       	rjmp	.-3650   	; 0x6614 <SeqParameter()+0xf14>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:842
            if (isRunning) needLcdUpdate = TRUE;//selected pattern changed so we need to update display 
    7456:	80 91 39 1e 	lds	r24, 0x1E39	; 0x801e39 <isRunning>
    745a:	88 23       	and	r24, r24
    745c:	09 f4       	brne	.+2      	; 0x7460 <SeqParameter()+0x1d60>
    745e:	da c8       	rjmp	.-3660   	; 0x6614 <SeqParameter()+0xf14>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:842 (discriminator 1)
    7460:	81 e0       	ldi	r24, 0x01	; 1
    7462:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
    7466:	d9 c8       	rjmp	.-3662   	; 0x661a <SeqParameter()+0xf1a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:834
          }
          doublePush = TRUE;
          group.priority = TRUE;
        }
        //Only one pattern selected
        else if (!doublePush){
    7468:	80 91 79 1e 	lds	r24, 0x1E79	; 0x801e79 <doublePush>
    746c:	81 11       	cpse	r24, r1
    746e:	e2 cf       	rjmp	.-60     	; 0x7434 <SeqParameter()+0x1d34>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:835
          group.priority = FALSE;
    7470:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <group+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:836
          group.length = 0;//should be 0 to play the right next pattern
    7474:	10 92 c4 0c 	sts	0x0CC4, r1	; 0x800cc4 <group>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:837
          nextPattern = FirstBitOn() + curBank * NBR_PATTERN;
    7478:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    747c:	90 91 35 1e 	lds	r25, 0x1E35	; 0x801e35 <curBank>
    7480:	92 95       	swap	r25
    7482:	90 7f       	andi	r25, 0xF0	; 240
    7484:	89 0f       	add	r24, r25
    7486:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:838
          group.pos = pattern[ptrnBuffer].groupPos;
    748a:	20 91 ce 0c 	lds	r18, 0x0CCE	; 0x800cce <ptrnBuffer>
    748e:	89 ec       	ldi	r24, 0xC9	; 201
    7490:	95 e0       	ldi	r25, 0x05	; 5
    7492:	28 9f       	mul	r18, r24
    7494:	f0 01       	movw	r30, r0
    7496:	29 9f       	mul	r18, r25
    7498:	f0 0d       	add	r31, r0
    749a:	11 24       	eor	r1, r1
    749c:	e2 5a       	subi	r30, 0xA2	; 162
    749e:	f7 4e       	sbci	r31, 0xE7	; 231
    74a0:	80 81       	ld	r24, Z
    74a2:	80 93 c6 0c 	sts	0x0CC6, r24	; 0x800cc6 <group+0x2>
    74a6:	c6 cf       	rjmp	.-116    	; 0x7434 <SeqParameter()+0x1d34>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:854 (discriminator 1)
      }
    }

    //--------------------------------sequencer run direction-----------------------
    if (shiftBtn && dirBtn.justPressed){
      if (seq.dir++ >= MAX_SEQ_DIR) seq.dir = FORWARD;
    74a8:	10 92 48 1e 	sts	0x1E48, r1	; 0x801e48 <seq+0x9>
    74ac:	c6 c8       	rjmp	.-3700   	; 0x663a <SeqParameter()+0xf3a>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:885
    //-------------------------------select pattern-----------------------------------
    if (readButtonState){

      if (bankBtn.pressed){
        if(FirstBitOn() >= MAX_BANK) curBank = MAX_BANK;
        else curBank = FirstBitOn();
    74ae:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    74b2:	ef c8       	rjmp	.-3618   	; 0x6692 <SeqParameter()+0xf92>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:889
        nextPattern = curBank * NBR_PATTERN + (curPattern % NBR_PATTERN);
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
      }
      else if(numBtn.pressed){
    74b4:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <numBtn+0x2>
    74b8:	88 23       	and	r24, r24
    74ba:	51 f0       	breq	.+20     	; 0x74d0 <SeqParameter()+0x1dd0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:890
        trk.next = FirstBitOn();
    74bc:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    74c0:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <trk>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:891
        selectedTrackChanged = TRUE;
    74c4:	81 e0       	ldi	r24, 0x01	; 1
    74c6:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <selectedTrackChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:892
        needLcdUpdate = TRUE;
    74ca:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
    74ce:	f3 c8       	rjmp	.-3610   	; 0x66b6 <SeqParameter()+0xfb6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:895
      }
      else{
        nextPattern = FirstBitOn() + curBank * NBR_PATTERN;
    74d0:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    74d4:	90 91 35 1e 	lds	r25, 0x1E35	; 0x801e35 <curBank>
    74d8:	92 95       	swap	r25
    74da:	90 7f       	andi	r25, 0xF0	; 240
    74dc:	89 0f       	add	r24, r25
    74de:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:896
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    74e2:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    74e6:	89 13       	cpse	r24, r25
    74e8:	e3 c8       	rjmp	.-3642   	; 0x66b0 <SeqParameter()+0xfb0>
    74ea:	e5 c8       	rjmp	.-3638   	; 0x66b6 <SeqParameter()+0xfb6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:902 (discriminator 1)
      }
    }
    //decremente track position
    if (backBtn.justPressed){
      trk.pos--;
      if (trk.pos < 0 || trk.pos > MAX_PTRN_TRACK) trk.pos = 0;
    74ec:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <trk+0x3>
    74f0:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <trk+0x2>
    74f4:	f2 c8       	rjmp	.-3612   	; 0x66da <SeqParameter()+0xfda>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:910 (discriminator 1)
      needLcdUpdate = TRUE;
    }
    //incremente track position
    if (fwdBtn.justPressed){
      trk.pos++;
      if (trk.pos > MAX_PTRN_TRACK) trk.pos = MAX_PTRN_TRACK;
    74f6:	80 e0       	ldi	r24, 0x00	; 0
    74f8:	94 e0       	ldi	r25, 0x04	; 4
    74fa:	1b c9       	rjmp	.-3530   	; 0x6732 <SeqParameter()+0x1032>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:937
      if (backBtn.justPressed && track[trkBuffer].length){                                                  // [zabox] fixes crashs when deleting the last track pos
        if (trk.pos < (track[trkBuffer].length - 1)) {                                                      // [zabox] delete only valid track pos
        for (int a = trk.pos + 1; a < track[trkBuffer].length; a++){         
          track[trkBuffer].patternNbr[a] = track[trkBuffer].patternNbr[a + 1]; 
        }
        trk.pos +=1;//to stay in the same position
    74fc:	70 93 94 04 	sts	0x0494, r23	; 0x800494 <trk+0x3>
    7500:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:938
        track[trkBuffer].length = track[trkBuffer].length - 1;//decremente length by 1 du to deleted pattern
    7504:	82 e0       	ldi	r24, 0x02	; 2
    7506:	94 e0       	ldi	r25, 0x04	; 4
    7508:	28 9f       	mul	r18, r24
    750a:	f0 01       	movw	r30, r0
    750c:	29 9f       	mul	r18, r25
    750e:	f0 0d       	add	r31, r0
    7510:	38 9f       	mul	r19, r24
    7512:	f0 0d       	add	r31, r0
    7514:	11 24       	eor	r1, r1
    7516:	e9 56       	subi	r30, 0x69	; 105
    7518:	fb 4f       	sbci	r31, 0xFB	; 251
    751a:	11 83       	std	Z+1, r17	; 0x01
    751c:	00 83       	st	Z, r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:939
        nextPattern = track[trkBuffer].patternNbr[trk.pos];
    751e:	e6 0f       	add	r30, r22
    7520:	f7 1f       	adc	r31, r23
    7522:	82 81       	ldd	r24, Z+2	; 0x02
    7524:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:940
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    7528:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    752c:	89 17       	cp	r24, r25
    752e:	19 f0       	breq	.+6      	; 0x7536 <SeqParameter()+0x1e36>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:940 (discriminator 1)
    7530:	81 e0       	ldi	r24, 0x01	; 1
    7532:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:941
        trackNeedSaved = TRUE;
    7536:	81 e0       	ldi	r24, 0x01	; 1
    7538:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <trackNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:942
        needLcdUpdate = TRUE;
    753c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:949
        else {
          trk.pos +=1;//to stay in the same position
        }
      }
      //insert a pattern
      if (fwdBtn.justPressed) {                                                                              
    7540:	44 23       	and	r20, r20
    7542:	09 f4       	brne	.+2      	; 0x7546 <SeqParameter()+0x1e46>
    7544:	52 c0       	rjmp	.+164    	; 0x75ea <SeqParameter()+0x1eea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:950
        if (trk.pos < (track[trkBuffer].length + 1)) {                                                     // [zabox] insert only inside track
    7546:	a0 91 93 04 	lds	r26, 0x0493	; 0x800493 <trk+0x2>
    754a:	b0 91 94 04 	lds	r27, 0x0494	; 0x800494 <trk+0x3>
    754e:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <trkBuffer>
    7552:	30 e0       	ldi	r19, 0x00	; 0
    7554:	82 e0       	ldi	r24, 0x02	; 2
    7556:	94 e0       	ldi	r25, 0x04	; 4
    7558:	28 9f       	mul	r18, r24
    755a:	70 01       	movw	r14, r0
    755c:	29 9f       	mul	r18, r25
    755e:	f0 0c       	add	r15, r0
    7560:	38 9f       	mul	r19, r24
    7562:	f0 0c       	add	r15, r0
    7564:	11 24       	eor	r1, r1
    7566:	c7 01       	movw	r24, r14
    7568:	89 56       	subi	r24, 0x69	; 105
    756a:	9b 4f       	sbci	r25, 0xFB	; 251
    756c:	fc 01       	movw	r30, r24
    756e:	00 81       	ld	r16, Z
    7570:	11 81       	ldd	r17, Z+1	; 0x01
    7572:	a8 01       	movw	r20, r16
    7574:	4f 5f       	subi	r20, 0xFF	; 255
    7576:	5f 4f       	sbci	r21, 0xFF	; 255
    7578:	cd 01       	movw	r24, r26
    757a:	01 97       	sbiw	r24, 0x01	; 1
    757c:	a4 17       	cp	r26, r20
    757e:	b5 07       	cpc	r27, r21
    7580:	08 f0       	brcs	.+2      	; 0x7584 <SeqParameter()+0x1e84>
    7582:	12 c2       	rjmp	.+1060   	; 0x79a8 <SeqParameter()+0x22a8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:951
        for (int a = track[trkBuffer].length + 1; a >= trk.pos; a--){                                             
    7584:	ba 01       	movw	r22, r20
    7586:	f7 01       	movw	r30, r14
    7588:	e0 0f       	add	r30, r16
    758a:	f1 1f       	adc	r31, r17
    758c:	e9 56       	subi	r30, 0x69	; 105
    758e:	fb 4f       	sbci	r31, 0xFB	; 251
    7590:	31 97       	sbiw	r30, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:951 (discriminator 3)
    7592:	6a 17       	cp	r22, r26
    7594:	7b 07       	cpc	r23, r27
    7596:	50 f0       	brcs	.+20     	; 0x75ac <SeqParameter()+0x1eac>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:952 (discriminator 2)
          track[trkBuffer].patternNbr[a] = track[trkBuffer].patternNbr[a - 1]; 
    7598:	61 50       	subi	r22, 0x01	; 1
    759a:	71 09       	sbc	r23, r1
    759c:	13 81       	ldd	r17, Z+3	; 0x03
    759e:	14 83       	std	Z+4, r17	; 0x04
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:951 (discriminator 2)
        }
      }
      //insert a pattern
      if (fwdBtn.justPressed) {                                                                              
        if (trk.pos < (track[trkBuffer].length + 1)) {                                                     // [zabox] insert only inside track
        for (int a = track[trkBuffer].length + 1; a >= trk.pos; a--){                                             
    75a0:	f7 cf       	rjmp	.-18     	; 0x7590 <SeqParameter()+0x1e90>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:945
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
        trackNeedSaved = TRUE;
        needLcdUpdate = TRUE;
        }
        else {
          trk.pos +=1;//to stay in the same position
    75a2:	70 93 94 04 	sts	0x0494, r23	; 0x800494 <trk+0x3>
    75a6:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <trk+0x2>
    75aa:	ca cf       	rjmp	.-108    	; 0x7540 <SeqParameter()+0x1e40>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:954
      if (fwdBtn.justPressed) {                                                                              
        if (trk.pos < (track[trkBuffer].length + 1)) {                                                     // [zabox] insert only inside track
        for (int a = track[trkBuffer].length + 1; a >= trk.pos; a--){                                             
          track[trkBuffer].patternNbr[a] = track[trkBuffer].patternNbr[a - 1]; 
        }
        trk.pos -=1;//to stay in the same position
    75ac:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <trk+0x3>
    75b0:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:955
        track[trkBuffer].patternNbr[trk.pos] = curPattern;
    75b4:	60 91 34 1e 	lds	r22, 0x1E34	; 0x801e34 <curPattern>
    75b8:	a2 e0       	ldi	r26, 0x02	; 2
    75ba:	b4 e0       	ldi	r27, 0x04	; 4
    75bc:	2a 9f       	mul	r18, r26
    75be:	f0 01       	movw	r30, r0
    75c0:	2b 9f       	mul	r18, r27
    75c2:	f0 0d       	add	r31, r0
    75c4:	3a 9f       	mul	r19, r26
    75c6:	f0 0d       	add	r31, r0
    75c8:	11 24       	eor	r1, r1
    75ca:	e9 56       	subi	r30, 0x69	; 105
    75cc:	fb 4f       	sbci	r31, 0xFB	; 251
    75ce:	8e 0f       	add	r24, r30
    75d0:	9f 1f       	adc	r25, r31
    75d2:	dc 01       	movw	r26, r24
    75d4:	12 96       	adiw	r26, 0x02	; 2
    75d6:	6c 93       	st	X, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:956
        track[trkBuffer].length = track[trkBuffer].length + 1;//decremente length by 1 du to deleted pattern
    75d8:	51 83       	std	Z+1, r21	; 0x01
    75da:	40 83       	st	Z, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:957
        nextPattern = track[trkBuffer].patternNbr[trk.pos];
    75dc:	60 93 33 1e 	sts	0x1E33, r22	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:959
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
        trackNeedSaved = TRUE;
    75e0:	81 e0       	ldi	r24, 0x01	; 1
    75e2:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <trackNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:960
        needLcdUpdate = TRUE;
    75e6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:969
        }
      }
    }//end shift

    //write selected pattern in the current track position
    if (enterBtn.justRelease && !trackJustSaved){
    75ea:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <enterBtn+0x4>
    75ee:	88 23       	and	r24, r24
    75f0:	09 f4       	brne	.+2      	; 0x75f4 <SeqParameter()+0x1ef4>
    75f2:	50 c0       	rjmp	.+160    	; 0x7694 <SeqParameter()+0x1f94>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:969 (discriminator 1)
    75f4:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <trackJustSaved>
    75f8:	81 11       	cpse	r24, r1
    75fa:	4c c0       	rjmp	.+152    	; 0x7694 <SeqParameter()+0x1f94>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:970
      track[trkBuffer].patternNbr[trk.pos] = curPattern;
    75fc:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <trkBuffer>
    7600:	30 e0       	ldi	r19, 0x00	; 0
    7602:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    7606:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    760a:	50 91 34 1e 	lds	r21, 0x1E34	; 0x801e34 <curPattern>
    760e:	62 e0       	ldi	r22, 0x02	; 2
    7610:	74 e0       	ldi	r23, 0x04	; 4
    7612:	26 9f       	mul	r18, r22
    7614:	f0 01       	movw	r30, r0
    7616:	27 9f       	mul	r18, r23
    7618:	f0 0d       	add	r31, r0
    761a:	36 9f       	mul	r19, r22
    761c:	f0 0d       	add	r31, r0
    761e:	11 24       	eor	r1, r1
    7620:	e9 56       	subi	r30, 0x69	; 105
    7622:	fb 4f       	sbci	r31, 0xFB	; 251
    7624:	e8 0f       	add	r30, r24
    7626:	f9 1f       	adc	r31, r25
    7628:	52 83       	std	Z+2, r21	; 0x02
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:971
      trk.pos++;
    762a:	01 96       	adiw	r24, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:972
      if (trk.pos > MAX_PTRN_TRACK) trk.pos = MAX_PTRN_TRACK;
    762c:	81 30       	cpi	r24, 0x01	; 1
    762e:	b4 e0       	ldi	r27, 0x04	; 4
    7630:	9b 07       	cpc	r25, r27
    7632:	08 f0       	brcs	.+2      	; 0x7636 <SeqParameter()+0x1f36>
    7634:	be c1       	rjmp	.+892    	; 0x79b2 <SeqParameter()+0x22b2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:972 (discriminator 1)
    7636:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <trk+0x3>
    763a:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:973 (discriminator 1)
      nextPattern = track[trkBuffer].patternNbr[trk.pos];
    763e:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    7642:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    7646:	62 e0       	ldi	r22, 0x02	; 2
    7648:	74 e0       	ldi	r23, 0x04	; 4
    764a:	26 9f       	mul	r18, r22
    764c:	f0 01       	movw	r30, r0
    764e:	27 9f       	mul	r18, r23
    7650:	f0 0d       	add	r31, r0
    7652:	36 9f       	mul	r19, r22
    7654:	f0 0d       	add	r31, r0
    7656:	11 24       	eor	r1, r1
    7658:	e9 56       	subi	r30, 0x69	; 105
    765a:	fb 4f       	sbci	r31, 0xFB	; 251
    765c:	e8 0f       	add	r30, r24
    765e:	f9 1f       	adc	r31, r25
    7660:	42 81       	ldd	r20, Z+2	; 0x02
    7662:	40 93 33 1e 	sts	0x1E33, r20	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:974 (discriminator 1)
      if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    7666:	54 17       	cp	r21, r20
    7668:	19 f0       	breq	.+6      	; 0x7670 <SeqParameter()+0x1f70>
    766a:	41 e0       	ldi	r20, 0x01	; 1
    766c:	40 93 cc 0c 	sts	0x0CCC, r20	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:975
      track[trkBuffer].length = trk.pos;
    7670:	42 e0       	ldi	r20, 0x02	; 2
    7672:	54 e0       	ldi	r21, 0x04	; 4
    7674:	24 9f       	mul	r18, r20
    7676:	f0 01       	movw	r30, r0
    7678:	25 9f       	mul	r18, r21
    767a:	f0 0d       	add	r31, r0
    767c:	34 9f       	mul	r19, r20
    767e:	f0 0d       	add	r31, r0
    7680:	11 24       	eor	r1, r1
    7682:	e9 56       	subi	r30, 0x69	; 105
    7684:	fb 4f       	sbci	r31, 0xFB	; 251
    7686:	91 83       	std	Z+1, r25	; 0x01
    7688:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:976
      trackNeedSaved = TRUE;
    768a:	81 e0       	ldi	r24, 0x01	; 1
    768c:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <trackNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:977
      needLcdUpdate = TRUE;
    7690:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:982
    }
  }//END IF MODE TRACK WRITE

    //////////////////////////MODE TRACK PLAY/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  if (curSeqMode == TRACK_PLAY)
    7694:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    7698:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    769c:	89 2b       	or	r24, r25
    769e:	09 f0       	breq	.+2      	; 0x76a2 <SeqParameter()+0x1fa2>
    76a0:	75 c0       	rjmp	.+234    	; 0x778c <SeqParameter()+0x208c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:984
  {
    if (trackPosNeedIncremante){//(endMeasure)
    76a2:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <trackPosNeedIncremante>
    76a6:	88 23       	and	r24, r24
    76a8:	09 f4       	brne	.+2      	; 0x76ac <SeqParameter()+0x1fac>
    76aa:	41 c0       	rjmp	.+130    	; 0x772e <SeqParameter()+0x202e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:985
      trk.pos++;
    76ac:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <trk+0x2>
    76b0:	30 91 94 04 	lds	r19, 0x0494	; 0x800494 <trk+0x3>
    76b4:	2f 5f       	subi	r18, 0xFF	; 255
    76b6:	3f 4f       	sbci	r19, 0xFF	; 255
    76b8:	30 93 94 04 	sts	0x0494, r19	; 0x800494 <trk+0x3>
    76bc:	20 93 93 04 	sts	0x0493, r18	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:986
      if (trk.pos >= track[trkBuffer].length) trk.pos = 0;
    76c0:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <trkBuffer>
    76c4:	90 e0       	ldi	r25, 0x00	; 0
    76c6:	42 e0       	ldi	r20, 0x02	; 2
    76c8:	54 e0       	ldi	r21, 0x04	; 4
    76ca:	84 9f       	mul	r24, r20
    76cc:	f0 01       	movw	r30, r0
    76ce:	85 9f       	mul	r24, r21
    76d0:	f0 0d       	add	r31, r0
    76d2:	94 9f       	mul	r25, r20
    76d4:	f0 0d       	add	r31, r0
    76d6:	11 24       	eor	r1, r1
    76d8:	e9 56       	subi	r30, 0x69	; 105
    76da:	fb 4f       	sbci	r31, 0xFB	; 251
    76dc:	40 81       	ld	r20, Z
    76de:	51 81       	ldd	r21, Z+1	; 0x01
    76e0:	24 17       	cp	r18, r20
    76e2:	35 07       	cpc	r19, r21
    76e4:	20 f0       	brcs	.+8      	; 0x76ee <SeqParameter()+0x1fee>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:986 (discriminator 1)
    76e6:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <trk+0x3>
    76ea:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:987
      nextPattern = track[trkBuffer].patternNbr[trk.pos];
    76ee:	22 e0       	ldi	r18, 0x02	; 2
    76f0:	34 e0       	ldi	r19, 0x04	; 4
    76f2:	82 9f       	mul	r24, r18
    76f4:	f0 01       	movw	r30, r0
    76f6:	83 9f       	mul	r24, r19
    76f8:	f0 0d       	add	r31, r0
    76fa:	92 9f       	mul	r25, r18
    76fc:	f0 0d       	add	r31, r0
    76fe:	11 24       	eor	r1, r1
    7700:	e9 56       	subi	r30, 0x69	; 105
    7702:	fb 4f       	sbci	r31, 0xFB	; 251
    7704:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    7708:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    770c:	e8 0f       	add	r30, r24
    770e:	f9 1f       	adc	r31, r25
    7710:	82 81       	ldd	r24, Z+2	; 0x02
    7712:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:988
      if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    7716:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    771a:	89 17       	cp	r24, r25
    771c:	19 f0       	breq	.+6      	; 0x7724 <SeqParameter()+0x2024>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:988 (discriminator 1)
    771e:	81 e0       	ldi	r24, 0x01	; 1
    7720:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:989
      trackPosNeedIncremante = FALSE;
    7724:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <trackPosNeedIncremante>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:990
      needLcdUpdate = TRUE;
    7728:	81 e0       	ldi	r24, 0x01	; 1
    772a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:994

    }
    //go to first measure
    if (clearBtn.justPressed){
    772e:	80 91 7f 1e 	lds	r24, 0x1E7F	; 0x801e7f <clearBtn+0x3>
    7732:	88 23       	and	r24, r24
    7734:	e1 f0       	breq	.+56     	; 0x776e <SeqParameter()+0x206e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:995
      trk.pos = 0;
    7736:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <trk+0x3>
    773a:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <trk+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:996
      nextPattern = track[trkBuffer].patternNbr[trk.pos];
    773e:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <trkBuffer>
    7742:	82 e0       	ldi	r24, 0x02	; 2
    7744:	94 e0       	ldi	r25, 0x04	; 4
    7746:	28 9f       	mul	r18, r24
    7748:	f0 01       	movw	r30, r0
    774a:	29 9f       	mul	r18, r25
    774c:	f0 0d       	add	r31, r0
    774e:	11 24       	eor	r1, r1
    7750:	e9 56       	subi	r30, 0x69	; 105
    7752:	fb 4f       	sbci	r31, 0xFB	; 251
    7754:	82 81       	ldd	r24, Z+2	; 0x02
    7756:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:997
      if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    775a:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    775e:	89 17       	cp	r24, r25
    7760:	19 f0       	breq	.+6      	; 0x7768 <SeqParameter()+0x2068>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:997 (discriminator 1)
    7762:	81 e0       	ldi	r24, 0x01	; 1
    7764:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:998
      needLcdUpdate = TRUE;
    7768:	81 e0       	ldi	r24, 0x01	; 1
    776a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1000
    }
    if(readButtonState){
    776e:	80 91 77 1e 	lds	r24, 0x1E77	; 0x801e77 <readButtonState>
    7772:	90 91 78 1e 	lds	r25, 0x1E78	; 0x801e78 <readButtonState+0x1>
    7776:	89 2b       	or	r24, r25
    7778:	49 f0       	breq	.+18     	; 0x778c <SeqParameter()+0x208c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1001
      trk.next = FirstBitOn();
    777a:	0e 94 49 04 	call	0x892	; 0x892 <FirstBitOn()>
    777e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <trk>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1002
      selectedTrackChanged = TRUE;
    7782:	81 e0       	ldi	r24, 0x01	; 1
    7784:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <selectedTrackChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1003
      needLcdUpdate = TRUE;
    7788:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1009
    }
  }

  //======================================================================================================================================================================================================================================================================
  //------------------------------------Update pattern track load/save-----------------------
  if (selectedTrackChanged)
    778c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <selectedTrackChanged>
    7790:	88 23       	and	r24, r24
    7792:	41 f1       	breq	.+80     	; 0x77e4 <SeqParameter()+0x20e4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1011
  {
    selectedTrackChanged = FALSE;
    7794:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <selectedTrackChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1012
    needLcdUpdate = TRUE;
    7798:	11 e0       	ldi	r17, 0x01	; 1
    779a:	10 93 7e 01 	sts	0x017E, r17	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1013
    trackNeedSaved = FALSE;
    779e:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <trackNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1014
    LoadTrack(trk.next);
    77a2:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <trk>
    77a6:	0e 94 4c 24 	call	0x4898	; 0x4898 <LoadTrack(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1015
    trk.current = trk.next;
    77aa:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <trk>
    77ae:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <trk+0x1>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1016
    nextPattern = track[trkBuffer].patternNbr[trk.pos];
    77b2:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <trkBuffer>
    77b6:	82 e0       	ldi	r24, 0x02	; 2
    77b8:	94 e0       	ldi	r25, 0x04	; 4
    77ba:	28 9f       	mul	r18, r24
    77bc:	f0 01       	movw	r30, r0
    77be:	29 9f       	mul	r18, r25
    77c0:	f0 0d       	add	r31, r0
    77c2:	11 24       	eor	r1, r1
    77c4:	e9 56       	subi	r30, 0x69	; 105
    77c6:	fb 4f       	sbci	r31, 0xFB	; 251
    77c8:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <trk+0x2>
    77cc:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <trk+0x3>
    77d0:	e8 0f       	add	r30, r24
    77d2:	f9 1f       	adc	r31, r25
    77d4:	82 81       	ldd	r24, Z+2	; 0x02
    77d6:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1017
    if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    77da:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    77de:	89 13       	cpse	r24, r25
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1017 (discriminator 1)
    77e0:	10 93 cc 0c 	sts	0x0CCC, r17	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1020
    //trkBuffer = !trkBuffer;
  }
  if (trackNeedSaved && enterBtn.hold)
    77e4:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <trackNeedSaved>
    77e8:	88 23       	and	r24, r24
    77ea:	c9 f0       	breq	.+50     	; 0x781e <SeqParameter()+0x211e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1020 (discriminator 1)
    77ec:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <enterBtn+0x5>
    77f0:	88 23       	and	r24, r24
    77f2:	a9 f0       	breq	.+42     	; 0x781e <SeqParameter()+0x211e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1022
  {
    trackNeedSaved = FALSE;
    77f4:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <trackNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1023
    SaveTrack(trk.current);
    77f8:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <trk+0x1>
    77fc:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <SaveTrack(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1024
    LcdPrintSaved();
    7800:	0e 94 18 09 	call	0x1230	; 0x1230 <LcdPrintSaved()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1025
    trackJustSaved = TRUE;
    7804:	81 e0       	ldi	r24, 0x01	; 1
    7806:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <trackJustSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1026
    timeSinceSaved = millis();
    780a:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
    780e:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <timeSinceSaved>
    7812:	70 93 89 04 	sts	0x0489, r23	; 0x800489 <timeSinceSaved+0x1>
    7816:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <timeSinceSaved+0x2>
    781a:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <timeSinceSaved+0x3>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1029
  }
  //this function is to not incremente trk.pos when released enterBtn after Saved track
  if (millis() - timeSinceSaved > HOLD_TIME){                                               
    781e:	0e 94 75 4b 	call	0x96ea	; 0x96ea <millis>
    7822:	00 91 88 04 	lds	r16, 0x0488	; 0x800488 <timeSinceSaved>
    7826:	10 91 89 04 	lds	r17, 0x0489	; 0x800489 <timeSinceSaved+0x1>
    782a:	20 91 8a 04 	lds	r18, 0x048A	; 0x80048a <timeSinceSaved+0x2>
    782e:	30 91 8b 04 	lds	r19, 0x048B	; 0x80048b <timeSinceSaved+0x3>
    7832:	60 1b       	sub	r22, r16
    7834:	71 0b       	sbc	r23, r17
    7836:	82 0b       	sbc	r24, r18
    7838:	93 0b       	sbc	r25, r19
    783a:	69 3e       	cpi	r22, 0xE9	; 233
    783c:	73 40       	sbci	r23, 0x03	; 3
    783e:	81 05       	cpc	r24, r1
    7840:	91 05       	cpc	r25, r1
    7842:	10 f0       	brcs	.+4      	; 0x7848 <SeqParameter()+0x2148>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1030
    trackJustSaved = FALSE;
    7844:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <trackJustSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1033
  }

  if (selectedPatternChanged)
    7848:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <selectedPatternChanged>
    784c:	88 23       	and	r24, r24
    784e:	89 f0       	breq	.+34     	; 0x7872 <SeqParameter()+0x2172>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1036
  {
    //Serial.println("changed!!");
    selectedPatternChanged = FALSE;
    7850:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1037
    needLcdUpdate = TRUE;//selected pattern changed so we need to update display
    7854:	11 e0       	ldi	r17, 0x01	; 1
    7856:	10 93 7e 01 	sts	0x017E, r17	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1038
    patternNeedSaved = FALSE;
    785a:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <patternNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1039
    LoadPattern(nextPattern);
    785e:	80 91 33 1e 	lds	r24, 0x1E33	; 0x801e33 <nextPattern>
    7862:	0e 94 88 22 	call	0x4510	; 0x4510 <LoadPattern(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1040
    curPattern = nextPattern;
    7866:	80 91 33 1e 	lds	r24, 0x1E33	; 0x801e33 <nextPattern>
    786a:	80 93 34 1e 	sts	0x1E34, r24	; 0x801e34 <curPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1041
    nextPatternReady = TRUE;
    786e:	10 93 cb 0c 	sts	0x0CCB, r17	; 0x800ccb <nextPatternReady>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1044
  }

  if(nextPatternReady){///In pattern play mode this peace of code execute in the PPQ Count function
    7872:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <nextPatternReady>
    7876:	88 23       	and	r24, r24
    7878:	a9 f0       	breq	.+42     	; 0x78a4 <SeqParameter()+0x21a4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1048
    //Serial.println("Ready!!");
    //if ((isRunning && endMeasure) || !isRunning ){//|| (curSeqMode != PTRN_PLAY))
    // Serial.println("endMeasure!!");
    nextPatternReady = FALSE;
    787a:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <nextPatternReady>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1049
    keybOct = DEFAULT_OCT;
    787e:	83 e0       	ldi	r24, 0x03	; 3
    7880:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <keybOct>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1050
    noteIndex = 0;
    7884:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <noteIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1051
    InitMidiNoteOff();
    7888:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <InitMidiNoteOff()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1052
    ptrnBuffer = !ptrnBuffer;
    788c:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <ptrnBuffer>
    7890:	91 e0       	ldi	r25, 0x01	; 1
    7892:	89 27       	eor	r24, r25
    7894:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <ptrnBuffer>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1054
    //Serial.println("switched!!");
    InitPattern();//SHOULD BE REMOVED WHEN EEPROM WILL BE INITIALIZED
    7898:	0e 94 57 13 	call	0x26ae	; 0x26ae <InitPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1055
    SetHHPattern();
    789c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <SetHHPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1056
    InstToStepWord();
    78a0:	0e 94 c2 13 	call	0x2784	; 0x2784 <InstToStepWord()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1059
  }

  if (patternWasEdited)
    78a4:	80 91 cd 0c 	lds	r24, 0x0CCD	; 0x800ccd <patternWasEdited>
    78a8:	88 23       	and	r24, r24
    78aa:	49 f0       	breq	.+18     	; 0x78be <SeqParameter()+0x21be>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1061
  {//update Pattern
    patternWasEdited = FALSE;
    78ac:	10 92 cd 0c 	sts	0x0CCD, r1	; 0x800ccd <patternWasEdited>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1062
    SetHHPattern();
    78b0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <SetHHPattern()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1063
    InstToStepWord();
    78b4:	0e 94 c2 13 	call	0x2784	; 0x2784 <InstToStepWord()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1064
    patternNeedSaved = TRUE;
    78b8:	81 e0       	ldi	r24, 0x01	; 1
    78ba:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <patternNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1068
    // Serial.println("patternupdated");
  }

  if (patternNeedSaved && enterBtn.justPressed && !instBtn)
    78be:	80 91 ca 0c 	lds	r24, 0x0CCA	; 0x800cca <patternNeedSaved>
    78c2:	88 23       	and	r24, r24
    78c4:	81 f0       	breq	.+32     	; 0x78e6 <SeqParameter()+0x21e6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1068 (discriminator 1)
    78c6:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <enterBtn+0x3>
    78ca:	88 23       	and	r24, r24
    78cc:	61 f0       	breq	.+24     	; 0x78e6 <SeqParameter()+0x21e6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1068 (discriminator 2)
    78ce:	80 91 7b 1e 	lds	r24, 0x1E7B	; 0x801e7b <instBtn>
    78d2:	81 11       	cpse	r24, r1
    78d4:	08 c0       	rjmp	.+16     	; 0x78e6 <SeqParameter()+0x21e6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1070
  {
    patternNeedSaved = FALSE;
    78d6:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <patternNeedSaved>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1071
    SavePattern(curPattern);//pattern saved
    78da:	80 91 34 1e 	lds	r24, 0x1E34	; 0x801e34 <curPattern>
    78de:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <SavePattern(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1072
    LcdPrintSaved();
    78e2:	0e 94 18 09 	call	0x1230	; 0x1230 <LcdPrintSaved()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1075
  }

  if (enterBtn.justRelease) needLcdUpdate = TRUE;
    78e6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <enterBtn+0x4>
    78ea:	88 23       	and	r24, r24
    78ec:	19 f0       	breq	.+6      	; 0x78f4 <SeqParameter()+0x21f4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1075 (discriminator 1)
    78ee:	81 e0       	ldi	r24, 0x01	; 1
    78f0:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1079

  //////////////////////////MODE MUTE//////////////////////////////////////

  if (curSeqMode == MUTE){
    78f4:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    78f8:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    78fc:	85 30       	cpi	r24, 0x05	; 5
    78fe:	91 05       	cpc	r25, r1
    7900:	a9 f4       	brne	.+42     	; 0x792c <SeqParameter()+0x222c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1080
    MuteButtonGet();
    7902:	0e 94 4a 03 	call	0x694	; 0x694 <MuteButtonGet()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1081
    if (encBtn.pressed){
    7906:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <encBtn+0x2>
    790a:	88 23       	and	r24, r24
    790c:	41 f0       	breq	.+16     	; 0x791e <SeqParameter()+0x221e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1082
      muteInst = 0;
    790e:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <muteInst+0x1>
    7912:	10 92 a2 0c 	sts	0x0CA2, r1	; 0x800ca2 <muteInst>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1083
      muteLeds = 0;                                                                   // [1.028] new MuteButtonGet function
    7916:	10 92 4e 1e 	sts	0x1E4E, r1	; 0x801e4e <muteLeds+0x1>
    791a:	10 92 4d 1e 	sts	0x1E4D, r1	; 0x801e4d <muteLeds>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1089
      //InitMuteBtnCounter();                                                         //   
    }
  } 

  //We still incremente pattern group in those mode
  if (curSeqMode == MUTE || curSeqMode == PTRN_PLAY || curSeqMode == PTRN_STEP ){
    791e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <curSeqMode>
    7922:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <curSeqMode+0x1>
    7926:	85 30       	cpi	r24, 0x05	; 5
    7928:	91 05       	cpc	r25, r1
    792a:	19 f0       	breq	.+6      	; 0x7932 <SeqParameter()+0x2232>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1089 (discriminator 1)
    792c:	02 97       	sbiw	r24, 0x02	; 2
    792e:	02 97       	sbiw	r24, 0x02	; 2
    7930:	10 f5       	brcc	.+68     	; 0x7976 <SeqParameter()+0x2276>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1090
    if (trackPosNeedIncremante && group.length ){//&& stepCount > 0)
    7932:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <trackPosNeedIncremante>
    7936:	88 23       	and	r24, r24
    7938:	f1 f0       	breq	.+60     	; 0x7976 <SeqParameter()+0x2276>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1090 (discriminator 1)
    793a:	90 91 c4 0c 	lds	r25, 0x0CC4	; 0x800cc4 <group>
    793e:	99 23       	and	r25, r25
    7940:	d1 f0       	breq	.+52     	; 0x7976 <SeqParameter()+0x2276>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1091
      group.pos++;
    7942:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <group+0x2>
    7946:	8f 5f       	subi	r24, 0xFF	; 255
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1092
      if (group.pos > group.length) group.pos = 0;
    7948:	98 17       	cp	r25, r24
    794a:	b0 f1       	brcs	.+108    	; 0x79b8 <SeqParameter()+0x22b8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1091
  } 

  //We still incremente pattern group in those mode
  if (curSeqMode == MUTE || curSeqMode == PTRN_PLAY || curSeqMode == PTRN_STEP ){
    if (trackPosNeedIncremante && group.length ){//&& stepCount > 0)
      group.pos++;
    794c:	80 93 c6 0c 	sts	0x0CC6, r24	; 0x800cc6 <group+0x2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1093
      if (group.pos > group.length) group.pos = 0;
      nextPattern = group.firstPattern + group.pos;
    7950:	80 91 c5 0c 	lds	r24, 0x0CC5	; 0x800cc5 <group+0x1>
    7954:	90 91 c6 0c 	lds	r25, 0x0CC6	; 0x800cc6 <group+0x2>
    7958:	89 0f       	add	r24, r25
    795a:	80 93 33 1e 	sts	0x1E33, r24	; 0x801e33 <nextPattern>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1094
      if(curPattern != nextPattern) selectedPatternChanged = TRUE;
    795e:	90 91 34 1e 	lds	r25, 0x1E34	; 0x801e34 <curPattern>
    7962:	89 17       	cp	r24, r25
    7964:	19 f0       	breq	.+6      	; 0x796c <SeqParameter()+0x226c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1094 (discriminator 1)
    7966:	81 e0       	ldi	r24, 0x01	; 1
    7968:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <selectedPatternChanged>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1095
      trackPosNeedIncremante = FALSE;
    796c:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <trackPosNeedIncremante>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1096
      needLcdUpdate = TRUE;
    7970:	81 e0       	ldi	r24, 0x01	; 1
    7972:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <needLcdUpdate>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1099
    } 
  }
}
    7976:	26 96       	adiw	r28, 0x06	; 6
    7978:	0f b6       	in	r0, 0x3f	; 63
    797a:	f8 94       	cli
    797c:	de bf       	out	0x3e, r29	; 62
    797e:	0f be       	out	0x3f, r0	; 63
    7980:	cd bf       	out	0x3d, r28	; 61
    7982:	df 91       	pop	r29
    7984:	cf 91       	pop	r28
    7986:	1f 91       	pop	r17
    7988:	0f 91       	pop	r16
    798a:	ff 90       	pop	r15
    798c:	ef 90       	pop	r14
    798e:	df 90       	pop	r13
    7990:	cf 90       	pop	r12
    7992:	bf 90       	pop	r11
    7994:	af 90       	pop	r10
    7996:	9f 90       	pop	r9
    7998:	8f 90       	pop	r8
    799a:	7f 90       	pop	r7
    799c:	6f 90       	pop	r6
    799e:	5f 90       	pop	r5
    79a0:	4f 90       	pop	r4
    79a2:	3f 90       	pop	r3
    79a4:	2f 90       	pop	r2
    79a6:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:963
        if(curPattern != nextPattern) selectedPatternChanged = TRUE;
        trackNeedSaved = TRUE;
        needLcdUpdate = TRUE;
        }
        else {
          trk.pos -=1;//to stay in the same position
    79a8:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <trk+0x3>
    79ac:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <trk+0x2>
    79b0:	1c ce       	rjmp	.-968    	; 0x75ea <SeqParameter()+0x1eea>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:972 (discriminator 1)

    //write selected pattern in the current track position
    if (enterBtn.justRelease && !trackJustSaved){
      track[trkBuffer].patternNbr[trk.pos] = curPattern;
      trk.pos++;
      if (trk.pos > MAX_PTRN_TRACK) trk.pos = MAX_PTRN_TRACK;
    79b2:	80 e0       	ldi	r24, 0x00	; 0
    79b4:	94 e0       	ldi	r25, 0x04	; 4
    79b6:	3f ce       	rjmp	.-898    	; 0x7636 <SeqParameter()+0x1f36>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Seq.ino:1092 (discriminator 1)

  //We still incremente pattern group in those mode
  if (curSeqMode == MUTE || curSeqMode == PTRN_PLAY || curSeqMode == PTRN_STEP ){
    if (trackPosNeedIncremante && group.length ){//&& stepCount > 0)
      group.pos++;
      if (group.pos > group.length) group.pos = 0;
    79b8:	10 92 c6 0c 	sts	0x0CC6, r1	; 0x800cc6 <group+0x2>
    79bc:	c9 cf       	rjmp	.-110    	; 0x7950 <SeqParameter()+0x2250>

000079be <loop>:
loop():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:114

////////////////////////Loop///////////////////////
void loop()
{
  
  Expander();                                                             // [1.028] expander
    79be:	0e 94 67 2b 	call	0x56ce	; 0x56ce <Expander()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:115
  SetTrigPeriod(TRIG_LENGHT);
    79c2:	8a e0       	ldi	r24, 0x0A	; 10
    79c4:	0e 94 0a 07 	call	0xe14	; 0xe14 <SetTrigPeriod(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:116
  InitMidiRealTime();
    79c8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <InitMidiRealTime()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:117
  MIDI.read();
    79cc:	8b e1       	ldi	r24, 0x1B	; 27
    79ce:	90 e2       	ldi	r25, 0x20	; 32
    79d0:	0e 94 9d 42 	call	0x853a	; 0x853a <MIDI_Class::read()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:119
  //SetMux();//!!!! if SetMUX() loop there is noise on HT out and a less noise on HH noise too !!!!
  ButtonGet(); 
    79d4:	0e 94 66 05 	call	0xacc	; 0xacc <ButtonGet()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:120
  EncGet();
    79d8:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <EncGet()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:122
  
  if (ledUpdateCounter > 2) {                                             // [zabox] [1.028] smooth leds (combine 3 loop cycles, reduces update rate from ~220hz with running secuencer to 80hz)
    79dc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ledUpdateCounter>
    79e0:	83 30       	cpi	r24, 0x03	; 3
    79e2:	20 f0       	brcs	.+8      	; 0x79ec <loop+0x2e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:123
    SetLeds();
    79e4:	0e 94 b0 09 	call	0x1360	; 0x1360 <SetLeds()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:124
    ledUpdateCounter = 0;
    79e8:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <ledUpdateCounter>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:125
  } ledUpdateCounter++;
    79ec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ledUpdateCounter>
    79f0:	8f 5f       	subi	r24, 0xFF	; 255
    79f2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ledUpdateCounter>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:127
  
  SeqConfiguration();
    79f6:	0e 94 79 20 	call	0x40f2	; 0x40f2 <SeqConfiguration()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:128
  SeqParameter();
    79fa:	0e 94 80 2b 	call	0x5700	; 0x5700 <SeqParameter()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:129
  KeyboardUpdate();
    79fe:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KeyboardUpdate()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/Nava_v1_028beta.ino:130
  LcdUpdate();
    7a02:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <LcdUpdate()>

00007a06 <MIDI_Class::getTypeFromStatusByte(unsigned char)>:
_ZN10MIDI_Class21getTypeFromStatusByteEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:307
							   byte Channel)
{
	
	unsigned int pitchval = (PitchValue+1.f)*8192;
	if (pitchval > 16383) pitchval = 16383;		// overflow protection
	sendPitchBend(pitchval,Channel);
    7a06:	87 ff       	sbrs	r24, 7
    7a08:	0d c0       	rjmp	.+26     	; 0x7a24 <MIDI_Class::getTypeFromStatusByte(unsigned char)+0x1e>
    7a0a:	9c e0       	ldi	r25, 0x0C	; 12
    7a0c:	98 0f       	add	r25, r24
    7a0e:	92 30       	cpi	r25, 0x02	; 2
    7a10:	48 f0       	brcs	.+18     	; 0x7a24 <MIDI_Class::getTypeFromStatusByte(unsigned char)+0x1e>
    7a12:	98 2f       	mov	r25, r24
    7a14:	9b 7f       	andi	r25, 0xFB	; 251
    7a16:	99 3f       	cpi	r25, 0xF9	; 249
    7a18:	29 f0       	breq	.+10     	; 0x7a24 <MIDI_Class::getTypeFromStatusByte(unsigned char)+0x1e>
    7a1a:	80 3f       	cpi	r24, 0xF0	; 240
    7a1c:	08 f4       	brcc	.+2      	; 0x7a20 <MIDI_Class::getTypeFromStatusByte(unsigned char)+0x1a>
    7a1e:	80 7f       	andi	r24, 0xF0	; 240
    7a20:	90 e0       	ldi	r25, 0x00	; 0
    7a22:	08 95       	ret
    7a24:	90 e0       	ldi	r25, 0x00	; 0
    7a26:	80 e0       	ldi	r24, 0x00	; 0
    7a28:	08 95       	ret

00007a2a <MIDI_Class::MIDI_Class()>:
_ZN10MIDI_ClassC2Ev():
    7a2a:	fc 01       	movw	r30, r24
    7a2c:	e5 5f       	subi	r30, 0xF5	; 245
    7a2e:	fd 4f       	sbci	r31, 0xFD	; 253
    7a30:	11 82       	std	Z+1, r1	; 0x01
    7a32:	10 82       	st	Z, r1
    7a34:	32 96       	adiw	r30, 0x02	; 2
    7a36:	11 82       	std	Z+1, r1	; 0x01
    7a38:	10 82       	st	Z, r1
    7a3a:	32 96       	adiw	r30, 0x02	; 2
    7a3c:	11 82       	std	Z+1, r1	; 0x01
    7a3e:	10 82       	st	Z, r1
    7a40:	32 96       	adiw	r30, 0x02	; 2
    7a42:	11 82       	std	Z+1, r1	; 0x01
    7a44:	10 82       	st	Z, r1
    7a46:	32 96       	adiw	r30, 0x02	; 2
    7a48:	11 82       	std	Z+1, r1	; 0x01
    7a4a:	10 82       	st	Z, r1
    7a4c:	32 96       	adiw	r30, 0x02	; 2
    7a4e:	11 82       	std	Z+1, r1	; 0x01
    7a50:	10 82       	st	Z, r1
    7a52:	32 96       	adiw	r30, 0x02	; 2
    7a54:	11 82       	std	Z+1, r1	; 0x01
    7a56:	10 82       	st	Z, r1
    7a58:	32 96       	adiw	r30, 0x02	; 2
    7a5a:	11 82       	std	Z+1, r1	; 0x01
    7a5c:	10 82       	st	Z, r1
    7a5e:	32 96       	adiw	r30, 0x02	; 2
    7a60:	11 82       	std	Z+1, r1	; 0x01
    7a62:	10 82       	st	Z, r1
    7a64:	32 96       	adiw	r30, 0x02	; 2
    7a66:	11 82       	std	Z+1, r1	; 0x01
    7a68:	10 82       	st	Z, r1
    7a6a:	32 96       	adiw	r30, 0x02	; 2
    7a6c:	11 82       	std	Z+1, r1	; 0x01
    7a6e:	10 82       	st	Z, r1
    7a70:	32 96       	adiw	r30, 0x02	; 2
    7a72:	11 82       	std	Z+1, r1	; 0x01
    7a74:	10 82       	st	Z, r1
    7a76:	32 96       	adiw	r30, 0x02	; 2
    7a78:	11 82       	std	Z+1, r1	; 0x01
    7a7a:	10 82       	st	Z, r1
    7a7c:	32 96       	adiw	r30, 0x02	; 2
    7a7e:	11 82       	std	Z+1, r1	; 0x01
    7a80:	10 82       	st	Z, r1
    7a82:	32 96       	adiw	r30, 0x02	; 2
    7a84:	11 82       	std	Z+1, r1	; 0x01
    7a86:	10 82       	st	Z, r1
    7a88:	32 96       	adiw	r30, 0x02	; 2
    7a8a:	11 82       	std	Z+1, r1	; 0x01
    7a8c:	10 82       	st	Z, r1
    7a8e:	32 96       	adiw	r30, 0x02	; 2
    7a90:	11 82       	std	Z+1, r1	; 0x01
    7a92:	10 82       	st	Z, r1
    7a94:	83 5d       	subi	r24, 0xD3	; 211
    7a96:	9d 4f       	sbci	r25, 0xFD	; 253
    7a98:	fc 01       	movw	r30, r24
    7a9a:	11 82       	std	Z+1, r1	; 0x01
    7a9c:	10 82       	st	Z, r1
    7a9e:	08 95       	ret

00007aa0 <MIDI_Class::begin(unsigned char)>:
_ZN10MIDI_Class5beginEh():
    7aa0:	1f 93       	push	r17
    7aa2:	cf 93       	push	r28
    7aa4:	df 93       	push	r29
    7aa6:	ec 01       	movw	r28, r24
    7aa8:	16 2f       	mov	r17, r22
_ZN14HardwareSerial5beginEm():
    7aaa:	26 e0       	ldi	r18, 0x06	; 6
    7aac:	42 e1       	ldi	r20, 0x12	; 18
    7aae:	5a e7       	ldi	r21, 0x7A	; 122
    7ab0:	60 e0       	ldi	r22, 0x00	; 0
    7ab2:	70 e0       	ldi	r23, 0x00	; 0
    7ab4:	8a eb       	ldi	r24, 0xBA	; 186
    7ab6:	93 e2       	ldi	r25, 0x23	; 35
    7ab8:	0e 94 39 48 	call	0x9072	; 0x9072 <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN10MIDI_Class5beginEh():
    7abc:	18 82       	st	Y, r1
    7abe:	1a 83       	std	Y+2, r17	; 0x02
    7ac0:	19 82       	std	Y+1, r1	; 0x01
    7ac2:	fe 01       	movw	r30, r28
    7ac4:	ec 5f       	subi	r30, 0xFC	; 252
    7ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    7ac8:	11 82       	std	Z+1, r1	; 0x01
    7aca:	10 82       	st	Z, r1
    7acc:	32 97       	sbiw	r30, 0x02	; 2
    7ace:	11 82       	std	Z+1, r1	; 0x01
    7ad0:	10 82       	st	Z, r1
    7ad2:	e8 5f       	subi	r30, 0xF8	; 248
    7ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    7ad6:	10 82       	st	Z, r1
    7ad8:	e3 50       	subi	r30, 0x03	; 3
    7ada:	f1 40       	sbci	r31, 0x01	; 1
    7adc:	11 82       	std	Z+1, r1	; 0x01
    7ade:	10 82       	st	Z, r1
    7ae0:	31 97       	sbiw	r30, 0x01	; 1
    7ae2:	10 82       	st	Z, r1
    7ae4:	33 96       	adiw	r30, 0x03	; 3
    7ae6:	10 82       	st	Z, r1
    7ae8:	31 96       	adiw	r30, 0x01	; 1
    7aea:	10 82       	st	Z, r1
    7aec:	ea 5d       	subi	r30, 0xDA	; 218
    7aee:	fe 4f       	sbci	r31, 0xFE	; 254
    7af0:	81 e0       	ldi	r24, 0x01	; 1
    7af2:	90 e0       	ldi	r25, 0x00	; 0
    7af4:	91 83       	std	Z+1, r25	; 0x01
    7af6:	80 83       	st	Z, r24
    7af8:	c1 5d       	subi	r28, 0xD1	; 209
    7afa:	dd 4f       	sbci	r29, 0xFD	; 253
    7afc:	88 83       	st	Y, r24
    7afe:	df 91       	pop	r29
    7b00:	cf 91       	pop	r28
    7b02:	1f 91       	pop	r17
    7b04:	08 95       	ret

00007b06 <MIDI_Class::input_filter(unsigned char)>:
_ZN10MIDI_Class12input_filterEh():
    7b06:	fc 01       	movw	r30, r24
    7b08:	e9 5f       	subi	r30, 0xF9	; 249
    7b0a:	fe 4f       	sbci	r31, 0xFE	; 254
    7b0c:	20 81       	ld	r18, Z
    7b0e:	31 81       	ldd	r19, Z+1	; 0x01
    7b10:	21 15       	cp	r18, r1
    7b12:	31 05       	cpc	r19, r1
    7b14:	81 f0       	breq	.+32     	; 0x7b36 <MIDI_Class::input_filter(unsigned char)+0x30>
    7b16:	20 58       	subi	r18, 0x80	; 128
    7b18:	31 09       	sbc	r19, r1
    7b1a:	21 36       	cpi	r18, 0x61	; 97
    7b1c:	31 05       	cpc	r19, r1
    7b1e:	68 f4       	brcc	.+26     	; 0x7b3a <MIDI_Class::input_filter(unsigned char)+0x34>
    7b20:	fc 01       	movw	r30, r24
    7b22:	22 81       	ldd	r18, Z+2	; 0x02
    7b24:	8a 5f       	subi	r24, 0xFA	; 250
    7b26:	9e 4f       	sbci	r25, 0xFE	; 254
    7b28:	fc 01       	movw	r30, r24
    7b2a:	80 81       	ld	r24, Z
    7b2c:	82 17       	cp	r24, r18
    7b2e:	29 f0       	breq	.+10     	; 0x7b3a <MIDI_Class::input_filter(unsigned char)+0x34>
    7b30:	81 e0       	ldi	r24, 0x01	; 1
    7b32:	22 23       	and	r18, r18
    7b34:	19 f0       	breq	.+6      	; 0x7b3c <MIDI_Class::input_filter(unsigned char)+0x36>
    7b36:	80 e0       	ldi	r24, 0x00	; 0
    7b38:	08 95       	ret
    7b3a:	81 e0       	ldi	r24, 0x01	; 1
    7b3c:	08 95       	ret

00007b3e <MIDI_Class::setInputChannel(unsigned char)>:
_ZN10MIDI_Class15setInputChannelEh():
    7b3e:	fc 01       	movw	r30, r24
    7b40:	62 83       	std	Z+2, r22	; 0x02
    7b42:	08 95       	ret

00007b44 <MIDI_Class::setHandleNoteOff(void (*)(unsigned char, unsigned char, unsigned char))>:
_ZN10MIDI_Class16setHandleNoteOffEPFvhhhE():
    7b44:	85 5f       	subi	r24, 0xF5	; 245
    7b46:	9d 4f       	sbci	r25, 0xFD	; 253
    7b48:	fc 01       	movw	r30, r24
    7b4a:	71 83       	std	Z+1, r23	; 0x01
    7b4c:	60 83       	st	Z, r22
    7b4e:	08 95       	ret

00007b50 <MIDI_Class::setHandleNoteOn(void (*)(unsigned char, unsigned char, unsigned char))>:
_ZN10MIDI_Class15setHandleNoteOnEPFvhhhE():
    7b50:	83 5f       	subi	r24, 0xF3	; 243
    7b52:	9d 4f       	sbci	r25, 0xFD	; 253
    7b54:	fc 01       	movw	r30, r24
    7b56:	71 83       	std	Z+1, r23	; 0x01
    7b58:	60 83       	st	Z, r22
    7b5a:	08 95       	ret

00007b5c <MIDI_Class::setHandleClock(void (*)())>:
_ZN10MIDI_Class14setHandleClockEPFvvE():
    7b5c:	8d 5d       	subi	r24, 0xDD	; 221
    7b5e:	9d 4f       	sbci	r25, 0xFD	; 253
    7b60:	fc 01       	movw	r30, r24
    7b62:	71 83       	std	Z+1, r23	; 0x01
    7b64:	60 83       	st	Z, r22
    7b66:	08 95       	ret

00007b68 <MIDI_Class::setHandleStart(void (*)())>:
_ZN10MIDI_Class14setHandleStartEPFvvE():
    7b68:	8b 5d       	subi	r24, 0xDB	; 219
    7b6a:	9d 4f       	sbci	r25, 0xFD	; 253
    7b6c:	fc 01       	movw	r30, r24
    7b6e:	71 83       	std	Z+1, r23	; 0x01
    7b70:	60 83       	st	Z, r22
    7b72:	08 95       	ret

00007b74 <MIDI_Class::setHandleContinue(void (*)())>:
_ZN10MIDI_Class17setHandleContinueEPFvvE():
    7b74:	89 5d       	subi	r24, 0xD9	; 217
    7b76:	9d 4f       	sbci	r25, 0xFD	; 253
    7b78:	fc 01       	movw	r30, r24
    7b7a:	71 83       	std	Z+1, r23	; 0x01
    7b7c:	60 83       	st	Z, r22
    7b7e:	08 95       	ret

00007b80 <MIDI_Class::setHandleStop(void (*)())>:
_ZN10MIDI_Class13setHandleStopEPFvvE():
    7b80:	87 5d       	subi	r24, 0xD7	; 215
    7b82:	9d 4f       	sbci	r25, 0xFD	; 253
    7b84:	fc 01       	movw	r30, r24
    7b86:	71 83       	std	Z+1, r23	; 0x01
    7b88:	60 83       	st	Z, r22
    7b8a:	08 95       	ret

00007b8c <MIDI_Class::disconnectCallbackFromType(kMIDIType)>:
_ZN10MIDI_Class26disconnectCallbackFromTypeE9kMIDIType():
    7b8c:	61 3f       	cpi	r22, 0xF1	; 241
    7b8e:	71 05       	cpc	r23, r1
    7b90:	09 f4       	brne	.+2      	; 0x7b94 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x8>
    7b92:	55 c0       	rjmp	.+170    	; 0x7c3e <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xb2>
    7b94:	38 f5       	brcc	.+78     	; 0x7be4 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x58>
    7b96:	60 3b       	cpi	r22, 0xB0	; 176
    7b98:	71 05       	cpc	r23, r1
    7b9a:	09 f4       	brne	.+2      	; 0x7b9e <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x12>
    7b9c:	47 c0       	rjmp	.+142    	; 0x7c2c <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xa0>
    7b9e:	78 f4       	brcc	.+30     	; 0x7bbe <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x32>
    7ba0:	60 39       	cpi	r22, 0x90	; 144
    7ba2:	71 05       	cpc	r23, r1
    7ba4:	e9 f1       	breq	.+122    	; 0x7c20 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x94>
    7ba6:	60 3a       	cpi	r22, 0xA0	; 160
    7ba8:	71 05       	cpc	r23, r1
    7baa:	e9 f1       	breq	.+122    	; 0x7c26 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x9a>
    7bac:	60 38       	cpi	r22, 0x80	; 128
    7bae:	71 05       	cpc	r23, r1
    7bb0:	29 f4       	brne	.+10     	; 0x7bbc <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x30>
    7bb2:	85 5f       	subi	r24, 0xF5	; 245
    7bb4:	9d 4f       	sbci	r25, 0xFD	; 253
    7bb6:	fc 01       	movw	r30, r24
    7bb8:	11 82       	std	Z+1, r1	; 0x01
    7bba:	10 82       	st	Z, r1
    7bbc:	08 95       	ret
    7bbe:	60 3d       	cpi	r22, 0xD0	; 208
    7bc0:	71 05       	cpc	r23, r1
    7bc2:	b9 f1       	breq	.+110    	; 0x7c32 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xa6>
    7bc4:	30 f4       	brcc	.+12     	; 0x7bd2 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x46>
    7bc6:	8d 5e       	subi	r24, 0xED	; 237
    7bc8:	9d 4f       	sbci	r25, 0xFD	; 253
    7bca:	60 3c       	cpi	r22, 0xC0	; 192
    7bcc:	71 05       	cpc	r23, r1
    7bce:	99 f3       	breq	.-26     	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7bd0:	08 95       	ret
    7bd2:	60 3e       	cpi	r22, 0xE0	; 224
    7bd4:	71 05       	cpc	r23, r1
    7bd6:	81 f1       	breq	.+96     	; 0x7c38 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xac>
    7bd8:	87 5e       	subi	r24, 0xE7	; 231
    7bda:	9d 4f       	sbci	r25, 0xFD	; 253
    7bdc:	60 3f       	cpi	r22, 0xF0	; 240
    7bde:	71 05       	cpc	r23, r1
    7be0:	51 f3       	breq	.-44     	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7be2:	08 95       	ret
    7be4:	6a 3f       	cpi	r22, 0xFA	; 250
    7be6:	71 05       	cpc	r23, r1
    7be8:	b1 f1       	breq	.+108    	; 0x7c56 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xca>
    7bea:	68 f4       	brcc	.+26     	; 0x7c06 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x7a>
    7bec:	63 3f       	cpi	r22, 0xF3	; 243
    7bee:	71 05       	cpc	r23, r1
    7bf0:	61 f1       	breq	.+88     	; 0x7c4a <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xbe>
    7bf2:	40 f1       	brcs	.+80     	; 0x7c44 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xb8>
    7bf4:	66 3f       	cpi	r22, 0xF6	; 246
    7bf6:	71 05       	cpc	r23, r1
    7bf8:	59 f1       	breq	.+86     	; 0x7c50 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xc4>
    7bfa:	8d 5d       	subi	r24, 0xDD	; 221
    7bfc:	9d 4f       	sbci	r25, 0xFD	; 253
    7bfe:	68 3f       	cpi	r22, 0xF8	; 248
    7c00:	71 05       	cpc	r23, r1
    7c02:	c9 f2       	breq	.-78     	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c04:	08 95       	ret
    7c06:	6c 3f       	cpi	r22, 0xFC	; 252
    7c08:	71 05       	cpc	r23, r1
    7c0a:	59 f1       	breq	.+86     	; 0x7c62 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xd6>
    7c0c:	38 f1       	brcs	.+78     	; 0x7c5c <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xd0>
    7c0e:	6e 3f       	cpi	r22, 0xFE	; 254
    7c10:	71 05       	cpc	r23, r1
    7c12:	51 f1       	breq	.+84     	; 0x7c68 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0xdc>
    7c14:	83 5d       	subi	r24, 0xD3	; 211
    7c16:	9d 4f       	sbci	r25, 0xFD	; 253
    7c18:	6f 3f       	cpi	r22, 0xFF	; 255
    7c1a:	71 05       	cpc	r23, r1
    7c1c:	61 f2       	breq	.-104    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c1e:	08 95       	ret
    7c20:	83 5f       	subi	r24, 0xF3	; 243
    7c22:	9d 4f       	sbci	r25, 0xFD	; 253
    7c24:	c8 cf       	rjmp	.-112    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c26:	81 5f       	subi	r24, 0xF1	; 241
    7c28:	9d 4f       	sbci	r25, 0xFD	; 253
    7c2a:	c5 cf       	rjmp	.-118    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c2c:	8f 5e       	subi	r24, 0xEF	; 239
    7c2e:	9d 4f       	sbci	r25, 0xFD	; 253
    7c30:	c2 cf       	rjmp	.-124    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c32:	8b 5e       	subi	r24, 0xEB	; 235
    7c34:	9d 4f       	sbci	r25, 0xFD	; 253
    7c36:	bf cf       	rjmp	.-130    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c38:	89 5e       	subi	r24, 0xE9	; 233
    7c3a:	9d 4f       	sbci	r25, 0xFD	; 253
    7c3c:	bc cf       	rjmp	.-136    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c3e:	85 5e       	subi	r24, 0xE5	; 229
    7c40:	9d 4f       	sbci	r25, 0xFD	; 253
    7c42:	b9 cf       	rjmp	.-142    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c44:	83 5e       	subi	r24, 0xE3	; 227
    7c46:	9d 4f       	sbci	r25, 0xFD	; 253
    7c48:	b6 cf       	rjmp	.-148    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c4a:	81 5e       	subi	r24, 0xE1	; 225
    7c4c:	9d 4f       	sbci	r25, 0xFD	; 253
    7c4e:	b3 cf       	rjmp	.-154    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c50:	8f 5d       	subi	r24, 0xDF	; 223
    7c52:	9d 4f       	sbci	r25, 0xFD	; 253
    7c54:	b0 cf       	rjmp	.-160    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c56:	8b 5d       	subi	r24, 0xDB	; 219
    7c58:	9d 4f       	sbci	r25, 0xFD	; 253
    7c5a:	ad cf       	rjmp	.-166    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c5c:	89 5d       	subi	r24, 0xD9	; 217
    7c5e:	9d 4f       	sbci	r25, 0xFD	; 253
    7c60:	aa cf       	rjmp	.-172    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c62:	87 5d       	subi	r24, 0xD7	; 215
    7c64:	9d 4f       	sbci	r25, 0xFD	; 253
    7c66:	a7 cf       	rjmp	.-178    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>
    7c68:	85 5d       	subi	r24, 0xD5	; 213
    7c6a:	9d 4f       	sbci	r25, 0xFD	; 253
    7c6c:	a4 cf       	rjmp	.-184    	; 0x7bb6 <MIDI_Class::disconnectCallbackFromType(kMIDIType)+0x2a>

00007c6e <MIDI_Class::launchCallback()>:
_ZN10MIDI_Class14launchCallbackEv():
    7c6e:	cf 93       	push	r28
    7c70:	df 93       	push	r29
    7c72:	fc 01       	movw	r30, r24
    7c74:	e9 5f       	subi	r30, 0xF9	; 249
    7c76:	fe 4f       	sbci	r31, 0xFE	; 254
    7c78:	20 81       	ld	r18, Z
    7c7a:	31 81       	ldd	r19, Z+1	; 0x01
    7c7c:	21 3f       	cpi	r18, 0xF1	; 241
    7c7e:	31 05       	cpc	r19, r1
    7c80:	09 f4       	brne	.+2      	; 0x7c84 <MIDI_Class::launchCallback()+0x16>
    7c82:	c5 c0       	rjmp	.+394    	; 0x7e0e <MIDI_Class::launchCallback()+0x1a0>
    7c84:	08 f0       	brcs	.+2      	; 0x7c88 <MIDI_Class::launchCallback()+0x1a>
    7c86:	4e c0       	rjmp	.+156    	; 0x7d24 <MIDI_Class::launchCallback()+0xb6>
    7c88:	20 3b       	cpi	r18, 0xB0	; 176
    7c8a:	31 05       	cpc	r19, r1
    7c8c:	09 f4       	brne	.+2      	; 0x7c90 <MIDI_Class::launchCallback()+0x22>
    7c8e:	82 c0       	rjmp	.+260    	; 0x7d94 <MIDI_Class::launchCallback()+0x126>
    7c90:	10 f5       	brcc	.+68     	; 0x7cd6 <MIDI_Class::launchCallback()+0x68>
    7c92:	20 39       	cpi	r18, 0x90	; 144
    7c94:	31 05       	cpc	r19, r1
    7c96:	09 f4       	brne	.+2      	; 0x7c9a <MIDI_Class::launchCallback()+0x2c>
    7c98:	6d c0       	rjmp	.+218    	; 0x7d74 <MIDI_Class::launchCallback()+0x106>
    7c9a:	20 3a       	cpi	r18, 0xA0	; 160
    7c9c:	31 05       	cpc	r19, r1
    7c9e:	09 f4       	brne	.+2      	; 0x7ca2 <MIDI_Class::launchCallback()+0x34>
    7ca0:	9e c0       	rjmp	.+316    	; 0x7dde <MIDI_Class::launchCallback()+0x170>
    7ca2:	20 38       	cpi	r18, 0x80	; 128
    7ca4:	31 05       	cpc	r19, r1
    7ca6:	19 f5       	brne	.+70     	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7ca8:	fc 01       	movw	r30, r24
    7caa:	e5 5f       	subi	r30, 0xF5	; 245
    7cac:	fd 4f       	sbci	r31, 0xFD	; 253
    7cae:	01 90       	ld	r0, Z+
    7cb0:	f0 81       	ld	r31, Z
    7cb2:	e0 2d       	mov	r30, r0
    7cb4:	30 97       	sbiw	r30, 0x00	; 0
    7cb6:	d9 f0       	breq	.+54     	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7cb8:	ec 01       	movw	r28, r24
    7cba:	c6 5f       	subi	r28, 0xF6	; 246
    7cbc:	de 4f       	sbci	r29, 0xFE	; 254
    7cbe:	dc 01       	movw	r26, r24
    7cc0:	a7 5f       	subi	r26, 0xF7	; 247
    7cc2:	be 4f       	sbci	r27, 0xFE	; 254
    7cc4:	8a 5f       	subi	r24, 0xFA	; 250
    7cc6:	9e 4f       	sbci	r25, 0xFE	; 254
    7cc8:	48 81       	ld	r20, Y
    7cca:	6c 91       	ld	r22, X
    7ccc:	dc 01       	movw	r26, r24
    7cce:	8c 91       	ld	r24, X
    7cd0:	df 91       	pop	r29
    7cd2:	cf 91       	pop	r28
    7cd4:	09 94       	ijmp
    7cd6:	20 3d       	cpi	r18, 0xD0	; 208
    7cd8:	31 05       	cpc	r19, r1
    7cda:	09 f4       	brne	.+2      	; 0x7cde <MIDI_Class::launchCallback()+0x70>
    7cdc:	84 c0       	rjmp	.+264    	; 0x7de6 <MIDI_Class::launchCallback()+0x178>
    7cde:	50 f4       	brcc	.+20     	; 0x7cf4 <MIDI_Class::launchCallback()+0x86>
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	ed 5e       	subi	r30, 0xED	; 237
    7ce4:	fd 4f       	sbci	r31, 0xFD	; 253
    7ce6:	20 3c       	cpi	r18, 0xC0	; 192
    7ce8:	31 05       	cpc	r19, r1
    7cea:	09 f4       	brne	.+2      	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7cec:	7f c0       	rjmp	.+254    	; 0x7dec <MIDI_Class::launchCallback()+0x17e>
    7cee:	df 91       	pop	r29
    7cf0:	cf 91       	pop	r28
    7cf2:	08 95       	ret
    7cf4:	20 3e       	cpi	r18, 0xE0	; 224
    7cf6:	31 05       	cpc	r19, r1
    7cf8:	09 f4       	brne	.+2      	; 0x7cfc <MIDI_Class::launchCallback()+0x8e>
    7cfa:	50 c0       	rjmp	.+160    	; 0x7d9c <MIDI_Class::launchCallback()+0x12e>
    7cfc:	20 3f       	cpi	r18, 0xF0	; 240
    7cfe:	31 05       	cpc	r19, r1
    7d00:	b1 f7       	brne	.-20     	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7d02:	fc 01       	movw	r30, r24
    7d04:	e7 5e       	subi	r30, 0xE7	; 231
    7d06:	fd 4f       	sbci	r31, 0xFD	; 253
    7d08:	01 90       	ld	r0, Z+
    7d0a:	f0 81       	ld	r31, Z
    7d0c:	e0 2d       	mov	r30, r0
    7d0e:	30 97       	sbiw	r30, 0x00	; 0
    7d10:	71 f3       	breq	.-36     	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7d12:	dc 01       	movw	r26, r24
    7d14:	a7 5f       	subi	r26, 0xF7	; 247
    7d16:	be 4f       	sbci	r27, 0xFE	; 254
    7d18:	6c 91       	ld	r22, X
    7d1a:	85 5f       	subi	r24, 0xF5	; 245
    7d1c:	9e 4f       	sbci	r25, 0xFE	; 254
    7d1e:	df 91       	pop	r29
    7d20:	cf 91       	pop	r28
    7d22:	09 94       	ijmp
    7d24:	2a 3f       	cpi	r18, 0xFA	; 250
    7d26:	31 05       	cpc	r19, r1
    7d28:	49 f1       	breq	.+82     	; 0x7d7c <MIDI_Class::launchCallback()+0x10e>
    7d2a:	b8 f4       	brcc	.+46     	; 0x7d5a <MIDI_Class::launchCallback()+0xec>
    7d2c:	23 3f       	cpi	r18, 0xF3	; 243
    7d2e:	31 05       	cpc	r19, r1
    7d30:	09 f4       	brne	.+2      	; 0x7d34 <MIDI_Class::launchCallback()+0xc6>
    7d32:	9b c0       	rjmp	.+310    	; 0x7e6a <MIDI_Class::launchCallback()+0x1fc>
    7d34:	08 f4       	brcc	.+2      	; 0x7d38 <MIDI_Class::launchCallback()+0xca>
    7d36:	7b c0       	rjmp	.+246    	; 0x7e2e <MIDI_Class::launchCallback()+0x1c0>
    7d38:	26 3f       	cpi	r18, 0xF6	; 246
    7d3a:	31 05       	cpc	r19, r1
    7d3c:	09 f4       	brne	.+2      	; 0x7d40 <MIDI_Class::launchCallback()+0xd2>
    7d3e:	99 c0       	rjmp	.+306    	; 0x7e72 <MIDI_Class::launchCallback()+0x204>
    7d40:	8d 5d       	subi	r24, 0xDD	; 221
    7d42:	9d 4f       	sbci	r25, 0xFD	; 253
    7d44:	28 3f       	cpi	r18, 0xF8	; 248
    7d46:	31 05       	cpc	r19, r1
    7d48:	91 f6       	brne	.-92     	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7d4a:	dc 01       	movw	r26, r24
    7d4c:	ed 91       	ld	r30, X+
    7d4e:	fc 91       	ld	r31, X
    7d50:	30 97       	sbiw	r30, 0x00	; 0
    7d52:	69 f2       	breq	.-102    	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7d54:	df 91       	pop	r29
    7d56:	cf 91       	pop	r28
    7d58:	09 94       	ijmp
    7d5a:	2c 3f       	cpi	r18, 0xFC	; 252
    7d5c:	31 05       	cpc	r19, r1
    7d5e:	a1 f0       	breq	.+40     	; 0x7d88 <MIDI_Class::launchCallback()+0x11a>
    7d60:	80 f0       	brcs	.+32     	; 0x7d82 <MIDI_Class::launchCallback()+0x114>
    7d62:	2e 3f       	cpi	r18, 0xFE	; 254
    7d64:	31 05       	cpc	r19, r1
    7d66:	99 f0       	breq	.+38     	; 0x7d8e <MIDI_Class::launchCallback()+0x120>
    7d68:	83 5d       	subi	r24, 0xD3	; 211
    7d6a:	9d 4f       	sbci	r25, 0xFD	; 253
    7d6c:	2f 3f       	cpi	r18, 0xFF	; 255
    7d6e:	31 05       	cpc	r19, r1
    7d70:	61 f3       	breq	.-40     	; 0x7d4a <MIDI_Class::launchCallback()+0xdc>
    7d72:	bd cf       	rjmp	.-134    	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7d74:	fc 01       	movw	r30, r24
    7d76:	e3 5f       	subi	r30, 0xF3	; 243
    7d78:	fd 4f       	sbci	r31, 0xFD	; 253
    7d7a:	99 cf       	rjmp	.-206    	; 0x7cae <MIDI_Class::launchCallback()+0x40>
    7d7c:	8b 5d       	subi	r24, 0xDB	; 219
    7d7e:	9d 4f       	sbci	r25, 0xFD	; 253
    7d80:	e4 cf       	rjmp	.-56     	; 0x7d4a <MIDI_Class::launchCallback()+0xdc>
    7d82:	89 5d       	subi	r24, 0xD9	; 217
    7d84:	9d 4f       	sbci	r25, 0xFD	; 253
    7d86:	e1 cf       	rjmp	.-62     	; 0x7d4a <MIDI_Class::launchCallback()+0xdc>
    7d88:	87 5d       	subi	r24, 0xD7	; 215
    7d8a:	9d 4f       	sbci	r25, 0xFD	; 253
    7d8c:	de cf       	rjmp	.-68     	; 0x7d4a <MIDI_Class::launchCallback()+0xdc>
    7d8e:	85 5d       	subi	r24, 0xD5	; 213
    7d90:	9d 4f       	sbci	r25, 0xFD	; 253
    7d92:	db cf       	rjmp	.-74     	; 0x7d4a <MIDI_Class::launchCallback()+0xdc>
    7d94:	fc 01       	movw	r30, r24
    7d96:	ef 5e       	subi	r30, 0xEF	; 239
    7d98:	fd 4f       	sbci	r31, 0xFD	; 253
    7d9a:	89 cf       	rjmp	.-238    	; 0x7cae <MIDI_Class::launchCallback()+0x40>
    7d9c:	fc 01       	movw	r30, r24
    7d9e:	e9 5e       	subi	r30, 0xE9	; 233
    7da0:	fd 4f       	sbci	r31, 0xFD	; 253
    7da2:	01 90       	ld	r0, Z+
    7da4:	f0 81       	ld	r31, Z
    7da6:	e0 2d       	mov	r30, r0
    7da8:	30 97       	sbiw	r30, 0x00	; 0
    7daa:	09 f4       	brne	.+2      	; 0x7dae <MIDI_Class::launchCallback()+0x140>
    7dac:	a0 cf       	rjmp	.-192    	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7dae:	dc 01       	movw	r26, r24
    7db0:	a6 5f       	subi	r26, 0xF6	; 246
    7db2:	be 4f       	sbci	r27, 0xFE	; 254
    7db4:	6c 91       	ld	r22, X
    7db6:	b0 e8       	ldi	r27, 0x80	; 128
    7db8:	6b 9f       	mul	r22, r27
    7dba:	b0 01       	movw	r22, r0
    7dbc:	11 24       	eor	r1, r1
    7dbe:	60 78       	andi	r22, 0x80	; 128
    7dc0:	7f 73       	andi	r23, 0x3F	; 63
    7dc2:	dc 01       	movw	r26, r24
    7dc4:	a7 5f       	subi	r26, 0xF7	; 247
    7dc6:	be 4f       	sbci	r27, 0xFE	; 254
    7dc8:	2c 91       	ld	r18, X
    7dca:	2f 77       	andi	r18, 0x7F	; 127
    7dcc:	62 2b       	or	r22, r18
    7dce:	70 52       	subi	r23, 0x20	; 32
    7dd0:	8a 5f       	subi	r24, 0xFA	; 250
    7dd2:	9e 4f       	sbci	r25, 0xFE	; 254
    7dd4:	dc 01       	movw	r26, r24
    7dd6:	8c 91       	ld	r24, X
    7dd8:	df 91       	pop	r29
    7dda:	cf 91       	pop	r28
    7ddc:	09 94       	ijmp
    7dde:	fc 01       	movw	r30, r24
    7de0:	e1 5f       	subi	r30, 0xF1	; 241
    7de2:	fd 4f       	sbci	r31, 0xFD	; 253
    7de4:	64 cf       	rjmp	.-312    	; 0x7cae <MIDI_Class::launchCallback()+0x40>
    7de6:	fc 01       	movw	r30, r24
    7de8:	eb 5e       	subi	r30, 0xEB	; 235
    7dea:	fd 4f       	sbci	r31, 0xFD	; 253
    7dec:	01 90       	ld	r0, Z+
    7dee:	f0 81       	ld	r31, Z
    7df0:	e0 2d       	mov	r30, r0
    7df2:	30 97       	sbiw	r30, 0x00	; 0
    7df4:	09 f4       	brne	.+2      	; 0x7df8 <MIDI_Class::launchCallback()+0x18a>
    7df6:	7b cf       	rjmp	.-266    	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7df8:	dc 01       	movw	r26, r24
    7dfa:	a7 5f       	subi	r26, 0xF7	; 247
    7dfc:	be 4f       	sbci	r27, 0xFE	; 254
    7dfe:	8a 5f       	subi	r24, 0xFA	; 250
    7e00:	9e 4f       	sbci	r25, 0xFE	; 254
    7e02:	6c 91       	ld	r22, X
    7e04:	dc 01       	movw	r26, r24
    7e06:	8c 91       	ld	r24, X
    7e08:	df 91       	pop	r29
    7e0a:	cf 91       	pop	r28
    7e0c:	09 94       	ijmp
    7e0e:	fc 01       	movw	r30, r24
    7e10:	e5 5e       	subi	r30, 0xE5	; 229
    7e12:	fd 4f       	sbci	r31, 0xFD	; 253
    7e14:	01 90       	ld	r0, Z+
    7e16:	f0 81       	ld	r31, Z
    7e18:	e0 2d       	mov	r30, r0
    7e1a:	30 97       	sbiw	r30, 0x00	; 0
    7e1c:	09 f4       	brne	.+2      	; 0x7e20 <MIDI_Class::launchCallback()+0x1b2>
    7e1e:	67 cf       	rjmp	.-306    	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7e20:	87 5f       	subi	r24, 0xF7	; 247
    7e22:	9e 4f       	sbci	r25, 0xFE	; 254
    7e24:	dc 01       	movw	r26, r24
    7e26:	8c 91       	ld	r24, X
    7e28:	df 91       	pop	r29
    7e2a:	cf 91       	pop	r28
    7e2c:	09 94       	ijmp
    7e2e:	fc 01       	movw	r30, r24
    7e30:	e3 5e       	subi	r30, 0xE3	; 227
    7e32:	fd 4f       	sbci	r31, 0xFD	; 253
    7e34:	01 90       	ld	r0, Z+
    7e36:	f0 81       	ld	r31, Z
    7e38:	e0 2d       	mov	r30, r0
    7e3a:	30 97       	sbiw	r30, 0x00	; 0
    7e3c:	09 f4       	brne	.+2      	; 0x7e40 <MIDI_Class::launchCallback()+0x1d2>
    7e3e:	57 cf       	rjmp	.-338    	; 0x7cee <MIDI_Class::launchCallback()+0x80>
    7e40:	dc 01       	movw	r26, r24
    7e42:	a6 5f       	subi	r26, 0xF6	; 246
    7e44:	be 4f       	sbci	r27, 0xFE	; 254
    7e46:	2c 91       	ld	r18, X
    7e48:	b0 e8       	ldi	r27, 0x80	; 128
    7e4a:	2b 9f       	mul	r18, r27
    7e4c:	90 01       	movw	r18, r0
    7e4e:	11 24       	eor	r1, r1
    7e50:	20 78       	andi	r18, 0x80	; 128
    7e52:	3f 73       	andi	r19, 0x3F	; 63
    7e54:	87 5f       	subi	r24, 0xF7	; 247
    7e56:	9e 4f       	sbci	r25, 0xFE	; 254
    7e58:	dc 01       	movw	r26, r24
    7e5a:	8c 91       	ld	r24, X
    7e5c:	8f 77       	andi	r24, 0x7F	; 127
    7e5e:	a9 01       	movw	r20, r18
    7e60:	48 2b       	or	r20, r24
    7e62:	ca 01       	movw	r24, r20
    7e64:	df 91       	pop	r29
    7e66:	cf 91       	pop	r28
    7e68:	09 94       	ijmp
    7e6a:	fc 01       	movw	r30, r24
    7e6c:	e1 5e       	subi	r30, 0xE1	; 225
    7e6e:	fd 4f       	sbci	r31, 0xFD	; 253
    7e70:	d1 cf       	rjmp	.-94     	; 0x7e14 <MIDI_Class::launchCallback()+0x1a6>
    7e72:	8f 5d       	subi	r24, 0xDF	; 223
    7e74:	9d 4f       	sbci	r25, 0xFD	; 253
    7e76:	69 cf       	rjmp	.-302    	; 0x7d4a <MIDI_Class::launchCallback()+0xdc>

00007e78 <MIDI_Class::turnThruOff()>:
_ZN10MIDI_Class11turnThruOffEv():
    7e78:	fc 01       	movw	r30, r24
    7e7a:	e1 5d       	subi	r30, 0xD1	; 209
    7e7c:	fd 4f       	sbci	r31, 0xFD	; 253
    7e7e:	10 82       	st	Z, r1
    7e80:	80 5d       	subi	r24, 0xD0	; 208
    7e82:	9d 4f       	sbci	r25, 0xFD	; 253
    7e84:	fc 01       	movw	r30, r24
    7e86:	11 82       	std	Z+1, r1	; 0x01
    7e88:	10 82       	st	Z, r1
    7e8a:	08 95       	ret

00007e8c <_GLOBAL__sub_I_MIDI>:
_GLOBAL__sub_I_MIDI():
    7e8c:	8b e1       	ldi	r24, 0x1B	; 27
    7e8e:	90 e2       	ldi	r25, 0x20	; 32
    7e90:	0c 94 15 3d 	jmp	0x7a2a	; 0x7a2a <MIDI_Class::MIDI_Class()>

00007e94 <MIDI_Class::sendTimeCodeQuarterFrame(unsigned char)>:
_ZN10MIDI_Class24sendTimeCodeQuarterFrameEh():
    7e94:	1f 93       	push	r17
    7e96:	cf 93       	push	r28
    7e98:	df 93       	push	r29
    7e9a:	ec 01       	movw	r28, r24
    7e9c:	16 2f       	mov	r17, r22
    7e9e:	61 ef       	ldi	r22, 0xF1	; 241
    7ea0:	8a eb       	ldi	r24, 0xBA	; 186
    7ea2:	93 e2       	ldi	r25, 0x23	; 35
    7ea4:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
    7ea8:	61 2f       	mov	r22, r17
    7eaa:	8a eb       	ldi	r24, 0xBA	; 186
    7eac:	93 e2       	ldi	r25, 0x23	; 35
    7eae:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
    7eb2:	18 82       	st	Y, r1
    7eb4:	df 91       	pop	r29
    7eb6:	cf 91       	pop	r28
    7eb8:	1f 91       	pop	r17
    7eba:	08 95       	ret

00007ebc <MIDI_Class::sendTimeCodeQuarterFrame(unsigned char, unsigned char)>:
_ZN10MIDI_Class24sendTimeCodeQuarterFrameEhh():
    7ebc:	20 e1       	ldi	r18, 0x10	; 16
    7ebe:	62 9f       	mul	r22, r18
    7ec0:	b0 01       	movw	r22, r0
    7ec2:	11 24       	eor	r1, r1
    7ec4:	60 77       	andi	r22, 0x70	; 112
    7ec6:	4f 70       	andi	r20, 0x0F	; 15
    7ec8:	64 2b       	or	r22, r20
    7eca:	0c 94 4a 3f 	jmp	0x7e94	; 0x7e94 <MIDI_Class::sendTimeCodeQuarterFrame(unsigned char)>

00007ece <MIDI_Class::sendRealTime(kMIDIType)>:
_ZN10MIDI_Class12sendRealTimeE9kMIDIType():
    7ece:	0f 93       	push	r16
    7ed0:	1f 93       	push	r17
    7ed2:	cf 93       	push	r28
    7ed4:	df 93       	push	r29
    7ed6:	8c 01       	movw	r16, r24
    7ed8:	eb 01       	movw	r28, r22
    7eda:	6d 3f       	cpi	r22, 0xFD	; 253
    7edc:	71 05       	cpc	r23, r1
    7ede:	78 f4       	brcc	.+30     	; 0x7efe <MIDI_Class::sendRealTime(kMIDIType)+0x30>
    7ee0:	6a 3f       	cpi	r22, 0xFA	; 250
    7ee2:	71 05       	cpc	r23, r1
    7ee4:	30 f4       	brcc	.+12     	; 0x7ef2 <MIDI_Class::sendRealTime(kMIDIType)+0x24>
    7ee6:	66 3f       	cpi	r22, 0xF6	; 246
    7ee8:	71 05       	cpc	r23, r1
    7eea:	19 f0       	breq	.+6      	; 0x7ef2 <MIDI_Class::sendRealTime(kMIDIType)+0x24>
    7eec:	68 3f       	cpi	r22, 0xF8	; 248
    7eee:	71 05       	cpc	r23, r1
    7ef0:	59 f4       	brne	.+22     	; 0x7f08 <MIDI_Class::sendRealTime(kMIDIType)+0x3a>
    7ef2:	6c 2f       	mov	r22, r28
    7ef4:	8a eb       	ldi	r24, 0xBA	; 186
    7ef6:	93 e2       	ldi	r25, 0x23	; 35
    7ef8:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
    7efc:	05 c0       	rjmp	.+10     	; 0x7f08 <MIDI_Class::sendRealTime(kMIDIType)+0x3a>
    7efe:	cb 01       	movw	r24, r22
    7f00:	8e 5f       	subi	r24, 0xFE	; 254
    7f02:	91 09       	sbc	r25, r1
    7f04:	02 97       	sbiw	r24, 0x02	; 2
    7f06:	a8 f3       	brcs	.-22     	; 0x7ef2 <MIDI_Class::sendRealTime(kMIDIType)+0x24>
    7f08:	c6 3f       	cpi	r28, 0xF6	; 246
    7f0a:	d1 05       	cpc	r29, r1
    7f0c:	11 f4       	brne	.+4      	; 0x7f12 <MIDI_Class::sendRealTime(kMIDIType)+0x44>
    7f0e:	f8 01       	movw	r30, r16
    7f10:	10 82       	st	Z, r1
    7f12:	df 91       	pop	r29
    7f14:	cf 91       	pop	r28
    7f16:	1f 91       	pop	r17
    7f18:	0f 91       	pop	r16
    7f1a:	08 95       	ret

00007f1c <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)>:
_ZN10MIDI_Class4sendE9kMIDITypehhh():
    7f1c:	ff 92       	push	r15
    7f1e:	0f 93       	push	r16
    7f20:	1f 93       	push	r17
    7f22:	cf 93       	push	r28
    7f24:	df 93       	push	r29
    7f26:	01 50       	subi	r16, 0x01	; 1
    7f28:	00 31       	cpi	r16, 0x10	; 16
    7f2a:	18 f4       	brcc	.+6      	; 0x7f32 <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)+0x16>
    7f2c:	60 38       	cpi	r22, 0x80	; 128
    7f2e:	71 05       	cpc	r23, r1
    7f30:	44 f4       	brge	.+16     	; 0x7f42 <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)+0x26>
    7f32:	fc 01       	movw	r30, r24
    7f34:	10 82       	st	Z, r1
    7f36:	df 91       	pop	r29
    7f38:	cf 91       	pop	r28
    7f3a:	1f 91       	pop	r17
    7f3c:	0f 91       	pop	r16
    7f3e:	ff 90       	pop	r15
    7f40:	08 95       	ret
    7f42:	61 3e       	cpi	r22, 0xE1	; 225
    7f44:	71 05       	cpc	r23, r1
    7f46:	1c f5       	brge	.+70     	; 0x7f8e <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)+0x72>
    7f48:	12 2f       	mov	r17, r18
    7f4a:	eb 01       	movw	r28, r22
    7f4c:	fc 01       	movw	r30, r24
    7f4e:	f4 2e       	mov	r15, r20
    7f50:	e8 94       	clt
    7f52:	f7 f8       	bld	r15, 7
_ZNK10MIDI_Class9genstatusE9kMIDITypeh():
    7f54:	60 2b       	or	r22, r16
_ZN10MIDI_Class4sendE9kMIDITypehhh():
    7f56:	80 81       	ld	r24, Z
    7f58:	86 17       	cp	r24, r22
    7f5a:	29 f0       	breq	.+10     	; 0x7f66 <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)+0x4a>
    7f5c:	60 83       	st	Z, r22
    7f5e:	8a eb       	ldi	r24, 0xBA	; 186
    7f60:	93 e2       	ldi	r25, 0x23	; 35
    7f62:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
    7f66:	6f 2d       	mov	r22, r15
    7f68:	8a eb       	ldi	r24, 0xBA	; 186
    7f6a:	93 e2       	ldi	r25, 0x23	; 35
    7f6c:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
    7f70:	cf 7e       	andi	r28, 0xEF	; 239
    7f72:	c0 3c       	cpi	r28, 0xC0	; 192
    7f74:	d1 05       	cpc	r29, r1
    7f76:	f9 f2       	breq	.-66     	; 0x7f36 <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)+0x1a>
    7f78:	61 2f       	mov	r22, r17
    7f7a:	6f 77       	andi	r22, 0x7F	; 127
    7f7c:	8a eb       	ldi	r24, 0xBA	; 186
    7f7e:	93 e2       	ldi	r25, 0x23	; 35
    7f80:	df 91       	pop	r29
    7f82:	cf 91       	pop	r28
    7f84:	1f 91       	pop	r17
    7f86:	0f 91       	pop	r16
    7f88:	ff 90       	pop	r15
    7f8a:	0c 94 f2 47 	jmp	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
    7f8e:	9b 01       	movw	r18, r22
    7f90:	26 5f       	subi	r18, 0xF6	; 246
    7f92:	31 09       	sbc	r19, r1
    7f94:	2a 30       	cpi	r18, 0x0A	; 10
    7f96:	31 05       	cpc	r19, r1
    7f98:	70 f6       	brcc	.-100    	; 0x7f36 <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)+0x1a>
    7f9a:	df 91       	pop	r29
    7f9c:	cf 91       	pop	r28
    7f9e:	1f 91       	pop	r17
    7fa0:	0f 91       	pop	r16
    7fa2:	ff 90       	pop	r15
    7fa4:	0c 94 67 3f 	jmp	0x7ece	; 0x7ece <MIDI_Class::sendRealTime(kMIDIType)>

00007fa8 <MIDI_Class::sendNoteOn(unsigned char, unsigned char, unsigned char)>:
_ZN10MIDI_Class10sendNoteOnEhhh():
    7fa8:	0f 93       	push	r16
    7faa:	02 2f       	mov	r16, r18
    7fac:	24 2f       	mov	r18, r20
    7fae:	46 2f       	mov	r20, r22
    7fb0:	60 e9       	ldi	r22, 0x90	; 144
    7fb2:	70 e0       	ldi	r23, 0x00	; 0
    7fb4:	0e 94 8e 3f 	call	0x7f1c	; 0x7f1c <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)>
    7fb8:	0f 91       	pop	r16
    7fba:	08 95       	ret

00007fbc <MIDI_Class::sendNoteOff(unsigned char, unsigned char, unsigned char)>:
_ZN10MIDI_Class11sendNoteOffEhhh():
    7fbc:	0f 93       	push	r16
    7fbe:	02 2f       	mov	r16, r18
    7fc0:	24 2f       	mov	r18, r20
    7fc2:	46 2f       	mov	r20, r22
    7fc4:	60 e8       	ldi	r22, 0x80	; 128
    7fc6:	70 e0       	ldi	r23, 0x00	; 0
    7fc8:	0e 94 8e 3f 	call	0x7f1c	; 0x7f1c <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)>
    7fcc:	0f 91       	pop	r16
    7fce:	08 95       	ret

00007fd0 <MIDI_Class::sendControlChange(unsigned char, unsigned char, unsigned char)>:
_ZN10MIDI_Class17sendControlChangeEhhh():
    7fd0:	0f 93       	push	r16
    7fd2:	02 2f       	mov	r16, r18
    7fd4:	24 2f       	mov	r18, r20
    7fd6:	46 2f       	mov	r20, r22
    7fd8:	60 eb       	ldi	r22, 0xB0	; 176
    7fda:	70 e0       	ldi	r23, 0x00	; 0
    7fdc:	0e 94 8e 3f 	call	0x7f1c	; 0x7f1c <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)>
    7fe0:	0f 91       	pop	r16
    7fe2:	08 95       	ret

00007fe4 <MIDI_Class::sendSongSelect(unsigned char)>:
_ZN10MIDI_Class14sendSongSelectEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:417
}


/*! \brief Send a Song Select message */
void MIDI_Class::sendSongSelect(byte SongNumber)
{
    7fe4:	0f 93       	push	r16
    7fe6:	1f 93       	push	r17
    7fe8:	cf 93       	push	r28
    7fea:	8c 01       	movw	r16, r24
    7fec:	c6 2f       	mov	r28, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:419
	
	USE_SERIAL_PORT.write((byte)SongSelect);
    7fee:	63 ef       	ldi	r22, 0xF3	; 243
    7ff0:	8a eb       	ldi	r24, 0xBA	; 186
    7ff2:	93 e2       	ldi	r25, 0x23	; 35
    7ff4:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
_ZN14HardwareSerial5writeEi():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    7ff8:	6c 2f       	mov	r22, r28
    7ffa:	6f 77       	andi	r22, 0x7F	; 127
    7ffc:	8a eb       	ldi	r24, 0xBA	; 186
    7ffe:	93 e2       	ldi	r25, 0x23	; 35
    8000:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
_ZN10MIDI_Class14sendSongSelectEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:423
	USE_SERIAL_PORT.write(SongNumber & 0x7F);

#if USE_RUNNING_STATUS
	mRunningStatus_TX = InvalidType;
    8004:	f8 01       	movw	r30, r16
    8006:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:426
#endif
	
}
    8008:	cf 91       	pop	r28
    800a:	1f 91       	pop	r17
    800c:	0f 91       	pop	r16
    800e:	08 95       	ret

00008010 <MIDI_Class::sendSongPosition(unsigned int)>:
_ZN10MIDI_Class16sendSongPositionEj():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:402

/*! \brief Send a Song Position Pointer message.
 \param Beats	The number of beats since the start of the song.
 */
void MIDI_Class::sendSongPosition(unsigned int Beats)
{
    8010:	0f 93       	push	r16
    8012:	1f 93       	push	r17
    8014:	cf 93       	push	r28
    8016:	df 93       	push	r29
    8018:	8c 01       	movw	r16, r24
    801a:	eb 01       	movw	r28, r22
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:404
	
	USE_SERIAL_PORT.write((byte)SongPosition);
    801c:	62 ef       	ldi	r22, 0xF2	; 242
    801e:	8a eb       	ldi	r24, 0xBA	; 186
    8020:	93 e2       	ldi	r25, 0x23	; 35
    8022:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:405
	USE_SERIAL_PORT.write(Beats & 0x7F);
    8026:	be 01       	movw	r22, r28
    8028:	6f 77       	andi	r22, 0x7F	; 127
    802a:	77 27       	eor	r23, r23
_ZN14HardwareSerial5writeEj():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.h:132
    virtual int availableForWrite(void);
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    802c:	8a eb       	ldi	r24, 0xBA	; 186
    802e:	93 e2       	ldi	r25, 0x23	; 35
    8030:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
_ZN10MIDI_Class16sendSongPositionEj():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:406
	USE_SERIAL_PORT.write((Beats >> 7) & 0x7F);
    8034:	be 01       	movw	r22, r28
    8036:	66 0f       	add	r22, r22
    8038:	67 2f       	mov	r22, r23
    803a:	66 1f       	adc	r22, r22
    803c:	77 0b       	sbc	r23, r23
    803e:	71 95       	neg	r23
    8040:	6f 77       	andi	r22, 0x7F	; 127
    8042:	77 27       	eor	r23, r23
_ZN14HardwareSerial5writeEj():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.h:132
    8044:	8a eb       	ldi	r24, 0xBA	; 186
    8046:	93 e2       	ldi	r25, 0x23	; 35
    8048:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
_ZN10MIDI_Class16sendSongPositionEj():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:409

#if USE_RUNNING_STATUS
	mRunningStatus_TX = InvalidType;
    804c:	f8 01       	movw	r30, r16
    804e:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:412
#endif
	
}
    8050:	df 91       	pop	r29
    8052:	cf 91       	pop	r28
    8054:	1f 91       	pop	r17
    8056:	0f 91       	pop	r16
    8058:	08 95       	ret

0000805a <MIDI_Class::sendSysEx(int, unsigned char const*, bool)>:
_ZN10MIDI_Class9sendSysExEiPKhb():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:321
 default value is set to 'false' for compatibility with previous versions of the library.
 */
void MIDI_Class::sendSysEx(int length,
						   const byte *const array,
						   bool ArrayContainsBoundaries)
{
    805a:	cf 92       	push	r12
    805c:	df 92       	push	r13
    805e:	ef 92       	push	r14
    8060:	ff 92       	push	r15
    8062:	0f 93       	push	r16
    8064:	1f 93       	push	r17
    8066:	cf 93       	push	r28
    8068:	df 93       	push	r29
    806a:	6c 01       	movw	r12, r24
    806c:	7b 01       	movw	r14, r22
    806e:	ea 01       	movw	r28, r20
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:323
	
	if (ArrayContainsBoundaries == false) {
    8070:	8a 01       	movw	r16, r20
    8072:	21 11       	cpse	r18, r1
    8074:	23 c0       	rjmp	.+70     	; 0x80bc <MIDI_Class::sendSysEx(int, unsigned char const*, bool)+0x62>
_ZN14HardwareSerial5writeEi():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.h:133
    inline size_t write(int n) { return write((uint8_t)n); }
    8076:	60 ef       	ldi	r22, 0xF0	; 240
    8078:	8a eb       	ldi	r24, 0xBA	; 186
    807a:	93 e2       	ldi	r25, 0x23	; 35
    807c:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
_ZN10MIDI_Class9sendSysExEiPKhb():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:327 (discriminator 3)
		
		USE_SERIAL_PORT.write(0xF0);
		
		for (int i=0;i<length;++i) {
    8080:	c8 01       	movw	r24, r16
    8082:	8c 1b       	sub	r24, r28
    8084:	9d 0b       	sbc	r25, r29
    8086:	8e 15       	cp	r24, r14
    8088:	9f 05       	cpc	r25, r15
    808a:	44 f4       	brge	.+16     	; 0x809c <MIDI_Class::sendSysEx(int, unsigned char const*, bool)+0x42>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:329 (discriminator 2)
			
			USE_SERIAL_PORT.write(array[i]);
    808c:	f8 01       	movw	r30, r16
    808e:	61 91       	ld	r22, Z+
    8090:	8f 01       	movw	r16, r30
    8092:	8a eb       	ldi	r24, 0xBA	; 186
    8094:	93 e2       	ldi	r25, 0x23	; 35
    8096:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:327 (discriminator 2)
	
	if (ArrayContainsBoundaries == false) {
		
		USE_SERIAL_PORT.write(0xF0);
		
		for (int i=0;i<length;++i) {
    809a:	f2 cf       	rjmp	.-28     	; 0x8080 <MIDI_Class::sendSysEx(int, unsigned char const*, bool)+0x26>
_ZN14HardwareSerial5writeEi():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.h:133
    809c:	67 ef       	ldi	r22, 0xF7	; 247
    809e:	8a eb       	ldi	r24, 0xBA	; 186
    80a0:	93 e2       	ldi	r25, 0x23	; 35
    80a2:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
_ZN10MIDI_Class9sendSysExEiPKhb():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:347
		}
		
	}
	
#if USE_RUNNING_STATUS
	mRunningStatus_TX = InvalidType;
    80a6:	f6 01       	movw	r30, r12
    80a8:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:350
#endif
	
}
    80aa:	df 91       	pop	r29
    80ac:	cf 91       	pop	r28
    80ae:	1f 91       	pop	r17
    80b0:	0f 91       	pop	r16
    80b2:	ff 90       	pop	r15
    80b4:	ef 90       	pop	r14
    80b6:	df 90       	pop	r13
    80b8:	cf 90       	pop	r12
    80ba:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:338 (discriminator 3)
		USE_SERIAL_PORT.write(0xF7);
		
	}
	else {
		
		for (int i=0;i<length;++i) {
    80bc:	c8 01       	movw	r24, r16
    80be:	8c 1b       	sub	r24, r28
    80c0:	9d 0b       	sbc	r25, r29
    80c2:	8e 15       	cp	r24, r14
    80c4:	9f 05       	cpc	r25, r15
    80c6:	7c f7       	brge	.-34     	; 0x80a6 <MIDI_Class::sendSysEx(int, unsigned char const*, bool)+0x4c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:340 (discriminator 2)
			
			USE_SERIAL_PORT.write(array[i]);
    80c8:	f8 01       	movw	r30, r16
    80ca:	61 91       	ld	r22, Z+
    80cc:	8f 01       	movw	r16, r30
    80ce:	8a eb       	ldi	r24, 0xBA	; 186
    80d0:	93 e2       	ldi	r25, 0x23	; 35
    80d2:	0e 94 f2 47 	call	0x8fe4	; 0x8fe4 <HardwareSerial::write(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:338 (discriminator 2)
		USE_SERIAL_PORT.write(0xF7);
		
	}
	else {
		
		for (int i=0;i<length;++i) {
    80d6:	f2 cf       	rjmp	.-28     	; 0x80bc <MIDI_Class::sendSysEx(int, unsigned char const*, bool)+0x62>

000080d8 <MIDI_Class::thru_filter(unsigned char)>:
_ZN10MIDI_Class11thru_filterEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1067
}


// This method is called upon reception of a message and takes care of Thru filtering and sending.
void MIDI_Class::thru_filter(byte inChannel)
{
    80d8:	0f 93       	push	r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1079
	 - Channel messages are passed to the output whether their channel is matching the input channel and the filter setting
	 
	 */
	
	// If the feature is disabled, don't do anything.
	if (!mThruActivated || (mThruFilterMode == Off)) return;
    80da:	fc 01       	movw	r30, r24
    80dc:	e1 5d       	subi	r30, 0xD1	; 209
    80de:	fd 4f       	sbci	r31, 0xFD	; 253
    80e0:	20 81       	ld	r18, Z
    80e2:	22 23       	and	r18, r18
    80e4:	51 f1       	breq	.+84     	; 0x813a <MIDI_Class::thru_filter(unsigned char)+0x62>
    80e6:	31 96       	adiw	r30, 0x01	; 1
    80e8:	20 81       	ld	r18, Z
    80ea:	31 81       	ldd	r19, Z+1	; 0x01
    80ec:	21 15       	cp	r18, r1
    80ee:	31 05       	cpc	r19, r1
    80f0:	21 f1       	breq	.+72     	; 0x813a <MIDI_Class::thru_filter(unsigned char)+0x62>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1083
	
	
	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
    80f2:	e9 52       	subi	r30, 0x29	; 41
    80f4:	f1 40       	sbci	r31, 0x01	; 1
    80f6:	60 81       	ld	r22, Z
    80f8:	71 81       	ldd	r23, Z+1	; 0x01
    80fa:	ab 01       	movw	r20, r22
    80fc:	40 58       	subi	r20, 0x80	; 128
    80fe:	51 09       	sbc	r21, r1
    8100:	41 36       	cpi	r20, 0x61	; 97
    8102:	51 05       	cpc	r21, r1
    8104:	e0 f4       	brcc	.+56     	; 0x813e <MIDI_Class::thru_filter(unsigned char)+0x66>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1085
		
		const bool filter_condition = ((mMessage.channel == mInputChannel) || (mInputChannel == MIDI_CHANNEL_OMNI));
    8106:	31 97       	sbiw	r30, 0x01	; 1
    8108:	00 81       	ld	r16, Z
    810a:	fc 01       	movw	r30, r24
    810c:	42 81       	ldd	r20, Z+2	; 0x02
    810e:	04 17       	cp	r16, r20
    8110:	09 f4       	brne	.+2      	; 0x8114 <MIDI_Class::thru_filter(unsigned char)+0x3c>
    8112:	60 c0       	rjmp	.+192    	; 0x81d4 <MIDI_Class::thru_filter(unsigned char)+0xfc>
    8114:	44 23       	and	r20, r20
    8116:	09 f4       	brne	.+2      	; 0x811a <MIDI_Class::thru_filter(unsigned char)+0x42>
    8118:	5d c0       	rjmp	.+186    	; 0x81d4 <MIDI_Class::thru_filter(unsigned char)+0xfc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1088
		
		// Now let's pass it to the output
		switch (mThruFilterMode) {
    811a:	21 30       	cpi	r18, 0x01	; 1
    811c:	31 05       	cpc	r19, r1
    811e:	19 f0       	breq	.+6      	; 0x8126 <MIDI_Class::thru_filter(unsigned char)+0x4e>
    8120:	23 30       	cpi	r18, 0x03	; 3
    8122:	31 05       	cpc	r19, r1
    8124:	51 f4       	brne	.+20     	; 0x813a <MIDI_Class::thru_filter(unsigned char)+0x62>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1101
					return;
				}
				break;
			case DifferentChannel:
				if (!filter_condition) {
					send(mMessage.type,mMessage.data1,mMessage.data2,mMessage.channel);
    8126:	dc 01       	movw	r26, r24
    8128:	a6 5f       	subi	r26, 0xF6	; 246
    812a:	be 4f       	sbci	r27, 0xFE	; 254
    812c:	fc 01       	movw	r30, r24
    812e:	e7 5f       	subi	r30, 0xF7	; 247
    8130:	fe 4f       	sbci	r31, 0xFE	; 254
    8132:	2c 91       	ld	r18, X
    8134:	40 81       	ld	r20, Z
    8136:	0e 94 8e 3f 	call	0x7f1c	; 0x7f1c <MIDI_Class::send(kMIDIType, unsigned char, unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1157
				
		}
		
	}
	
}
    813a:	0f 91       	pop	r16
    813c:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1117
		
	}
	else {
		
		// Send the message to the output
		switch (mMessage.type) {
    813e:	fb 01       	movw	r30, r22
    8140:	e0 5f       	subi	r30, 0xF0	; 240
    8142:	f1 09       	sbc	r31, r1
    8144:	e0 31       	cpi	r30, 0x10	; 16
    8146:	f1 05       	cpc	r31, r1
    8148:	c0 f7       	brcc	.-16     	; 0x813a <MIDI_Class::thru_filter(unsigned char)+0x62>
    814a:	e7 55       	subi	r30, 0x57	; 87
    814c:	ff 4b       	sbci	r31, 0xBF	; 191
    814e:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    8152:	bc 40       	sbci	r27, 0x0C	; 12
    8154:	df 40       	sbci	r29, 0x0F	; 15
    8156:	cf 40       	sbci	r28, 0x0F	; 15
    8158:	c8 40       	sbci	r28, 0x08	; 8
    815a:	9d 40       	sbci	r25, 0x0D	; 13
    815c:	9d 40       	sbci	r25, 0x0D	; 13
    815e:	b9 40       	sbci	r27, 0x09	; 9
    8160:	9d 40       	sbci	r25, 0x0D	; 13
    8162:	b9 40       	sbci	r27, 0x09	; 9
    8164:	9d 40       	sbci	r25, 0x0D	; 13
    8166:	b9 40       	sbci	r27, 0x09	; 9
    8168:	b9 40       	sbci	r27, 0x09	; 9
    816a:	b9 40       	sbci	r27, 0x09	; 9
    816c:	9d 40       	sbci	r25, 0x0D	; 13
    816e:	b9 40       	sbci	r27, 0x09	; 9
    8170:	b9 40       	sbci	r27, 0x09	; 9
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1157
				
		}
		
	}
	
}
    8172:	0f 91       	pop	r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1126
			case Stop:
			case Continue:
			case ActiveSensing:
			case SystemReset:
			case TuneRequest:	
				sendRealTime(mMessage.type);
    8174:	0c 94 67 3f 	jmp	0x7ece	; 0x7ece <MIDI_Class::sendRealTime(kMIDIType)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1132
				return;
				break;
				
			case SystemExclusive:
				// Send SysEx (0xF0 and 0xF7 are included in the buffer)
				sendSysEx(mMessage.data1,mMessage.sysex_array,true); 
    8178:	ac 01       	movw	r20, r24
    817a:	45 5f       	subi	r20, 0xF5	; 245
    817c:	5e 4f       	sbci	r21, 0xFE	; 254
    817e:	fc 01       	movw	r30, r24
    8180:	e7 5f       	subi	r30, 0xF7	; 247
    8182:	fe 4f       	sbci	r31, 0xFE	; 254
    8184:	60 81       	ld	r22, Z
    8186:	70 e0       	ldi	r23, 0x00	; 0
    8188:	21 e0       	ldi	r18, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1157
				
		}
		
	}
	
}
    818a:	0f 91       	pop	r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1132
				return;
				break;
				
			case SystemExclusive:
				// Send SysEx (0xF0 and 0xF7 are included in the buffer)
				sendSysEx(mMessage.data1,mMessage.sysex_array,true); 
    818c:	0c 94 2d 40 	jmp	0x805a	; 0x805a <MIDI_Class::sendSysEx(int, unsigned char const*, bool)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1137
				return;
				break;
				
			case SongSelect:
				sendSongSelect(mMessage.data1);
    8190:	fc 01       	movw	r30, r24
    8192:	e7 5f       	subi	r30, 0xF7	; 247
    8194:	fe 4f       	sbci	r31, 0xFE	; 254
    8196:	60 81       	ld	r22, Z
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1157
				
		}
		
	}
	
}
    8198:	0f 91       	pop	r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1137
				sendSysEx(mMessage.data1,mMessage.sysex_array,true); 
				return;
				break;
				
			case SongSelect:
				sendSongSelect(mMessage.data1);
    819a:	0c 94 f2 3f 	jmp	0x7fe4	; 0x7fe4 <MIDI_Class::sendSongSelect(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1142
				return;
				break;
				
			case SongPosition:
				sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2<<7));
    819e:	fc 01       	movw	r30, r24
    81a0:	e6 5f       	subi	r30, 0xF6	; 246
    81a2:	fe 4f       	sbci	r31, 0xFE	; 254
    81a4:	60 81       	ld	r22, Z
    81a6:	f0 e8       	ldi	r31, 0x80	; 128
    81a8:	6f 9f       	mul	r22, r31
    81aa:	b0 01       	movw	r22, r0
    81ac:	11 24       	eor	r1, r1
    81ae:	fc 01       	movw	r30, r24
    81b0:	e7 5f       	subi	r30, 0xF7	; 247
    81b2:	fe 4f       	sbci	r31, 0xFE	; 254
    81b4:	20 81       	ld	r18, Z
    81b6:	62 2b       	or	r22, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1157
				
		}
		
	}
	
}
    81b8:	0f 91       	pop	r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1142
				sendSongSelect(mMessage.data1);
				return;
				break;
				
			case SongPosition:
				sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2<<7));
    81ba:	0c 94 08 40 	jmp	0x8010	; 0x8010 <MIDI_Class::sendSongPosition(unsigned int)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1147
				return;
				break;
				
			case TimeCodeQuarterFrame:
				sendTimeCodeQuarterFrame(mMessage.data1,mMessage.data2);
    81be:	dc 01       	movw	r26, r24
    81c0:	a6 5f       	subi	r26, 0xF6	; 246
    81c2:	be 4f       	sbci	r27, 0xFE	; 254
    81c4:	fc 01       	movw	r30, r24
    81c6:	e7 5f       	subi	r30, 0xF7	; 247
    81c8:	fe 4f       	sbci	r31, 0xFE	; 254
    81ca:	4c 91       	ld	r20, X
    81cc:	60 81       	ld	r22, Z
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1157
				
		}
		
	}
	
}
    81ce:	0f 91       	pop	r16
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1147
				sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2<<7));
				return;
				break;
				
			case TimeCodeQuarterFrame:
				sendTimeCodeQuarterFrame(mMessage.data1,mMessage.data2);
    81d0:	0c 94 5e 3f 	jmp	0x7ebc	; 0x7ebc <MIDI_Class::sendTimeCodeQuarterFrame(unsigned char, unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:1088
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
		
		const bool filter_condition = ((mMessage.channel == mInputChannel) || (mInputChannel == MIDI_CHANNEL_OMNI));
		
		// Now let's pass it to the output
		switch (mThruFilterMode) {
    81d4:	21 50       	subi	r18, 0x01	; 1
    81d6:	31 09       	sbc	r19, r1
    81d8:	22 30       	cpi	r18, 0x02	; 2
    81da:	31 05       	cpc	r19, r1
    81dc:	08 f4       	brcc	.+2      	; 0x81e0 <MIDI_Class::thru_filter(unsigned char)+0x108>
    81de:	a3 cf       	rjmp	.-186    	; 0x8126 <MIDI_Class::thru_filter(unsigned char)+0x4e>
    81e0:	ac cf       	rjmp	.-168    	; 0x813a <MIDI_Class::thru_filter(unsigned char)+0x62>

000081e2 <MIDI_Class::parse(unsigned char)>:
_ZN10MIDI_Class5parseEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:510
}


// Private method: MIDI parser
bool MIDI_Class::parse(byte inChannel)
{ 
    81e2:	af 92       	push	r10
    81e4:	bf 92       	push	r11
    81e6:	cf 92       	push	r12
    81e8:	df 92       	push	r13
    81ea:	ef 92       	push	r14
    81ec:	ff 92       	push	r15
    81ee:	0f 93       	push	r16
    81f0:	1f 93       	push	r17
    81f2:	cf 93       	push	r28
    81f4:	df 93       	push	r29
    81f6:	ec 01       	movw	r28, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:512
	
	const int bytes_available = USE_SERIAL_PORT.available();
    81f8:	8a eb       	ldi	r24, 0xBA	; 186
    81fa:	93 e2       	ldi	r25, 0x23	; 35
    81fc:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <HardwareSerial::available()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:514
	
	if (bytes_available <= 0) {
    8200:	18 16       	cp	r1, r24
    8202:	19 06       	cpc	r1, r25
    8204:	3c f4       	brge	.+14     	; 0x8214 <MIDI_Class::parse(unsigned char)+0x32>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:520
		// No data available.
		return false;
	}
	
	// If the buffer is full -> Don't Panic! Call the Vogons to destroy it.
	if (bytes_available == 128) {
    8206:	80 38       	cpi	r24, 0x80	; 128
    8208:	91 05       	cpc	r25, r1
    820a:	31 f4       	brne	.+12     	; 0x8218 <MIDI_Class::parse(unsigned char)+0x36>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:521
		USE_SERIAL_PORT.flush();
    820c:	8a eb       	ldi	r24, 0xBA	; 186
    820e:	93 e2       	ldi	r25, 0x23	; 35
    8210:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <HardwareSerial::flush()>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:516
	
	const int bytes_available = USE_SERIAL_PORT.available();
	
	if (bytes_available <= 0) {
		// No data available.
		return false;
    8214:	80 e0       	ldi	r24, 0x00	; 0
    8216:	8b c0       	rjmp	.+278    	; 0x832e <MIDI_Class::parse(unsigned char)+0x14c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:534
		 - Look for other bytes in buffer, call parser recursively, until the message is assembled or the buffer is empty.
		 * Else, add the extracted byte to the pending message, and check validity. When the message is done, store it.
		 */
		
		
		const byte extracted = USE_SERIAL_PORT.read();
    8218:	8a eb       	ldi	r24, 0xBA	; 186
    821a:	93 e2       	ldi	r25, 0x23	; 35
    821c:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <HardwareSerial::read()>
    8220:	6c 01       	movw	r12, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:536
		
		if (mPendingMessageIndex == 0) { // Start a new pending message
    8222:	8e 01       	movw	r16, r28
    8224:	0c 5f       	subi	r16, 0xFC	; 252
    8226:	1e 4f       	sbci	r17, 0xFE	; 254
    8228:	d8 01       	movw	r26, r16
    822a:	ed 90       	ld	r14, X+
    822c:	fc 90       	ld	r15, X
    822e:	e1 14       	cp	r14, r1
    8230:	f1 04       	cpc	r15, r1
    8232:	09 f0       	breq	.+2      	; 0x8236 <MIDI_Class::parse(unsigned char)+0x54>
    8234:	a0 c0       	rjmp	.+320    	; 0x8376 <MIDI_Class::parse(unsigned char)+0x194>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:537
			mPendingMessage[0] = extracted;
    8236:	8b 83       	std	Y+3, r24	; 0x03
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:540
			
			// Check for running status first
			switch (getTypeFromStatusByte(mRunningStatus_RX)) {
    8238:	f9 80       	ldd	r15, Y+1	; 0x01
    823a:	8f 2d       	mov	r24, r15
    823c:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <MIDI_Class::getTypeFromStatusByte(unsigned char)>
    8240:	80 3b       	cpi	r24, 0xB0	; 176
    8242:	91 05       	cpc	r25, r1
    8244:	51 f0       	breq	.+20     	; 0x825a <MIDI_Class::parse(unsigned char)+0x78>
    8246:	98 f4       	brcc	.+38     	; 0x826e <MIDI_Class::parse(unsigned char)+0x8c>
    8248:	80 39       	cpi	r24, 0x90	; 144
    824a:	91 05       	cpc	r25, r1
    824c:	31 f0       	breq	.+12     	; 0x825a <MIDI_Class::parse(unsigned char)+0x78>
    824e:	80 3a       	cpi	r24, 0xA0	; 160
    8250:	91 05       	cpc	r25, r1
    8252:	19 f0       	breq	.+6      	; 0x825a <MIDI_Class::parse(unsigned char)+0x78>
    8254:	80 38       	cpi	r24, 0x80	; 128
    8256:	91 05       	cpc	r25, r1
    8258:	99 f4       	brne	.+38     	; 0x8280 <MIDI_Class::parse(unsigned char)+0x9e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:551
				case ProgramChange:
				case AfterTouchChannel:
				case PitchBend:	
					
					// If the status byte is not received, prepend it to the pending message
					if (extracted < 0x80) {
    825a:	c7 fc       	sbrc	r12, 7
    825c:	11 c0       	rjmp	.+34     	; 0x8280 <MIDI_Class::parse(unsigned char)+0x9e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:552
						mPendingMessage[0] = mRunningStatus_RX;
    825e:	fb 82       	std	Y+3, r15	; 0x03
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:553
						mPendingMessage[1] = extracted;
    8260:	cc 82       	std	Y+4, r12	; 0x04
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:554
						mPendingMessageIndex = 1;
    8262:	81 e0       	ldi	r24, 0x01	; 1
    8264:	90 e0       	ldi	r25, 0x00	; 0
    8266:	f8 01       	movw	r30, r16
    8268:	91 83       	std	Z+1, r25	; 0x01
    826a:	80 83       	st	Z, r24
    826c:	09 c0       	rjmp	.+18     	; 0x8280 <MIDI_Class::parse(unsigned char)+0x9e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:540
		
		if (mPendingMessageIndex == 0) { // Start a new pending message
			mPendingMessage[0] = extracted;
			
			// Check for running status first
			switch (getTypeFromStatusByte(mRunningStatus_RX)) {
    826e:	80 3d       	cpi	r24, 0xD0	; 208
    8270:	91 05       	cpc	r25, r1
    8272:	99 f3       	breq	.-26     	; 0x825a <MIDI_Class::parse(unsigned char)+0x78>
    8274:	80 3e       	cpi	r24, 0xE0	; 224
    8276:	91 05       	cpc	r25, r1
    8278:	81 f3       	breq	.-32     	; 0x825a <MIDI_Class::parse(unsigned char)+0x78>
    827a:	80 3c       	cpi	r24, 0xC0	; 192
    827c:	91 05       	cpc	r25, r1
    827e:	69 f3       	breq	.-38     	; 0x825a <MIDI_Class::parse(unsigned char)+0x78>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:567
					// No running status
					break;
			}
			
			
			switch (getTypeFromStatusByte(mPendingMessage[0])) {
    8280:	8b 81       	ldd	r24, Y+3	; 0x03
    8282:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <MIDI_Class::getTypeFromStatusByte(unsigned char)>
    8286:	fe 01       	movw	r30, r28
    8288:	ee 5f       	subi	r30, 0xFE	; 254
    828a:	fe 4f       	sbci	r31, 0xFE	; 254
    828c:	81 3f       	cpi	r24, 0xF1	; 241
    828e:	91 05       	cpc	r25, r1
    8290:	09 f4       	brne	.+2      	; 0x8294 <MIDI_Class::parse(unsigned char)+0xb2>
    8292:	66 c0       	rjmp	.+204    	; 0x8360 <MIDI_Class::parse(unsigned char)+0x17e>
    8294:	60 f5       	brcc	.+88     	; 0x82ee <MIDI_Class::parse(unsigned char)+0x10c>
    8296:	80 3b       	cpi	r24, 0xB0	; 176
    8298:	91 05       	cpc	r25, r1
    829a:	51 f0       	breq	.+20     	; 0x82b0 <MIDI_Class::parse(unsigned char)+0xce>
    829c:	60 f4       	brcc	.+24     	; 0x82b6 <MIDI_Class::parse(unsigned char)+0xd4>
    829e:	80 39       	cpi	r24, 0x90	; 144
    82a0:	91 05       	cpc	r25, r1
    82a2:	31 f0       	breq	.+12     	; 0x82b0 <MIDI_Class::parse(unsigned char)+0xce>
    82a4:	80 3a       	cpi	r24, 0xA0	; 160
    82a6:	91 05       	cpc	r25, r1
    82a8:	19 f0       	breq	.+6      	; 0x82b0 <MIDI_Class::parse(unsigned char)+0xce>
    82aa:	80 38       	cpi	r24, 0x80	; 128
    82ac:	91 05       	cpc	r25, r1
    82ae:	61 f4       	brne	.+24     	; 0x82c8 <MIDI_Class::parse(unsigned char)+0xe6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:610
				case NoteOff:
				case ControlChange:
				case PitchBend:
				case AfterTouchPoly:
				case SongPosition:
					mPendingMessageExpectedLenght = 3;
    82b0:	83 e0       	ldi	r24, 0x03	; 3
    82b2:	90 e0       	ldi	r25, 0x00	; 0
    82b4:	57 c0       	rjmp	.+174    	; 0x8364 <MIDI_Class::parse(unsigned char)+0x182>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:567
					// No running status
					break;
			}
			
			
			switch (getTypeFromStatusByte(mPendingMessage[0])) {
    82b6:	80 3d       	cpi	r24, 0xD0	; 208
    82b8:	91 05       	cpc	r25, r1
    82ba:	09 f4       	brne	.+2      	; 0x82be <MIDI_Class::parse(unsigned char)+0xdc>
    82bc:	51 c0       	rjmp	.+162    	; 0x8360 <MIDI_Class::parse(unsigned char)+0x17e>
    82be:	58 f4       	brcc	.+22     	; 0x82d6 <MIDI_Class::parse(unsigned char)+0xf4>
    82c0:	80 3c       	cpi	r24, 0xC0	; 192
    82c2:	91 05       	cpc	r25, r1
    82c4:	09 f4       	brne	.+2      	; 0x82c8 <MIDI_Class::parse(unsigned char)+0xe6>
    82c6:	4c c0       	rjmp	.+152    	; 0x8360 <MIDI_Class::parse(unsigned char)+0x17e>
_ZN10MIDI_Class22reset_input_attributesEv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:824

// Private method: reset input attributes
void MIDI_Class::reset_input_attributes()
{
	
	mPendingMessageIndex = 0;
    82c8:	d8 01       	movw	r26, r16
    82ca:	1d 92       	st	X+, r1
    82cc:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:825
	mPendingMessageExpectedLenght = 0;
    82ce:	11 82       	std	Z+1, r1	; 0x01
    82d0:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:826
	mRunningStatus_RX = InvalidType;
    82d2:	19 82       	std	Y+1, r1	; 0x01
    82d4:	9f cf       	rjmp	.-194    	; 0x8214 <MIDI_Class::parse(unsigned char)+0x32>
_ZN10MIDI_Class5parseEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:567
					// No running status
					break;
			}
			
			
			switch (getTypeFromStatusByte(mPendingMessage[0])) {
    82d6:	80 3e       	cpi	r24, 0xE0	; 224
    82d8:	91 05       	cpc	r25, r1
    82da:	51 f3       	breq	.-44     	; 0x82b0 <MIDI_Class::parse(unsigned char)+0xce>
    82dc:	80 3f       	cpi	r24, 0xF0	; 240
    82de:	91 05       	cpc	r25, r1
    82e0:	99 f7       	brne	.-26     	; 0x82c8 <MIDI_Class::parse(unsigned char)+0xe6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:614
				case SongPosition:
					mPendingMessageExpectedLenght = 3;
					break;
					
				case SystemExclusive:
					mPendingMessageExpectedLenght = MIDI_SYSEX_ARRAY_SIZE; // As the message can be any lenght between 3 and MIDI_SYSEX_ARRAY_SIZE bytes
    82e2:	8f ef       	ldi	r24, 0xFF	; 255
    82e4:	90 e0       	ldi	r25, 0x00	; 0
    82e6:	91 83       	std	Z+1, r25	; 0x01
    82e8:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:615
					mRunningStatus_RX = InvalidType;
    82ea:	19 82       	std	Y+1, r1	; 0x01
    82ec:	3d c0       	rjmp	.+122    	; 0x8368 <MIDI_Class::parse(unsigned char)+0x186>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:567
					// No running status
					break;
			}
			
			
			switch (getTypeFromStatusByte(mPendingMessage[0])) {
    82ee:	88 3f       	cpi	r24, 0xF8	; 248
    82f0:	91 05       	cpc	r25, r1
    82f2:	41 f0       	breq	.+16     	; 0x8304 <MIDI_Class::parse(unsigned char)+0x122>
    82f4:	38 f5       	brcc	.+78     	; 0x8344 <MIDI_Class::parse(unsigned char)+0x162>
    82f6:	83 3f       	cpi	r24, 0xF3	; 243
    82f8:	91 05       	cpc	r25, r1
    82fa:	91 f1       	breq	.+100    	; 0x8360 <MIDI_Class::parse(unsigned char)+0x17e>
    82fc:	c8 f2       	brcs	.-78     	; 0x82b0 <MIDI_Class::parse(unsigned char)+0xce>
    82fe:	86 3f       	cpi	r24, 0xF6	; 246
    8300:	91 05       	cpc	r25, r1
    8302:	11 f7       	brne	.-60     	; 0x82c8 <MIDI_Class::parse(unsigned char)+0xe6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:578
				case Clock:
				case ActiveSensing:
				case SystemReset:
				case TuneRequest:
					// Handle the message type directly here.
					mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    8304:	de 01       	movw	r26, r28
    8306:	a9 5f       	subi	r26, 0xF9	; 249
    8308:	be 4f       	sbci	r27, 0xFE	; 254
    830a:	11 96       	adiw	r26, 0x01	; 1
    830c:	9c 93       	st	X, r25
    830e:	8e 93       	st	-X, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:579
					mMessage.channel = 0;
    8310:	11 97       	sbiw	r26, 0x01	; 1
    8312:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:580
					mMessage.data1 = 0;
    8314:	13 96       	adiw	r26, 0x03	; 3
    8316:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:581
					mMessage.data2 = 0;
    8318:	11 96       	adiw	r26, 0x01	; 1
    831a:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:582
					mMessage.valid = true;
    831c:	c6 5f       	subi	r28, 0xF6	; 246
    831e:	dd 4f       	sbci	r29, 0xFD	; 253
    8320:	81 e0       	ldi	r24, 0x01	; 1
    8322:	88 83       	st	Y, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:589
					// \fix Running Status broken when receiving Clock messages.
					// Do not reset all input attributes, Running Status must remain unchanged.
					//reset_input_attributes(); 
					
					// We still need to reset these
					mPendingMessageIndex = 0;
    8324:	d8 01       	movw	r26, r16
    8326:	1d 92       	st	X+, r1
    8328:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:590
					mPendingMessageExpectedLenght = 0;
    832a:	11 82       	std	Z+1, r1	; 0x01
    832c:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:783
		
	}
	
	// What are our chances to fall here?
	return false;
}
    832e:	df 91       	pop	r29
    8330:	cf 91       	pop	r28
    8332:	1f 91       	pop	r17
    8334:	0f 91       	pop	r16
    8336:	ff 90       	pop	r15
    8338:	ef 90       	pop	r14
    833a:	df 90       	pop	r13
    833c:	cf 90       	pop	r12
    833e:	bf 90       	pop	r11
    8340:	af 90       	pop	r10
    8342:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:567
					// No running status
					break;
			}
			
			
			switch (getTypeFromStatusByte(mPendingMessage[0])) {
    8344:	8a 3f       	cpi	r24, 0xFA	; 250
    8346:	91 05       	cpc	r25, r1
    8348:	08 f4       	brcc	.+2      	; 0x834c <MIDI_Class::parse(unsigned char)+0x16a>
    834a:	be cf       	rjmp	.-132    	; 0x82c8 <MIDI_Class::parse(unsigned char)+0xe6>
    834c:	8d 3f       	cpi	r24, 0xFD	; 253
    834e:	91 05       	cpc	r25, r1
    8350:	c8 f2       	brcs	.-78     	; 0x8304 <MIDI_Class::parse(unsigned char)+0x122>
    8352:	9c 01       	movw	r18, r24
    8354:	2e 5f       	subi	r18, 0xFE	; 254
    8356:	31 09       	sbc	r19, r1
    8358:	22 30       	cpi	r18, 0x02	; 2
    835a:	31 05       	cpc	r19, r1
    835c:	98 f2       	brcs	.-90     	; 0x8304 <MIDI_Class::parse(unsigned char)+0x122>
    835e:	b4 cf       	rjmp	.-152    	; 0x82c8 <MIDI_Class::parse(unsigned char)+0xe6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:600
					// 2 bytes messages
				case ProgramChange:
				case AfterTouchChannel:
				case TimeCodeQuarterFrame:
				case SongSelect:
					mPendingMessageExpectedLenght = 2;
    8360:	82 e0       	ldi	r24, 0x02	; 2
    8362:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:610
				case NoteOff:
				case ControlChange:
				case PitchBend:
				case AfterTouchPoly:
				case SongPosition:
					mPendingMessageExpectedLenght = 3;
    8364:	91 83       	std	Z+1, r25	; 0x01
    8366:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:627
					return false;
					break;
			}
			
			// Then update the index of the pending message.
			mPendingMessageIndex++;
    8368:	f8 01       	movw	r30, r16
    836a:	80 81       	ld	r24, Z
    836c:	91 81       	ldd	r25, Z+1	; 0x01
    836e:	01 96       	adiw	r24, 0x01	; 1
    8370:	91 83       	std	Z+1, r25	; 0x01
    8372:	80 83       	st	Z, r24
    8374:	4f cf       	rjmp	.-354    	; 0x8214 <MIDI_Class::parse(unsigned char)+0x32>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:642
			
		}
		else { 
			
			// First, test if this is a status byte
			if (extracted >= 0x80) {
    8376:	87 ff       	sbrs	r24, 7
    8378:	24 c0       	rjmp	.+72     	; 0x83c2 <MIDI_Class::parse(unsigned char)+0x1e0>
    837a:	99 27       	eor	r25, r25
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:646
				
				// Reception of status bytes in the middle of an uncompleted message
				// are allowed only for interleaved Real Time message or EOX
				switch (extracted) {
    837c:	8d 3f       	cpi	r24, 0xFD	; 253
    837e:	91 05       	cpc	r25, r1
    8380:	d4 f4       	brge	.+52     	; 0x83b6 <MIDI_Class::parse(unsigned char)+0x1d4>
    8382:	8a 3f       	cpi	r24, 0xFA	; 250
    8384:	91 05       	cpc	r25, r1
    8386:	3c f4       	brge	.+14     	; 0x8396 <MIDI_Class::parse(unsigned char)+0x1b4>
    8388:	87 3f       	cpi	r24, 0xF7	; 247
    838a:	91 05       	cpc	r25, r1
    838c:	09 f4       	brne	.+2      	; 0x8390 <MIDI_Class::parse(unsigned char)+0x1ae>
    838e:	64 c0       	rjmp	.+200    	; 0x8458 <MIDI_Class::parse(unsigned char)+0x276>
    8390:	88 3f       	cpi	r24, 0xF8	; 248
    8392:	91 05       	cpc	r25, r1
    8394:	b1 f4       	brne	.+44     	; 0x83c2 <MIDI_Class::parse(unsigned char)+0x1e0>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:664
						 Oh, and without killing the running status.. 
						 
						 This is done by leaving the pending message as is, it will be completed on next calls.
						 */
						
						mMessage.type = (kMIDIType)extracted;
    8396:	fe 01       	movw	r30, r28
    8398:	e9 5f       	subi	r30, 0xF9	; 249
    839a:	fe 4f       	sbci	r31, 0xFE	; 254
    839c:	91 83       	std	Z+1, r25	; 0x01
    839e:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:665
						mMessage.data1 = 0;
    83a0:	32 96       	adiw	r30, 0x02	; 2
    83a2:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:666
						mMessage.data2 = 0;
    83a4:	31 96       	adiw	r30, 0x01	; 1
    83a6:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:667
						mMessage.channel = 0;
    83a8:	34 97       	sbiw	r30, 0x04	; 4
    83aa:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:668
						mMessage.valid = true;
    83ac:	c6 5f       	subi	r28, 0xF6	; 246
    83ae:	dd 4f       	sbci	r29, 0xFD	; 253
    83b0:	81 e0       	ldi	r24, 0x01	; 1
    83b2:	88 83       	st	Y, r24
    83b4:	bc cf       	rjmp	.-136    	; 0x832e <MIDI_Class::parse(unsigned char)+0x14c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:646
			// First, test if this is a status byte
			if (extracted >= 0x80) {
				
				// Reception of status bytes in the middle of an uncompleted message
				// are allowed only for interleaved Real Time message or EOX
				switch (extracted) {
    83b6:	9c 01       	movw	r18, r24
    83b8:	2e 5f       	subi	r18, 0xFE	; 254
    83ba:	31 09       	sbc	r19, r1
    83bc:	22 30       	cpi	r18, 0x02	; 2
    83be:	31 05       	cpc	r19, r1
    83c0:	50 f3       	brcs	.-44     	; 0x8396 <MIDI_Class::parse(unsigned char)+0x1b4>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:712
				
			}
			
			
			// Add extracted data byte to pending message
			mPendingMessage[mPendingMessageIndex] = extracted;
    83c2:	fe 01       	movw	r30, r28
    83c4:	ee 0d       	add	r30, r14
    83c6:	ff 1d       	adc	r31, r15
    83c8:	c3 82       	std	Z+3, r12	; 0x03
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:716
			
			
			// Now we are going to check if we have reached the end of the message
			if (mPendingMessageIndex >= (mPendingMessageExpectedLenght-1)) {
    83ca:	6e 01       	movw	r12, r28
    83cc:	fe ef       	ldi	r31, 0xFE	; 254
    83ce:	cf 1a       	sub	r12, r31
    83d0:	df 0a       	sbc	r13, r31
    83d2:	d6 01       	movw	r26, r12
    83d4:	ad 90       	ld	r10, X+
    83d6:	bc 90       	ld	r11, X
    83d8:	c5 01       	movw	r24, r10
    83da:	01 97       	sbiw	r24, 0x01	; 1
    83dc:	e8 16       	cp	r14, r24
    83de:	f9 06       	cpc	r15, r25
    83e0:	08 f4       	brcc	.+2      	; 0x83e4 <MIDI_Class::parse(unsigned char)+0x202>
    83e2:	82 c0       	rjmp	.+260    	; 0x84e8 <MIDI_Class::parse(unsigned char)+0x306>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:721
				
				// "FML" case: fall down here with an overflown SysEx..
				// This means we received the last possible data byte that can fit the buffer.
				// If this happens, try increasing MIDI_SYSEX_ARRAY_SIZE.
				if (getTypeFromStatusByte(mPendingMessage[0]) == SystemExclusive) {
    83e4:	fb 80       	ldd	r15, Y+3	; 0x03
    83e6:	8f 2d       	mov	r24, r15
    83e8:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <MIDI_Class::getTypeFromStatusByte(unsigned char)>
    83ec:	80 3f       	cpi	r24, 0xF0	; 240
    83ee:	91 05       	cpc	r25, r1
    83f0:	09 f4       	brne	.+2      	; 0x83f4 <MIDI_Class::parse(unsigned char)+0x212>
    83f2:	63 c0       	rjmp	.+198    	; 0x84ba <MIDI_Class::parse(unsigned char)+0x2d8>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:727
					reset_input_attributes();
					return false;
				}
				
				
				mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    83f4:	fe 01       	movw	r30, r28
    83f6:	e9 5f       	subi	r30, 0xF9	; 249
    83f8:	fe 4f       	sbci	r31, 0xFE	; 254
    83fa:	91 83       	std	Z+1, r25	; 0x01
    83fc:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:728
				mMessage.channel = (mPendingMessage[0] & 0x0F)+1; // Don't check if it is a Channel Message
    83fe:	31 97       	sbiw	r30, 0x01	; 1
    8400:	2f 2d       	mov	r18, r15
    8402:	2f 70       	andi	r18, 0x0F	; 15
    8404:	2f 5f       	subi	r18, 0xFF	; 255
    8406:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:730
				
				mMessage.data1 = mPendingMessage[1];
    8408:	2c 81       	ldd	r18, Y+4	; 0x04
    840a:	33 96       	adiw	r30, 0x03	; 3
    840c:	20 83       	st	Z, r18
    840e:	31 96       	adiw	r30, 0x01	; 1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:733
				
				// Save data2 only if applicable
				if (mPendingMessageExpectedLenght == 3)	mMessage.data2 = mPendingMessage[2];
    8410:	b3 e0       	ldi	r27, 0x03	; 3
    8412:	ab 16       	cp	r10, r27
    8414:	b1 04       	cpc	r11, r1
    8416:	09 f0       	breq	.+2      	; 0x841a <MIDI_Class::parse(unsigned char)+0x238>
    8418:	57 c0       	rjmp	.+174    	; 0x84c8 <MIDI_Class::parse(unsigned char)+0x2e6>
    841a:	2d 81       	ldd	r18, Y+5	; 0x05
    841c:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:737
				else mMessage.data2 = 0;
				
				// Reset local variables
				mPendingMessageIndex = 0;
    841e:	f8 01       	movw	r30, r16
    8420:	11 82       	std	Z+1, r1	; 0x01
    8422:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:738
				mPendingMessageExpectedLenght = 0;
    8424:	d6 01       	movw	r26, r12
    8426:	1d 92       	st	X+, r1
    8428:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:740
				
				mMessage.valid = true;
    842a:	21 e0       	ldi	r18, 0x01	; 1
    842c:	fe 01       	movw	r30, r28
    842e:	e6 5f       	subi	r30, 0xF6	; 246
    8430:	fd 4f       	sbci	r31, 0xFD	; 253
    8432:	20 83       	st	Z, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:743
				
				// Activate running status (if enabled for the received type)
				switch (mMessage.type) {
    8434:	80 3b       	cpi	r24, 0xB0	; 176
    8436:	91 05       	cpc	r25, r1
    8438:	61 f0       	breq	.+24     	; 0x8452 <MIDI_Class::parse(unsigned char)+0x270>
    843a:	08 f0       	brcs	.+2      	; 0x843e <MIDI_Class::parse(unsigned char)+0x25c>
    843c:	47 c0       	rjmp	.+142    	; 0x84cc <MIDI_Class::parse(unsigned char)+0x2ea>
    843e:	80 39       	cpi	r24, 0x90	; 144
    8440:	91 05       	cpc	r25, r1
    8442:	39 f0       	breq	.+14     	; 0x8452 <MIDI_Class::parse(unsigned char)+0x270>
    8444:	80 3a       	cpi	r24, 0xA0	; 160
    8446:	91 05       	cpc	r25, r1
    8448:	21 f0       	breq	.+8      	; 0x8452 <MIDI_Class::parse(unsigned char)+0x270>
    844a:	80 38       	cpi	r24, 0x80	; 128
    844c:	91 05       	cpc	r25, r1
    844e:	09 f0       	breq	.+2      	; 0x8452 <MIDI_Class::parse(unsigned char)+0x270>
    8450:	49 c0       	rjmp	.+146    	; 0x84e4 <MIDI_Class::parse(unsigned char)+0x302>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:752
					case ControlChange:
					case ProgramChange:
					case AfterTouchChannel:
					case PitchBend:	
						// Running status enabled: store it from received message
						mRunningStatus_RX = mPendingMessage[0];
    8452:	f9 82       	std	Y+1, r15	; 0x01
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:760
					default:
						// No running status
						mRunningStatus_RX = InvalidType;
						break;
				}
				return true;
    8454:	81 e0       	ldi	r24, 0x01	; 1
    8456:	6b cf       	rjmp	.-298    	; 0x832e <MIDI_Class::parse(unsigned char)+0x14c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:675
						
						break;
						
						// End of Exclusive
					case 0xF7:
						if (getTypeFromStatusByte(mPendingMessage[0]) == SystemExclusive) {
    8458:	8b 81       	ldd	r24, Y+3	; 0x03
    845a:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <MIDI_Class::getTypeFromStatusByte(unsigned char)>
    845e:	80 3f       	cpi	r24, 0xF0	; 240
    8460:	91 05       	cpc	r25, r1
    8462:	59 f5       	brne	.+86     	; 0x84ba <MIDI_Class::parse(unsigned char)+0x2d8>
    8464:	fe 01       	movw	r30, r28
    8466:	33 96       	adiw	r30, 0x03	; 3
    8468:	ce 01       	movw	r24, r28
    846a:	8e 5f       	subi	r24, 0xFE	; 254
    846c:	9e 4f       	sbci	r25, 0xFE	; 254
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:679
							
							// Store System Exclusive array in midimsg structure
							for (byte i=0;i<MIDI_SYSEX_ARRAY_SIZE;i++) {
								mMessage.sysex_array[i] = mPendingMessage[i];
    846e:	21 91       	ld	r18, Z+
    8470:	df 01       	movw	r26, r30
    8472:	a9 5f       	subi	r26, 0xF9	; 249
    8474:	be 4f       	sbci	r27, 0xFE	; 254
    8476:	2c 93       	st	X, r18
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:678
						// End of Exclusive
					case 0xF7:
						if (getTypeFromStatusByte(mPendingMessage[0]) == SystemExclusive) {
							
							// Store System Exclusive array in midimsg structure
							for (byte i=0;i<MIDI_SYSEX_ARRAY_SIZE;i++) {
    8478:	e8 17       	cp	r30, r24
    847a:	f9 07       	cpc	r31, r25
    847c:	c1 f7       	brne	.-16     	; 0x846e <MIDI_Class::parse(unsigned char)+0x28c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:682
								mMessage.sysex_array[i] = mPendingMessage[i];
							}
							
							mMessage.type = SystemExclusive;
    847e:	de 01       	movw	r26, r28
    8480:	a9 5f       	subi	r26, 0xF9	; 249
    8482:	be 4f       	sbci	r27, 0xFE	; 254
    8484:	80 ef       	ldi	r24, 0xF0	; 240
    8486:	90 e0       	ldi	r25, 0x00	; 0
    8488:	11 96       	adiw	r26, 0x01	; 1
    848a:	9c 93       	st	X, r25
    848c:	8e 93       	st	-X, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:685

							// Get length
							mMessage.data1 = (mPendingMessageIndex+1) & 0xFF;	
    848e:	12 96       	adiw	r26, 0x02	; 2
    8490:	81 e0       	ldi	r24, 0x01	; 1
    8492:	8e 0d       	add	r24, r14
    8494:	8c 93       	st	X, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:686
							mMessage.data2 = (mPendingMessageIndex+1) >> 8;
    8496:	11 96       	adiw	r26, 0x01	; 1
    8498:	2f ef       	ldi	r18, 0xFF	; 255
    849a:	e2 1a       	sub	r14, r18
    849c:	f2 0a       	sbc	r15, r18
    849e:	fc 92       	st	X, r15
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:688
							
							mMessage.channel = 0;
    84a0:	14 97       	sbiw	r26, 0x04	; 4
    84a2:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:689
							mMessage.valid = true;
    84a4:	ac 5f       	subi	r26, 0xFC	; 252
    84a6:	be 4f       	sbci	r27, 0xFE	; 254
    84a8:	81 e0       	ldi	r24, 0x01	; 1
    84aa:	8c 93       	st	X, r24
_ZN10MIDI_Class22reset_input_attributesEv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:824

// Private method: reset input attributes
void MIDI_Class::reset_input_attributes()
{
	
	mPendingMessageIndex = 0;
    84ac:	d8 01       	movw	r26, r16
    84ae:	1d 92       	st	X+, r1
    84b0:	1c 92       	st	X, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:825
	mPendingMessageExpectedLenght = 0;
    84b2:	11 82       	std	Z+1, r1	; 0x01
    84b4:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:826
	mRunningStatus_RX = InvalidType;
    84b6:	19 82       	std	Y+1, r1	; 0x01
    84b8:	3a cf       	rjmp	.-396    	; 0x832e <MIDI_Class::parse(unsigned char)+0x14c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:824

// Private method: reset input attributes
void MIDI_Class::reset_input_attributes()
{
	
	mPendingMessageIndex = 0;
    84ba:	f8 01       	movw	r30, r16
    84bc:	11 82       	std	Z+1, r1	; 0x01
    84be:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:825
	mPendingMessageExpectedLenght = 0;
    84c0:	fe 01       	movw	r30, r28
    84c2:	ee 5f       	subi	r30, 0xFE	; 254
    84c4:	fe 4f       	sbci	r31, 0xFE	; 254
    84c6:	03 cf       	rjmp	.-506    	; 0x82ce <MIDI_Class::parse(unsigned char)+0xec>
_ZN10MIDI_Class5parseEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:734
				
				mMessage.data1 = mPendingMessage[1];
				
				// Save data2 only if applicable
				if (mPendingMessageExpectedLenght == 3)	mMessage.data2 = mPendingMessage[2];
				else mMessage.data2 = 0;
    84c8:	10 82       	st	Z, r1
    84ca:	a9 cf       	rjmp	.-174    	; 0x841e <MIDI_Class::parse(unsigned char)+0x23c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:743
				mPendingMessageExpectedLenght = 0;
				
				mMessage.valid = true;
				
				// Activate running status (if enabled for the received type)
				switch (mMessage.type) {
    84cc:	80 3d       	cpi	r24, 0xD0	; 208
    84ce:	91 05       	cpc	r25, r1
    84d0:	09 f4       	brne	.+2      	; 0x84d4 <MIDI_Class::parse(unsigned char)+0x2f2>
    84d2:	bf cf       	rjmp	.-130    	; 0x8452 <MIDI_Class::parse(unsigned char)+0x270>
    84d4:	80 3e       	cpi	r24, 0xE0	; 224
    84d6:	91 05       	cpc	r25, r1
    84d8:	09 f4       	brne	.+2      	; 0x84dc <MIDI_Class::parse(unsigned char)+0x2fa>
    84da:	bb cf       	rjmp	.-138    	; 0x8452 <MIDI_Class::parse(unsigned char)+0x270>
    84dc:	80 3c       	cpi	r24, 0xC0	; 192
    84de:	91 05       	cpc	r25, r1
    84e0:	09 f4       	brne	.+2      	; 0x84e4 <MIDI_Class::parse(unsigned char)+0x302>
    84e2:	b7 cf       	rjmp	.-146    	; 0x8452 <MIDI_Class::parse(unsigned char)+0x270>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:757
						mRunningStatus_RX = mPendingMessage[0];
						break;
						
					default:
						// No running status
						mRunningStatus_RX = InvalidType;
    84e4:	19 82       	std	Y+1, r1	; 0x01
    84e6:	b6 cf       	rjmp	.-148    	; 0x8454 <MIDI_Class::parse(unsigned char)+0x272>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:764
				}
				return true;
			}
			else {
				// Then update the index of the pending message.
				mPendingMessageIndex++;
    84e8:	bf ef       	ldi	r27, 0xFF	; 255
    84ea:	eb 1a       	sub	r14, r27
    84ec:	fb 0a       	sbc	r15, r27
    84ee:	f8 01       	movw	r30, r16
    84f0:	f1 82       	std	Z+1, r15	; 0x01
    84f2:	e0 82       	st	Z, r14
    84f4:	8f ce       	rjmp	.-738    	; 0x8214 <MIDI_Class::parse(unsigned char)+0x32>

000084f6 <MIDI_Class::read(unsigned char)>:
_ZN10MIDI_Class4readEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:482
}


/*! \brief Reading/thru-ing method, the same as read() with a given input channel to read on. */
bool MIDI_Class::read(const byte inChannel)
{
    84f6:	0f 93       	push	r16
    84f8:	1f 93       	push	r17
    84fa:	cf 93       	push	r28
    84fc:	df 93       	push	r29
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:484
	
	if (inChannel >= MIDI_CHANNEL_OFF) return false; // MIDI Input disabled.
    84fe:	61 31       	cpi	r22, 0x11	; 17
    8500:	38 f0       	brcs	.+14     	; 0x8510 <MIDI_Class::read(unsigned char)+0x1a>
    8502:	00 e0       	ldi	r16, 0x00	; 0
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:505
		
	}
	
	return false;
	
}
    8504:	80 2f       	mov	r24, r16
    8506:	df 91       	pop	r29
    8508:	cf 91       	pop	r28
    850a:	1f 91       	pop	r17
    850c:	0f 91       	pop	r16
    850e:	08 95       	ret
    8510:	16 2f       	mov	r17, r22
    8512:	ec 01       	movw	r28, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:486
bool MIDI_Class::read(const byte inChannel)
{
	
	if (inChannel >= MIDI_CHANNEL_OFF) return false; // MIDI Input disabled.
	
	if (parse(inChannel)) {
    8514:	0e 94 f1 40 	call	0x81e2	; 0x81e2 <MIDI_Class::parse(unsigned char)>
    8518:	88 23       	and	r24, r24
    851a:	99 f3       	breq	.-26     	; 0x8502 <MIDI_Class::read(unsigned char)+0xc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:488
		
		if (input_filter(inChannel)) {
    851c:	61 2f       	mov	r22, r17
    851e:	ce 01       	movw	r24, r28
    8520:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <MIDI_Class::input_filter(unsigned char)>
    8524:	08 2f       	mov	r16, r24
    8526:	88 23       	and	r24, r24
    8528:	61 f3       	breq	.-40     	; 0x8502 <MIDI_Class::read(unsigned char)+0xc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:491
			
#if (COMPILE_MIDI_OUT && COMPILE_MIDI_THRU)
			thru_filter(inChannel);
    852a:	61 2f       	mov	r22, r17
    852c:	ce 01       	movw	r24, r28
    852e:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <MIDI_Class::thru_filter(unsigned char)>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:495
#endif
			
#if USE_CALLBACKS
			launchCallback();
    8532:	ce 01       	movw	r24, r28
    8534:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <MIDI_Class::launchCallback()>
    8538:	e5 cf       	rjmp	.-54     	; 0x8504 <MIDI_Class::read(unsigned char)+0xe>

0000853a <MIDI_Class::read()>:
_ZN10MIDI_Class4readEv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/MIDI/MIDI.cpp:475
 If the Thru is enabled and the messages matches the filter, it is sent back on the MIDI output.
 */
bool MIDI_Class::read()
{
	
	return read(mInputChannel);
    853a:	fc 01       	movw	r30, r24
    853c:	62 81       	ldd	r22, Z+2	; 0x02
    853e:	0c 94 7b 42 	jmp	0x84f6	; 0x84f6 <MIDI_Class::read(unsigned char)>

00008542 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:59
	pinMode(MOSI, OUTPUT);
}

void SPIClass::end() {
	SPCR &= ~_BV(SPE);
}
    8542:	61 e0       	ldi	r22, 0x01	; 1
    8544:	84 e0       	ldi	r24, 0x04	; 4
    8546:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    854a:	61 e0       	ldi	r22, 0x01	; 1
    854c:	84 e0       	ldi	r24, 0x04	; 4
    854e:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
    8552:	8c b5       	in	r24, 0x2c	; 44
    8554:	80 61       	ori	r24, 0x10	; 16
    8556:	8c bd       	out	0x2c, r24	; 44
    8558:	8c b5       	in	r24, 0x2c	; 44
    855a:	80 64       	ori	r24, 0x40	; 64
    855c:	8c bd       	out	0x2c, r24	; 44
    855e:	61 e0       	ldi	r22, 0x01	; 1
    8560:	87 e0       	ldi	r24, 0x07	; 7
    8562:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
    8566:	61 e0       	ldi	r22, 0x01	; 1
    8568:	85 e0       	ldi	r24, 0x05	; 5
    856a:	0c 94 72 4c 	jmp	0x98e4	; 0x98e4 <pinMode>

0000856e <SPIClass::usingInterrupt(unsigned char)>:
_ZN8SPIClass14usingInterruptEh():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:102

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
	uint8_t stmp, mask;

	if (interruptMode > 1) return;
    856e:	90 91 4f 22 	lds	r25, 0x224F	; 0x80224f <SPIClass::interruptMode>
    8572:	92 30       	cpi	r25, 0x02	; 2
    8574:	58 f4       	brcc	.+22     	; 0x858c <SPIClass::usingInterrupt(unsigned char)+0x1e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:104

	stmp = SREG;
    8576:	2f b7       	in	r18, 0x3f	; 63
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:105
	noInterrupts();
    8578:	f8 94       	cli
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:106
	switch (interruptNumber) {
    857a:	81 30       	cpi	r24, 0x01	; 1
    857c:	41 f0       	breq	.+16     	; 0x858e <SPIClass::usingInterrupt(unsigned char)+0x20>
    857e:	88 f0       	brcs	.+34     	; 0x85a2 <SPIClass::usingInterrupt(unsigned char)+0x34>
    8580:	82 30       	cpi	r24, 0x02	; 2
    8582:	89 f0       	breq	.+34     	; 0x85a6 <SPIClass::usingInterrupt(unsigned char)+0x38>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:132
	#endif
	#ifdef SPI_INT7_MASK
	case 7: mask = SPI_INT7_MASK; break;
	#endif
	default:
		interruptMode = 2;
    8584:	82 e0       	ldi	r24, 0x02	; 2
    8586:	80 93 4f 22 	sts	0x224F, r24	; 0x80224f <SPIClass::interruptMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:138
		SREG = stmp;
		return;
	}
	interruptMode = 1;
	interruptMask |= mask;
	SREG = stmp;
    858a:	2f bf       	out	0x3f, r18	; 63
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:139
}
    858c:	08 95       	ret
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:111
	switch (interruptNumber) {
	#ifdef SPI_INT0_MASK
	case 0: mask = SPI_INT0_MASK; break;
	#endif
	#ifdef SPI_INT1_MASK
	case 1: mask = SPI_INT1_MASK; break;
    858e:	92 e0       	ldi	r25, 0x02	; 2
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:136
	default:
		interruptMode = 2;
		SREG = stmp;
		return;
	}
	interruptMode = 1;
    8590:	81 e0       	ldi	r24, 0x01	; 1
    8592:	80 93 4f 22 	sts	0x224F, r24	; 0x80224f <SPIClass::interruptMode>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:137
	interruptMask |= mask;
    8596:	80 91 4e 22 	lds	r24, 0x224E	; 0x80224e <SPIClass::interruptMask>
    859a:	89 2b       	or	r24, r25
    859c:	80 93 4e 22 	sts	0x224E, r24	; 0x80224e <SPIClass::interruptMask>
    85a0:	f4 cf       	rjmp	.-24     	; 0x858a <SPIClass::usingInterrupt(unsigned char)+0x1c>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:108

	stmp = SREG;
	noInterrupts();
	switch (interruptNumber) {
	#ifdef SPI_INT0_MASK
	case 0: mask = SPI_INT0_MASK; break;
    85a2:	91 e0       	ldi	r25, 0x01	; 1
    85a4:	f5 cf       	rjmp	.-22     	; 0x8590 <SPIClass::usingInterrupt(unsigned char)+0x22>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/SPI/SPI.cpp:114
	#endif
	#ifdef SPI_INT1_MASK
	case 1: mask = SPI_INT1_MASK; break;
	#endif
	#ifdef SPI_INT2_MASK
	case 2: mask = SPI_INT2_MASK; break;
    85a6:	94 e0       	ldi	r25, 0x04	; 4
    85a8:	f3 cf       	rjmp	.-26     	; 0x8590 <SPIClass::usingInterrupt(unsigned char)+0x22>

000085aa <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/WireN.cpp:293

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    85aa:	90 e0       	ldi	r25, 0x00	; 0
    85ac:	80 e0       	ldi	r24, 0x00	; 0
    85ae:	08 95       	ret

000085b0 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    85b0:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <TwoWire::rxBufferLength>
    85b4:	90 91 a3 22 	lds	r25, 0x22A3	; 0x8022a3 <TwoWire::rxBufferIndex>
    85b8:	89 1b       	sub	r24, r25
    85ba:	99 0b       	sbc	r25, r25
    85bc:	08 95       	ret

000085be <TwoWire::read()>:
_ZN7TwoWire4readEv():
    85be:	90 91 a3 22 	lds	r25, 0x22A3	; 0x8022a3 <TwoWire::rxBufferIndex>
    85c2:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <TwoWire::rxBufferLength>
    85c6:	2f ef       	ldi	r18, 0xFF	; 255
    85c8:	3f ef       	ldi	r19, 0xFF	; 255
    85ca:	98 17       	cp	r25, r24
    85cc:	48 f4       	brcc	.+18     	; 0x85e0 <TwoWire::read()+0x22>
    85ce:	e9 2f       	mov	r30, r25
    85d0:	f0 e0       	ldi	r31, 0x00	; 0
    85d2:	ec 55       	subi	r30, 0x5C	; 92
    85d4:	fd 4d       	sbci	r31, 0xDD	; 221
    85d6:	20 81       	ld	r18, Z
    85d8:	30 e0       	ldi	r19, 0x00	; 0
    85da:	9f 5f       	subi	r25, 0xFF	; 255
    85dc:	90 93 a3 22 	sts	0x22A3, r25	; 0x8022a3 <TwoWire::rxBufferIndex>
    85e0:	c9 01       	movw	r24, r18
    85e2:	08 95       	ret

000085e4 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    85e4:	e0 91 a3 22 	lds	r30, 0x22A3	; 0x8022a3 <TwoWire::rxBufferIndex>
    85e8:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <TwoWire::rxBufferLength>
    85ec:	e8 17       	cp	r30, r24
    85ee:	30 f4       	brcc	.+12     	; 0x85fc <TwoWire::peek()+0x18>
    85f0:	f0 e0       	ldi	r31, 0x00	; 0
    85f2:	ec 55       	subi	r30, 0x5C	; 92
    85f4:	fd 4d       	sbci	r31, 0xDD	; 221
    85f6:	80 81       	ld	r24, Z
    85f8:	90 e0       	ldi	r25, 0x00	; 0
    85fa:	08 95       	ret
    85fc:	8f ef       	ldi	r24, 0xFF	; 255
    85fe:	9f ef       	ldi	r25, 0xFF	; 255
    8600:	08 95       	ret

00008602 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    8602:	08 95       	ret

00008604 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    8604:	cf 93       	push	r28
    8606:	df 93       	push	r29
    8608:	1f 92       	push	r1
    860a:	cd b7       	in	r28, 0x3d	; 61
    860c:	de b7       	in	r29, 0x3e	; 62
    860e:	69 83       	std	Y+1, r22	; 0x01
    8610:	20 91 5c 22 	lds	r18, 0x225C	; 0x80225c <TwoWire::transmitting>
    8614:	22 23       	and	r18, r18
    8616:	f9 f0       	breq	.+62     	; 0x8656 <TwoWire::write(unsigned char)+0x52>
    8618:	20 91 5d 22 	lds	r18, 0x225D	; 0x80225d <TwoWire::txBufferLength>
    861c:	22 34       	cpi	r18, 0x42	; 66
    861e:	58 f0       	brcs	.+22     	; 0x8636 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    8620:	21 e0       	ldi	r18, 0x01	; 1
    8622:	30 e0       	ldi	r19, 0x00	; 0
    8624:	fc 01       	movw	r30, r24
    8626:	33 83       	std	Z+3, r19	; 0x03
    8628:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    862a:	90 e0       	ldi	r25, 0x00	; 0
    862c:	80 e0       	ldi	r24, 0x00	; 0
    862e:	0f 90       	pop	r0
    8630:	df 91       	pop	r29
    8632:	cf 91       	pop	r28
    8634:	08 95       	ret
    8636:	80 91 5e 22 	lds	r24, 0x225E	; 0x80225e <TwoWire::txBufferIndex>
    863a:	e8 2f       	mov	r30, r24
    863c:	f0 e0       	ldi	r31, 0x00	; 0
    863e:	e1 5a       	subi	r30, 0xA1	; 161
    8640:	fd 4d       	sbci	r31, 0xDD	; 221
    8642:	99 81       	ldd	r25, Y+1	; 0x01
    8644:	90 83       	st	Z, r25
    8646:	8f 5f       	subi	r24, 0xFF	; 255
    8648:	80 93 5e 22 	sts	0x225E, r24	; 0x80225e <TwoWire::txBufferIndex>
    864c:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <TwoWire::txBufferLength>
    8650:	81 e0       	ldi	r24, 0x01	; 1
    8652:	90 e0       	ldi	r25, 0x00	; 0
    8654:	ec cf       	rjmp	.-40     	; 0x862e <TwoWire::write(unsigned char)+0x2a>
    8656:	61 e0       	ldi	r22, 0x01	; 1
    8658:	ce 01       	movw	r24, r28
    865a:	01 96       	adiw	r24, 0x01	; 1
    865c:	0e 94 5e 44 	call	0x88bc	; 0x88bc <twi_transmit>
    8660:	f7 cf       	rjmp	.-18     	; 0x8650 <TwoWire::write(unsigned char)+0x4c>

00008662 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    8662:	cf 92       	push	r12
    8664:	df 92       	push	r13
    8666:	ef 92       	push	r14
    8668:	ff 92       	push	r15
    866a:	0f 93       	push	r16
    866c:	1f 93       	push	r17
    866e:	cf 93       	push	r28
    8670:	df 93       	push	r29
    8672:	7c 01       	movw	r14, r24
    8674:	cb 01       	movw	r24, r22
    8676:	8a 01       	movw	r16, r20
    8678:	20 91 5c 22 	lds	r18, 0x225C	; 0x80225c <TwoWire::transmitting>
    867c:	22 23       	and	r18, r18
    867e:	89 f0       	breq	.+34     	; 0x86a2 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    8680:	eb 01       	movw	r28, r22
    8682:	6b 01       	movw	r12, r22
    8684:	c4 0e       	add	r12, r20
    8686:	d5 1e       	adc	r13, r21
    8688:	cc 15       	cp	r28, r12
    868a:	dd 05       	cpc	r29, r13
    868c:	69 f0       	breq	.+26     	; 0x86a8 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    868e:	69 91       	ld	r22, Y+
    8690:	d7 01       	movw	r26, r14
    8692:	ed 91       	ld	r30, X+
    8694:	fc 91       	ld	r31, X
    8696:	01 90       	ld	r0, Z+
    8698:	f0 81       	ld	r31, Z
    869a:	e0 2d       	mov	r30, r0
    869c:	c7 01       	movw	r24, r14
    869e:	09 95       	icall
    86a0:	f3 cf       	rjmp	.-26     	; 0x8688 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    86a2:	64 2f       	mov	r22, r20
    86a4:	0e 94 5e 44 	call	0x88bc	; 0x88bc <twi_transmit>
    86a8:	c8 01       	movw	r24, r16
    86aa:	df 91       	pop	r29
    86ac:	cf 91       	pop	r28
    86ae:	1f 91       	pop	r17
    86b0:	0f 91       	pop	r16
    86b2:	ff 90       	pop	r15
    86b4:	ef 90       	pop	r14
    86b6:	df 90       	pop	r13
    86b8:	cf 90       	pop	r12
    86ba:	08 95       	ret

000086bc <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    86bc:	10 92 a3 22 	sts	0x22A3, r1	; 0x8022a3 <TwoWire::rxBufferIndex>
    86c0:	10 92 a2 22 	sts	0x22A2, r1	; 0x8022a2 <TwoWire::rxBufferLength>
    86c4:	10 92 5e 22 	sts	0x225E, r1	; 0x80225e <TwoWire::txBufferIndex>
    86c8:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <TwoWire::txBufferLength>
    86cc:	0c 94 a9 43 	jmp	0x8752	; 0x8752 <twi_init>

000086d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    86d0:	86 2f       	mov	r24, r22
    86d2:	43 34       	cpi	r20, 0x43	; 67
    86d4:	08 f0       	brcs	.+2      	; 0x86d8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8>
    86d6:	42 e4       	ldi	r20, 0x42	; 66
    86d8:	64 ea       	ldi	r22, 0xA4	; 164
    86da:	72 e2       	ldi	r23, 0x22	; 34
    86dc:	0e 94 c7 43 	call	0x878e	; 0x878e <twi_readFrom>
    86e0:	10 92 a3 22 	sts	0x22A3, r1	; 0x8022a3 <TwoWire::rxBufferIndex>
    86e4:	80 93 a2 22 	sts	0x22A2, r24	; 0x8022a2 <TwoWire::rxBufferLength>
    86e8:	08 95       	ret

000086ea <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
    86ea:	21 e0       	ldi	r18, 0x01	; 1
    86ec:	0c 94 68 43 	jmp	0x86d0	; 0x86d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

000086f0 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    86f0:	81 e0       	ldi	r24, 0x01	; 1
    86f2:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <TwoWire::transmitting>
    86f6:	60 93 a1 22 	sts	0x22A1, r22	; 0x8022a1 <TwoWire::txAddress>
    86fa:	10 92 5e 22 	sts	0x225E, r1	; 0x80225e <TwoWire::txBufferIndex>
    86fe:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <TwoWire::txBufferLength>
    8702:	08 95       	ret

00008704 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    8704:	0f 93       	push	r16
    8706:	06 2f       	mov	r16, r22
    8708:	21 e0       	ldi	r18, 0x01	; 1
    870a:	40 91 5d 22 	lds	r20, 0x225D	; 0x80225d <TwoWire::txBufferLength>
    870e:	6f e5       	ldi	r22, 0x5F	; 95
    8710:	72 e2       	ldi	r23, 0x22	; 34
    8712:	80 91 a1 22 	lds	r24, 0x22A1	; 0x8022a1 <TwoWire::txAddress>
    8716:	0e 94 0b 44 	call	0x8816	; 0x8816 <twi_writeTo>
    871a:	10 92 5e 22 	sts	0x225E, r1	; 0x80225e <TwoWire::txBufferIndex>
    871e:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <TwoWire::txBufferLength>
    8722:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <TwoWire::transmitting>
    8726:	0f 91       	pop	r16
    8728:	08 95       	ret

0000872a <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    872a:	61 e0       	ldi	r22, 0x01	; 1
    872c:	0c 94 82 43 	jmp	0x8704	; 0x8704 <TwoWire::endTransmission(unsigned char)>

00008730 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    8730:	e0 e5       	ldi	r30, 0x50	; 80
    8732:	f2 e2       	ldi	r31, 0x22	; 34
    8734:	13 82       	std	Z+3, r1	; 0x03
    8736:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    8738:	88 ee       	ldi	r24, 0xE8	; 232
    873a:	93 e0       	ldi	r25, 0x03	; 3
    873c:	a0 e0       	ldi	r26, 0x00	; 0
    873e:	b0 e0       	ldi	r27, 0x00	; 0
    8740:	84 83       	std	Z+4, r24	; 0x04
    8742:	95 83       	std	Z+5, r25	; 0x05
    8744:	a6 83       	std	Z+6, r26	; 0x06
    8746:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/WireN.cpp:48
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    8748:	88 ec       	ldi	r24, 0xC8	; 200
    874a:	93 e0       	ldi	r25, 0x03	; 3
    874c:	91 83       	std	Z+1, r25	; 0x01
    874e:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/WireN.cpp:297
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    8750:	08 95       	ret

00008752 <twi_init>:
twi_init():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:323
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    8752:	10 92 b9 23 	sts	0x23B9, r1	; 0x8023b9 <twi_state>
    8756:	81 e0       	ldi	r24, 0x01	; 1
    8758:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <twi_sendStop>
    875c:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <twi_inRepStart>
    8760:	61 e0       	ldi	r22, 0x01	; 1
    8762:	81 e1       	ldi	r24, 0x11	; 17
    8764:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8768:	61 e0       	ldi	r22, 0x01	; 1
    876a:	80 e1       	ldi	r24, 0x10	; 16
    876c:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8770:	e9 eb       	ldi	r30, 0xB9	; 185
    8772:	f0 e0       	ldi	r31, 0x00	; 0
    8774:	80 81       	ld	r24, Z
    8776:	8e 7f       	andi	r24, 0xFE	; 254
    8778:	80 83       	st	Z, r24
    877a:	80 81       	ld	r24, Z
    877c:	8d 7f       	andi	r24, 0xFD	; 253
    877e:	80 83       	st	Z, r24
    8780:	88 e4       	ldi	r24, 0x48	; 72
    8782:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    8786:	85 e4       	ldi	r24, 0x45	; 69
    8788:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    878c:	08 95       	ret

0000878e <twi_readFrom>:
twi_readFrom():
    878e:	43 34       	cpi	r20, 0x43	; 67
    8790:	08 f0       	brcs	.+2      	; 0x8794 <twi_readFrom+0x6>
    8792:	3f c0       	rjmp	.+126    	; 0x8812 <twi_readFrom+0x84>
    8794:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <twi_state>
    8798:	91 11       	cpse	r25, r1
    879a:	fc cf       	rjmp	.-8      	; 0x8794 <twi_readFrom+0x6>
    879c:	91 e0       	ldi	r25, 0x01	; 1
    879e:	90 93 b9 23 	sts	0x23B9, r25	; 0x8023b9 <twi_state>
    87a2:	20 93 b7 23 	sts	0x23B7, r18	; 0x8023b7 <twi_sendStop>
    87a6:	2f ef       	ldi	r18, 0xFF	; 255
    87a8:	20 93 e6 22 	sts	0x22E6, r18	; 0x8022e6 <twi_error>
    87ac:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <twi_masterBufferIndex>
    87b0:	24 0f       	add	r18, r20
    87b2:	20 93 6e 23 	sts	0x236E, r18	; 0x80236e <twi_masterBufferLength>
    87b6:	90 93 b8 23 	sts	0x23B8, r25	; 0x8023b8 <twi_slarw>
    87ba:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <twi_slarw>
    87be:	88 0f       	add	r24, r24
    87c0:	89 2b       	or	r24, r25
    87c2:	80 93 b8 23 	sts	0x23B8, r24	; 0x8023b8 <twi_slarw>
    87c6:	80 91 b6 23 	lds	r24, 0x23B6	; 0x8023b6 <twi_inRepStart>
    87ca:	81 30       	cpi	r24, 0x01	; 1
    87cc:	e9 f4       	brne	.+58     	; 0x8808 <twi_readFrom+0x7a>
    87ce:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <twi_inRepStart>
    87d2:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <twi_slarw>
    87d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    87da:	85 ec       	ldi	r24, 0xC5	; 197
    87dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    87e0:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <twi_state>
    87e4:	81 30       	cpi	r24, 0x01	; 1
    87e6:	e1 f3       	breq	.-8      	; 0x87e0 <twi_readFrom+0x52>
    87e8:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <twi_masterBufferIndex>
    87ec:	84 17       	cp	r24, r20
    87ee:	10 f4       	brcc	.+4      	; 0x87f4 <twi_readFrom+0x66>
    87f0:	40 91 6f 23 	lds	r20, 0x236F	; 0x80236f <twi_masterBufferIndex>
    87f4:	a0 e7       	ldi	r26, 0x70	; 112
    87f6:	b3 e2       	ldi	r27, 0x23	; 35
    87f8:	96 2f       	mov	r25, r22
    87fa:	fb 01       	movw	r30, r22
    87fc:	8e 2f       	mov	r24, r30
    87fe:	89 1b       	sub	r24, r25
    8800:	84 17       	cp	r24, r20
    8802:	20 f0       	brcs	.+8      	; 0x880c <twi_readFrom+0x7e>
    8804:	84 2f       	mov	r24, r20
    8806:	08 95       	ret
    8808:	85 ee       	ldi	r24, 0xE5	; 229
    880a:	e8 cf       	rjmp	.-48     	; 0x87dc <twi_readFrom+0x4e>
    880c:	8d 91       	ld	r24, X+
    880e:	81 93       	st	Z+, r24
    8810:	f5 cf       	rjmp	.-22     	; 0x87fc <twi_readFrom+0x6e>
    8812:	40 e0       	ldi	r20, 0x00	; 0
    8814:	f7 cf       	rjmp	.-18     	; 0x8804 <twi_readFrom+0x76>

00008816 <twi_writeTo>:
twi_writeTo():
    8816:	0f 93       	push	r16
    8818:	43 34       	cpi	r20, 0x43	; 67
    881a:	08 f0       	brcs	.+2      	; 0x881e <twi_writeTo+0x8>
    881c:	47 c0       	rjmp	.+142    	; 0x88ac <twi_writeTo+0x96>
    881e:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <twi_state>
    8822:	91 11       	cpse	r25, r1
    8824:	fc cf       	rjmp	.-8      	; 0x881e <twi_writeTo+0x8>
    8826:	92 e0       	ldi	r25, 0x02	; 2
    8828:	90 93 b9 23 	sts	0x23B9, r25	; 0x8023b9 <twi_state>
    882c:	00 93 b7 23 	sts	0x23B7, r16	; 0x8023b7 <twi_sendStop>
    8830:	9f ef       	ldi	r25, 0xFF	; 255
    8832:	90 93 e6 22 	sts	0x22E6, r25	; 0x8022e6 <twi_error>
    8836:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <twi_masterBufferIndex>
    883a:	40 93 6e 23 	sts	0x236E, r20	; 0x80236e <twi_masterBufferLength>
    883e:	36 2f       	mov	r19, r22
    8840:	a0 e7       	ldi	r26, 0x70	; 112
    8842:	b3 e2       	ldi	r27, 0x23	; 35
    8844:	fb 01       	movw	r30, r22
    8846:	9e 2f       	mov	r25, r30
    8848:	93 1b       	sub	r25, r19
    884a:	94 17       	cp	r25, r20
    884c:	50 f1       	brcs	.+84     	; 0x88a2 <twi_writeTo+0x8c>
    884e:	10 92 b8 23 	sts	0x23B8, r1	; 0x8023b8 <twi_slarw>
    8852:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <twi_slarw>
    8856:	88 0f       	add	r24, r24
    8858:	89 2b       	or	r24, r25
    885a:	80 93 b8 23 	sts	0x23B8, r24	; 0x8023b8 <twi_slarw>
    885e:	80 91 b6 23 	lds	r24, 0x23B6	; 0x8023b6 <twi_inRepStart>
    8862:	81 30       	cpi	r24, 0x01	; 1
    8864:	09 f5       	brne	.+66     	; 0x88a8 <twi_writeTo+0x92>
    8866:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <twi_inRepStart>
    886a:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <twi_slarw>
    886e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    8872:	85 ec       	ldi	r24, 0xC5	; 197
    8874:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    8878:	22 23       	and	r18, r18
    887a:	21 f0       	breq	.+8      	; 0x8884 <twi_writeTo+0x6e>
    887c:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <twi_state>
    8880:	82 30       	cpi	r24, 0x02	; 2
    8882:	d1 f3       	breq	.-12     	; 0x8878 <twi_writeTo+0x62>
    8884:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <twi_error>
    8888:	8f 3f       	cpi	r24, 0xFF	; 255
    888a:	91 f0       	breq	.+36     	; 0x88b0 <twi_writeTo+0x9a>
    888c:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <twi_error>
    8890:	80 32       	cpi	r24, 0x20	; 32
    8892:	81 f0       	breq	.+32     	; 0x88b4 <twi_writeTo+0x9e>
    8894:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <twi_error>
    8898:	80 33       	cpi	r24, 0x30	; 48
    889a:	71 f0       	breq	.+28     	; 0x88b8 <twi_writeTo+0xa2>
    889c:	84 e0       	ldi	r24, 0x04	; 4
    889e:	0f 91       	pop	r16
    88a0:	08 95       	ret
    88a2:	91 91       	ld	r25, Z+
    88a4:	9d 93       	st	X+, r25
    88a6:	cf cf       	rjmp	.-98     	; 0x8846 <twi_writeTo+0x30>
    88a8:	85 ee       	ldi	r24, 0xE5	; 229
    88aa:	e4 cf       	rjmp	.-56     	; 0x8874 <twi_writeTo+0x5e>
    88ac:	81 e0       	ldi	r24, 0x01	; 1
    88ae:	f7 cf       	rjmp	.-18     	; 0x889e <twi_writeTo+0x88>
    88b0:	80 e0       	ldi	r24, 0x00	; 0
    88b2:	f5 cf       	rjmp	.-22     	; 0x889e <twi_writeTo+0x88>
    88b4:	82 e0       	ldi	r24, 0x02	; 2
    88b6:	f3 cf       	rjmp	.-26     	; 0x889e <twi_writeTo+0x88>
    88b8:	83 e0       	ldi	r24, 0x03	; 3
    88ba:	f1 cf       	rjmp	.-30     	; 0x889e <twi_writeTo+0x88>

000088bc <twi_transmit>:
twi_transmit():
    88bc:	63 34       	cpi	r22, 0x43	; 67
    88be:	98 f4       	brcc	.+38     	; 0x88e6 <twi_transmit+0x2a>
    88c0:	20 91 b9 23 	lds	r18, 0x23B9	; 0x8023b9 <twi_state>
    88c4:	24 30       	cpi	r18, 0x04	; 4
    88c6:	89 f4       	brne	.+34     	; 0x88ea <twi_transmit+0x2e>
    88c8:	60 93 2a 23 	sts	0x232A, r22	; 0x80232a <twi_txBufferLength>
    88cc:	28 2f       	mov	r18, r24
    88ce:	ac e2       	ldi	r26, 0x2C	; 44
    88d0:	b3 e2       	ldi	r27, 0x23	; 35
    88d2:	fc 01       	movw	r30, r24
    88d4:	8e 2f       	mov	r24, r30
    88d6:	82 1b       	sub	r24, r18
    88d8:	86 17       	cp	r24, r22
    88da:	10 f0       	brcs	.+4      	; 0x88e0 <twi_transmit+0x24>
    88dc:	80 e0       	ldi	r24, 0x00	; 0
    88de:	08 95       	ret
    88e0:	81 91       	ld	r24, Z+
    88e2:	8d 93       	st	X+, r24
    88e4:	f7 cf       	rjmp	.-18     	; 0x88d4 <twi_transmit+0x18>
    88e6:	81 e0       	ldi	r24, 0x01	; 1
    88e8:	08 95       	ret
    88ea:	82 e0       	ldi	r24, 0x02	; 2
    88ec:	08 95       	ret

000088ee <twi_stop>:
twi_stop():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:336
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    88ee:	85 ed       	ldi	r24, 0xD5	; 213
    88f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:340

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    88f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    88f8:	84 fd       	sbrc	r24, 4
    88fa:	fc cf       	rjmp	.-8      	; 0x88f4 <twi_stop+0x6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:345
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    88fc:	10 92 b9 23 	sts	0x23B9, r1	; 0x8023b9 <twi_state>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:346
}
    8900:	08 95       	ret

00008902 <twi_releaseBus>:
twi_releaseBus():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:357
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    8902:	85 ec       	ldi	r24, 0xC5	; 197
    8904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:360

  // update twi state
  twi_state = TWI_READY;
    8908:	10 92 b9 23 	sts	0x23B9, r1	; 0x8023b9 <twi_state>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:361
}
    890c:	08 95       	ret

0000890e <__vector_26>:
__vector_26():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:364

SIGNAL(TWI_vect)
{
    890e:	1f 92       	push	r1
    8910:	0f 92       	push	r0
    8912:	0f b6       	in	r0, 0x3f	; 63
    8914:	0f 92       	push	r0
    8916:	11 24       	eor	r1, r1
    8918:	0b b6       	in	r0, 0x3b	; 59
    891a:	0f 92       	push	r0
    891c:	2f 93       	push	r18
    891e:	3f 93       	push	r19
    8920:	4f 93       	push	r20
    8922:	5f 93       	push	r21
    8924:	6f 93       	push	r22
    8926:	7f 93       	push	r23
    8928:	8f 93       	push	r24
    892a:	9f 93       	push	r25
    892c:	af 93       	push	r26
    892e:	bf 93       	push	r27
    8930:	ef 93       	push	r30
    8932:	ff 93       	push	r31
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:365
  switch(TW_STATUS){
    8934:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    8938:	88 7f       	andi	r24, 0xF8	; 248
    893a:	80 36       	cpi	r24, 0x60	; 96
    893c:	09 f4       	brne	.+2      	; 0x8940 <__vector_26+0x32>
    893e:	4e c0       	rjmp	.+156    	; 0x89dc <__vector_26+0xce>
    8940:	08 f0       	brcs	.+2      	; 0x8944 <__vector_26+0x36>
    8942:	41 c0       	rjmp	.+130    	; 0x89c6 <__vector_26+0xb8>
    8944:	88 32       	cpi	r24, 0x28	; 40
    8946:	09 f4       	brne	.+2      	; 0x894a <__vector_26+0x3c>
    8948:	aa c0       	rjmp	.+340    	; 0x8a9e <__vector_26+0x190>
    894a:	28 f5       	brcc	.+74     	; 0x8996 <__vector_26+0x88>
    894c:	80 31       	cpi	r24, 0x10	; 16
    894e:	09 f4       	brne	.+2      	; 0x8952 <__vector_26+0x44>
    8950:	9e c0       	rjmp	.+316    	; 0x8a8e <__vector_26+0x180>
    8952:	c8 f4       	brcc	.+50     	; 0x8986 <__vector_26+0x78>
    8954:	88 23       	and	r24, r24
    8956:	09 f4       	brne	.+2      	; 0x895a <__vector_26+0x4c>
    8958:	fb c0       	rjmp	.+502    	; 0x8b50 <__vector_26+0x242>
    895a:	88 30       	cpi	r24, 0x08	; 8
    895c:	09 f4       	brne	.+2      	; 0x8960 <__vector_26+0x52>
    895e:	97 c0       	rjmp	.+302    	; 0x8a8e <__vector_26+0x180>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:526
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    8960:	ff 91       	pop	r31
    8962:	ef 91       	pop	r30
    8964:	bf 91       	pop	r27
    8966:	af 91       	pop	r26
    8968:	9f 91       	pop	r25
    896a:	8f 91       	pop	r24
    896c:	7f 91       	pop	r23
    896e:	6f 91       	pop	r22
    8970:	5f 91       	pop	r21
    8972:	4f 91       	pop	r20
    8974:	3f 91       	pop	r19
    8976:	2f 91       	pop	r18
    8978:	0f 90       	pop	r0
    897a:	0b be       	out	0x3b, r0	; 59
    897c:	0f 90       	pop	r0
    897e:	0f be       	out	0x3f, r0	; 63
    8980:	0f 90       	pop	r0
    8982:	1f 90       	pop	r1
    8984:	18 95       	reti
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:365
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
  switch(TW_STATUS){
    8986:	88 31       	cpi	r24, 0x18	; 24
    8988:	09 f4       	brne	.+2      	; 0x898c <__vector_26+0x7e>
    898a:	89 c0       	rjmp	.+274    	; 0x8a9e <__vector_26+0x190>
    898c:	80 32       	cpi	r24, 0x20	; 32
    898e:	41 f7       	brne	.-48     	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:400
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    8990:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <twi_error>
    8994:	15 c0       	rjmp	.+42     	; 0x89c0 <__vector_26+0xb2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:365
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
  switch(TW_STATUS){
    8996:	80 34       	cpi	r24, 0x40	; 64
    8998:	09 f4       	brne	.+2      	; 0x899c <__vector_26+0x8e>
    899a:	9e c0       	rjmp	.+316    	; 0x8ad8 <__vector_26+0x1ca>
    899c:	48 f4       	brcc	.+18     	; 0x89b0 <__vector_26+0xa2>
    899e:	80 33       	cpi	r24, 0x30	; 48
    89a0:	b9 f3       	breq	.-18     	; 0x8990 <__vector_26+0x82>
    89a2:	88 33       	cpi	r24, 0x38	; 56
    89a4:	e9 f6       	brne	.-70     	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:404
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    89a6:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <twi_error>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:474
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    89aa:	0e 94 81 44 	call	0x8902	; 0x8902 <twi_releaseBus>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:475
      break;
    89ae:	d8 cf       	rjmp	.-80     	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:365
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
  switch(TW_STATUS){
    89b0:	80 35       	cpi	r24, 0x50	; 80
    89b2:	09 f4       	brne	.+2      	; 0x89b6 <__vector_26+0xa8>
    89b4:	85 c0       	rjmp	.+266    	; 0x8ac0 <__vector_26+0x1b2>
    89b6:	88 35       	cpi	r24, 0x58	; 88
    89b8:	09 f4       	brne	.+2      	; 0x89bc <__vector_26+0xae>
    89ba:	96 c0       	rjmp	.+300    	; 0x8ae8 <__vector_26+0x1da>
    89bc:	88 34       	cpi	r24, 0x48	; 72
    89be:	81 f6       	brne	.-96     	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:523
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    89c0:	0e 94 77 44 	call	0x88ee	; 0x88ee <twi_stop>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:526
      break;
  }
}
    89c4:	cd cf       	rjmp	.-102    	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:365
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
  switch(TW_STATUS){
    89c6:	88 39       	cpi	r24, 0x98	; 152
    89c8:	09 f4       	brne	.+2      	; 0x89cc <__vector_26+0xbe>
    89ca:	8c c0       	rjmp	.+280    	; 0x8ae4 <__vector_26+0x1d6>
    89cc:	38 f5       	brcc	.+78     	; 0x8a1c <__vector_26+0x10e>
    89ce:	88 37       	cpi	r24, 0x78	; 120
    89d0:	29 f0       	breq	.+10     	; 0x89dc <__vector_26+0xce>
    89d2:	50 f4       	brcc	.+20     	; 0x89e8 <__vector_26+0xda>
    89d4:	88 36       	cpi	r24, 0x68	; 104
    89d6:	11 f0       	breq	.+4      	; 0x89dc <__vector_26+0xce>
    89d8:	80 37       	cpi	r24, 0x70	; 112
    89da:	11 f6       	brne	.-124    	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:445
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    89dc:	83 e0       	ldi	r24, 0x03	; 3
    89de:	80 93 b9 23 	sts	0x23B9, r24	; 0x8023b9 <twi_state>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:447
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    89e2:	10 92 e7 22 	sts	0x22E7, r1	; 0x8022e7 <twi_rxBufferIndex>
    89e6:	57 c0       	rjmp	.+174    	; 0x8a96 <__vector_26+0x188>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:365
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
  switch(TW_STATUS){
    89e8:	88 38       	cpi	r24, 0x88	; 136
    89ea:	09 f4       	brne	.+2      	; 0x89ee <__vector_26+0xe0>
    89ec:	7b c0       	rjmp	.+246    	; 0x8ae4 <__vector_26+0x1d6>
    89ee:	80 39       	cpi	r24, 0x90	; 144
    89f0:	19 f0       	breq	.+6      	; 0x89f8 <__vector_26+0xea>
    89f2:	80 38       	cpi	r24, 0x80	; 128
    89f4:	09 f0       	breq	.+2      	; 0x89f8 <__vector_26+0xea>
    89f6:	b4 cf       	rjmp	.-152    	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:453
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    89f8:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <twi_rxBufferIndex>
    89fc:	82 34       	cpi	r24, 0x42	; 66
    89fe:	08 f0       	brcs	.+2      	; 0x8a02 <__vector_26+0xf4>
    8a00:	71 c0       	rjmp	.+226    	; 0x8ae4 <__vector_26+0x1d6>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:455
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    8a02:	e0 91 e7 22 	lds	r30, 0x22E7	; 0x8022e7 <twi_rxBufferIndex>
    8a06:	81 e0       	ldi	r24, 0x01	; 1
    8a08:	8e 0f       	add	r24, r30
    8a0a:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <twi_rxBufferIndex>
    8a0e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    8a12:	f0 e0       	ldi	r31, 0x00	; 0
    8a14:	e8 51       	subi	r30, 0x18	; 24
    8a16:	fd 4d       	sbci	r31, 0xDD	; 221
    8a18:	80 83       	st	Z, r24
    8a1a:	3d c0       	rjmp	.+122    	; 0x8a96 <__vector_26+0x188>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:365
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
  switch(TW_STATUS){
    8a1c:	80 3b       	cpi	r24, 0xB0	; 176
    8a1e:	39 f0       	breq	.+14     	; 0x8a2e <__vector_26+0x120>
    8a20:	e0 f4       	brcc	.+56     	; 0x8a5a <__vector_26+0x14c>
    8a22:	80 3a       	cpi	r24, 0xA0	; 160
    8a24:	09 f4       	brne	.+2      	; 0x8a28 <__vector_26+0x11a>
    8a26:	79 c0       	rjmp	.+242    	; 0x8b1a <__vector_26+0x20c>
    8a28:	88 3a       	cpi	r24, 0xA8	; 168
    8a2a:	09 f0       	breq	.+2      	; 0x8a2e <__vector_26+0x120>
    8a2c:	99 cf       	rjmp	.-206    	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:486
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    8a2e:	84 e0       	ldi	r24, 0x04	; 4
    8a30:	80 93 b9 23 	sts	0x23B9, r24	; 0x8023b9 <twi_state>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:488
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    8a34:	10 92 2b 23 	sts	0x232B, r1	; 0x80232b <twi_txBufferIndex>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:490
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    8a38:	10 92 2a 23 	sts	0x232A, r1	; 0x80232a <twi_txBufferLength>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:493
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    8a3c:	e0 91 b4 23 	lds	r30, 0x23B4	; 0x8023b4 <twi_onSlaveTransmit>
    8a40:	f0 91 b5 23 	lds	r31, 0x23B5	; 0x8023b5 <twi_onSlaveTransmit+0x1>
    8a44:	09 95       	icall
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:495
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    8a46:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <twi_txBufferLength>
    8a4a:	81 11       	cpse	r24, r1
    8a4c:	0f c0       	rjmp	.+30     	; 0x8a6c <__vector_26+0x15e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:496
        twi_txBufferLength = 1;
    8a4e:	81 e0       	ldi	r24, 0x01	; 1
    8a50:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <twi_txBufferLength>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:497
        twi_txBuffer[0] = 0x00;
    8a54:	10 92 2c 23 	sts	0x232C, r1	; 0x80232c <twi_txBuffer>
    8a58:	09 c0       	rjmp	.+18     	; 0x8a6c <__vector_26+0x15e>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:365
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
  switch(TW_STATUS){
    8a5a:	80 3c       	cpi	r24, 0xC0	; 192
    8a5c:	09 f4       	brne	.+2      	; 0x8a60 <__vector_26+0x152>
    8a5e:	76 c0       	rjmp	.+236    	; 0x8b4c <__vector_26+0x23e>
    8a60:	88 3c       	cpi	r24, 0xC8	; 200
    8a62:	09 f4       	brne	.+2      	; 0x8a66 <__vector_26+0x158>
    8a64:	73 c0       	rjmp	.+230    	; 0x8b4c <__vector_26+0x23e>
    8a66:	88 3b       	cpi	r24, 0xB8	; 184
    8a68:	09 f0       	breq	.+2      	; 0x8a6c <__vector_26+0x15e>
    8a6a:	7a cf       	rjmp	.-268    	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:502
        twi_txBuffer[0] = 0x00;
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    8a6c:	e0 91 2b 23 	lds	r30, 0x232B	; 0x80232b <twi_txBufferIndex>
    8a70:	81 e0       	ldi	r24, 0x01	; 1
    8a72:	8e 0f       	add	r24, r30
    8a74:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <twi_txBufferIndex>
    8a78:	f0 e0       	ldi	r31, 0x00	; 0
    8a7a:	e4 5d       	subi	r30, 0xD4	; 212
    8a7c:	fc 4d       	sbci	r31, 0xDC	; 220
    8a7e:	80 81       	ld	r24, Z
    8a80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:504
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    8a84:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <twi_txBufferIndex>
    8a88:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <twi_txBufferLength>
    8a8c:	29 c0       	rjmp	.+82     	; 0x8ae0 <__vector_26+0x1d2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:370
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    8a8e:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <twi_slarw>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:380
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    8a92:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:321
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    8a96:	85 ec       	ldi	r24, 0xC5	; 197
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:323
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    8a98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    8a9c:	61 cf       	rjmp	.-318    	; 0x8960 <__vector_26+0x52>
__vector_26():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:378

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    8a9e:	90 91 6f 23 	lds	r25, 0x236F	; 0x80236f <twi_masterBufferIndex>
    8aa2:	80 91 6e 23 	lds	r24, 0x236E	; 0x80236e <twi_masterBufferLength>
    8aa6:	98 17       	cp	r25, r24
    8aa8:	58 f5       	brcc	.+86     	; 0x8b00 <__vector_26+0x1f2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:380
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    8aaa:	e0 91 6f 23 	lds	r30, 0x236F	; 0x80236f <twi_masterBufferIndex>
    8aae:	81 e0       	ldi	r24, 0x01	; 1
    8ab0:	8e 0f       	add	r24, r30
    8ab2:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <twi_masterBufferIndex>
    8ab6:	f0 e0       	ldi	r31, 0x00	; 0
    8ab8:	e0 59       	subi	r30, 0x90	; 144
    8aba:	fc 4d       	sbci	r31, 0xDC	; 220
    8abc:	80 81       	ld	r24, Z
    8abe:	e9 cf       	rjmp	.-46     	; 0x8a92 <__vector_26+0x184>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:411
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    8ac0:	e0 91 6f 23 	lds	r30, 0x236F	; 0x80236f <twi_masterBufferIndex>
    8ac4:	81 e0       	ldi	r24, 0x01	; 1
    8ac6:	8e 0f       	add	r24, r30
    8ac8:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <twi_masterBufferIndex>
    8acc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    8ad0:	f0 e0       	ldi	r31, 0x00	; 0
    8ad2:	e0 59       	subi	r30, 0x90	; 144
    8ad4:	fc 4d       	sbci	r31, 0xDC	; 220
    8ad6:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:414
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    8ad8:	90 91 6f 23 	lds	r25, 0x236F	; 0x80236f <twi_masterBufferIndex>
    8adc:	80 91 6e 23 	lds	r24, 0x236E	; 0x80236e <twi_masterBufferLength>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:504
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    8ae0:	98 17       	cp	r25, r24
    8ae2:	c8 f2       	brcs	.-78     	; 0x8a96 <__vector_26+0x188>
twi_reply():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:323
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    8ae4:	85 e8       	ldi	r24, 0x85	; 133
    8ae6:	d8 cf       	rjmp	.-80     	; 0x8a98 <__vector_26+0x18a>
__vector_26():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:422
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    8ae8:	e0 91 6f 23 	lds	r30, 0x236F	; 0x80236f <twi_masterBufferIndex>
    8aec:	81 e0       	ldi	r24, 0x01	; 1
    8aee:	8e 0f       	add	r24, r30
    8af0:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <twi_masterBufferIndex>
    8af4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    8af8:	f0 e0       	ldi	r31, 0x00	; 0
    8afa:	e0 59       	subi	r30, 0x90	; 144
    8afc:	fc 4d       	sbci	r31, 0xDC	; 220
    8afe:	80 83       	st	Z, r24
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:423
	if (twi_sendStop)
    8b00:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <twi_sendStop>
    8b04:	81 11       	cpse	r24, r1
    8b06:	5c cf       	rjmp	.-328    	; 0x89c0 <__vector_26+0xb2>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:426
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    8b08:	81 e0       	ldi	r24, 0x01	; 1
    8b0a:	80 93 b6 23 	sts	0x23B6, r24	; 0x8023b6 <twi_inRepStart>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:430
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    8b0e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:321
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    8b10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:515
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    8b14:	10 92 b9 23 	sts	0x23B9, r1	; 0x8023b9 <twi_state>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:516
      break;
    8b18:	23 cf       	rjmp	.-442    	; 0x8960 <__vector_26+0x52>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:464
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    8b1a:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <twi_rxBufferIndex>
    8b1e:	82 34       	cpi	r24, 0x42	; 66
    8b20:	30 f4       	brcc	.+12     	; 0x8b2e <__vector_26+0x220>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:465
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    8b22:	e0 91 e7 22 	lds	r30, 0x22E7	; 0x8022e7 <twi_rxBufferIndex>
    8b26:	f0 e0       	ldi	r31, 0x00	; 0
    8b28:	e8 51       	subi	r30, 0x18	; 24
    8b2a:	fd 4d       	sbci	r31, 0xDD	; 221
    8b2c:	10 82       	st	Z, r1
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:468
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    8b2e:	0e 94 77 44 	call	0x88ee	; 0x88ee <twi_stop>
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:470
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    8b32:	60 91 e7 22 	lds	r22, 0x22E7	; 0x8022e7 <twi_rxBufferIndex>
    8b36:	70 e0       	ldi	r23, 0x00	; 0
    8b38:	e0 91 b2 23 	lds	r30, 0x23B2	; 0x8023b2 <twi_onSlaveReceive>
    8b3c:	f0 91 b3 23 	lds	r31, 0x23B3	; 0x8023b3 <twi_onSlaveReceive+0x1>
    8b40:	88 ee       	ldi	r24, 0xE8	; 232
    8b42:	92 e2       	ldi	r25, 0x22	; 34
    8b44:	09 95       	icall
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:472
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    8b46:	10 92 e7 22 	sts	0x22E7, r1	; 0x8022e7 <twi_rxBufferIndex>
    8b4a:	2f cf       	rjmp	.-418    	; 0x89aa <__vector_26+0x9c>
twi_reply():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:321
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    8b4c:	85 ec       	ldi	r24, 0xC5	; 197
    8b4e:	e0 cf       	rjmp	.-64     	; 0x8b10 <__vector_26+0x202>
__vector_26():
/home/oliver/Documents/Nava_Firmware/Nava-909-firmware/Nava_v1_028beta/src/WireN/utility/twiN.c:522

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    8b50:	10 92 e6 22 	sts	0x22E6, r1	; 0x8022e6 <twi_error>
    8b54:	35 cf       	rjmp	.-406    	; 0x89c0 <__vector_26+0xb2>

00008b56 <Print::flush()>:
_ZN5Print5flushEv():
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:260
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
    8b56:	08 95       	ret

00008b58 <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    8b58:	cf 93       	push	r28
    8b5a:	df 93       	push	r29
    8b5c:	ec 01       	movw	r28, r24
    8b5e:	60 e0       	ldi	r22, 0x00	; 0
    8b60:	8e 81       	ldd	r24, Y+6	; 0x06
    8b62:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8b66:	81 e0       	ldi	r24, 0x01	; 1
    8b68:	90 e0       	ldi	r25, 0x00	; 0
    8b6a:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
    8b6e:	61 e0       	ldi	r22, 0x01	; 1
    8b70:	8e 81       	ldd	r24, Y+6	; 0x06
    8b72:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8b76:	81 e0       	ldi	r24, 0x01	; 1
    8b78:	90 e0       	ldi	r25, 0x00	; 0
    8b7a:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
    8b7e:	60 e0       	ldi	r22, 0x00	; 0
    8b80:	8e 81       	ldd	r24, Y+6	; 0x06
    8b82:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8b86:	84 e6       	ldi	r24, 0x64	; 100
    8b88:	90 e0       	ldi	r25, 0x00	; 0
    8b8a:	df 91       	pop	r29
    8b8c:	cf 91       	pop	r28
    8b8e:	0c 94 df 4b 	jmp	0x97be	; 0x97be <delayMicroseconds>

00008b92 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    8b92:	cf 92       	push	r12
    8b94:	df 92       	push	r13
    8b96:	ef 92       	push	r14
    8b98:	ff 92       	push	r15
    8b9a:	0f 93       	push	r16
    8b9c:	1f 93       	push	r17
    8b9e:	cf 93       	push	r28
    8ba0:	df 93       	push	r29
    8ba2:	6c 01       	movw	r12, r24
    8ba4:	7c 01       	movw	r14, r24
    8ba6:	87 e0       	ldi	r24, 0x07	; 7
    8ba8:	e8 0e       	add	r14, r24
    8baa:	f1 1c       	adc	r15, r1
    8bac:	d0 e0       	ldi	r29, 0x00	; 0
    8bae:	c0 e0       	ldi	r28, 0x00	; 0
    8bb0:	06 2f       	mov	r16, r22
    8bb2:	10 e0       	ldi	r17, 0x00	; 0
    8bb4:	b8 01       	movw	r22, r16
    8bb6:	0c 2e       	mov	r0, r28
    8bb8:	02 c0       	rjmp	.+4      	; 0x8bbe <LiquidCrystal::write4bits(unsigned char)+0x2c>
    8bba:	75 95       	asr	r23
    8bbc:	67 95       	ror	r22
    8bbe:	0a 94       	dec	r0
    8bc0:	e2 f7       	brpl	.-8      	; 0x8bba <LiquidCrystal::write4bits(unsigned char)+0x28>
    8bc2:	61 70       	andi	r22, 0x01	; 1
    8bc4:	f7 01       	movw	r30, r14
    8bc6:	81 91       	ld	r24, Z+
    8bc8:	7f 01       	movw	r14, r30
    8bca:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8bce:	21 96       	adiw	r28, 0x01	; 1
    8bd0:	c4 30       	cpi	r28, 0x04	; 4
    8bd2:	d1 05       	cpc	r29, r1
    8bd4:	79 f7       	brne	.-34     	; 0x8bb4 <LiquidCrystal::write4bits(unsigned char)+0x22>
    8bd6:	c6 01       	movw	r24, r12
    8bd8:	df 91       	pop	r29
    8bda:	cf 91       	pop	r28
    8bdc:	1f 91       	pop	r17
    8bde:	0f 91       	pop	r16
    8be0:	ff 90       	pop	r15
    8be2:	ef 90       	pop	r14
    8be4:	df 90       	pop	r13
    8be6:	cf 90       	pop	r12
    8be8:	0c 94 ac 45 	jmp	0x8b58	; 0x8b58 <LiquidCrystal::pulseEnable()>

00008bec <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    8bec:	cf 92       	push	r12
    8bee:	df 92       	push	r13
    8bf0:	ef 92       	push	r14
    8bf2:	ff 92       	push	r15
    8bf4:	0f 93       	push	r16
    8bf6:	1f 93       	push	r17
    8bf8:	cf 93       	push	r28
    8bfa:	df 93       	push	r29
    8bfc:	6c 01       	movw	r12, r24
    8bfe:	7c 01       	movw	r14, r24
    8c00:	87 e0       	ldi	r24, 0x07	; 7
    8c02:	e8 0e       	add	r14, r24
    8c04:	f1 1c       	adc	r15, r1
    8c06:	d0 e0       	ldi	r29, 0x00	; 0
    8c08:	c0 e0       	ldi	r28, 0x00	; 0
    8c0a:	06 2f       	mov	r16, r22
    8c0c:	10 e0       	ldi	r17, 0x00	; 0
    8c0e:	b8 01       	movw	r22, r16
    8c10:	0c 2e       	mov	r0, r28
    8c12:	02 c0       	rjmp	.+4      	; 0x8c18 <LiquidCrystal::write8bits(unsigned char)+0x2c>
    8c14:	75 95       	asr	r23
    8c16:	67 95       	ror	r22
    8c18:	0a 94       	dec	r0
    8c1a:	e2 f7       	brpl	.-8      	; 0x8c14 <LiquidCrystal::write8bits(unsigned char)+0x28>
    8c1c:	61 70       	andi	r22, 0x01	; 1
    8c1e:	f7 01       	movw	r30, r14
    8c20:	81 91       	ld	r24, Z+
    8c22:	7f 01       	movw	r14, r30
    8c24:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8c28:	21 96       	adiw	r28, 0x01	; 1
    8c2a:	c8 30       	cpi	r28, 0x08	; 8
    8c2c:	d1 05       	cpc	r29, r1
    8c2e:	79 f7       	brne	.-34     	; 0x8c0e <LiquidCrystal::write8bits(unsigned char)+0x22>
    8c30:	c6 01       	movw	r24, r12
    8c32:	df 91       	pop	r29
    8c34:	cf 91       	pop	r28
    8c36:	1f 91       	pop	r17
    8c38:	0f 91       	pop	r16
    8c3a:	ff 90       	pop	r15
    8c3c:	ef 90       	pop	r14
    8c3e:	df 90       	pop	r13
    8c40:	cf 90       	pop	r12
    8c42:	0c 94 ac 45 	jmp	0x8b58	; 0x8b58 <LiquidCrystal::pulseEnable()>

00008c46 <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    8c46:	1f 93       	push	r17
    8c48:	cf 93       	push	r28
    8c4a:	df 93       	push	r29
    8c4c:	ec 01       	movw	r28, r24
    8c4e:	16 2f       	mov	r17, r22
    8c50:	64 2f       	mov	r22, r20
    8c52:	8c 81       	ldd	r24, Y+4	; 0x04
    8c54:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8c58:	8d 81       	ldd	r24, Y+5	; 0x05
    8c5a:	8f 3f       	cpi	r24, 0xFF	; 255
    8c5c:	19 f0       	breq	.+6      	; 0x8c64 <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    8c5e:	60 e0       	ldi	r22, 0x00	; 0
    8c60:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    8c66:	61 2f       	mov	r22, r17
    8c68:	84 ff       	sbrs	r24, 4
    8c6a:	06 c0       	rjmp	.+12     	; 0x8c78 <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    8c6c:	ce 01       	movw	r24, r28
    8c6e:	df 91       	pop	r29
    8c70:	cf 91       	pop	r28
    8c72:	1f 91       	pop	r17
    8c74:	0c 94 f6 45 	jmp	0x8bec	; 0x8bec <LiquidCrystal::write8bits(unsigned char)>
    8c78:	70 e0       	ldi	r23, 0x00	; 0
    8c7a:	84 e0       	ldi	r24, 0x04	; 4
    8c7c:	75 95       	asr	r23
    8c7e:	67 95       	ror	r22
    8c80:	8a 95       	dec	r24
    8c82:	e1 f7       	brne	.-8      	; 0x8c7c <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    8c84:	ce 01       	movw	r24, r28
    8c86:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <LiquidCrystal::write4bits(unsigned char)>
    8c8a:	61 2f       	mov	r22, r17
    8c8c:	ce 01       	movw	r24, r28
    8c8e:	df 91       	pop	r29
    8c90:	cf 91       	pop	r28
    8c92:	1f 91       	pop	r17
    8c94:	0c 94 c9 45 	jmp	0x8b92	; 0x8b92 <LiquidCrystal::write4bits(unsigned char)>

00008c98 <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    8c98:	40 e0       	ldi	r20, 0x00	; 0
    8c9a:	0c 94 23 46 	jmp	0x8c46	; 0x8c46 <LiquidCrystal::send(unsigned char, unsigned char)>

00008c9e <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    8c9e:	61 e0       	ldi	r22, 0x01	; 1
    8ca0:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>
    8ca4:	80 ed       	ldi	r24, 0xD0	; 208
    8ca6:	97 e0       	ldi	r25, 0x07	; 7
    8ca8:	0c 94 df 4b 	jmp	0x97be	; 0x97be <delayMicroseconds>

00008cac <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    8cac:	44 30       	cpi	r20, 0x04	; 4
    8cae:	08 f0       	brcs	.+2      	; 0x8cb2 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    8cb0:	43 e0       	ldi	r20, 0x03	; 3
    8cb2:	fc 01       	movw	r30, r24
    8cb4:	23 89       	ldd	r18, Z+19	; 0x13
    8cb6:	42 17       	cp	r20, r18
    8cb8:	10 f0       	brcs	.+4      	; 0x8cbe <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    8cba:	4f ef       	ldi	r20, 0xFF	; 255
    8cbc:	42 0f       	add	r20, r18
    8cbe:	fc 01       	movw	r30, r24
    8cc0:	e4 0f       	add	r30, r20
    8cc2:	f1 1d       	adc	r31, r1
    8cc4:	24 89       	ldd	r18, Z+20	; 0x14
    8cc6:	62 0f       	add	r22, r18
    8cc8:	60 68       	ori	r22, 0x80	; 128
    8cca:	0c 94 4c 46 	jmp	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>

00008cce <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    8cce:	fc 01       	movw	r30, r24
    8cd0:	60 89       	ldd	r22, Z+16	; 0x10
    8cd2:	26 2f       	mov	r18, r22
    8cd4:	24 60       	ori	r18, 0x04	; 4
    8cd6:	20 8b       	std	Z+16, r18	; 0x10
    8cd8:	6c 60       	ori	r22, 0x0C	; 12
    8cda:	0c 94 4c 46 	jmp	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>

00008cde <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    8cde:	0f 93       	push	r16
    8ce0:	1f 93       	push	r17
    8ce2:	cf 93       	push	r28
    8ce4:	df 93       	push	r29
    8ce6:	ec 01       	movw	r28, r24
    8ce8:	42 30       	cpi	r20, 0x02	; 2
    8cea:	18 f0       	brcs	.+6      	; 0x8cf2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    8cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    8cee:	88 60       	ori	r24, 0x08	; 8
    8cf0:	8f 87       	std	Y+15, r24	; 0x0f
    8cf2:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    8cf4:	1c 8a       	std	Y+20, r1	; 0x14
    8cf6:	80 e4       	ldi	r24, 0x40	; 64
    8cf8:	8d 8b       	std	Y+21, r24	; 0x15
    8cfa:	6e 8b       	std	Y+22, r22	; 0x16
    8cfc:	60 5c       	subi	r22, 0xC0	; 192
    8cfe:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    8d00:	22 23       	and	r18, r18
    8d02:	29 f0       	breq	.+10     	; 0x8d0e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    8d04:	41 30       	cpi	r20, 0x01	; 1
    8d06:	19 f4       	brne	.+6      	; 0x8d0e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    8d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    8d0a:	84 60       	ori	r24, 0x04	; 4
    8d0c:	8f 87       	std	Y+15, r24	; 0x0f
    8d0e:	61 e0       	ldi	r22, 0x01	; 1
    8d10:	8c 81       	ldd	r24, Y+4	; 0x04
    8d12:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
    8d16:	8d 81       	ldd	r24, Y+5	; 0x05
    8d18:	8f 3f       	cpi	r24, 0xFF	; 255
    8d1a:	19 f0       	breq	.+6      	; 0x8d22 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    8d1c:	61 e0       	ldi	r22, 0x01	; 1
    8d1e:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
    8d22:	61 e0       	ldi	r22, 0x01	; 1
    8d24:	8e 81       	ldd	r24, Y+6	; 0x06
    8d26:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
    8d2a:	8e 01       	movw	r16, r28
    8d2c:	98 01       	movw	r18, r16
    8d2e:	2c 1b       	sub	r18, r28
    8d30:	3d 0b       	sbc	r19, r29
    8d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    8d34:	84 fd       	sbrc	r24, 4
    8d36:	0d c0       	rjmp	.+26     	; 0x8d52 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    8d38:	84 e0       	ldi	r24, 0x04	; 4
    8d3a:	90 e0       	ldi	r25, 0x00	; 0
    8d3c:	0f 5f       	subi	r16, 0xFF	; 255
    8d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8d40:	28 17       	cp	r18, r24
    8d42:	39 07       	cpc	r19, r25
    8d44:	4c f4       	brge	.+18     	; 0x8d58 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    8d46:	61 e0       	ldi	r22, 0x01	; 1
    8d48:	f8 01       	movw	r30, r16
    8d4a:	86 81       	ldd	r24, Z+6	; 0x06
    8d4c:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <pinMode>
    8d50:	ed cf       	rjmp	.-38     	; 0x8d2c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    8d52:	88 e0       	ldi	r24, 0x08	; 8
    8d54:	90 e0       	ldi	r25, 0x00	; 0
    8d56:	f2 cf       	rjmp	.-28     	; 0x8d3c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    8d58:	80 e5       	ldi	r24, 0x50	; 80
    8d5a:	93 ec       	ldi	r25, 0xC3	; 195
    8d5c:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
    8d60:	60 e0       	ldi	r22, 0x00	; 0
    8d62:	8c 81       	ldd	r24, Y+4	; 0x04
    8d64:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8d68:	60 e0       	ldi	r22, 0x00	; 0
    8d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    8d6c:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8d70:	8d 81       	ldd	r24, Y+5	; 0x05
    8d72:	8f 3f       	cpi	r24, 0xFF	; 255
    8d74:	19 f0       	breq	.+6      	; 0x8d7c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    8d76:	60 e0       	ldi	r22, 0x00	; 0
    8d78:	0e 94 ae 4c 	call	0x995c	; 0x995c <digitalWrite>
    8d7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    8d7e:	64 fd       	sbrc	r22, 4
    8d80:	33 c0       	rjmp	.+102    	; 0x8de8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    8d82:	63 e0       	ldi	r22, 0x03	; 3
    8d84:	ce 01       	movw	r24, r28
    8d86:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <LiquidCrystal::write4bits(unsigned char)>
    8d8a:	84 e9       	ldi	r24, 0x94	; 148
    8d8c:	91 e1       	ldi	r25, 0x11	; 17
    8d8e:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
    8d92:	63 e0       	ldi	r22, 0x03	; 3
    8d94:	ce 01       	movw	r24, r28
    8d96:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <LiquidCrystal::write4bits(unsigned char)>
    8d9a:	84 e9       	ldi	r24, 0x94	; 148
    8d9c:	91 e1       	ldi	r25, 0x11	; 17
    8d9e:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
    8da2:	63 e0       	ldi	r22, 0x03	; 3
    8da4:	ce 01       	movw	r24, r28
    8da6:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <LiquidCrystal::write4bits(unsigned char)>
    8daa:	86 e9       	ldi	r24, 0x96	; 150
    8dac:	90 e0       	ldi	r25, 0x00	; 0
    8dae:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
    8db2:	62 e0       	ldi	r22, 0x02	; 2
    8db4:	ce 01       	movw	r24, r28
    8db6:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <LiquidCrystal::write4bits(unsigned char)>
    8dba:	6f 85       	ldd	r22, Y+15	; 0x0f
    8dbc:	60 62       	ori	r22, 0x20	; 32
    8dbe:	ce 01       	movw	r24, r28
    8dc0:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>
    8dc4:	84 e0       	ldi	r24, 0x04	; 4
    8dc6:	88 8b       	std	Y+16, r24	; 0x10
    8dc8:	ce 01       	movw	r24, r28
    8dca:	0e 94 67 46 	call	0x8cce	; 0x8cce <LiquidCrystal::display()>
    8dce:	ce 01       	movw	r24, r28
    8dd0:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <LiquidCrystal::clear()>
    8dd4:	82 e0       	ldi	r24, 0x02	; 2
    8dd6:	89 8b       	std	Y+17, r24	; 0x11
    8dd8:	66 e0       	ldi	r22, 0x06	; 6
    8dda:	ce 01       	movw	r24, r28
    8ddc:	df 91       	pop	r29
    8dde:	cf 91       	pop	r28
    8de0:	1f 91       	pop	r17
    8de2:	0f 91       	pop	r16
    8de4:	0c 94 4c 46 	jmp	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>
    8de8:	60 62       	ori	r22, 0x20	; 32
    8dea:	ce 01       	movw	r24, r28
    8dec:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>
    8df0:	84 e9       	ldi	r24, 0x94	; 148
    8df2:	91 e1       	ldi	r25, 0x11	; 17
    8df4:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
    8df8:	6f 85       	ldd	r22, Y+15	; 0x0f
    8dfa:	60 62       	ori	r22, 0x20	; 32
    8dfc:	ce 01       	movw	r24, r28
    8dfe:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>
    8e02:	86 e9       	ldi	r24, 0x96	; 150
    8e04:	90 e0       	ldi	r25, 0x00	; 0
    8e06:	0e 94 df 4b 	call	0x97be	; 0x97be <delayMicroseconds>
    8e0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    8e0c:	60 62       	ori	r22, 0x20	; 32
    8e0e:	ce 01       	movw	r24, r28
    8e10:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>
    8e14:	d2 cf       	rjmp	.-92     	; 0x8dba <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

00008e16 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    8e16:	cf 92       	push	r12
    8e18:	ef 92       	push	r14
    8e1a:	0f 93       	push	r16
    8e1c:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    8e1e:	13 82       	std	Z+3, r1	; 0x03
    8e20:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    8e22:	8a ed       	ldi	r24, 0xDA	; 218
    8e24:	93 e0       	ldi	r25, 0x03	; 3
    8e26:	91 83       	std	Z+1, r25	; 0x01
    8e28:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    8e2a:	64 83       	std	Z+4, r22	; 0x04
    8e2c:	8f ef       	ldi	r24, 0xFF	; 255
    8e2e:	85 83       	std	Z+5, r24	; 0x05
    8e30:	46 83       	std	Z+6, r20	; 0x06
    8e32:	27 83       	std	Z+7, r18	; 0x07
    8e34:	00 87       	std	Z+8, r16	; 0x08
    8e36:	e1 86       	std	Z+9, r14	; 0x09
    8e38:	c2 86       	std	Z+10, r12	; 0x0a
    8e3a:	13 86       	std	Z+11, r1	; 0x0b
    8e3c:	14 86       	std	Z+12, r1	; 0x0c
    8e3e:	15 86       	std	Z+13, r1	; 0x0d
    8e40:	16 86       	std	Z+14, r1	; 0x0e
    8e42:	17 86       	std	Z+15, r1	; 0x0f
    8e44:	20 e0       	ldi	r18, 0x00	; 0
    8e46:	41 e0       	ldi	r20, 0x01	; 1
    8e48:	60 e1       	ldi	r22, 0x10	; 16
    8e4a:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    8e4c:	0f 91       	pop	r16
    8e4e:	ef 90       	pop	r14
    8e50:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    8e52:	0c 94 6f 46 	jmp	0x8cde	; 0x8cde <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

00008e56 <LiquidCrystal::createChar(unsigned char, unsigned char*)>:
_ZN13LiquidCrystal10createCharEhPh():
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:265
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
    8e56:	ef 92       	push	r14
    8e58:	ff 92       	push	r15
    8e5a:	0f 93       	push	r16
    8e5c:	1f 93       	push	r17
    8e5e:	cf 93       	push	r28
    8e60:	df 93       	push	r29
    8e62:	8c 01       	movw	r16, r24
    8e64:	7a 01       	movw	r14, r20
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:266
  location &= 0x7; // we only have 8 locations 0-7
    8e66:	67 70       	andi	r22, 0x07	; 7
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:267
  command(LCD_SETCGRAMADDR | (location << 3));
    8e68:	88 e0       	ldi	r24, 0x08	; 8
    8e6a:	68 9f       	mul	r22, r24
    8e6c:	b0 01       	movw	r22, r0
    8e6e:	11 24       	eor	r1, r1
    8e70:	60 64       	ori	r22, 0x40	; 64
    8e72:	c8 01       	movw	r24, r16
    8e74:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <LiquidCrystal::command(unsigned char)>
    8e78:	e7 01       	movw	r28, r14
    8e7a:	a8 e0       	ldi	r26, 0x08	; 8
    8e7c:	ea 0e       	add	r14, r26
    8e7e:	f1 1c       	adc	r15, r1
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:269 (discriminator 2)
  for (int i=0; i<8; i++) {
    write(charmap[i]);
    8e80:	69 91       	ld	r22, Y+
    8e82:	d8 01       	movw	r26, r16
    8e84:	ed 91       	ld	r30, X+
    8e86:	fc 91       	ld	r31, X
    8e88:	01 90       	ld	r0, Z+
    8e8a:	f0 81       	ld	r31, Z
    8e8c:	e0 2d       	mov	r30, r0
    8e8e:	c8 01       	movw	r24, r16
    8e90:	09 95       	icall
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:268 (discriminator 2)
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    8e92:	ce 15       	cp	r28, r14
    8e94:	df 05       	cpc	r29, r15
    8e96:	a1 f7       	brne	.-24     	; 0x8e80 <LiquidCrystal::createChar(unsigned char, unsigned char*)+0x2a>
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:271
    write(charmap[i]);
  }
}
    8e98:	df 91       	pop	r29
    8e9a:	cf 91       	pop	r28
    8e9c:	1f 91       	pop	r17
    8e9e:	0f 91       	pop	r16
    8ea0:	ff 90       	pop	r15
    8ea2:	ef 90       	pop	r14
    8ea4:	08 95       	ret

00008ea6 <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    8ea6:	41 e0       	ldi	r20, 0x01	; 1
    8ea8:	0e 94 23 46 	call	0x8c46	; 0x8c46 <LiquidCrystal::send(unsigned char, unsigned char)>
/home/oliver/Documents/Arduino Sketches/libraries/LiquidCrystal/src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    8eac:	81 e0       	ldi	r24, 0x01	; 1
    8eae:	90 e0       	ldi	r25, 0x00	; 0
    8eb0:	08 95       	ret

00008eb2 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    8eb2:	fc 01       	movw	r30, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    8eb4:	91 8d       	ldd	r25, Z+25	; 0x19
    8eb6:	22 8d       	ldd	r18, Z+26	; 0x1a
    8eb8:	89 2f       	mov	r24, r25
    8eba:	90 e0       	ldi	r25, 0x00	; 0
    8ebc:	80 5c       	subi	r24, 0xC0	; 192
    8ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    8ec0:	82 1b       	sub	r24, r18
    8ec2:	91 09       	sbc	r25, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    8ec4:	8f 73       	andi	r24, 0x3F	; 63
    8ec6:	99 27       	eor	r25, r25
    8ec8:	08 95       	ret

00008eca <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    8eca:	fc 01       	movw	r30, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    8ecc:	91 8d       	ldd	r25, Z+25	; 0x19
    8ece:	82 8d       	ldd	r24, Z+26	; 0x1a
    8ed0:	98 17       	cp	r25, r24
    8ed2:	31 f0       	breq	.+12     	; 0x8ee0 <HardwareSerial::peek()+0x16>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    8ed4:	82 8d       	ldd	r24, Z+26	; 0x1a
    8ed6:	e8 0f       	add	r30, r24
    8ed8:	f1 1d       	adc	r31, r1
    8eda:	85 8d       	ldd	r24, Z+29	; 0x1d
    8edc:	90 e0       	ldi	r25, 0x00	; 0
    8ede:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    8ee0:	8f ef       	ldi	r24, 0xFF	; 255
    8ee2:	9f ef       	ldi	r25, 0xFF	; 255
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    8ee4:	08 95       	ret

00008ee6 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    8ee6:	fc 01       	movw	r30, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    8ee8:	91 8d       	ldd	r25, Z+25	; 0x19
    8eea:	82 8d       	ldd	r24, Z+26	; 0x1a
    8eec:	98 17       	cp	r25, r24
    8eee:	61 f0       	breq	.+24     	; 0x8f08 <HardwareSerial::read()+0x22>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    8ef0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    8ef2:	ae 0f       	add	r26, r30
    8ef4:	bf 2f       	mov	r27, r31
    8ef6:	b1 1d       	adc	r27, r1
    8ef8:	5d 96       	adiw	r26, 0x1d	; 29
    8efa:	8c 91       	ld	r24, X
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    8efc:	92 8d       	ldd	r25, Z+26	; 0x1a
    8efe:	9f 5f       	subi	r25, 0xFF	; 255
    8f00:	9f 73       	andi	r25, 0x3F	; 63
    8f02:	92 8f       	std	Z+26, r25	; 0x1a
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    8f04:	90 e0       	ldi	r25, 0x00	; 0
    8f06:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    8f08:	8f ef       	ldi	r24, 0xFF	; 255
    8f0a:	9f ef       	ldi	r25, 0xFF	; 255
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    8f0c:	08 95       	ret

00008f0e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    8f0e:	fc 01       	movw	r30, r24
    8f10:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    8f12:	44 8d       	ldd	r20, Z+28	; 0x1c
    8f14:	25 2f       	mov	r18, r21
    8f16:	30 e0       	ldi	r19, 0x00	; 0
    8f18:	84 2f       	mov	r24, r20
    8f1a:	90 e0       	ldi	r25, 0x00	; 0
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    8f1c:	82 1b       	sub	r24, r18
    8f1e:	93 0b       	sbc	r25, r19
    8f20:	54 17       	cp	r21, r20
    8f22:	10 f0       	brcs	.+4      	; 0x8f28 <HardwareSerial::availableForWrite()+0x1a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    8f24:	cf 96       	adiw	r24, 0x3f	; 63
    8f26:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    8f28:	01 97       	sbiw	r24, 0x01	; 1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    8f2a:	08 95       	ret

00008f2c <serialEventRun()>:
_Z14serialEventRunv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    8f2c:	80 e0       	ldi	r24, 0x00	; 0
    8f2e:	90 e0       	ldi	r25, 0x00	; 0
    8f30:	89 2b       	or	r24, r25
    8f32:	49 f0       	breq	.+18     	; 0x8f46 <serialEventRun()+0x1a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    8f34:	80 e0       	ldi	r24, 0x00	; 0
    8f36:	90 e0       	ldi	r25, 0x00	; 0
    8f38:	89 2b       	or	r24, r25
    8f3a:	29 f0       	breq	.+10     	; 0x8f46 <serialEventRun()+0x1a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    8f3c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    8f40:	81 11       	cpse	r24, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:66
    8f42:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    8f46:	81 ef       	ldi	r24, 0xF1	; 241
    8f48:	98 e4       	ldi	r25, 0x48	; 72
    8f4a:	89 2b       	or	r24, r25
    8f4c:	49 f0       	breq	.+18     	; 0x8f60 <serialEventRun()+0x34>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    8f4e:	80 e0       	ldi	r24, 0x00	; 0
    8f50:	90 e0       	ldi	r25, 0x00	; 0
    8f52:	89 2b       	or	r24, r25
    8f54:	29 f0       	breq	.+10     	; 0x8f60 <serialEventRun()+0x34>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    8f56:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <Serial1_available()>
    8f5a:	81 11       	cpse	r24, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:69
    8f5c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    8f60:	08 95       	ret

00008f62 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    8f62:	fc 01       	movw	r30, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    8f64:	a4 8d       	ldd	r26, Z+28	; 0x1c
    8f66:	a8 0f       	add	r26, r24
    8f68:	b9 2f       	mov	r27, r25
    8f6a:	b1 1d       	adc	r27, r1
    8f6c:	a3 5a       	subi	r26, 0xA3	; 163
    8f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    8f70:	2c 91       	ld	r18, X
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    8f72:	84 8d       	ldd	r24, Z+28	; 0x1c
    8f74:	90 e0       	ldi	r25, 0x00	; 0
    8f76:	01 96       	adiw	r24, 0x01	; 1
    8f78:	8f 73       	andi	r24, 0x3F	; 63
    8f7a:	99 27       	eor	r25, r25
    8f7c:	84 8f       	std	Z+28, r24	; 0x1c
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    8f7e:	a6 89       	ldd	r26, Z+22	; 0x16
    8f80:	b7 89       	ldd	r27, Z+23	; 0x17
    8f82:	2c 93       	st	X, r18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    8f84:	a0 89       	ldd	r26, Z+16	; 0x10
    8f86:	b1 89       	ldd	r27, Z+17	; 0x11
    8f88:	8c 91       	ld	r24, X
    8f8a:	80 64       	ori	r24, 0x40	; 64
    8f8c:	8c 93       	st	X, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    8f8e:	93 8d       	ldd	r25, Z+27	; 0x1b
    8f90:	84 8d       	ldd	r24, Z+28	; 0x1c
    8f92:	98 13       	cpse	r25, r24
    8f94:	06 c0       	rjmp	.+12     	; 0x8fa2 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    8f96:	02 88       	ldd	r0, Z+18	; 0x12
    8f98:	f3 89       	ldd	r31, Z+19	; 0x13
    8f9a:	e0 2d       	mov	r30, r0
    8f9c:	80 81       	ld	r24, Z
    8f9e:	8f 7d       	andi	r24, 0xDF	; 223
    8fa0:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    8fa2:	08 95       	ret

00008fa4 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    8fa4:	cf 93       	push	r28
    8fa6:	df 93       	push	r29
    8fa8:	ec 01       	movw	r28, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    8faa:	88 8d       	ldd	r24, Y+24	; 0x18
    8fac:	88 23       	and	r24, r24
    8fae:	b9 f0       	breq	.+46     	; 0x8fde <HardwareSerial::flush()+0x3a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    8fb0:	aa 89       	ldd	r26, Y+18	; 0x12
    8fb2:	bb 89       	ldd	r27, Y+19	; 0x13
    8fb4:	e8 89       	ldd	r30, Y+16	; 0x10
    8fb6:	f9 89       	ldd	r31, Y+17	; 0x11
    8fb8:	8c 91       	ld	r24, X
    8fba:	85 fd       	sbrc	r24, 5
    8fbc:	03 c0       	rjmp	.+6      	; 0x8fc4 <HardwareSerial::flush()+0x20>
    8fbe:	80 81       	ld	r24, Z
    8fc0:	86 fd       	sbrc	r24, 6
    8fc2:	0d c0       	rjmp	.+26     	; 0x8fde <HardwareSerial::flush()+0x3a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    8fc4:	0f b6       	in	r0, 0x3f	; 63
    8fc6:	07 fc       	sbrc	r0, 7
    8fc8:	f7 cf       	rjmp	.-18     	; 0x8fb8 <HardwareSerial::flush()+0x14>
    8fca:	8c 91       	ld	r24, X
    8fcc:	85 ff       	sbrs	r24, 5
    8fce:	f2 cf       	rjmp	.-28     	; 0x8fb4 <HardwareSerial::flush()+0x10>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    8fd0:	80 81       	ld	r24, Z
    8fd2:	85 ff       	sbrs	r24, 5
    8fd4:	ed cf       	rjmp	.-38     	; 0x8fb0 <HardwareSerial::flush()+0xc>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    8fd6:	ce 01       	movw	r24, r28
    8fd8:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <HardwareSerial::_tx_udr_empty_irq()>
    8fdc:	e9 cf       	rjmp	.-46     	; 0x8fb0 <HardwareSerial::flush()+0xc>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    8fde:	df 91       	pop	r29
    8fe0:	cf 91       	pop	r28
    8fe2:	08 95       	ret

00008fe4 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    8fe4:	ef 92       	push	r14
    8fe6:	ff 92       	push	r15
    8fe8:	0f 93       	push	r16
    8fea:	1f 93       	push	r17
    8fec:	cf 93       	push	r28
    8fee:	df 93       	push	r29
    8ff0:	ec 01       	movw	r28, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    8ff2:	81 e0       	ldi	r24, 0x01	; 1
    8ff4:	88 8f       	std	Y+24, r24	; 0x18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    8ff6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    8ff8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8ffa:	98 13       	cpse	r25, r24
    8ffc:	16 c0       	rjmp	.+44     	; 0x902a <HardwareSerial::write(unsigned char)+0x46>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    8ffe:	e8 89       	ldd	r30, Y+16	; 0x10
    9000:	f9 89       	ldd	r31, Y+17	; 0x11
    9002:	80 81       	ld	r24, Z
    9004:	85 ff       	sbrs	r24, 5
    9006:	11 c0       	rjmp	.+34     	; 0x902a <HardwareSerial::write(unsigned char)+0x46>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    9008:	ee 89       	ldd	r30, Y+22	; 0x16
    900a:	ff 89       	ldd	r31, Y+23	; 0x17
    900c:	60 83       	st	Z, r22
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    900e:	e8 89       	ldd	r30, Y+16	; 0x10
    9010:	f9 89       	ldd	r31, Y+17	; 0x11
    9012:	80 81       	ld	r24, Z
    9014:	80 64       	ori	r24, 0x40	; 64
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    9016:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    9018:	81 e0       	ldi	r24, 0x01	; 1
    901a:	90 e0       	ldi	r25, 0x00	; 0
    901c:	df 91       	pop	r29
    901e:	cf 91       	pop	r28
    9020:	1f 91       	pop	r17
    9022:	0f 91       	pop	r16
    9024:	ff 90       	pop	r15
    9026:	ef 90       	pop	r14
    9028:	08 95       	ret
    902a:	f6 2e       	mov	r15, r22
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    902c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    902e:	10 e0       	ldi	r17, 0x00	; 0
    9030:	0f 5f       	subi	r16, 0xFF	; 255
    9032:	1f 4f       	sbci	r17, 0xFF	; 255
    9034:	0f 73       	andi	r16, 0x3F	; 63
    9036:	11 27       	eor	r17, r17
    9038:	e0 2e       	mov	r14, r16
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    903a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    903c:	8e 11       	cpse	r24, r14
    903e:	0c c0       	rjmp	.+24     	; 0x9058 <HardwareSerial::write(unsigned char)+0x74>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    9040:	0f b6       	in	r0, 0x3f	; 63
    9042:	07 fc       	sbrc	r0, 7
    9044:	fa cf       	rjmp	.-12     	; 0x903a <HardwareSerial::write(unsigned char)+0x56>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    9046:	e8 89       	ldd	r30, Y+16	; 0x10
    9048:	f9 89       	ldd	r31, Y+17	; 0x11
    904a:	80 81       	ld	r24, Z
    904c:	85 ff       	sbrs	r24, 5
    904e:	f5 cf       	rjmp	.-22     	; 0x903a <HardwareSerial::write(unsigned char)+0x56>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    9050:	ce 01       	movw	r24, r28
    9052:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <HardwareSerial::_tx_udr_empty_irq()>
    9056:	f1 cf       	rjmp	.-30     	; 0x903a <HardwareSerial::write(unsigned char)+0x56>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    9058:	eb 8d       	ldd	r30, Y+27	; 0x1b
    905a:	ec 0f       	add	r30, r28
    905c:	fd 2f       	mov	r31, r29
    905e:	f1 1d       	adc	r31, r1
    9060:	e3 5a       	subi	r30, 0xA3	; 163
    9062:	ff 4f       	sbci	r31, 0xFF	; 255
    9064:	f0 82       	st	Z, r15
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    9066:	0b 8f       	std	Y+27, r16	; 0x1b
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    9068:	ea 89       	ldd	r30, Y+18	; 0x12
    906a:	fb 89       	ldd	r31, Y+19	; 0x13
    906c:	80 81       	ld	r24, Z
    906e:	80 62       	ori	r24, 0x20	; 32
    9070:	d2 cf       	rjmp	.-92     	; 0x9016 <HardwareSerial::write(unsigned char)+0x32>

00009072 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    9072:	cf 92       	push	r12
    9074:	df 92       	push	r13
    9076:	ef 92       	push	r14
    9078:	ff 92       	push	r15
    907a:	1f 93       	push	r17
    907c:	cf 93       	push	r28
    907e:	df 93       	push	r29
    9080:	ec 01       	movw	r28, r24
    9082:	6a 01       	movw	r12, r20
    9084:	7b 01       	movw	r14, r22
    9086:	12 2f       	mov	r17, r18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    9088:	e8 89       	ldd	r30, Y+16	; 0x10
    908a:	f9 89       	ldd	r31, Y+17	; 0x11
    908c:	82 e0       	ldi	r24, 0x02	; 2
    908e:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    9090:	c1 14       	cp	r12, r1
    9092:	81 ee       	ldi	r24, 0xE1	; 225
    9094:	d8 06       	cpc	r13, r24
    9096:	e1 04       	cpc	r14, r1
    9098:	f1 04       	cpc	r15, r1
    909a:	a1 f0       	breq	.+40     	; 0x90c4 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    909c:	60 e0       	ldi	r22, 0x00	; 0
    909e:	79 e0       	ldi	r23, 0x09	; 9
    90a0:	8d e3       	ldi	r24, 0x3D	; 61
    90a2:	90 e0       	ldi	r25, 0x00	; 0
    90a4:	a7 01       	movw	r20, r14
    90a6:	96 01       	movw	r18, r12
    90a8:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <__udivmodsi4>
    90ac:	21 50       	subi	r18, 0x01	; 1
    90ae:	31 09       	sbc	r19, r1
    90b0:	41 09       	sbc	r20, r1
    90b2:	51 09       	sbc	r21, r1
    90b4:	56 95       	lsr	r21
    90b6:	47 95       	ror	r20
    90b8:	37 95       	ror	r19
    90ba:	27 95       	ror	r18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    90bc:	21 15       	cp	r18, r1
    90be:	80 e1       	ldi	r24, 0x10	; 16
    90c0:	38 07       	cpc	r19, r24
    90c2:	98 f0       	brcs	.+38     	; 0x90ea <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    90c4:	e8 89       	ldd	r30, Y+16	; 0x10
    90c6:	f9 89       	ldd	r31, Y+17	; 0x11
    90c8:	10 82       	st	Z, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    90ca:	60 e8       	ldi	r22, 0x80	; 128
    90cc:	74 e8       	ldi	r23, 0x84	; 132
    90ce:	8e e1       	ldi	r24, 0x1E	; 30
    90d0:	90 e0       	ldi	r25, 0x00	; 0
    90d2:	a7 01       	movw	r20, r14
    90d4:	96 01       	movw	r18, r12
    90d6:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <__udivmodsi4>
    90da:	21 50       	subi	r18, 0x01	; 1
    90dc:	31 09       	sbc	r19, r1
    90de:	41 09       	sbc	r20, r1
    90e0:	51 09       	sbc	r21, r1
    90e2:	56 95       	lsr	r21
    90e4:	47 95       	ror	r20
    90e6:	37 95       	ror	r19
    90e8:	27 95       	ror	r18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    90ea:	ec 85       	ldd	r30, Y+12	; 0x0c
    90ec:	fd 85       	ldd	r31, Y+13	; 0x0d
    90ee:	30 83       	st	Z, r19
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    90f0:	ee 85       	ldd	r30, Y+14	; 0x0e
    90f2:	ff 85       	ldd	r31, Y+15	; 0x0f
    90f4:	20 83       	st	Z, r18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    90f6:	18 8e       	std	Y+24, r1	; 0x18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    90f8:	ec 89       	ldd	r30, Y+20	; 0x14
    90fa:	fd 89       	ldd	r31, Y+21	; 0x15
    90fc:	10 83       	st	Z, r17
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    90fe:	ea 89       	ldd	r30, Y+18	; 0x12
    9100:	fb 89       	ldd	r31, Y+19	; 0x13
    9102:	80 81       	ld	r24, Z
    9104:	88 69       	ori	r24, 0x98	; 152
    9106:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    9108:	ea 89       	ldd	r30, Y+18	; 0x12
    910a:	fb 89       	ldd	r31, Y+19	; 0x13
    910c:	80 81       	ld	r24, Z
    910e:	8f 7d       	andi	r24, 0xDF	; 223
    9110:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:136
}
    9112:	df 91       	pop	r29
    9114:	cf 91       	pop	r28
    9116:	1f 91       	pop	r17
    9118:	ff 90       	pop	r15
    911a:	ef 90       	pop	r14
    911c:	df 90       	pop	r13
    911e:	cf 90       	pop	r12
    9120:	08 95       	ret

00009122 <__vector_28>:
__vector_28():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    9122:	1f 92       	push	r1
    9124:	0f 92       	push	r0
    9126:	0f b6       	in	r0, 0x3f	; 63
    9128:	0f 92       	push	r0
    912a:	11 24       	eor	r1, r1
    912c:	0b b6       	in	r0, 0x3b	; 59
    912e:	0f 92       	push	r0
    9130:	2f 93       	push	r18
    9132:	8f 93       	push	r24
    9134:	9f 93       	push	r25
    9136:	ef 93       	push	r30
    9138:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    913a:	e0 91 ca 23 	lds	r30, 0x23CA	; 0x8023ca <Serial1+0x10>
    913e:	f0 91 cb 23 	lds	r31, 0x23CB	; 0x8023cb <Serial1+0x11>
    9142:	80 81       	ld	r24, Z
    9144:	e0 91 d0 23 	lds	r30, 0x23D0	; 0x8023d0 <Serial1+0x16>
    9148:	f0 91 d1 23 	lds	r31, 0x23D1	; 0x8023d1 <Serial1+0x17>
    914c:	82 fd       	sbrc	r24, 2
    914e:	1d c0       	rjmp	.+58     	; 0x918a <__vector_28+0x68>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    9150:	90 81       	ld	r25, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    9152:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <Serial1+0x19>
    9156:	8f 5f       	subi	r24, 0xFF	; 255
    9158:	8f 73       	andi	r24, 0x3F	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    915a:	20 91 d4 23 	lds	r18, 0x23D4	; 0x8023d4 <Serial1+0x1a>
    915e:	82 17       	cp	r24, r18
    9160:	41 f0       	breq	.+16     	; 0x9172 <__vector_28+0x50>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    9162:	e0 91 d3 23 	lds	r30, 0x23D3	; 0x8023d3 <Serial1+0x19>
    9166:	f0 e0       	ldi	r31, 0x00	; 0
    9168:	e6 54       	subi	r30, 0x46	; 70
    916a:	fc 4d       	sbci	r31, 0xDC	; 220
    916c:	95 8f       	std	Z+29, r25	; 0x1d
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    916e:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <Serial1+0x19>
__vector_28():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    9172:	ff 91       	pop	r31
    9174:	ef 91       	pop	r30
    9176:	9f 91       	pop	r25
    9178:	8f 91       	pop	r24
    917a:	2f 91       	pop	r18
    917c:	0f 90       	pop	r0
    917e:	0b be       	out	0x3b, r0	; 59
    9180:	0f 90       	pop	r0
    9182:	0f be       	out	0x3f, r0	; 63
    9184:	0f 90       	pop	r0
    9186:	1f 90       	pop	r1
    9188:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    918a:	80 81       	ld	r24, Z
__vector_28():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:50
    918c:	f2 cf       	rjmp	.-28     	; 0x9172 <__vector_28+0x50>

0000918e <__vector_29>:
__vector_29():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    918e:	1f 92       	push	r1
    9190:	0f 92       	push	r0
    9192:	0f b6       	in	r0, 0x3f	; 63
    9194:	0f 92       	push	r0
    9196:	11 24       	eor	r1, r1
    9198:	0b b6       	in	r0, 0x3b	; 59
    919a:	0f 92       	push	r0
    919c:	2f 93       	push	r18
    919e:	3f 93       	push	r19
    91a0:	4f 93       	push	r20
    91a2:	5f 93       	push	r21
    91a4:	6f 93       	push	r22
    91a6:	7f 93       	push	r23
    91a8:	8f 93       	push	r24
    91aa:	9f 93       	push	r25
    91ac:	af 93       	push	r26
    91ae:	bf 93       	push	r27
    91b0:	ef 93       	push	r30
    91b2:	ff 93       	push	r31
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    91b4:	8a eb       	ldi	r24, 0xBA	; 186
    91b6:	93 e2       	ldi	r25, 0x23	; 35
    91b8:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <HardwareSerial::_tx_udr_empty_irq()>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:61
}
    91bc:	ff 91       	pop	r31
    91be:	ef 91       	pop	r30
    91c0:	bf 91       	pop	r27
    91c2:	af 91       	pop	r26
    91c4:	9f 91       	pop	r25
    91c6:	8f 91       	pop	r24
    91c8:	7f 91       	pop	r23
    91ca:	6f 91       	pop	r22
    91cc:	5f 91       	pop	r21
    91ce:	4f 91       	pop	r20
    91d0:	3f 91       	pop	r19
    91d2:	2f 91       	pop	r18
    91d4:	0f 90       	pop	r0
    91d6:	0b be       	out	0x3b, r0	; 59
    91d8:	0f 90       	pop	r0
    91da:	0f be       	out	0x3f, r0	; 63
    91dc:	0f 90       	pop	r0
    91de:	1f 90       	pop	r1
    91e0:	18 95       	reti

000091e2 <Serial1_available()>:
_Z17Serial1_availablev():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    91e2:	8a eb       	ldi	r24, 0xBA	; 186
    91e4:	93 e2       	ldi	r25, 0x23	; 35
    91e6:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <HardwareSerial::available()>
    91ea:	21 e0       	ldi	r18, 0x01	; 1
    91ec:	89 2b       	or	r24, r25
    91ee:	09 f4       	brne	.+2      	; 0x91f2 <Serial1_available()+0x10>
    91f0:	20 e0       	ldi	r18, 0x00	; 0
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:69
}
    91f2:	82 2f       	mov	r24, r18
    91f4:	08 95       	ret

000091f6 <_GLOBAL__sub_I___vector_28>:
_ZN5PrintC4Ev():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.h:46
    91f6:	ea eb       	ldi	r30, 0xBA	; 186
    91f8:	f3 e2       	ldi	r31, 0x23	; 35
    91fa:	13 82       	std	Z+3, r1	; 0x03
    91fc:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Stream.h:63
    91fe:	88 ee       	ldi	r24, 0xE8	; 232
    9200:	93 e0       	ldi	r25, 0x03	; 3
    9202:	a0 e0       	ldi	r26, 0x00	; 0
    9204:	b0 e0       	ldi	r27, 0x00	; 0
    9206:	84 83       	std	Z+4, r24	; 0x04
    9208:	95 83       	std	Z+5, r25	; 0x05
    920a:	a6 83       	std	Z+6, r26	; 0x06
    920c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    920e:	86 ee       	ldi	r24, 0xE6	; 230
    9210:	93 e0       	ldi	r25, 0x03	; 3
    9212:	91 83       	std	Z+1, r25	; 0x01
    9214:	80 83       	st	Z, r24
    9216:	8d ec       	ldi	r24, 0xCD	; 205
    9218:	90 e0       	ldi	r25, 0x00	; 0
    921a:	95 87       	std	Z+13, r25	; 0x0d
    921c:	84 87       	std	Z+12, r24	; 0x0c
    921e:	8c ec       	ldi	r24, 0xCC	; 204
    9220:	90 e0       	ldi	r25, 0x00	; 0
    9222:	97 87       	std	Z+15, r25	; 0x0f
    9224:	86 87       	std	Z+14, r24	; 0x0e
    9226:	88 ec       	ldi	r24, 0xC8	; 200
    9228:	90 e0       	ldi	r25, 0x00	; 0
    922a:	91 8b       	std	Z+17, r25	; 0x11
    922c:	80 8b       	std	Z+16, r24	; 0x10
    922e:	89 ec       	ldi	r24, 0xC9	; 201
    9230:	90 e0       	ldi	r25, 0x00	; 0
    9232:	93 8b       	std	Z+19, r25	; 0x13
    9234:	82 8b       	std	Z+18, r24	; 0x12
    9236:	8a ec       	ldi	r24, 0xCA	; 202
    9238:	90 e0       	ldi	r25, 0x00	; 0
    923a:	95 8b       	std	Z+21, r25	; 0x15
    923c:	84 8b       	std	Z+20, r24	; 0x14
    923e:	8e ec       	ldi	r24, 0xCE	; 206
    9240:	90 e0       	ldi	r25, 0x00	; 0
    9242:	97 8b       	std	Z+23, r25	; 0x17
    9244:	86 8b       	std	Z+22, r24	; 0x16
    9246:	11 8e       	std	Z+25, r1	; 0x19
    9248:	12 8e       	std	Z+26, r1	; 0x1a
    924a:	13 8e       	std	Z+27, r1	; 0x1b
    924c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_28():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial1.cpp:69
    924e:	08 95       	ret

00009250 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.cpp:157
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    9250:	af 92       	push	r10
    9252:	bf 92       	push	r11
    9254:	cf 92       	push	r12
    9256:	df 92       	push	r13
    9258:	ef 92       	push	r14
    925a:	ff 92       	push	r15
    925c:	0f 93       	push	r16
    925e:	1f 93       	push	r17
    9260:	cf 93       	push	r28
    9262:	df 93       	push	r29
    9264:	6c 01       	movw	r12, r24
    9266:	7b 01       	movw	r14, r22
    9268:	8b 01       	movw	r16, r22
    926a:	04 0f       	add	r16, r20
    926c:	15 1f       	adc	r17, r21
    926e:	eb 01       	movw	r28, r22
    9270:	5e 01       	movw	r10, r28
    9272:	ae 18       	sub	r10, r14
    9274:	bf 08       	sbc	r11, r15
    9276:	c0 17       	cp	r28, r16
    9278:	d1 07       	cpc	r29, r17
    927a:	59 f0       	breq	.+22     	; 0x9292 <Print::write(unsigned char const*, unsigned int)+0x42>
    927c:	69 91       	ld	r22, Y+
    927e:	d6 01       	movw	r26, r12
    9280:	ed 91       	ld	r30, X+
    9282:	fc 91       	ld	r31, X
    9284:	01 90       	ld	r0, Z+
    9286:	f0 81       	ld	r31, Z
    9288:	e0 2d       	mov	r30, r0
    928a:	c6 01       	movw	r24, r12
    928c:	09 95       	icall
    928e:	89 2b       	or	r24, r25
    9290:	79 f7       	brne	.-34     	; 0x9270 <Print::write(unsigned char const*, unsigned int)+0x20>
    9292:	c5 01       	movw	r24, r10
    9294:	df 91       	pop	r29
    9296:	cf 91       	pop	r28
    9298:	1f 91       	pop	r17
    929a:	0f 91       	pop	r16
    929c:	ff 90       	pop	r15
    929e:	ef 90       	pop	r14
    92a0:	df 90       	pop	r13
    92a2:	cf 90       	pop	r12
    92a4:	bf 90       	pop	r11
    92a6:	af 90       	pop	r10
    92a8:	08 95       	ret

000092aa <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    92aa:	fb 01       	movw	r30, r22
    92ac:	01 90       	ld	r0, Z+
    92ae:	00 20       	and	r0, r0
    92b0:	e9 f7       	brne	.-6      	; 0x92ac <Print::write(char const*) [clone .part.2]+0x2>
    92b2:	31 97       	sbiw	r30, 0x01	; 1
    92b4:	af 01       	movw	r20, r30
    92b6:	46 1b       	sub	r20, r22
    92b8:	57 0b       	sbc	r21, r23
    92ba:	dc 01       	movw	r26, r24
    92bc:	ed 91       	ld	r30, X+
    92be:	fc 91       	ld	r31, X
    92c0:	02 80       	ldd	r0, Z+2	; 0x02
    92c2:	f3 81       	ldd	r31, Z+3	; 0x03
    92c4:	e0 2d       	mov	r30, r0
    92c6:	09 94       	ijmp

000092c8 <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    92c8:	db 01       	movw	r26, r22
    92ca:	14 96       	adiw	r26, 0x04	; 4
    92cc:	4d 91       	ld	r20, X+
    92ce:	5c 91       	ld	r21, X
    92d0:	15 97       	sbiw	r26, 0x05	; 5
    92d2:	6d 91       	ld	r22, X+
    92d4:	7c 91       	ld	r23, X
    92d6:	dc 01       	movw	r26, r24
    92d8:	ed 91       	ld	r30, X+
    92da:	fc 91       	ld	r31, X
    92dc:	02 80       	ldd	r0, Z+2	; 0x02
    92de:	f3 81       	ldd	r31, Z+3	; 0x03
    92e0:	e0 2d       	mov	r30, r0
    92e2:	09 94       	ijmp

000092e4 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    92e4:	61 15       	cp	r22, r1
    92e6:	71 05       	cpc	r23, r1
    92e8:	11 f0       	breq	.+4      	; 0x92ee <Print::print(char const*)+0xa>
    92ea:	0c 94 55 49 	jmp	0x92aa	; 0x92aa <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    92ee:	90 e0       	ldi	r25, 0x00	; 0
    92f0:	80 e0       	ldi	r24, 0x00	; 0
    92f2:	08 95       	ret

000092f4 <Print::print(char)>:
_ZN5Print5printEc():
    92f4:	dc 01       	movw	r26, r24
    92f6:	ed 91       	ld	r30, X+
    92f8:	fc 91       	ld	r31, X
    92fa:	01 90       	ld	r0, Z+
    92fc:	f0 81       	ld	r31, Z
    92fe:	e0 2d       	mov	r30, r0
    9300:	09 94       	ijmp

00009302 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    9302:	8f 92       	push	r8
    9304:	9f 92       	push	r9
    9306:	af 92       	push	r10
    9308:	bf 92       	push	r11
    930a:	ef 92       	push	r14
    930c:	ff 92       	push	r15
    930e:	0f 93       	push	r16
    9310:	1f 93       	push	r17
    9312:	cf 93       	push	r28
    9314:	df 93       	push	r29
    9316:	cd b7       	in	r28, 0x3d	; 61
    9318:	de b7       	in	r29, 0x3e	; 62
    931a:	a1 97       	sbiw	r28, 0x21	; 33
    931c:	0f b6       	in	r0, 0x3f	; 63
    931e:	f8 94       	cli
    9320:	de bf       	out	0x3e, r29	; 62
    9322:	0f be       	out	0x3f, r0	; 63
    9324:	cd bf       	out	0x3d, r28	; 61
    9326:	7c 01       	movw	r14, r24
    9328:	fa 01       	movw	r30, r20
    932a:	cb 01       	movw	r24, r22
    932c:	19 a2       	std	Y+33, r1	; 0x21
    932e:	22 30       	cpi	r18, 0x02	; 2
    9330:	08 f4       	brcc	.+2      	; 0x9334 <Print::printNumber(unsigned long, unsigned char)+0x32>
    9332:	2a e0       	ldi	r18, 0x0A	; 10
    9334:	8e 01       	movw	r16, r28
    9336:	0f 5d       	subi	r16, 0xDF	; 223
    9338:	1f 4f       	sbci	r17, 0xFF	; 255
    933a:	82 2e       	mov	r8, r18
    933c:	91 2c       	mov	r9, r1
    933e:	b1 2c       	mov	r11, r1
    9340:	a1 2c       	mov	r10, r1
    9342:	bf 01       	movw	r22, r30
    9344:	a5 01       	movw	r20, r10
    9346:	94 01       	movw	r18, r8
    9348:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <__udivmodsi4>
    934c:	f9 01       	movw	r30, r18
    934e:	ca 01       	movw	r24, r20
    9350:	6a 30       	cpi	r22, 0x0A	; 10
    9352:	0c f5       	brge	.+66     	; 0x9396 <Print::printNumber(unsigned long, unsigned char)+0x94>
    9354:	60 5d       	subi	r22, 0xD0	; 208
    9356:	d8 01       	movw	r26, r16
    9358:	6e 93       	st	-X, r22
    935a:	8d 01       	movw	r16, r26
    935c:	23 2b       	or	r18, r19
    935e:	24 2b       	or	r18, r20
    9360:	25 2b       	or	r18, r21
    9362:	79 f7       	brne	.-34     	; 0x9342 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    9364:	90 e0       	ldi	r25, 0x00	; 0
    9366:	80 e0       	ldi	r24, 0x00	; 0
    9368:	10 97       	sbiw	r26, 0x00	; 0
    936a:	21 f0       	breq	.+8      	; 0x9374 <Print::printNumber(unsigned long, unsigned char)+0x72>
    936c:	bd 01       	movw	r22, r26
    936e:	c7 01       	movw	r24, r14
    9370:	0e 94 55 49 	call	0x92aa	; 0x92aa <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    9374:	a1 96       	adiw	r28, 0x21	; 33
    9376:	0f b6       	in	r0, 0x3f	; 63
    9378:	f8 94       	cli
    937a:	de bf       	out	0x3e, r29	; 62
    937c:	0f be       	out	0x3f, r0	; 63
    937e:	cd bf       	out	0x3d, r28	; 61
    9380:	df 91       	pop	r29
    9382:	cf 91       	pop	r28
    9384:	1f 91       	pop	r17
    9386:	0f 91       	pop	r16
    9388:	ff 90       	pop	r15
    938a:	ef 90       	pop	r14
    938c:	bf 90       	pop	r11
    938e:	af 90       	pop	r10
    9390:	9f 90       	pop	r9
    9392:	8f 90       	pop	r8
    9394:	08 95       	ret
    9396:	69 5c       	subi	r22, 0xC9	; 201
    9398:	de cf       	rjmp	.-68     	; 0x9356 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000939a <Print::print(long, int)>:
_ZN5Print5printEli():
    939a:	cf 92       	push	r12
    939c:	df 92       	push	r13
    939e:	ef 92       	push	r14
    93a0:	ff 92       	push	r15
    93a2:	0f 93       	push	r16
    93a4:	1f 93       	push	r17
    93a6:	cf 93       	push	r28
    93a8:	df 93       	push	r29
    93aa:	21 15       	cp	r18, r1
    93ac:	31 05       	cpc	r19, r1
    93ae:	81 f4       	brne	.+32     	; 0x93d0 <Print::print(long, int)+0x36>
    93b0:	dc 01       	movw	r26, r24
    93b2:	ed 91       	ld	r30, X+
    93b4:	fc 91       	ld	r31, X
    93b6:	01 90       	ld	r0, Z+
    93b8:	f0 81       	ld	r31, Z
    93ba:	e0 2d       	mov	r30, r0
    93bc:	64 2f       	mov	r22, r20
    93be:	df 91       	pop	r29
    93c0:	cf 91       	pop	r28
    93c2:	1f 91       	pop	r17
    93c4:	0f 91       	pop	r16
    93c6:	ff 90       	pop	r15
    93c8:	ef 90       	pop	r14
    93ca:	df 90       	pop	r13
    93cc:	cf 90       	pop	r12
    93ce:	09 94       	ijmp
    93d0:	2a 30       	cpi	r18, 0x0A	; 10
    93d2:	31 05       	cpc	r19, r1
    93d4:	01 f5       	brne	.+64     	; 0x9416 <Print::print(long, int)+0x7c>
    93d6:	2a e0       	ldi	r18, 0x0A	; 10
    93d8:	77 ff       	sbrs	r23, 7
    93da:	1d c0       	rjmp	.+58     	; 0x9416 <Print::print(long, int)+0x7c>
    93dc:	6a 01       	movw	r12, r20
    93de:	7b 01       	movw	r14, r22
    93e0:	ec 01       	movw	r28, r24
    93e2:	6d e2       	ldi	r22, 0x2D	; 45
    93e4:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <Print::print(char)>
    93e8:	8c 01       	movw	r16, r24
    93ea:	44 27       	eor	r20, r20
    93ec:	55 27       	eor	r21, r21
    93ee:	ba 01       	movw	r22, r20
    93f0:	4c 19       	sub	r20, r12
    93f2:	5d 09       	sbc	r21, r13
    93f4:	6e 09       	sbc	r22, r14
    93f6:	7f 09       	sbc	r23, r15
    93f8:	2a e0       	ldi	r18, 0x0A	; 10
    93fa:	ce 01       	movw	r24, r28
    93fc:	0e 94 81 49 	call	0x9302	; 0x9302 <Print::printNumber(unsigned long, unsigned char)>
    9400:	80 0f       	add	r24, r16
    9402:	91 1f       	adc	r25, r17
    9404:	df 91       	pop	r29
    9406:	cf 91       	pop	r28
    9408:	1f 91       	pop	r17
    940a:	0f 91       	pop	r16
    940c:	ff 90       	pop	r15
    940e:	ef 90       	pop	r14
    9410:	df 90       	pop	r13
    9412:	cf 90       	pop	r12
    9414:	08 95       	ret
    9416:	df 91       	pop	r29
    9418:	cf 91       	pop	r28
    941a:	1f 91       	pop	r17
    941c:	0f 91       	pop	r16
    941e:	ff 90       	pop	r15
    9420:	ef 90       	pop	r14
    9422:	df 90       	pop	r13
    9424:	cf 90       	pop	r12
    9426:	0c 94 81 49 	jmp	0x9302	; 0x9302 <Print::printNumber(unsigned long, unsigned char)>

0000942a <Print::print(int, int)>:
_ZN5Print5printEii():
    942a:	9a 01       	movw	r18, r20
    942c:	ab 01       	movw	r20, r22
    942e:	77 0f       	add	r23, r23
    9430:	66 0b       	sbc	r22, r22
    9432:	77 0b       	sbc	r23, r23
    9434:	0c 94 cd 49 	jmp	0x939a	; 0x939a <Print::print(long, int)>

00009438 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    9438:	21 15       	cp	r18, r1
    943a:	31 05       	cpc	r19, r1
    943c:	41 f4       	brne	.+16     	; 0x944e <Print::print(unsigned long, int)+0x16>
    943e:	dc 01       	movw	r26, r24
    9440:	ed 91       	ld	r30, X+
    9442:	fc 91       	ld	r31, X
    9444:	01 90       	ld	r0, Z+
    9446:	f0 81       	ld	r31, Z
    9448:	e0 2d       	mov	r30, r0
    944a:	64 2f       	mov	r22, r20
    944c:	09 94       	ijmp
    944e:	0c 94 81 49 	jmp	0x9302	; 0x9302 <Print::printNumber(unsigned long, unsigned char)>

00009452 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    9452:	9a 01       	movw	r18, r20
    9454:	46 2f       	mov	r20, r22
    9456:	50 e0       	ldi	r21, 0x00	; 0
    9458:	70 e0       	ldi	r23, 0x00	; 0
    945a:	60 e0       	ldi	r22, 0x00	; 0
    945c:	0c 94 1c 4a 	jmp	0x9438	; 0x9438 <Print::print(unsigned long, int)>

00009460 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.cpp:83
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    9460:	9a 01       	movw	r18, r20
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.cpp:84
  return print((unsigned long) n, base);
    9462:	ab 01       	movw	r20, r22
    9464:	70 e0       	ldi	r23, 0x00	; 0
    9466:	60 e0       	ldi	r22, 0x00	; 0
    9468:	0c 94 1c 4a 	jmp	0x9438	; 0x9438 <Print::print(unsigned long, int)>

0000946c <randomSeed(unsigned long)>:
_Z10randomSeedm():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:30
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    946c:	61 15       	cp	r22, r1
    946e:	71 05       	cpc	r23, r1
    9470:	81 05       	cpc	r24, r1
    9472:	91 05       	cpc	r25, r1
    9474:	11 f0       	breq	.+4      	; 0x947a <randomSeed(unsigned long)+0xe>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:31
    srandom(seed);
    9476:	0c 94 35 4f 	jmp	0x9e6a	; 0x9e6a <srandom>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:33
  }
}
    947a:	08 95       	ret

0000947c <random(long)>:
_Z6randoml():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:36

long random(long howbig)
{
    947c:	cf 92       	push	r12
    947e:	df 92       	push	r13
    9480:	ef 92       	push	r14
    9482:	ff 92       	push	r15
    9484:	6b 01       	movw	r12, r22
    9486:	7c 01       	movw	r14, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:37
  if (howbig == 0) {
    9488:	c1 14       	cp	r12, r1
    948a:	d1 04       	cpc	r13, r1
    948c:	e1 04       	cpc	r14, r1
    948e:	f1 04       	cpc	r15, r1
    9490:	41 f0       	breq	.+16     	; 0x94a2 <random(long)+0x26>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:40
    return 0;
  }
  return random() % howbig;
    9492:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <random>
    9496:	a7 01       	movw	r20, r14
    9498:	96 01       	movw	r18, r12
    949a:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <__divmodsi4>
    949e:	6b 01       	movw	r12, r22
    94a0:	7c 01       	movw	r14, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:41
}
    94a2:	c7 01       	movw	r24, r14
    94a4:	b6 01       	movw	r22, r12
    94a6:	ff 90       	pop	r15
    94a8:	ef 90       	pop	r14
    94aa:	df 90       	pop	r13
    94ac:	cf 90       	pop	r12
    94ae:	08 95       	ret

000094b0 <random(long, long)>:
_Z6randomll():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:44

long random(long howsmall, long howbig)
{
    94b0:	cf 92       	push	r12
    94b2:	df 92       	push	r13
    94b4:	ef 92       	push	r14
    94b6:	ff 92       	push	r15
    94b8:	6b 01       	movw	r12, r22
    94ba:	7c 01       	movw	r14, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:45
  if (howsmall >= howbig) {
    94bc:	c2 16       	cp	r12, r18
    94be:	d3 06       	cpc	r13, r19
    94c0:	e4 06       	cpc	r14, r20
    94c2:	f5 06       	cpc	r15, r21
    94c4:	64 f4       	brge	.+24     	; 0x94de <random(long, long)+0x2e>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:48
    return howsmall;
  }
  long diff = howbig - howsmall;
    94c6:	ca 01       	movw	r24, r20
    94c8:	b9 01       	movw	r22, r18
    94ca:	6c 19       	sub	r22, r12
    94cc:	7d 09       	sbc	r23, r13
    94ce:	8e 09       	sbc	r24, r14
    94d0:	9f 09       	sbc	r25, r15
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:49
  return random(diff) + howsmall;
    94d2:	0e 94 3e 4a 	call	0x947c	; 0x947c <random(long)>
    94d6:	c6 0e       	add	r12, r22
    94d8:	d7 1e       	adc	r13, r23
    94da:	e8 1e       	adc	r14, r24
    94dc:	f9 1e       	adc	r15, r25
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WMath.cpp:50
}
    94de:	c7 01       	movw	r24, r14
    94e0:	b6 01       	movw	r22, r12
    94e2:	ff 90       	pop	r15
    94e4:	ef 90       	pop	r14
    94e6:	df 90       	pop	r13
    94e8:	cf 90       	pop	r12
    94ea:	08 95       	ret

000094ec <String::~String()>:
_ZN6StringD2Ev():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WString.cpp:82
{
  init();
  char buf[2 + 8 * sizeof(int)];
  itoa(value, buf, base);
  *this = buf;
}
    94ec:	fc 01       	movw	r30, r24
    94ee:	80 81       	ld	r24, Z
    94f0:	91 81       	ldd	r25, Z+1	; 0x01
    94f2:	0c 94 11 4e 	jmp	0x9c22	; 0x9c22 <free>

000094f6 <String::invalidate()>:
_ZN6String10invalidateEv():
    94f6:	cf 93       	push	r28
    94f8:	df 93       	push	r29
    94fa:	ec 01       	movw	r28, r24
    94fc:	88 81       	ld	r24, Y
    94fe:	99 81       	ldd	r25, Y+1	; 0x01
    9500:	00 97       	sbiw	r24, 0x00	; 0
    9502:	11 f0       	breq	.+4      	; 0x9508 <String::invalidate()+0x12>
    9504:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <free>
    9508:	19 82       	std	Y+1, r1	; 0x01
    950a:	18 82       	st	Y, r1
    950c:	1d 82       	std	Y+5, r1	; 0x05
    950e:	1c 82       	std	Y+4, r1	; 0x04
    9510:	1b 82       	std	Y+3, r1	; 0x03
    9512:	1a 82       	std	Y+2, r1	; 0x02
    9514:	df 91       	pop	r29
    9516:	cf 91       	pop	r28
    9518:	08 95       	ret

0000951a <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    951a:	0f 93       	push	r16
    951c:	1f 93       	push	r17
    951e:	cf 93       	push	r28
    9520:	df 93       	push	r29
    9522:	ec 01       	movw	r28, r24
    9524:	8b 01       	movw	r16, r22
    9526:	6f 5f       	subi	r22, 0xFF	; 255
    9528:	7f 4f       	sbci	r23, 0xFF	; 255
    952a:	88 81       	ld	r24, Y
    952c:	99 81       	ldd	r25, Y+1	; 0x01
    952e:	0e 94 3e 4f 	call	0x9e7c	; 0x9e7c <realloc>
    9532:	00 97       	sbiw	r24, 0x00	; 0
    9534:	51 f0       	breq	.+20     	; 0x954a <String::changeBuffer(unsigned int)+0x30>
    9536:	99 83       	std	Y+1, r25	; 0x01
    9538:	88 83       	st	Y, r24
    953a:	1b 83       	std	Y+3, r17	; 0x03
    953c:	0a 83       	std	Y+2, r16	; 0x02
    953e:	81 e0       	ldi	r24, 0x01	; 1
    9540:	df 91       	pop	r29
    9542:	cf 91       	pop	r28
    9544:	1f 91       	pop	r17
    9546:	0f 91       	pop	r16
    9548:	08 95       	ret
    954a:	80 e0       	ldi	r24, 0x00	; 0
    954c:	f9 cf       	rjmp	.-14     	; 0x9540 <String::changeBuffer(unsigned int)+0x26>

0000954e <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    954e:	cf 93       	push	r28
    9550:	df 93       	push	r29
    9552:	ec 01       	movw	r28, r24
    9554:	88 81       	ld	r24, Y
    9556:	99 81       	ldd	r25, Y+1	; 0x01
    9558:	89 2b       	or	r24, r25
    955a:	49 f0       	breq	.+18     	; 0x956e <String::reserve(unsigned int)+0x20>
    955c:	8a 81       	ldd	r24, Y+2	; 0x02
    955e:	9b 81       	ldd	r25, Y+3	; 0x03
    9560:	86 17       	cp	r24, r22
    9562:	97 07       	cpc	r25, r23
    9564:	20 f0       	brcs	.+8      	; 0x956e <String::reserve(unsigned int)+0x20>
    9566:	81 e0       	ldi	r24, 0x01	; 1
    9568:	df 91       	pop	r29
    956a:	cf 91       	pop	r28
    956c:	08 95       	ret
    956e:	ce 01       	movw	r24, r28
    9570:	0e 94 8d 4a 	call	0x951a	; 0x951a <String::changeBuffer(unsigned int)>
    9574:	88 23       	and	r24, r24
    9576:	c1 f3       	breq	.-16     	; 0x9568 <String::reserve(unsigned int)+0x1a>
    9578:	8c 81       	ldd	r24, Y+4	; 0x04
    957a:	9d 81       	ldd	r25, Y+5	; 0x05
    957c:	89 2b       	or	r24, r25
    957e:	99 f7       	brne	.-26     	; 0x9566 <String::reserve(unsigned int)+0x18>
    9580:	e8 81       	ld	r30, Y
    9582:	f9 81       	ldd	r31, Y+1	; 0x01
    9584:	10 82       	st	Z, r1
    9586:	ef cf       	rjmp	.-34     	; 0x9566 <String::reserve(unsigned int)+0x18>

00009588 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    9588:	ef 92       	push	r14
    958a:	ff 92       	push	r15
    958c:	0f 93       	push	r16
    958e:	1f 93       	push	r17
    9590:	cf 93       	push	r28
    9592:	df 93       	push	r29
    9594:	ec 01       	movw	r28, r24
    9596:	7b 01       	movw	r14, r22
    9598:	8a 01       	movw	r16, r20
    959a:	ba 01       	movw	r22, r20
    959c:	0e 94 a7 4a 	call	0x954e	; 0x954e <String::reserve(unsigned int)>
    95a0:	81 11       	cpse	r24, r1
    95a2:	0b c0       	rjmp	.+22     	; 0x95ba <String::copy(char const*, unsigned int)+0x32>
    95a4:	ce 01       	movw	r24, r28
    95a6:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <String::invalidate()>
    95aa:	ce 01       	movw	r24, r28
    95ac:	df 91       	pop	r29
    95ae:	cf 91       	pop	r28
    95b0:	1f 91       	pop	r17
    95b2:	0f 91       	pop	r16
    95b4:	ff 90       	pop	r15
    95b6:	ef 90       	pop	r14
    95b8:	08 95       	ret
    95ba:	1d 83       	std	Y+5, r17	; 0x05
    95bc:	0c 83       	std	Y+4, r16	; 0x04
    95be:	b7 01       	movw	r22, r14
    95c0:	88 81       	ld	r24, Y
    95c2:	99 81       	ldd	r25, Y+1	; 0x01
    95c4:	0e 94 2f 50 	call	0xa05e	; 0xa05e <strcpy>
    95c8:	f0 cf       	rjmp	.-32     	; 0x95aa <String::copy(char const*, unsigned int)+0x22>

000095ca <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    95ca:	fb 01       	movw	r30, r22
    95cc:	01 90       	ld	r0, Z+
    95ce:	00 20       	and	r0, r0
    95d0:	e9 f7       	brne	.-6      	; 0x95cc <String::operator=(char const*) [clone .part.3]+0x2>
    95d2:	31 97       	sbiw	r30, 0x01	; 1
    95d4:	af 01       	movw	r20, r30
    95d6:	46 1b       	sub	r20, r22
    95d8:	57 0b       	sbc	r21, r23
    95da:	0c 94 c4 4a 	jmp	0x9588	; 0x9588 <String::copy(char const*, unsigned int)>

000095de <String::String(unsigned int, unsigned char)>:
_ZN6StringC2Ejh():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WString.cpp:84

String::String(unsigned int value, unsigned char base)
    95de:	0f 93       	push	r16
    95e0:	1f 93       	push	r17
    95e2:	cf 93       	push	r28
    95e4:	df 93       	push	r29
    95e6:	cd b7       	in	r28, 0x3d	; 61
    95e8:	de b7       	in	r29, 0x3e	; 62
    95ea:	61 97       	sbiw	r28, 0x11	; 17
    95ec:	0f b6       	in	r0, 0x3f	; 63
    95ee:	f8 94       	cli
    95f0:	de bf       	out	0x3e, r29	; 62
    95f2:	0f be       	out	0x3f, r0	; 63
    95f4:	cd bf       	out	0x3d, r28	; 61
    95f6:	8c 01       	movw	r16, r24
    95f8:	cb 01       	movw	r24, r22
_ZN6String4initEv():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    95fa:	f8 01       	movw	r30, r16
    95fc:	11 82       	std	Z+1, r1	; 0x01
    95fe:	10 82       	st	Z, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    9600:	13 82       	std	Z+3, r1	; 0x03
    9602:	12 82       	std	Z+2, r1	; 0x02
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
    9604:	15 82       	std	Z+5, r1	; 0x05
    9606:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ejh():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WString.cpp:88

String::String(unsigned int value, unsigned char base)
{
  init();
  char buf[1 + 8 * sizeof(unsigned int)];
  utoa(value, buf, base);
    9608:	50 e0       	ldi	r21, 0x00	; 0
utoa():
/home/oliver/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:521
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    960a:	be 01       	movw	r22, r28
    960c:	6f 5f       	subi	r22, 0xFF	; 255
    960e:	7f 4f       	sbci	r23, 0xFF	; 255
    9610:	0e 94 36 50 	call	0xa06c	; 0xa06c <utoa>
_ZN6StringaSEPKc():
    9614:	be 01       	movw	r22, r28
    9616:	6f 5f       	subi	r22, 0xFF	; 255
    9618:	7f 4f       	sbci	r23, 0xFF	; 255
    961a:	c8 01       	movw	r24, r16
    961c:	0e 94 e5 4a 	call	0x95ca	; 0x95ca <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ejh():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/WString.cpp:90
  *this = buf;
}
    9620:	61 96       	adiw	r28, 0x11	; 17
    9622:	0f b6       	in	r0, 0x3f	; 63
    9624:	f8 94       	cli
    9626:	de bf       	out	0x3e, r29	; 62
    9628:	0f be       	out	0x3f, r0	; 63
    962a:	cd bf       	out	0x3d, r28	; 61
    962c:	df 91       	pop	r29
    962e:	cf 91       	pop	r28
    9630:	1f 91       	pop	r17
    9632:	0f 91       	pop	r16
    9634:	08 95       	ret

00009636 <initVariant>:
initVariant():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    9636:	08 95       	ret

00009638 <main>:
main():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    9638:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <init>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    963c:	0e 94 1b 4b 	call	0x9636	; 0x9636 <initVariant>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    9640:	0e 94 3e 2a 	call	0x547c	; 0x547c <setup>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    9644:	c6 e9       	ldi	r28, 0x96	; 150
    9646:	d7 e4       	ldi	r29, 0x47	; 71
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    9648:	0e 94 df 3c 	call	0x79be	; 0x79be <loop>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    964c:	20 97       	sbiw	r28, 0x00	; 0
    964e:	e1 f3       	breq	.-8      	; 0x9648 <main+0x10>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    9650:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <serialEventRun()>
    9654:	f9 cf       	rjmp	.-14     	; 0x9648 <main+0x10>

00009656 <__vector_18>:
__vector_18():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    9656:	1f 92       	push	r1
    9658:	0f 92       	push	r0
    965a:	0f b6       	in	r0, 0x3f	; 63
    965c:	0f 92       	push	r0
    965e:	11 24       	eor	r1, r1
    9660:	2f 93       	push	r18
    9662:	3f 93       	push	r19
    9664:	8f 93       	push	r24
    9666:	9f 93       	push	r25
    9668:	af 93       	push	r26
    966a:	bf 93       	push	r27
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    966c:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <timer0_millis>
    9670:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <timer0_millis+0x1>
    9674:	a0 91 5e 24 	lds	r26, 0x245E	; 0x80245e <timer0_millis+0x2>
    9678:	b0 91 5f 24 	lds	r27, 0x245F	; 0x80245f <timer0_millis+0x3>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    967c:	30 91 5b 24 	lds	r19, 0x245B	; 0x80245b <timer0_fract>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    9680:	23 e0       	ldi	r18, 0x03	; 3
    9682:	23 0f       	add	r18, r19
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    9684:	2d 37       	cpi	r18, 0x7D	; 125
    9686:	68 f1       	brcs	.+90     	; 0x96e2 <__vector_18+0x8c>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    9688:	26 e8       	ldi	r18, 0x86	; 134
    968a:	23 0f       	add	r18, r19
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    968c:	02 96       	adiw	r24, 0x02	; 2
    968e:	a1 1d       	adc	r26, r1
    9690:	b1 1d       	adc	r27, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    9692:	20 93 5b 24 	sts	0x245B, r18	; 0x80245b <timer0_fract>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    9696:	80 93 5c 24 	sts	0x245C, r24	; 0x80245c <timer0_millis>
    969a:	90 93 5d 24 	sts	0x245D, r25	; 0x80245d <timer0_millis+0x1>
    969e:	a0 93 5e 24 	sts	0x245E, r26	; 0x80245e <timer0_millis+0x2>
    96a2:	b0 93 5f 24 	sts	0x245F, r27	; 0x80245f <timer0_millis+0x3>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    96a6:	80 91 57 24 	lds	r24, 0x2457	; 0x802457 <timer0_overflow_count>
    96aa:	90 91 58 24 	lds	r25, 0x2458	; 0x802458 <timer0_overflow_count+0x1>
    96ae:	a0 91 59 24 	lds	r26, 0x2459	; 0x802459 <timer0_overflow_count+0x2>
    96b2:	b0 91 5a 24 	lds	r27, 0x245A	; 0x80245a <timer0_overflow_count+0x3>
    96b6:	01 96       	adiw	r24, 0x01	; 1
    96b8:	a1 1d       	adc	r26, r1
    96ba:	b1 1d       	adc	r27, r1
    96bc:	80 93 57 24 	sts	0x2457, r24	; 0x802457 <timer0_overflow_count>
    96c0:	90 93 58 24 	sts	0x2458, r25	; 0x802458 <timer0_overflow_count+0x1>
    96c4:	a0 93 59 24 	sts	0x2459, r26	; 0x802459 <timer0_overflow_count+0x2>
    96c8:	b0 93 5a 24 	sts	0x245A, r27	; 0x80245a <timer0_overflow_count+0x3>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    96cc:	bf 91       	pop	r27
    96ce:	af 91       	pop	r26
    96d0:	9f 91       	pop	r25
    96d2:	8f 91       	pop	r24
    96d4:	3f 91       	pop	r19
    96d6:	2f 91       	pop	r18
    96d8:	0f 90       	pop	r0
    96da:	0f be       	out	0x3f, r0	; 63
    96dc:	0f 90       	pop	r0
    96de:	1f 90       	pop	r1
    96e0:	18 95       	reti
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    96e2:	01 96       	adiw	r24, 0x01	; 1
    96e4:	a1 1d       	adc	r26, r1
    96e6:	b1 1d       	adc	r27, r1
    96e8:	d4 cf       	rjmp	.-88     	; 0x9692 <__vector_18+0x3c>

000096ea <millis>:
millis():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    96ea:	2f b7       	in	r18, 0x3f	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    96ec:	f8 94       	cli
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    96ee:	60 91 5c 24 	lds	r22, 0x245C	; 0x80245c <timer0_millis>
    96f2:	70 91 5d 24 	lds	r23, 0x245D	; 0x80245d <timer0_millis+0x1>
    96f6:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <timer0_millis+0x2>
    96fa:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <timer0_millis+0x3>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    96fe:	2f bf       	out	0x3f, r18	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    9700:	08 95       	ret

00009702 <micros>:
micros():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    9702:	3f b7       	in	r19, 0x3f	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    9704:	f8 94       	cli
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    9706:	80 91 57 24 	lds	r24, 0x2457	; 0x802457 <timer0_overflow_count>
    970a:	90 91 58 24 	lds	r25, 0x2458	; 0x802458 <timer0_overflow_count+0x1>
    970e:	a0 91 59 24 	lds	r26, 0x2459	; 0x802459 <timer0_overflow_count+0x2>
    9712:	b0 91 5a 24 	lds	r27, 0x245A	; 0x80245a <timer0_overflow_count+0x3>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    9716:	26 b5       	in	r18, 0x26	; 38
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    9718:	a8 9b       	sbis	0x15, 0	; 21
    971a:	05 c0       	rjmp	.+10     	; 0x9726 <micros+0x24>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    971c:	2f 3f       	cpi	r18, 0xFF	; 255
    971e:	19 f0       	breq	.+6      	; 0x9726 <micros+0x24>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    9720:	01 96       	adiw	r24, 0x01	; 1
    9722:	a1 1d       	adc	r26, r1
    9724:	b1 1d       	adc	r27, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    9726:	3f bf       	out	0x3f, r19	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    9728:	ba 2f       	mov	r27, r26
    972a:	a9 2f       	mov	r26, r25
    972c:	98 2f       	mov	r25, r24
    972e:	88 27       	eor	r24, r24
    9730:	bc 01       	movw	r22, r24
    9732:	cd 01       	movw	r24, r26
    9734:	62 0f       	add	r22, r18
    9736:	71 1d       	adc	r23, r1
    9738:	81 1d       	adc	r24, r1
    973a:	91 1d       	adc	r25, r1
    973c:	42 e0       	ldi	r20, 0x02	; 2
    973e:	66 0f       	add	r22, r22
    9740:	77 1f       	adc	r23, r23
    9742:	88 1f       	adc	r24, r24
    9744:	99 1f       	adc	r25, r25
    9746:	4a 95       	dec	r20
    9748:	d1 f7       	brne	.-12     	; 0x973e <micros+0x3c>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    974a:	08 95       	ret

0000974c <delay>:
delay():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    974c:	8f 92       	push	r8
    974e:	9f 92       	push	r9
    9750:	af 92       	push	r10
    9752:	bf 92       	push	r11
    9754:	cf 92       	push	r12
    9756:	df 92       	push	r13
    9758:	ef 92       	push	r14
    975a:	ff 92       	push	r15
    975c:	6b 01       	movw	r12, r22
    975e:	7c 01       	movw	r14, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    9760:	0e 94 81 4b 	call	0x9702	; 0x9702 <micros>
    9764:	4b 01       	movw	r8, r22
    9766:	5c 01       	movw	r10, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    9768:	c1 14       	cp	r12, r1
    976a:	d1 04       	cpc	r13, r1
    976c:	e1 04       	cpc	r14, r1
    976e:	f1 04       	cpc	r15, r1
    9770:	e9 f0       	breq	.+58     	; 0x97ac <delay+0x60>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:400
    yield();
    9772:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <yield>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    9776:	0e 94 81 4b 	call	0x9702	; 0x9702 <micros>
    977a:	68 19       	sub	r22, r8
    977c:	79 09       	sbc	r23, r9
    977e:	8a 09       	sbc	r24, r10
    9780:	9b 09       	sbc	r25, r11
    9782:	68 3e       	cpi	r22, 0xE8	; 232
    9784:	73 40       	sbci	r23, 0x03	; 3
    9786:	81 05       	cpc	r24, r1
    9788:	91 05       	cpc	r25, r1
    978a:	70 f3       	brcs	.-36     	; 0x9768 <delay+0x1c>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    978c:	21 e0       	ldi	r18, 0x01	; 1
    978e:	c2 1a       	sub	r12, r18
    9790:	d1 08       	sbc	r13, r1
    9792:	e1 08       	sbc	r14, r1
    9794:	f1 08       	sbc	r15, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    9796:	88 ee       	ldi	r24, 0xE8	; 232
    9798:	88 0e       	add	r8, r24
    979a:	83 e0       	ldi	r24, 0x03	; 3
    979c:	98 1e       	adc	r9, r24
    979e:	a1 1c       	adc	r10, r1
    97a0:	b1 1c       	adc	r11, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    97a2:	c1 14       	cp	r12, r1
    97a4:	d1 04       	cpc	r13, r1
    97a6:	e1 04       	cpc	r14, r1
    97a8:	f1 04       	cpc	r15, r1
    97aa:	29 f7       	brne	.-54     	; 0x9776 <delay+0x2a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    97ac:	ff 90       	pop	r15
    97ae:	ef 90       	pop	r14
    97b0:	df 90       	pop	r13
    97b2:	cf 90       	pop	r12
    97b4:	bf 90       	pop	r11
    97b6:	af 90       	pop	r10
    97b8:	9f 90       	pop	r9
    97ba:	8f 90       	pop	r8
    97bc:	08 95       	ret

000097be <delayMicroseconds>:
delayMicroseconds():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    97be:	82 30       	cpi	r24, 0x02	; 2
    97c0:	91 05       	cpc	r25, r1
    97c2:	38 f0       	brcs	.+14     	; 0x97d2 <delayMicroseconds+0x14>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    97c4:	88 0f       	add	r24, r24
    97c6:	99 1f       	adc	r25, r25
    97c8:	88 0f       	add	r24, r24
    97ca:	99 1f       	adc	r25, r25
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    97cc:	05 97       	sbiw	r24, 0x05	; 5
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    97ce:	01 97       	sbiw	r24, 0x01	; 1
    97d0:	f1 f7       	brne	.-4      	; 0x97ce <delayMicroseconds+0x10>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    97d2:	08 95       	ret

000097d4 <init>:
init():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    97d4:	78 94       	sei
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    97d6:	84 b5       	in	r24, 0x24	; 36
    97d8:	83 60       	ori	r24, 0x03	; 3
    97da:	84 bd       	out	0x24, r24	; 36
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    97dc:	85 b5       	in	r24, 0x25	; 37
    97de:	83 60       	ori	r24, 0x03	; 3
    97e0:	85 bd       	out	0x25, r24	; 37
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    97e2:	ee e6       	ldi	r30, 0x6E	; 110
    97e4:	f0 e0       	ldi	r31, 0x00	; 0
    97e6:	80 81       	ld	r24, Z
    97e8:	81 60       	ori	r24, 0x01	; 1
    97ea:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    97ec:	e1 e8       	ldi	r30, 0x81	; 129
    97ee:	f0 e0       	ldi	r31, 0x00	; 0
    97f0:	82 e0       	ldi	r24, 0x02	; 2
    97f2:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    97f4:	80 81       	ld	r24, Z
    97f6:	81 60       	ori	r24, 0x01	; 1
    97f8:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    97fa:	e0 e8       	ldi	r30, 0x80	; 128
    97fc:	f0 e0       	ldi	r31, 0x00	; 0
    97fe:	80 81       	ld	r24, Z
    9800:	81 60       	ori	r24, 0x01	; 1
    9802:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    9804:	e1 eb       	ldi	r30, 0xB1	; 177
    9806:	f0 e0       	ldi	r31, 0x00	; 0
    9808:	80 81       	ld	r24, Z
    980a:	84 60       	ori	r24, 0x04	; 4
    980c:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    980e:	e0 eb       	ldi	r30, 0xB0	; 176
    9810:	f0 e0       	ldi	r31, 0x00	; 0
    9812:	80 81       	ld	r24, Z
    9814:	81 60       	ori	r24, 0x01	; 1
    9816:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    9818:	e1 e9       	ldi	r30, 0x91	; 145
    981a:	f0 e0       	ldi	r31, 0x00	; 0
    981c:	80 81       	ld	r24, Z
    981e:	83 60       	ori	r24, 0x03	; 3
    9820:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    9822:	e0 e9       	ldi	r30, 0x90	; 144
    9824:	f0 e0       	ldi	r31, 0x00	; 0
    9826:	80 81       	ld	r24, Z
    9828:	81 60       	ori	r24, 0x01	; 1
    982a:	80 83       	st	Z, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    982c:	87 e8       	ldi	r24, 0x87	; 135
    982e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    9832:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    9836:	08 95       	ret

00009838 <analogRead>:
analogRead():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    9838:	88 30       	cpi	r24, 0x08	; 8
    983a:	20 f0       	brcs	.+8      	; 0x9844 <analogRead+0xc>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    983c:	87 31       	cpi	r24, 0x17	; 23
    983e:	08 f4       	brcc	.+2      	; 0x9842 <analogRead+0xa>
    9840:	87 e1       	ldi	r24, 0x17	; 23
    9842:	88 51       	subi	r24, 0x18	; 24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    9844:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <analog_reference>
    9848:	90 e4       	ldi	r25, 0x40	; 64
    984a:	29 9f       	mul	r18, r25
    984c:	90 01       	movw	r18, r0
    984e:	11 24       	eor	r1, r1
    9850:	87 70       	andi	r24, 0x07	; 7
    9852:	82 2b       	or	r24, r18
    9854:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    9858:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    985c:	80 64       	ori	r24, 0x40	; 64
    985e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    9862:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    9866:	86 fd       	sbrc	r24, 6
    9868:	fc cf       	rjmp	.-8      	; 0x9862 <analogRead+0x2a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    986a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    986e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    9872:	08 95       	ret

00009874 <turnOffPWM>:
turnOffPWM():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    9874:	82 50       	subi	r24, 0x02	; 2
    9876:	8a 30       	cpi	r24, 0x0A	; 10
    9878:	88 f5       	brcc	.+98     	; 0x98dc <turnOffPWM+0x68>
    987a:	e8 2f       	mov	r30, r24
    987c:	f0 e0       	ldi	r31, 0x00	; 0
    987e:	ed 5b       	subi	r30, 0xBD	; 189
    9880:	f3 4b       	sbci	r31, 0xB3	; 179
    9882:	0c 94 52 4d 	jmp	0x9aa4	; 0x9aa4 <__tablejump2__>
    9886:	6b 4c       	sbci	r22, 0xCB	; 203
    9888:	6f 4c       	sbci	r22, 0xCF	; 207
    988a:	4d 4c       	sbci	r20, 0xCD	; 205
    988c:	53 4c       	sbci	r21, 0xC3	; 195
    988e:	6e 4c       	sbci	r22, 0xCE	; 206
    9890:	6e 4c       	sbci	r22, 0xCE	; 206
    9892:	57 4c       	sbci	r21, 0xC7	; 199
    9894:	5d 4c       	sbci	r21, 0xCD	; 205
    9896:	61 4c       	sbci	r22, 0xC1	; 193
    9898:	67 4c       	sbci	r22, 0xC7	; 199
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    989a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    989e:	8f 77       	andi	r24, 0x7F	; 127
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    98a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    98a4:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    98a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    98aa:	8f 7d       	andi	r24, 0xDF	; 223
    98ac:	f9 cf       	rjmp	.-14     	; 0x98a0 <turnOffPWM+0x2c>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    98ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    98b2:	8f 77       	andi	r24, 0x7F	; 127
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    98b4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    98b8:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    98ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    98be:	8f 7d       	andi	r24, 0xDF	; 223
    98c0:	f9 cf       	rjmp	.-14     	; 0x98b4 <turnOffPWM+0x40>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    98c2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    98c6:	8f 77       	andi	r24, 0x7F	; 127
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    98c8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:122
        break;
    98cc:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    98ce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    98d2:	8f 7d       	andi	r24, 0xDF	; 223
    98d4:	f9 cf       	rjmp	.-14     	; 0x98c8 <turnOffPWM+0x54>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    98d6:	84 b5       	in	r24, 0x24	; 36
    98d8:	8f 77       	andi	r24, 0x7F	; 127
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    98da:	84 bd       	out	0x24, r24	; 36
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    98dc:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    98de:	84 b5       	in	r24, 0x24	; 36
    98e0:	8f 7d       	andi	r24, 0xDF	; 223
    98e2:	fb cf       	rjmp	.-10     	; 0x98da <turnOffPWM+0x66>

000098e4 <pinMode>:
pinMode():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    98e4:	cf 93       	push	r28
    98e6:	df 93       	push	r29
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    98e8:	90 e0       	ldi	r25, 0x00	; 0
    98ea:	fc 01       	movw	r30, r24
    98ec:	e7 56       	subi	r30, 0x67	; 103
    98ee:	fe 4f       	sbci	r31, 0xFE	; 254
    98f0:	24 91       	lpm	r18, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    98f2:	87 54       	subi	r24, 0x47	; 71
    98f4:	9e 4f       	sbci	r25, 0xFE	; 254
    98f6:	fc 01       	movw	r30, r24
    98f8:	84 91       	lpm	r24, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    98fa:	88 23       	and	r24, r24
    98fc:	c9 f0       	breq	.+50     	; 0x9930 <pinMode+0x4c>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    98fe:	90 e0       	ldi	r25, 0x00	; 0
    9900:	88 0f       	add	r24, r24
    9902:	99 1f       	adc	r25, r25
    9904:	fc 01       	movw	r30, r24
    9906:	ed 51       	subi	r30, 0x1D	; 29
    9908:	fe 4f       	sbci	r31, 0xFE	; 254
    990a:	a5 91       	lpm	r26, Z+
    990c:	b4 91       	lpm	r27, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    990e:	fc 01       	movw	r30, r24
    9910:	e7 52       	subi	r30, 0x27	; 39
    9912:	fe 4f       	sbci	r31, 0xFE	; 254
    9914:	c5 91       	lpm	r28, Z+
    9916:	d4 91       	lpm	r29, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    9918:	61 11       	cpse	r22, r1
    991a:	0d c0       	rjmp	.+26     	; 0x9936 <pinMode+0x52>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    991c:	9f b7       	in	r25, 0x3f	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    991e:	f8 94       	cli
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    9920:	8c 91       	ld	r24, X
    9922:	20 95       	com	r18
    9924:	82 23       	and	r24, r18
    9926:	8c 93       	st	X, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    9928:	88 81       	ld	r24, Y
    992a:	28 23       	and	r18, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    992c:	28 83       	st	Y, r18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    992e:	9f bf       	out	0x3f, r25	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    9930:	df 91       	pop	r29
    9932:	cf 91       	pop	r28
    9934:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    9936:	62 30       	cpi	r22, 0x02	; 2
    9938:	51 f4       	brne	.+20     	; 0x994e <pinMode+0x6a>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    993a:	9f b7       	in	r25, 0x3f	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    993c:	f8 94       	cli
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    993e:	3c 91       	ld	r19, X
    9940:	82 2f       	mov	r24, r18
    9942:	80 95       	com	r24
    9944:	83 23       	and	r24, r19
    9946:	8c 93       	st	X, r24
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    9948:	e8 81       	ld	r30, Y
    994a:	2e 2b       	or	r18, r30
    994c:	ef cf       	rjmp	.-34     	; 0x992c <pinMode+0x48>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    994e:	8f b7       	in	r24, 0x3f	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    9950:	f8 94       	cli
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    9952:	ec 91       	ld	r30, X
    9954:	2e 2b       	or	r18, r30
    9956:	2c 93       	st	X, r18
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    9958:	8f bf       	out	0x3f, r24	; 63
    995a:	ea cf       	rjmp	.-44     	; 0x9930 <pinMode+0x4c>

0000995c <digitalWrite>:
digitalWrite():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    995c:	1f 93       	push	r17
    995e:	cf 93       	push	r28
    9960:	df 93       	push	r29
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    9962:	28 2f       	mov	r18, r24
    9964:	30 e0       	ldi	r19, 0x00	; 0
    9966:	f9 01       	movw	r30, r18
    9968:	e7 58       	subi	r30, 0x87	; 135
    996a:	fe 4f       	sbci	r31, 0xFE	; 254
    996c:	84 91       	lpm	r24, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    996e:	f9 01       	movw	r30, r18
    9970:	e7 56       	subi	r30, 0x67	; 103
    9972:	fe 4f       	sbci	r31, 0xFE	; 254
    9974:	d4 91       	lpm	r29, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    9976:	f9 01       	movw	r30, r18
    9978:	e7 54       	subi	r30, 0x47	; 71
    997a:	fe 4f       	sbci	r31, 0xFE	; 254
    997c:	c4 91       	lpm	r28, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    997e:	cc 23       	and	r28, r28
    9980:	a9 f0       	breq	.+42     	; 0x99ac <digitalWrite+0x50>
    9982:	16 2f       	mov	r17, r22
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    9984:	81 11       	cpse	r24, r1
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    9986:	0e 94 3a 4c 	call	0x9874	; 0x9874 <turnOffPWM>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    998a:	ec 2f       	mov	r30, r28
    998c:	f0 e0       	ldi	r31, 0x00	; 0
    998e:	ee 0f       	add	r30, r30
    9990:	ff 1f       	adc	r31, r31
    9992:	e7 52       	subi	r30, 0x27	; 39
    9994:	fe 4f       	sbci	r31, 0xFE	; 254
    9996:	a5 91       	lpm	r26, Z+
    9998:	b4 91       	lpm	r27, Z
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    999a:	8f b7       	in	r24, 0x3f	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    999c:	f8 94       	cli
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    999e:	ec 91       	ld	r30, X
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    99a0:	11 11       	cpse	r17, r1
    99a2:	08 c0       	rjmp	.+16     	; 0x99b4 <digitalWrite+0x58>
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    99a4:	d0 95       	com	r29
    99a6:	de 23       	and	r29, r30
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    99a8:	dc 93       	st	X, r29
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    99aa:	8f bf       	out	0x3f, r24	; 63
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:212
}
    99ac:	df 91       	pop	r29
    99ae:	cf 91       	pop	r28
    99b0:	1f 91       	pop	r17
    99b2:	08 95       	ret
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    99b4:	de 2b       	or	r29, r30
    99b6:	f8 cf       	rjmp	.-16     	; 0x99a8 <digitalWrite+0x4c>

000099b8 <yield>:
__empty():
/home/oliver/.arduino15/packages/MightyCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    99b8:	08 95       	ret

000099ba <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    99ba:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    99bc:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    99be:	04 c0       	rjmp	.+8      	; 0x99c8 <__udivmodqi4_ep>

000099c0 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    99c0:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    99c2:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    99c4:	08 f0       	brcs	.+2      	; 0x99c8 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    99c6:	96 1b       	sub	r25, r22

000099c8 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    99c8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    99ca:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    99cc:	c9 f7       	brne	.-14     	; 0x99c0 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    99ce:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    99d0:	08 95       	ret

000099d2 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    99d2:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    99d4:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    99d6:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    99d8:	07 c0       	rjmp	.+14     	; 0x99e8 <__udivmodhi4_ep>

000099da <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    99da:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    99dc:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    99de:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    99e0:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    99e2:	10 f0       	brcs	.+4      	; 0x99e8 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    99e4:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    99e6:	b7 0b       	sbc	r27, r23

000099e8 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    99e8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    99ea:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    99ec:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    99ee:	a9 f7       	brne	.-22     	; 0x99da <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    99f0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    99f2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    99f4:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    99f6:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    99f8:	08 95       	ret

000099fa <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    99fa:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    99fc:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    99fe:	16 f4       	brtc	.+4      	; 0x9a04 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    9a00:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    9a02:	07 d0       	rcall	.+14     	; 0x9a12 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    9a04:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    9a06:	09 d0       	rcall	.+18     	; 0x9a1a <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    9a08:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    9a0c:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    9a0e:	05 d0       	rcall	.+10     	; 0x9a1a <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    9a10:	3e f4       	brtc	.+14     	; 0x9a20 <__divmodhi4_exit>

00009a12 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    9a12:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    9a14:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    9a16:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    9a18:	08 95       	ret

00009a1a <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    9a1a:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    9a1c:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    9a1e:	7f 4f       	sbci	r23, 0xFF	; 255

00009a20 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    9a20:	08 95       	ret

00009a22 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    9a22:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    9a24:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    9a26:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    9a28:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    9a2a:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    9a2c:	0d c0       	rjmp	.+26     	; 0x9a48 <__udivmodsi4_ep>

00009a2e <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    9a2e:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    9a30:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    9a32:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    9a34:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    9a36:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    9a38:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    9a3a:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    9a3c:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    9a3e:	20 f0       	brcs	.+8      	; 0x9a48 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    9a40:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    9a42:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    9a44:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    9a46:	f5 0b       	sbc	r31, r21

00009a48 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    9a48:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    9a4a:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    9a4c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    9a4e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    9a50:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    9a52:	69 f7       	brne	.-38     	; 0x9a2e <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    9a54:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    9a56:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    9a58:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    9a5a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    9a5c:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    9a5e:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    9a60:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    9a62:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    9a64:	08 95       	ret

00009a66 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    9a66:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    9a68:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    9a6a:	1e f4       	brtc	.+6      	; 0x9a72 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    9a6c:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    9a6e:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    9a72:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    9a74:	07 d0       	rcall	.+14     	; 0x9a84 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    9a76:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    9a7a:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    9a7c:	03 d0       	rcall	.+6      	; 0x9a84 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    9a7e:	4e f4       	brtc	.+18     	; 0x9a92 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    9a80:	0c 94 4a 4d 	jmp	0x9a94	; 0x9a94 <__negsi2>

00009a84 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    9a84:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    9a86:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    9a88:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    9a8a:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    9a8c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    9a8e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    9a90:	5f 4f       	sbci	r21, 0xFF	; 255

00009a92 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    9a92:	08 95       	ret

00009a94 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    9a94:	90 95       	com	r25
    9a96:	80 95       	com	r24
    9a98:	70 95       	com	r23
    9a9a:	61 95       	neg	r22
    9a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    9aa0:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    9aa2:	08 95       	ret

00009aa4 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    9aa4:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    9aa6:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    9aa8:	00 24       	eor	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    9aaa:	00 1c       	adc	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    9aac:	0b be       	out	0x3b, r0	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    9aae:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    9ab0:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    9ab2:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    9ab4:	09 94       	ijmp

00009ab6 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    9ab6:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    9ab8:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    9aba:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    9abc:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    9abe:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    9ac0:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    9ac2:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    9ac4:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    9ac6:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    9ac8:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    9aca:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    9acc:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    9ace:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    9ad0:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    9ad2:	08 95       	ret

00009ad4 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    9ad4:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    9ad8:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    9ada:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    9adc:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    9ade:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    9ae0:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    9ae2:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    9ae4:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    9ae6:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    9ae8:	08 95       	ret

00009aea <malloc>:
malloc():
    9aea:	0f 93       	push	r16
    9aec:	1f 93       	push	r17
    9aee:	cf 93       	push	r28
    9af0:	df 93       	push	r29
    9af2:	82 30       	cpi	r24, 0x02	; 2
    9af4:	91 05       	cpc	r25, r1
    9af6:	10 f4       	brcc	.+4      	; 0x9afc <malloc+0x12>
    9af8:	82 e0       	ldi	r24, 0x02	; 2
    9afa:	90 e0       	ldi	r25, 0x00	; 0
    9afc:	e0 91 62 24 	lds	r30, 0x2462	; 0x802462 <__flp>
    9b00:	f0 91 63 24 	lds	r31, 0x2463	; 0x802463 <__flp+0x1>
    9b04:	30 e0       	ldi	r19, 0x00	; 0
    9b06:	20 e0       	ldi	r18, 0x00	; 0
    9b08:	b0 e0       	ldi	r27, 0x00	; 0
    9b0a:	a0 e0       	ldi	r26, 0x00	; 0
    9b0c:	30 97       	sbiw	r30, 0x00	; 0
    9b0e:	99 f4       	brne	.+38     	; 0x9b36 <malloc+0x4c>
    9b10:	21 15       	cp	r18, r1
    9b12:	31 05       	cpc	r19, r1
    9b14:	09 f4       	brne	.+2      	; 0x9b18 <malloc+0x2e>
    9b16:	4a c0       	rjmp	.+148    	; 0x9bac <malloc+0xc2>
    9b18:	28 1b       	sub	r18, r24
    9b1a:	39 0b       	sbc	r19, r25
    9b1c:	24 30       	cpi	r18, 0x04	; 4
    9b1e:	31 05       	cpc	r19, r1
    9b20:	d8 f5       	brcc	.+118    	; 0x9b98 <malloc+0xae>
    9b22:	8a 81       	ldd	r24, Y+2	; 0x02
    9b24:	9b 81       	ldd	r25, Y+3	; 0x03
    9b26:	61 15       	cp	r22, r1
    9b28:	71 05       	cpc	r23, r1
    9b2a:	89 f1       	breq	.+98     	; 0x9b8e <malloc+0xa4>
    9b2c:	fb 01       	movw	r30, r22
    9b2e:	93 83       	std	Z+3, r25	; 0x03
    9b30:	82 83       	std	Z+2, r24	; 0x02
    9b32:	fe 01       	movw	r30, r28
    9b34:	11 c0       	rjmp	.+34     	; 0x9b58 <malloc+0x6e>
    9b36:	40 81       	ld	r20, Z
    9b38:	51 81       	ldd	r21, Z+1	; 0x01
    9b3a:	02 81       	ldd	r16, Z+2	; 0x02
    9b3c:	13 81       	ldd	r17, Z+3	; 0x03
    9b3e:	48 17       	cp	r20, r24
    9b40:	59 07       	cpc	r21, r25
    9b42:	e0 f0       	brcs	.+56     	; 0x9b7c <malloc+0x92>
    9b44:	48 17       	cp	r20, r24
    9b46:	59 07       	cpc	r21, r25
    9b48:	99 f4       	brne	.+38     	; 0x9b70 <malloc+0x86>
    9b4a:	10 97       	sbiw	r26, 0x00	; 0
    9b4c:	61 f0       	breq	.+24     	; 0x9b66 <malloc+0x7c>
    9b4e:	12 96       	adiw	r26, 0x02	; 2
    9b50:	0c 93       	st	X, r16
    9b52:	12 97       	sbiw	r26, 0x02	; 2
    9b54:	13 96       	adiw	r26, 0x03	; 3
    9b56:	1c 93       	st	X, r17
    9b58:	32 96       	adiw	r30, 0x02	; 2
    9b5a:	cf 01       	movw	r24, r30
    9b5c:	df 91       	pop	r29
    9b5e:	cf 91       	pop	r28
    9b60:	1f 91       	pop	r17
    9b62:	0f 91       	pop	r16
    9b64:	08 95       	ret
    9b66:	00 93 62 24 	sts	0x2462, r16	; 0x802462 <__flp>
    9b6a:	10 93 63 24 	sts	0x2463, r17	; 0x802463 <__flp+0x1>
    9b6e:	f4 cf       	rjmp	.-24     	; 0x9b58 <malloc+0x6e>
    9b70:	21 15       	cp	r18, r1
    9b72:	31 05       	cpc	r19, r1
    9b74:	51 f0       	breq	.+20     	; 0x9b8a <malloc+0xa0>
    9b76:	42 17       	cp	r20, r18
    9b78:	53 07       	cpc	r21, r19
    9b7a:	38 f0       	brcs	.+14     	; 0x9b8a <malloc+0xa0>
    9b7c:	a9 01       	movw	r20, r18
    9b7e:	db 01       	movw	r26, r22
    9b80:	9a 01       	movw	r18, r20
    9b82:	bd 01       	movw	r22, r26
    9b84:	df 01       	movw	r26, r30
    9b86:	f8 01       	movw	r30, r16
    9b88:	c1 cf       	rjmp	.-126    	; 0x9b0c <malloc+0x22>
    9b8a:	ef 01       	movw	r28, r30
    9b8c:	f9 cf       	rjmp	.-14     	; 0x9b80 <malloc+0x96>
    9b8e:	90 93 63 24 	sts	0x2463, r25	; 0x802463 <__flp+0x1>
    9b92:	80 93 62 24 	sts	0x2462, r24	; 0x802462 <__flp>
    9b96:	cd cf       	rjmp	.-102    	; 0x9b32 <malloc+0x48>
    9b98:	fe 01       	movw	r30, r28
    9b9a:	e2 0f       	add	r30, r18
    9b9c:	f3 1f       	adc	r31, r19
    9b9e:	81 93       	st	Z+, r24
    9ba0:	91 93       	st	Z+, r25
    9ba2:	22 50       	subi	r18, 0x02	; 2
    9ba4:	31 09       	sbc	r19, r1
    9ba6:	39 83       	std	Y+1, r19	; 0x01
    9ba8:	28 83       	st	Y, r18
    9baa:	d7 cf       	rjmp	.-82     	; 0x9b5a <malloc+0x70>
    9bac:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <__brkval>
    9bb0:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <__brkval+0x1>
    9bb4:	23 2b       	or	r18, r19
    9bb6:	41 f4       	brne	.+16     	; 0x9bc8 <malloc+0xde>
    9bb8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    9bbc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    9bc0:	30 93 61 24 	sts	0x2461, r19	; 0x802461 <__brkval+0x1>
    9bc4:	20 93 60 24 	sts	0x2460, r18	; 0x802460 <__brkval>
    9bc8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    9bcc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    9bd0:	21 15       	cp	r18, r1
    9bd2:	31 05       	cpc	r19, r1
    9bd4:	41 f4       	brne	.+16     	; 0x9be6 <malloc+0xfc>
    9bd6:	2d b7       	in	r18, 0x3d	; 61
    9bd8:	3e b7       	in	r19, 0x3e	; 62
    9bda:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    9bde:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    9be2:	24 1b       	sub	r18, r20
    9be4:	35 0b       	sbc	r19, r21
    9be6:	e0 91 60 24 	lds	r30, 0x2460	; 0x802460 <__brkval>
    9bea:	f0 91 61 24 	lds	r31, 0x2461	; 0x802461 <__brkval+0x1>
    9bee:	e2 17       	cp	r30, r18
    9bf0:	f3 07       	cpc	r31, r19
    9bf2:	a0 f4       	brcc	.+40     	; 0x9c1c <malloc+0x132>
    9bf4:	2e 1b       	sub	r18, r30
    9bf6:	3f 0b       	sbc	r19, r31
    9bf8:	28 17       	cp	r18, r24
    9bfa:	39 07       	cpc	r19, r25
    9bfc:	78 f0       	brcs	.+30     	; 0x9c1c <malloc+0x132>
    9bfe:	ac 01       	movw	r20, r24
    9c00:	4e 5f       	subi	r20, 0xFE	; 254
    9c02:	5f 4f       	sbci	r21, 0xFF	; 255
    9c04:	24 17       	cp	r18, r20
    9c06:	35 07       	cpc	r19, r21
    9c08:	48 f0       	brcs	.+18     	; 0x9c1c <malloc+0x132>
    9c0a:	4e 0f       	add	r20, r30
    9c0c:	5f 1f       	adc	r21, r31
    9c0e:	50 93 61 24 	sts	0x2461, r21	; 0x802461 <__brkval+0x1>
    9c12:	40 93 60 24 	sts	0x2460, r20	; 0x802460 <__brkval>
    9c16:	81 93       	st	Z+, r24
    9c18:	91 93       	st	Z+, r25
    9c1a:	9f cf       	rjmp	.-194    	; 0x9b5a <malloc+0x70>
    9c1c:	f0 e0       	ldi	r31, 0x00	; 0
    9c1e:	e0 e0       	ldi	r30, 0x00	; 0
    9c20:	9c cf       	rjmp	.-200    	; 0x9b5a <malloc+0x70>

00009c22 <free>:
free():
    9c22:	cf 93       	push	r28
    9c24:	df 93       	push	r29
    9c26:	00 97       	sbiw	r24, 0x00	; 0
    9c28:	e9 f0       	breq	.+58     	; 0x9c64 <free+0x42>
    9c2a:	fc 01       	movw	r30, r24
    9c2c:	32 97       	sbiw	r30, 0x02	; 2
    9c2e:	13 82       	std	Z+3, r1	; 0x03
    9c30:	12 82       	std	Z+2, r1	; 0x02
    9c32:	a0 91 62 24 	lds	r26, 0x2462	; 0x802462 <__flp>
    9c36:	b0 91 63 24 	lds	r27, 0x2463	; 0x802463 <__flp+0x1>
    9c3a:	ed 01       	movw	r28, r26
    9c3c:	30 e0       	ldi	r19, 0x00	; 0
    9c3e:	20 e0       	ldi	r18, 0x00	; 0
    9c40:	10 97       	sbiw	r26, 0x00	; 0
    9c42:	a1 f4       	brne	.+40     	; 0x9c6c <free+0x4a>
    9c44:	20 81       	ld	r18, Z
    9c46:	31 81       	ldd	r19, Z+1	; 0x01
    9c48:	82 0f       	add	r24, r18
    9c4a:	93 1f       	adc	r25, r19
    9c4c:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <__brkval>
    9c50:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <__brkval+0x1>
    9c54:	28 17       	cp	r18, r24
    9c56:	39 07       	cpc	r19, r25
    9c58:	09 f0       	breq	.+2      	; 0x9c5c <free+0x3a>
    9c5a:	61 c0       	rjmp	.+194    	; 0x9d1e <free+0xfc>
    9c5c:	f0 93 61 24 	sts	0x2461, r31	; 0x802461 <__brkval+0x1>
    9c60:	e0 93 60 24 	sts	0x2460, r30	; 0x802460 <__brkval>
    9c64:	df 91       	pop	r29
    9c66:	cf 91       	pop	r28
    9c68:	08 95       	ret
    9c6a:	ea 01       	movw	r28, r20
    9c6c:	ce 17       	cp	r28, r30
    9c6e:	df 07       	cpc	r29, r31
    9c70:	e8 f5       	brcc	.+122    	; 0x9cec <free+0xca>
    9c72:	4a 81       	ldd	r20, Y+2	; 0x02
    9c74:	5b 81       	ldd	r21, Y+3	; 0x03
    9c76:	9e 01       	movw	r18, r28
    9c78:	41 15       	cp	r20, r1
    9c7a:	51 05       	cpc	r21, r1
    9c7c:	b1 f7       	brne	.-20     	; 0x9c6a <free+0x48>
    9c7e:	e9 01       	movw	r28, r18
    9c80:	fb 83       	std	Y+3, r31	; 0x03
    9c82:	ea 83       	std	Y+2, r30	; 0x02
    9c84:	49 91       	ld	r20, Y+
    9c86:	59 91       	ld	r21, Y+
    9c88:	c4 0f       	add	r28, r20
    9c8a:	d5 1f       	adc	r29, r21
    9c8c:	ec 17       	cp	r30, r28
    9c8e:	fd 07       	cpc	r31, r29
    9c90:	61 f4       	brne	.+24     	; 0x9caa <free+0x88>
    9c92:	80 81       	ld	r24, Z
    9c94:	91 81       	ldd	r25, Z+1	; 0x01
    9c96:	02 96       	adiw	r24, 0x02	; 2
    9c98:	84 0f       	add	r24, r20
    9c9a:	95 1f       	adc	r25, r21
    9c9c:	e9 01       	movw	r28, r18
    9c9e:	99 83       	std	Y+1, r25	; 0x01
    9ca0:	88 83       	st	Y, r24
    9ca2:	82 81       	ldd	r24, Z+2	; 0x02
    9ca4:	93 81       	ldd	r25, Z+3	; 0x03
    9ca6:	9b 83       	std	Y+3, r25	; 0x03
    9ca8:	8a 83       	std	Y+2, r24	; 0x02
    9caa:	f0 e0       	ldi	r31, 0x00	; 0
    9cac:	e0 e0       	ldi	r30, 0x00	; 0
    9cae:	12 96       	adiw	r26, 0x02	; 2
    9cb0:	8d 91       	ld	r24, X+
    9cb2:	9c 91       	ld	r25, X
    9cb4:	13 97       	sbiw	r26, 0x03	; 3
    9cb6:	00 97       	sbiw	r24, 0x00	; 0
    9cb8:	b9 f5       	brne	.+110    	; 0x9d28 <free+0x106>
    9cba:	2d 91       	ld	r18, X+
    9cbc:	3c 91       	ld	r19, X
    9cbe:	11 97       	sbiw	r26, 0x01	; 1
    9cc0:	cd 01       	movw	r24, r26
    9cc2:	02 96       	adiw	r24, 0x02	; 2
    9cc4:	82 0f       	add	r24, r18
    9cc6:	93 1f       	adc	r25, r19
    9cc8:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <__brkval>
    9ccc:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <__brkval+0x1>
    9cd0:	28 17       	cp	r18, r24
    9cd2:	39 07       	cpc	r19, r25
    9cd4:	39 f6       	brne	.-114    	; 0x9c64 <free+0x42>
    9cd6:	30 97       	sbiw	r30, 0x00	; 0
    9cd8:	51 f5       	brne	.+84     	; 0x9d2e <free+0x10c>
    9cda:	10 92 63 24 	sts	0x2463, r1	; 0x802463 <__flp+0x1>
    9cde:	10 92 62 24 	sts	0x2462, r1	; 0x802462 <__flp>
    9ce2:	b0 93 61 24 	sts	0x2461, r27	; 0x802461 <__brkval+0x1>
    9ce6:	a0 93 60 24 	sts	0x2460, r26	; 0x802460 <__brkval>
    9cea:	bc cf       	rjmp	.-136    	; 0x9c64 <free+0x42>
    9cec:	d3 83       	std	Z+3, r29	; 0x03
    9cee:	c2 83       	std	Z+2, r28	; 0x02
    9cf0:	40 81       	ld	r20, Z
    9cf2:	51 81       	ldd	r21, Z+1	; 0x01
    9cf4:	84 0f       	add	r24, r20
    9cf6:	95 1f       	adc	r25, r21
    9cf8:	c8 17       	cp	r28, r24
    9cfa:	d9 07       	cpc	r29, r25
    9cfc:	61 f4       	brne	.+24     	; 0x9d16 <free+0xf4>
    9cfe:	4e 5f       	subi	r20, 0xFE	; 254
    9d00:	5f 4f       	sbci	r21, 0xFF	; 255
    9d02:	88 81       	ld	r24, Y
    9d04:	99 81       	ldd	r25, Y+1	; 0x01
    9d06:	48 0f       	add	r20, r24
    9d08:	59 1f       	adc	r21, r25
    9d0a:	51 83       	std	Z+1, r21	; 0x01
    9d0c:	40 83       	st	Z, r20
    9d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    9d10:	9b 81       	ldd	r25, Y+3	; 0x03
    9d12:	93 83       	std	Z+3, r25	; 0x03
    9d14:	82 83       	std	Z+2, r24	; 0x02
    9d16:	21 15       	cp	r18, r1
    9d18:	31 05       	cpc	r19, r1
    9d1a:	09 f0       	breq	.+2      	; 0x9d1e <free+0xfc>
    9d1c:	b0 cf       	rjmp	.-160    	; 0x9c7e <free+0x5c>
    9d1e:	f0 93 63 24 	sts	0x2463, r31	; 0x802463 <__flp+0x1>
    9d22:	e0 93 62 24 	sts	0x2462, r30	; 0x802462 <__flp>
    9d26:	9e cf       	rjmp	.-196    	; 0x9c64 <free+0x42>
    9d28:	fd 01       	movw	r30, r26
    9d2a:	dc 01       	movw	r26, r24
    9d2c:	c0 cf       	rjmp	.-128    	; 0x9cae <free+0x8c>
    9d2e:	13 82       	std	Z+3, r1	; 0x03
    9d30:	12 82       	std	Z+2, r1	; 0x02
    9d32:	d7 cf       	rjmp	.-82     	; 0x9ce2 <free+0xc0>

00009d34 <random_r>:
random_r():
    9d34:	8f 92       	push	r8
    9d36:	9f 92       	push	r9
    9d38:	af 92       	push	r10
    9d3a:	bf 92       	push	r11
    9d3c:	cf 92       	push	r12
    9d3e:	df 92       	push	r13
    9d40:	ef 92       	push	r14
    9d42:	ff 92       	push	r15
    9d44:	cf 93       	push	r28
    9d46:	df 93       	push	r29
    9d48:	ec 01       	movw	r28, r24
    9d4a:	68 81       	ld	r22, Y
    9d4c:	79 81       	ldd	r23, Y+1	; 0x01
    9d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    9d50:	9b 81       	ldd	r25, Y+3	; 0x03
    9d52:	61 15       	cp	r22, r1
    9d54:	71 05       	cpc	r23, r1
    9d56:	81 05       	cpc	r24, r1
    9d58:	91 05       	cpc	r25, r1
    9d5a:	21 f4       	brne	.+8      	; 0x9d64 <random_r+0x30>
    9d5c:	64 e2       	ldi	r22, 0x24	; 36
    9d5e:	79 ed       	ldi	r23, 0xD9	; 217
    9d60:	8b e5       	ldi	r24, 0x5B	; 91
    9d62:	97 e0       	ldi	r25, 0x07	; 7
    9d64:	2d e1       	ldi	r18, 0x1D	; 29
    9d66:	33 ef       	ldi	r19, 0xF3	; 243
    9d68:	41 e0       	ldi	r20, 0x01	; 1
    9d6a:	50 e0       	ldi	r21, 0x00	; 0
    9d6c:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <__divmodsi4>
    9d70:	49 01       	movw	r8, r18
    9d72:	5a 01       	movw	r10, r20
    9d74:	9b 01       	movw	r18, r22
    9d76:	ac 01       	movw	r20, r24
    9d78:	a7 ea       	ldi	r26, 0xA7	; 167
    9d7a:	b1 e4       	ldi	r27, 0x41	; 65
    9d7c:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <__muluhisi3>
    9d80:	6b 01       	movw	r12, r22
    9d82:	7c 01       	movw	r14, r24
    9d84:	ac ee       	ldi	r26, 0xEC	; 236
    9d86:	b4 ef       	ldi	r27, 0xF4	; 244
    9d88:	a5 01       	movw	r20, r10
    9d8a:	94 01       	movw	r18, r8
    9d8c:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <__mulohisi3>
    9d90:	c6 0e       	add	r12, r22
    9d92:	d7 1e       	adc	r13, r23
    9d94:	e8 1e       	adc	r14, r24
    9d96:	f9 1e       	adc	r15, r25
    9d98:	f7 fe       	sbrs	r15, 7
    9d9a:	06 c0       	rjmp	.+12     	; 0x9da8 <random_r+0x74>
    9d9c:	81 e0       	ldi	r24, 0x01	; 1
    9d9e:	c8 1a       	sub	r12, r24
    9da0:	d1 08       	sbc	r13, r1
    9da2:	e1 08       	sbc	r14, r1
    9da4:	80 e8       	ldi	r24, 0x80	; 128
    9da6:	f8 0a       	sbc	r15, r24
    9da8:	c8 82       	st	Y, r12
    9daa:	d9 82       	std	Y+1, r13	; 0x01
    9dac:	ea 82       	std	Y+2, r14	; 0x02
    9dae:	fb 82       	std	Y+3, r15	; 0x03
    9db0:	c7 01       	movw	r24, r14
    9db2:	b6 01       	movw	r22, r12
    9db4:	9f 77       	andi	r25, 0x7F	; 127
    9db6:	df 91       	pop	r29
    9db8:	cf 91       	pop	r28
    9dba:	ff 90       	pop	r15
    9dbc:	ef 90       	pop	r14
    9dbe:	df 90       	pop	r13
    9dc0:	cf 90       	pop	r12
    9dc2:	bf 90       	pop	r11
    9dc4:	af 90       	pop	r10
    9dc6:	9f 90       	pop	r9
    9dc8:	8f 90       	pop	r8
    9dca:	08 95       	ret

00009dcc <random>:
random():
    9dcc:	8f 92       	push	r8
    9dce:	9f 92       	push	r9
    9dd0:	af 92       	push	r10
    9dd2:	bf 92       	push	r11
    9dd4:	cf 92       	push	r12
    9dd6:	df 92       	push	r13
    9dd8:	ef 92       	push	r14
    9dda:	ff 92       	push	r15
    9ddc:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    9de0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    9de4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    9de8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    9dec:	61 15       	cp	r22, r1
    9dee:	71 05       	cpc	r23, r1
    9df0:	81 05       	cpc	r24, r1
    9df2:	91 05       	cpc	r25, r1
    9df4:	21 f4       	brne	.+8      	; 0x9dfe <random+0x32>
    9df6:	64 e2       	ldi	r22, 0x24	; 36
    9df8:	79 ed       	ldi	r23, 0xD9	; 217
    9dfa:	8b e5       	ldi	r24, 0x5B	; 91
    9dfc:	97 e0       	ldi	r25, 0x07	; 7
    9dfe:	2d e1       	ldi	r18, 0x1D	; 29
    9e00:	33 ef       	ldi	r19, 0xF3	; 243
    9e02:	41 e0       	ldi	r20, 0x01	; 1
    9e04:	50 e0       	ldi	r21, 0x00	; 0
    9e06:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <__divmodsi4>
    9e0a:	49 01       	movw	r8, r18
    9e0c:	5a 01       	movw	r10, r20
    9e0e:	9b 01       	movw	r18, r22
    9e10:	ac 01       	movw	r20, r24
    9e12:	a7 ea       	ldi	r26, 0xA7	; 167
    9e14:	b1 e4       	ldi	r27, 0x41	; 65
    9e16:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <__muluhisi3>
    9e1a:	6b 01       	movw	r12, r22
    9e1c:	7c 01       	movw	r14, r24
    9e1e:	ac ee       	ldi	r26, 0xEC	; 236
    9e20:	b4 ef       	ldi	r27, 0xF4	; 244
    9e22:	a5 01       	movw	r20, r10
    9e24:	94 01       	movw	r18, r8
    9e26:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <__mulohisi3>
    9e2a:	c6 0e       	add	r12, r22
    9e2c:	d7 1e       	adc	r13, r23
    9e2e:	e8 1e       	adc	r14, r24
    9e30:	f9 1e       	adc	r15, r25
    9e32:	f7 fe       	sbrs	r15, 7
    9e34:	06 c0       	rjmp	.+12     	; 0x9e42 <random+0x76>
    9e36:	81 e0       	ldi	r24, 0x01	; 1
    9e38:	c8 1a       	sub	r12, r24
    9e3a:	d1 08       	sbc	r13, r1
    9e3c:	e1 08       	sbc	r14, r1
    9e3e:	80 e8       	ldi	r24, 0x80	; 128
    9e40:	f8 0a       	sbc	r15, r24
    9e42:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <next>
    9e46:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <next+0x1>
    9e4a:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <next+0x2>
    9e4e:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <next+0x3>
    9e52:	c7 01       	movw	r24, r14
    9e54:	b6 01       	movw	r22, r12
    9e56:	9f 77       	andi	r25, 0x7F	; 127
    9e58:	ff 90       	pop	r15
    9e5a:	ef 90       	pop	r14
    9e5c:	df 90       	pop	r13
    9e5e:	cf 90       	pop	r12
    9e60:	bf 90       	pop	r11
    9e62:	af 90       	pop	r10
    9e64:	9f 90       	pop	r9
    9e66:	8f 90       	pop	r8
    9e68:	08 95       	ret

00009e6a <srandom>:
srandom():
    9e6a:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    9e6e:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    9e72:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    9e76:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    9e7a:	08 95       	ret

00009e7c <realloc>:
realloc():
    9e7c:	4f 92       	push	r4
    9e7e:	5f 92       	push	r5
    9e80:	6f 92       	push	r6
    9e82:	7f 92       	push	r7
    9e84:	8f 92       	push	r8
    9e86:	9f 92       	push	r9
    9e88:	af 92       	push	r10
    9e8a:	bf 92       	push	r11
    9e8c:	cf 92       	push	r12
    9e8e:	df 92       	push	r13
    9e90:	ef 92       	push	r14
    9e92:	ff 92       	push	r15
    9e94:	0f 93       	push	r16
    9e96:	1f 93       	push	r17
    9e98:	cf 93       	push	r28
    9e9a:	df 93       	push	r29
    9e9c:	8c 01       	movw	r16, r24
    9e9e:	00 97       	sbiw	r24, 0x00	; 0
    9ea0:	99 f4       	brne	.+38     	; 0x9ec8 <realloc+0x4c>
    9ea2:	cb 01       	movw	r24, r22
    9ea4:	df 91       	pop	r29
    9ea6:	cf 91       	pop	r28
    9ea8:	1f 91       	pop	r17
    9eaa:	0f 91       	pop	r16
    9eac:	ff 90       	pop	r15
    9eae:	ef 90       	pop	r14
    9eb0:	df 90       	pop	r13
    9eb2:	cf 90       	pop	r12
    9eb4:	bf 90       	pop	r11
    9eb6:	af 90       	pop	r10
    9eb8:	9f 90       	pop	r9
    9eba:	8f 90       	pop	r8
    9ebc:	7f 90       	pop	r7
    9ebe:	6f 90       	pop	r6
    9ec0:	5f 90       	pop	r5
    9ec2:	4f 90       	pop	r4
    9ec4:	0c 94 75 4d 	jmp	0x9aea	; 0x9aea <malloc>
    9ec8:	fc 01       	movw	r30, r24
    9eca:	e6 0f       	add	r30, r22
    9ecc:	f7 1f       	adc	r31, r23
    9ece:	9c 01       	movw	r18, r24
    9ed0:	22 50       	subi	r18, 0x02	; 2
    9ed2:	31 09       	sbc	r19, r1
    9ed4:	e2 17       	cp	r30, r18
    9ed6:	f3 07       	cpc	r31, r19
    9ed8:	08 f4       	brcc	.+2      	; 0x9edc <realloc+0x60>
    9eda:	ae c0       	rjmp	.+348    	; 0xa038 <realloc+0x1bc>
    9edc:	d9 01       	movw	r26, r18
    9ede:	cd 91       	ld	r28, X+
    9ee0:	dc 91       	ld	r29, X
    9ee2:	11 97       	sbiw	r26, 0x01	; 1
    9ee4:	c6 17       	cp	r28, r22
    9ee6:	d7 07       	cpc	r29, r23
    9ee8:	20 f1       	brcs	.+72     	; 0x9f32 <realloc+0xb6>
    9eea:	c5 30       	cpi	r28, 0x05	; 5
    9eec:	d1 05       	cpc	r29, r1
    9eee:	78 f0       	brcs	.+30     	; 0x9f0e <realloc+0x92>
    9ef0:	ce 01       	movw	r24, r28
    9ef2:	04 97       	sbiw	r24, 0x04	; 4
    9ef4:	86 17       	cp	r24, r22
    9ef6:	97 07       	cpc	r25, r23
    9ef8:	50 f0       	brcs	.+20     	; 0x9f0e <realloc+0x92>
    9efa:	c6 1b       	sub	r28, r22
    9efc:	d7 0b       	sbc	r29, r23
    9efe:	22 97       	sbiw	r28, 0x02	; 2
    9f00:	c1 93       	st	Z+, r28
    9f02:	d1 93       	st	Z+, r29
    9f04:	6d 93       	st	X+, r22
    9f06:	7c 93       	st	X, r23
    9f08:	cf 01       	movw	r24, r30
    9f0a:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <free>
    9f0e:	c8 01       	movw	r24, r16
    9f10:	df 91       	pop	r29
    9f12:	cf 91       	pop	r28
    9f14:	1f 91       	pop	r17
    9f16:	0f 91       	pop	r16
    9f18:	ff 90       	pop	r15
    9f1a:	ef 90       	pop	r14
    9f1c:	df 90       	pop	r13
    9f1e:	cf 90       	pop	r12
    9f20:	bf 90       	pop	r11
    9f22:	af 90       	pop	r10
    9f24:	9f 90       	pop	r9
    9f26:	8f 90       	pop	r8
    9f28:	7f 90       	pop	r7
    9f2a:	6f 90       	pop	r6
    9f2c:	5f 90       	pop	r5
    9f2e:	4f 90       	pop	r4
    9f30:	08 95       	ret
    9f32:	5b 01       	movw	r10, r22
    9f34:	ac 1a       	sub	r10, r28
    9f36:	bd 0a       	sbc	r11, r29
    9f38:	4c 01       	movw	r8, r24
    9f3a:	8c 0e       	add	r8, r28
    9f3c:	9d 1e       	adc	r9, r29
    9f3e:	a0 91 62 24 	lds	r26, 0x2462	; 0x802462 <__flp>
    9f42:	b0 91 63 24 	lds	r27, 0x2463	; 0x802463 <__flp+0x1>
    9f46:	51 2c       	mov	r5, r1
    9f48:	41 2c       	mov	r4, r1
    9f4a:	f1 2c       	mov	r15, r1
    9f4c:	e1 2c       	mov	r14, r1
    9f4e:	10 97       	sbiw	r26, 0x00	; 0
    9f50:	31 f5       	brne	.+76     	; 0x9f9e <realloc+0x122>
    9f52:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <__brkval>
    9f56:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <__brkval+0x1>
    9f5a:	88 15       	cp	r24, r8
    9f5c:	99 05       	cpc	r25, r9
    9f5e:	09 f0       	breq	.+2      	; 0x9f62 <realloc+0xe6>
    9f60:	5c c0       	rjmp	.+184    	; 0xa01a <realloc+0x19e>
    9f62:	46 16       	cp	r4, r22
    9f64:	57 06       	cpc	r5, r23
    9f66:	08 f0       	brcs	.+2      	; 0x9f6a <realloc+0xee>
    9f68:	58 c0       	rjmp	.+176    	; 0xa01a <realloc+0x19e>
    9f6a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    9f6e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    9f72:	00 97       	sbiw	r24, 0x00	; 0
    9f74:	41 f4       	brne	.+16     	; 0x9f86 <realloc+0x10a>
    9f76:	8d b7       	in	r24, 0x3d	; 61
    9f78:	9e b7       	in	r25, 0x3e	; 62
    9f7a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    9f7e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    9f82:	84 1b       	sub	r24, r20
    9f84:	95 0b       	sbc	r25, r21
    9f86:	e8 17       	cp	r30, r24
    9f88:	f9 07       	cpc	r31, r25
    9f8a:	08 f0       	brcs	.+2      	; 0x9f8e <realloc+0x112>
    9f8c:	55 c0       	rjmp	.+170    	; 0xa038 <realloc+0x1bc>
    9f8e:	f0 93 61 24 	sts	0x2461, r31	; 0x802461 <__brkval+0x1>
    9f92:	e0 93 60 24 	sts	0x2460, r30	; 0x802460 <__brkval>
    9f96:	f9 01       	movw	r30, r18
    9f98:	71 83       	std	Z+1, r23	; 0x01
    9f9a:	60 83       	st	Z, r22
    9f9c:	b8 cf       	rjmp	.-144    	; 0x9f0e <realloc+0x92>
    9f9e:	8d 91       	ld	r24, X+
    9fa0:	9c 91       	ld	r25, X
    9fa2:	11 97       	sbiw	r26, 0x01	; 1
    9fa4:	12 96       	adiw	r26, 0x02	; 2
    9fa6:	6c 90       	ld	r6, X
    9fa8:	12 97       	sbiw	r26, 0x02	; 2
    9faa:	13 96       	adiw	r26, 0x03	; 3
    9fac:	7c 90       	ld	r7, X
    9fae:	13 97       	sbiw	r26, 0x03	; 3
    9fb0:	a8 15       	cp	r26, r8
    9fb2:	b9 05       	cpc	r27, r9
    9fb4:	59 f5       	brne	.+86     	; 0xa00c <realloc+0x190>
    9fb6:	6c 01       	movw	r12, r24
    9fb8:	42 e0       	ldi	r20, 0x02	; 2
    9fba:	c4 0e       	add	r12, r20
    9fbc:	d1 1c       	adc	r13, r1
    9fbe:	ca 14       	cp	r12, r10
    9fc0:	db 04       	cpc	r13, r11
    9fc2:	20 f1       	brcs	.+72     	; 0xa00c <realloc+0x190>
    9fc4:	ac 01       	movw	r20, r24
    9fc6:	4a 19       	sub	r20, r10
    9fc8:	5b 09       	sbc	r21, r11
    9fca:	da 01       	movw	r26, r20
    9fcc:	12 96       	adiw	r26, 0x02	; 2
    9fce:	15 97       	sbiw	r26, 0x05	; 5
    9fd0:	80 f0       	brcs	.+32     	; 0x9ff2 <realloc+0x176>
    9fd2:	62 82       	std	Z+2, r6	; 0x02
    9fd4:	73 82       	std	Z+3, r7	; 0x03
    9fd6:	51 83       	std	Z+1, r21	; 0x01
    9fd8:	40 83       	st	Z, r20
    9fda:	d9 01       	movw	r26, r18
    9fdc:	6d 93       	st	X+, r22
    9fde:	7c 93       	st	X, r23
    9fe0:	e1 14       	cp	r14, r1
    9fe2:	f1 04       	cpc	r15, r1
    9fe4:	71 f0       	breq	.+28     	; 0xa002 <realloc+0x186>
    9fe6:	d7 01       	movw	r26, r14
    9fe8:	13 96       	adiw	r26, 0x03	; 3
    9fea:	fc 93       	st	X, r31
    9fec:	ee 93       	st	-X, r30
    9fee:	12 97       	sbiw	r26, 0x02	; 2
    9ff0:	8e cf       	rjmp	.-228    	; 0x9f0e <realloc+0x92>
    9ff2:	22 96       	adiw	r28, 0x02	; 2
    9ff4:	8c 0f       	add	r24, r28
    9ff6:	9d 1f       	adc	r25, r29
    9ff8:	f9 01       	movw	r30, r18
    9ffa:	91 83       	std	Z+1, r25	; 0x01
    9ffc:	80 83       	st	Z, r24
    9ffe:	f3 01       	movw	r30, r6
    a000:	ef cf       	rjmp	.-34     	; 0x9fe0 <realloc+0x164>
    a002:	f0 93 63 24 	sts	0x2463, r31	; 0x802463 <__flp+0x1>
    a006:	e0 93 62 24 	sts	0x2462, r30	; 0x802462 <__flp>
    a00a:	81 cf       	rjmp	.-254    	; 0x9f0e <realloc+0x92>
    a00c:	48 16       	cp	r4, r24
    a00e:	59 06       	cpc	r5, r25
    a010:	08 f4       	brcc	.+2      	; 0xa014 <realloc+0x198>
    a012:	2c 01       	movw	r4, r24
    a014:	7d 01       	movw	r14, r26
    a016:	d3 01       	movw	r26, r6
    a018:	9a cf       	rjmp	.-204    	; 0x9f4e <realloc+0xd2>
    a01a:	cb 01       	movw	r24, r22
    a01c:	0e 94 75 4d 	call	0x9aea	; 0x9aea <malloc>
    a020:	7c 01       	movw	r14, r24
    a022:	00 97       	sbiw	r24, 0x00	; 0
    a024:	49 f0       	breq	.+18     	; 0xa038 <realloc+0x1bc>
    a026:	ae 01       	movw	r20, r28
    a028:	b8 01       	movw	r22, r16
    a02a:	0e 94 26 50 	call	0xa04c	; 0xa04c <memcpy>
    a02e:	c8 01       	movw	r24, r16
    a030:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <free>
    a034:	87 01       	movw	r16, r14
    a036:	6b cf       	rjmp	.-298    	; 0x9f0e <realloc+0x92>
    a038:	10 e0       	ldi	r17, 0x00	; 0
    a03a:	00 e0       	ldi	r16, 0x00	; 0
    a03c:	68 cf       	rjmp	.-304    	; 0x9f0e <realloc+0x92>

0000a03e <strcpy_P>:
strcpy_P():
    a03e:	fb 01       	movw	r30, r22
    a040:	dc 01       	movw	r26, r24
    a042:	05 90       	lpm	r0, Z+
    a044:	0d 92       	st	X+, r0
    a046:	00 20       	and	r0, r0
    a048:	e1 f7       	brne	.-8      	; 0xa042 <strcpy_P+0x4>
    a04a:	08 95       	ret

0000a04c <memcpy>:
memcpy():
    a04c:	fb 01       	movw	r30, r22
    a04e:	dc 01       	movw	r26, r24
    a050:	02 c0       	rjmp	.+4      	; 0xa056 <memcpy+0xa>
    a052:	01 90       	ld	r0, Z+
    a054:	0d 92       	st	X+, r0
    a056:	41 50       	subi	r20, 0x01	; 1
    a058:	50 40       	sbci	r21, 0x00	; 0
    a05a:	d8 f7       	brcc	.-10     	; 0xa052 <memcpy+0x6>
    a05c:	08 95       	ret

0000a05e <strcpy>:
strcpy():
    a05e:	fb 01       	movw	r30, r22
    a060:	dc 01       	movw	r26, r24
    a062:	01 90       	ld	r0, Z+
    a064:	0d 92       	st	X+, r0
    a066:	00 20       	and	r0, r0
    a068:	e1 f7       	brne	.-8      	; 0xa062 <strcpy+0x4>
    a06a:	08 95       	ret

0000a06c <utoa>:
utoa():
    a06c:	45 32       	cpi	r20, 0x25	; 37
    a06e:	51 05       	cpc	r21, r1
    a070:	20 f4       	brcc	.+8      	; 0xa07a <utoa+0xe>
    a072:	42 30       	cpi	r20, 0x02	; 2
    a074:	10 f0       	brcs	.+4      	; 0xa07a <utoa+0xe>
    a076:	0c 94 41 50 	jmp	0xa082	; 0xa082 <__utoa_ncheck>
    a07a:	fb 01       	movw	r30, r22
    a07c:	10 82       	st	Z, r1
    a07e:	cb 01       	movw	r24, r22
    a080:	08 95       	ret

0000a082 <__utoa_ncheck>:
__utoa_ncheck():
    a082:	bb 27       	eor	r27, r27

0000a084 <__utoa_common>:
    a084:	fb 01       	movw	r30, r22
    a086:	55 27       	eor	r21, r21
    a088:	aa 27       	eor	r26, r26
    a08a:	88 0f       	add	r24, r24
    a08c:	99 1f       	adc	r25, r25
    a08e:	aa 1f       	adc	r26, r26
    a090:	a4 17       	cp	r26, r20
    a092:	10 f0       	brcs	.+4      	; 0xa098 <__utoa_common+0x14>
    a094:	a4 1b       	sub	r26, r20
    a096:	83 95       	inc	r24
    a098:	50 51       	subi	r21, 0x10	; 16
    a09a:	b9 f7       	brne	.-18     	; 0xa08a <__utoa_common+0x6>
    a09c:	a0 5d       	subi	r26, 0xD0	; 208
    a09e:	aa 33       	cpi	r26, 0x3A	; 58
    a0a0:	08 f0       	brcs	.+2      	; 0xa0a4 <__utoa_common+0x20>
    a0a2:	a9 5d       	subi	r26, 0xD9	; 217
    a0a4:	a1 93       	st	Z+, r26
    a0a6:	00 97       	sbiw	r24, 0x00	; 0
    a0a8:	79 f7       	brne	.-34     	; 0xa088 <__utoa_common+0x4>
    a0aa:	b1 11       	cpse	r27, r1
    a0ac:	b1 93       	st	Z+, r27
    a0ae:	11 92       	st	Z+, r1
    a0b0:	cb 01       	movw	r24, r22
    a0b2:	0c 94 5b 50 	jmp	0xa0b6	; 0xa0b6 <strrev>

0000a0b6 <strrev>:
strrev():
    a0b6:	dc 01       	movw	r26, r24
    a0b8:	fc 01       	movw	r30, r24
    a0ba:	67 2f       	mov	r22, r23
    a0bc:	71 91       	ld	r23, Z+
    a0be:	77 23       	and	r23, r23
    a0c0:	e1 f7       	brne	.-8      	; 0xa0ba <strrev+0x4>
    a0c2:	32 97       	sbiw	r30, 0x02	; 2
    a0c4:	04 c0       	rjmp	.+8      	; 0xa0ce <strrev+0x18>
    a0c6:	7c 91       	ld	r23, X
    a0c8:	6d 93       	st	X+, r22
    a0ca:	70 83       	st	Z, r23
    a0cc:	62 91       	ld	r22, -Z
    a0ce:	ae 17       	cp	r26, r30
    a0d0:	bf 07       	cpc	r27, r31
    a0d2:	c8 f3       	brcs	.-14     	; 0xa0c6 <strrev+0x10>
    a0d4:	08 95       	ret

0000a0d6 <__mulshisi3>:
__mulshisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    a0d6:	b7 ff       	sbrs	r27, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    a0d8:	0c 94 6a 4d 	jmp	0x9ad4	; 0x9ad4 <__muluhisi3>

0000a0dc <__mulohisi3>:
__mulohisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    a0dc:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    a0e0:	82 1b       	sub	r24, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    a0e2:	93 0b       	sbc	r25, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    a0e4:	08 95       	ret

0000a0e6 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    a0e6:	f8 94       	cli

0000a0e8 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    a0e8:	ff cf       	rjmp	.-2      	; 0xa0e8 <__stop_program>
